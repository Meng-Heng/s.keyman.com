{
  "version": 3,
  "sources": [
    "node_modules/tslib/tslib.js",
    "node_modules/eventemitter3/index.js",
    "common/web/tslib/src/index.ts",
    "web/src/engine/main/src/engineConfiguration.ts",
    "common/web/keyboard-processor/src/text/codes.ts",
    "common/web/keyboard-processor/src/text/defaultRules.ts",
    "common/web/keyboard-processor/src/text/keyEvent.ts",
    "common/web/keyboard-processor/src/text/keyMapping.ts",
    "common/web/keyboard-processor/src/keyboards/activeLayout.ts",
    "common/web/utils/src/deepCopy.ts",
    "common/web/utils/src/deviceSpec.ts",
    "common/web/keyman-version/version.inc.ts",
    "common/web/utils/src/version.ts",
    "common/web/utils/src/globalObject.ts",
    "common/web/utils/src/kmwstring.ts",
    "common/web/utils/src/managedPromise.ts",
    "common/web/keyboard-processor/src/keyboards/defaultLayouts.ts",
    "common/web/keyboard-processor/src/keyboards/keyboard.ts",
    "common/web/keyboard-processor/src/keyboards/keyboardHarness.ts",
    "common/web/keyboard-processor/src/keyboards/keyboardLoaderBase.ts",
    "common/web/keyboard-processor/src/keyboards/spacebarText.ts",
    "common/web/keyboard-processor/src/keyboards/keyboardProperties.ts",
    "common/web/keyboard-processor/src/text/deadkeys.ts",
    "common/web/keyboard-processor/src/text/systemStores.ts",
    "common/web/keyboard-processor/src/text/outputTarget.ts",
    "common/web/keyboard-processor/src/text/ruleBehavior.ts",
    "common/web/keyboard-processor/src/text/kbdInterface.ts",
    "common/web/keyboard-processor/src/text/keyboardProcessor.ts",
    "web/src/engine/paths/src/pathConfiguration.ts",
    "web/src/engine/paths/src/optionSpec.interface.ts",
    "web/src/engine/device-detect/src/utils/styleConstants.ts",
    "web/src/engine/device-detect/src/index.ts",
    "web/src/engine/main/src/contextManagerBase.ts",
    "web/src/engine/main/src/hardKeyboard.ts",
    "web/src/engine/package-cache/src/stubAndKeyboardCache.ts",
    "web/src/engine/package-cache/src/keyboardStub.ts",
    "web/src/engine/package-cache/src/cloud/queryEngine.ts",
    "web/src/engine/package-cache/src/keyboardRequisitioner.ts",
    "web/src/engine/package-cache/src/modelCache.ts",
    "web/src/engine/dom-utils/src/arrayFromNodeList.ts",
    "web/src/engine/dom-utils/src/createUnselectableElement.ts",
    "web/src/engine/dom-utils/src/stylesheets.ts",
    "web/src/engine/dom-utils/src/landscapeView.ts",
    "web/src/engine/dom-utils/src/cookieSerializer.ts",
    "web/src/engine/dom-utils/src/getAbsolute.ts",
    "web/src/engine/main/src/variableStoreCookieSerializer.ts",
    "web/src/engine/main/src/keyboardInterface.ts",
    "common/web/keyboard-processor/src/keyboards/loaders/domKeyboardLoader.ts",
    "common/web/input-processor/src/text/contextWindow.ts",
    "common/web/input-processor/src/text/prediction/languageProcessor.ts",
    "common/predictive-text/src/promise-store.ts",
    "common/predictive-text/src/lmlayer.ts",
    "common/predictive-text/src/unwrap.ts",
    "common/web/lm-worker/build/lib/worker-main.wrapped.min.js",
    "common/predictive-text/src/web/worker.ts",
    "common/web/input-processor/src/text/inputProcessor.ts",
    "common/web/input-processor/src/text/prediction/predictionContext.ts",
    "web/src/engine/events/src/domEventTracker.ts",
    "web/src/engine/events/src/emitterListenerSpy.ts",
    "web/src/engine/events/src/legacyEventEmitter.ts",
    "web/src/engine/package-cache/src/domCloudRequester.ts",
    "web/src/engine/main/src/keymanEngine.ts",
    "web/src/engine/osk/src/views/oskView.ts",
    "web/src/engine/osk/src/banner/bannerView.ts",
    "web/src/engine/osk/src/banner/banner.ts",
    "web/src/engine/osk/src/input/event-interpreter/inputEventEngine.ts",
    "web/src/engine/osk/src/input/inputEventCoordinate.ts",
    "web/src/engine/osk/src/input/event-interpreter/mouseEventEngine.ts",
    "web/src/engine/osk/src/input/event-interpreter/touchEventEngine.ts",
    "web/src/engine/osk/src/input/event-interpreter/uiTouchHandlerBase.ts",
    "web/src/engine/osk/src/lengthStyle.ts",
    "web/src/engine/osk/src/components/emptyView.ts",
    "web/src/engine/osk/src/components/helpPageView.ts",
    "web/src/engine/osk/src/visualKeyboard.ts",
    "web/src/engine/osk/src/fontSizeUtils.ts",
    "web/src/engine/osk/src/specialCharacters.ts",
    "web/src/engine/osk/src/buttonClassNames.ts",
    "web/src/engine/osk/src/keyboard-layout/oskKey.ts",
    "web/src/engine/osk/src/keyElement.ts",
    "web/src/engine/osk/src/keyboard-layout/oskBaseKey.ts",
    "web/src/engine/osk/src/keyboard-layout/oskRow.ts",
    "web/src/engine/osk/src/keyboard-layout/oskLayer.ts",
    "web/src/engine/osk/src/keyboard-layout/oskLayerGroup.ts",
    "web/src/engine/osk/src/input/gestures/browser/pendingMultiTap.ts",
    "web/src/engine/osk/src/input/gestures/browser/oskSubKey.ts",
    "web/src/engine/osk/src/input/gestures/browser/subkeyPopup.ts",
    "web/src/engine/osk/src/input/gestures/browser/pendingLongpress.ts",
    "web/src/engine/osk/src/input/gestures/browser/keytip.ts",
    "web/src/engine/osk/src/screenUtils.ts",
    "web/src/engine/osk/src/views/activator.ts",
    "web/src/engine/osk/src/views/touchEventPromiseMap.ts",
    "web/src/engine/osk/src/components/titleBar.ts",
    "web/src/engine/osk/src/components/resizeBar.ts",
    "web/src/engine/osk/src/input/mouseDragOperation.ts",
    "web/src/engine/osk/src/views/twoStateActivator.ts",
    "web/src/engine/osk/src/views/floatingOskCookie.ts",
    "web/src/engine/osk/src/views/floatingOskView.ts",
    "web/src/engine/osk/src/views/anchoredOskView.ts",
    "web/src/engine/osk/src/views/simpleActivator.ts",
    "web/src/engine/osk/src/views/inlinedOskView.ts",
    "web/src/app/browser/src/viewsAnchorpoint.ts",
    "web/src/engine/element-wrappers/src/outputTarget.ts",
    "web/src/engine/element-wrappers/src/input.ts",
    "web/src/engine/element-wrappers/src/textarea.ts",
    "web/src/engine/element-wrappers/src/designIFrame.ts",
    "web/src/engine/element-wrappers/src/contentEditable.ts",
    "web/src/engine/element-wrappers/src/utils.ts",
    "web/src/engine/element-wrappers/src/wrapElement.ts",
    "web/src/app/browser/src/utils/alertHost.ts",
    "web/src/app/browser/src/utils/documentReady.ts",
    "web/src/app/browser/src/configuration.ts",
    "web/src/engine/attachment/src/attachmentInfo.ts",
    "web/src/engine/attachment/src/outputTargetForElement.ts",
    "web/src/engine/attachment/src/pageContextAttachment.ts",
    "web/src/app/browser/src/context/focusAssistant.ts",
    "web/src/app/browser/src/contextManager.ts",
    "web/src/app/browser/src/defaultBrowserRules.ts",
    "web/src/app/browser/src/hardwareEventKeyboard.ts",
    "web/src/app/browser/src/utils/rotationProcessor.ts",
    "web/src/app/browser/src/context/pageIntegrationHandlers.ts",
    "web/src/app/browser/src/utils/createElement.ts",
    "web/src/app/browser/src/utils/getStyleValue.ts",
    "web/src/app/browser/src/utils/getViewportScale.ts",
    "web/src/app/browser/src/languageMenu.ts",
    "web/src/app/browser/src/oskConfiguration.ts",
    "web/src/app/browser/src/utilApiEndpoint.ts",
    "web/src/app/browser/src/hotkeyManager.ts",
    "web/src/app/browser/src/beepHandler.ts",
    "web/src/app/browser/src/keyboardInterface.ts",
    "web/src/app/browser/src/keymanEngine.ts",
    "web/src/app/browser/src/release-main.ts"
  ],
  "sourceRoot": "https://s.keyman.com/kmw/engine/17.0.211/src",
  "sourcesContent": [
    "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __esDecorate;\r\nvar __runInitializers;\r\nvar __propKey;\r\nvar __setFunctionName;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __spreadArray;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __classPrivateFieldIn;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    \r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    /** @deprecated */\r\n    \r\n\r\n    /** @deprecated */\r\n    \r\n\r\n    \r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    \r\n    exporter(\"__decorate\", __decorate);\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    exporter(\"__await\", __await);\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n});\r\n",
    "'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n",
    "export * from '../../../../node_modules/tslib/tslib.js';\r\n\r\nexport * as tslib from '../../../../node_modules/tslib/tslib.js';",
    "import EventEmitter from \"eventemitter3\";\r\n\r\nimport { DeviceSpec, KeyboardProperties, ManagedPromise, OutputTarget, physicalKeyDeviceAlias, RuleBehavior, SpacebarText } from \"@keymanapp/keyboard-processor\";\r\nimport { PathConfiguration, PathOptionDefaults, PathOptionSpec } from \"keyman/engine/paths\";\r\nimport { Device } from \"keyman/engine/device-detect\";\r\nimport { KeyboardStub } from \"keyman/engine/package-cache\";\r\n\r\ninterface EventMap {\r\n  'spacebartext': (mode: SpacebarText) => void;\r\n}\r\n\r\nexport class EngineConfiguration extends EventEmitter<EventMap> {\r\n  // The app/webview path replaces this during init, but we expect to have something set for this\r\n  // during engine construction, which occurs earlier.  So no `readonly`, sadly.\r\n  //\r\n  // May also be manipulated by Developer's debug-host?\r\n  public hostDevice: DeviceSpec;\r\n  readonly sourcePath: string;\r\n  readonly deferForInitialization: ManagedPromise<void>;\r\n\r\n  private _paths: PathConfiguration;\r\n  public activateFirstKeyboard: boolean;\r\n  private _spacebarText: SpacebarText;\r\n  private _stubNamespacer?: (KeyboardStub) => void;\r\n\r\n  public applyCacheBusting: boolean = false;\r\n\r\n  // sourcePath:  see `var sPath =` in kmwbase.ts.  It is not obtainable headlessly.\r\n  constructor(sourcePath: string, device?: DeviceSpec) {\r\n    super();\r\n\r\n    if(!device) {\r\n      const deviceDetector = new Device();\r\n      deviceDetector.detect();\r\n\r\n      device = deviceDetector.coreSpec;\r\n    }\r\n\r\n    this.sourcePath = sourcePath;\r\n    this.hostDevice = device;\r\n    this.deferForInitialization = new ManagedPromise<void>();\r\n  }\r\n\r\n  initialize(options: Required<InitOptionSpec>) {\r\n    if(!this._paths) {\r\n      this._paths = new PathConfiguration(options, this.sourcePath);\r\n    } else {\r\n      this._paths.updateFromOptions(options);\r\n    }\r\n\r\n    if(typeof options.setActiveOnRegister == 'boolean') {\r\n      this.activateFirstKeyboard = options.setActiveOnRegister;\r\n    } else {\r\n      this.activateFirstKeyboard = true;\r\n    }\r\n\r\n    this._spacebarText = options.spacebarText;\r\n\r\n    // Make sure this is accessible to stubs for use in generating display names!\r\n    KeyboardProperties.spacebarTextMode = () => this.spacebarText;\r\n  }\r\n\r\n  finalizeInit() {\r\n    this.deferForInitialization.resolve();\r\n  }\r\n\r\n  get paths() {\r\n    return this._paths;\r\n  }\r\n\r\n  get spacebarText() {\r\n    return this._spacebarText;\r\n  }\r\n\r\n  set spacebarText(value: SpacebarText) {\r\n    if(this._spacebarText != value) {\r\n      this._spacebarText = value;\r\n      this.emit('spacebartext', value);\r\n    }\r\n  }\r\n\r\n  get softDevice(): DeviceSpec {\r\n    return this.hostDevice;\r\n  }\r\n\r\n  get hardDevice(): DeviceSpec {\r\n    return physicalKeyDeviceAlias(this.hostDevice);\r\n  }\r\n\r\n  get stubNamespacer() {\r\n    return this._stubNamespacer;\r\n  }\r\n\r\n  set stubNamespacer(functor: (stub: KeyboardStub) => void) {\r\n    this._stubNamespacer = functor;\r\n  }\r\n\r\n  debugReport(): Record<string, any> {\r\n    return {\r\n      hostDevice: this.hostDevice,\r\n      initialized: this.deferForInitialization.hasFinalized\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Facilitates implementation of additional functionality for finalized keystroke-event rules\r\n   * after postKeystroke takes effect.  Any behaviors defined here should be considered 'readonly' in\r\n   * terms of context and should instead facilitate integration with the engine's host platform.\r\n   * @param ruleBehavior  The full effects of keystroke + postkeystroke rules from a processed keystroke.\r\n   * @param outputTarget  The engine's current source for context\r\n   */\r\n  onRuleFinalization(ruleBehavior: RuleBehavior, outputTarget: OutputTarget) {};\r\n}\r\n\r\nexport interface InitOptionSpec extends PathOptionSpec {\r\n  /**\r\n   * If set to true || \"true\" or if left undefined, the engine will automatically select the first available\r\n   * keyboard for activation.\r\n   *\r\n   * Note that keyboards specified locally are synchronously loaded while cloud keyboards are async; as a\r\n   * result, a locally-specified keyboard will generally be available \"sooner\", even if added \"later\".\r\n   */\r\n  setActiveOnRegister?: boolean;\r\n\r\n  /**\r\n   * Determines the default text shown on the spacebar.  If undefined, uses `LANGUAGE_KEYBOARD`\r\n   */\r\n  spacebarText?: SpacebarText;\r\n}\r\n\r\nexport const InitOptionDefaults: Required<InitOptionSpec> = {\r\n  setActiveOnRegister: true,  // only needed for browser?\r\n  spacebarText: SpacebarText.LANGUAGE_KEYBOARD,  // useful in both, for OSK config.\r\n  ...PathOptionDefaults\r\n}",
    "// TODO:  Move to separate folder:  'codes'\r\n// We should start splitting off code needed by keyboards even without a KeyboardProcessor active.\r\n// There's an upcoming `/common/web/types` package that 'codes' and 'keyboards' may fit well within.\r\n// In fact, there's a file there (on its branch) that should be merged with this one!\r\n\r\nconst Codes = {\r\n  // Define Keyman Developer modifier bit-flags (exposed for use by other modules)\r\n  // Compare against /common/include/kmx_file.h.  CTRL+F \"#define LCTRLFLAG\" to find the secton.\r\n  modifierCodes: {\r\n    \"LCTRL\":0x0001,           // LCTRLFLAG\r\n    \"RCTRL\":0x0002,           // RCTRLFLAG\r\n    \"LALT\":0x0004,            // LALTFLAG\r\n    \"RALT\":0x0008,            // RALTFLAG\r\n    \"SHIFT\":0x0010,           // K_SHIFTFLAG\r\n    \"CTRL\":0x0020,            // K_CTRLFLAG\r\n    \"ALT\":0x0040,             // K_ALTFLAG\r\n    // TENTATIVE:  Represents command keys, which some OSes use for shortcuts we don't\r\n    // want to block.  No rule will ever target a modifier set with this bit set to 1.\r\n    \"META\":0x0080,            // K_METAFLAG\r\n    \"CAPS\":0x0100,            // CAPITALFLAG\r\n    \"NO_CAPS\":0x0200,         // NOTCAPITALFLAG\r\n    \"NUM_LOCK\":0x0400,        // NUMLOCKFLAG\r\n    \"NO_NUM_LOCK\":0x0800,     // NOTNUMLOCKFLAG\r\n    \"SCROLL_LOCK\":0x1000,     // SCROLLFLAG\r\n    \"NO_SCROLL_LOCK\":0x2000,  // NOTSCROLLFLAG\r\n    \"VIRTUAL_KEY\":0x4000,     // ISVIRTUALKEY\r\n    \"VIRTUAL_CHAR_KEY\":0x8000 // VIRTUALCHARKEY // Unused by KMW, but reserved for use by other Keyman engines.\r\n  },\r\n\r\n  modifierBitmasks: {\r\n    \"ALL\":0x007F,\r\n    \"ALT_GR_SIM\": (0x0001 | 0x0004),\r\n    \"CHIRAL\":0x001F,    // The base bitmask for chiral keyboards.  Includes SHIFT, which is non-chiral.\r\n    \"IS_CHIRAL\":0x000F, // Used to test if a bitmask uses a chiral modifier.\r\n    \"NON_CHIRAL\":0x0070 // The default bitmask, for non-chiral keyboards\r\n  },\r\n\r\n  stateBitmasks: {\r\n    \"ALL\":0x3F00,\r\n    \"CAPS\":0x0300,\r\n    \"NUM_LOCK\":0x0C00,\r\n    \"SCROLL_LOCK\":0x3000\r\n  },\r\n\r\n  // Define standard keycode numbers (exposed for use by other modules)\r\n  keyCodes: {\r\n    \"K_BKSP\":8,\"K_TAB\":9,\"K_ENTER\":13,\r\n    \"K_SHIFT\":16,\"K_CONTROL\":17,\"K_ALT\":18,\"K_PAUSE\":19,\"K_CAPS\":20,\r\n    \"K_ESC\":27,\"K_SPACE\":32,\"K_PGUP\":33,\r\n    \"K_PGDN\":34,\"K_END\":35,\"K_HOME\":36,\"K_LEFT\":37,\"K_UP\":38,\r\n    \"K_RIGHT\":39,\"K_DOWN\":40,\"K_SEL\":41,\"K_PRINT\":42,\"K_EXEC\":43,\r\n    \"K_INS\":45,\"K_DEL\":46,\"K_HELP\":47,\"K_0\":48,\r\n    \"K_1\":49,\"K_2\":50,\"K_3\":51,\"K_4\":52,\"K_5\":53,\"K_6\":54,\"K_7\":55,\r\n    \"K_8\":56,\"K_9\":57,\"K_A\":65,\"K_B\":66,\"K_C\":67,\"K_D\":68,\"K_E\":69,\r\n    \"K_F\":70,\"K_G\":71,\"K_H\":72,\"K_I\":73,\"K_J\":74,\"K_K\":75,\"K_L\":76,\r\n    \"K_M\":77,\"K_N\":78,\"K_O\":79,\"K_P\":80,\"K_Q\":81,\"K_R\":82,\"K_S\":83,\r\n    \"K_T\":84,\"K_U\":85,\"K_V\":86,\"K_W\":87,\"K_X\":88,\"K_Y\":89,\"K_Z\":90,\r\n    \"K_NP0\":96,\"K_NP1\":97,\"K_NP2\":98,\r\n    \"K_NP3\":99,\"K_NP4\":100,\"K_NP5\":101,\"K_NP6\":102,\r\n    \"K_NP7\":103,\"K_NP8\":104,\"K_NP9\":105,\"K_NPSTAR\":106,\r\n    \"K_NPPLUS\":107,\"K_SEPARATOR\":108,\"K_NPMINUS\":109,\"K_NPDOT\":110,\r\n    \"K_NPSLASH\":111,\"K_F1\":112,\"K_F2\":113,\"K_F3\":114,\"K_F4\":115,\r\n    \"K_F5\":116,\"K_F6\":117,\"K_F7\":118,\"K_F8\":119,\"K_F9\":120,\r\n    \"K_F10\":121,\"K_F11\":122,\"K_F12\":123,\"K_NUMLOCK\":144,\"K_SCROLL\":145,\r\n    \"K_LSHIFT\":160,\"K_RSHIFT\":161,\"K_LCONTROL\":162,\"K_RCONTROL\":163,\r\n    \"K_LALT\":164,\"K_RALT\":165,\r\n    \"K_COLON\":186,\"K_EQUAL\":187,\"K_COMMA\":188,\"K_HYPHEN\":189,\r\n    \"K_PERIOD\":190,\"K_SLASH\":191,\"K_BKQUOTE\":192,\r\n    \"K_LBRKT\":219,\"K_BKSLASH\":220,\"K_RBRKT\":221,\r\n    \"K_QUOTE\":222,\"K_oE2\":226,\"K_OE2\":226,\r\n    \"K_LOPT\":50001,\"K_ROPT\":50002,\r\n    \"K_NUMERALS\":50003,\"K_SYMBOLS\":50004,\"K_CURRENCIES\":50005,\r\n    \"K_UPPER\":50006,\"K_LOWER\":50007,\"K_ALPHA\":50008,\r\n    \"K_SHIFTED\":50009,\"K_ALTGR\":50010,\r\n    \"K_TABBACK\":50011,\"K_TABFWD\":50012\r\n  },\r\n\r\n  codesUS: [\r\n    ['0123456789',';=,-./`', '[\\\\]\\''],\r\n    [')!@#$%^&*(',':+<_>?~', '{|}\"']\r\n  ],\r\n\r\n  isKnownOSKModifierKey(keyID: string): boolean {\r\n    switch(keyID) {\r\n      case 'K_SHIFT':\r\n      case 'K_LOPT':\r\n      case 'K_ROPT':\r\n      case 'K_NUMLOCK':  // Often used for numeric layers.\r\n      case 'K_CAPS':\r\n        return true;\r\n      default:\r\n        if(Codes.keyCodes[keyID] >= 50000) { // A few are used by `sil_euro_latin`.\r\n          return true; // is a 'K_' key defined for layer shifting or 'control' use.\r\n        }\r\n        // Refer to text/codes.ts - these are Keyman-custom \"keycodes\" used for\r\n        // layer shifting keys.  To be safe, we currently let K_TABBACK and\r\n        // K_TABFWD through, though we might be able to drop them too.\r\n        const code = Codes[keyID];\r\n        if(code > 50000 && code < 50011) {\r\n          return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n  },\r\n\r\n\r\n  /**\r\n   * Get modifier key state from layer id\r\n   *\r\n   * @param       {string}      layerId       layer id (e.g. ctrlshift)\r\n   * @return      {number}                    modifier key state (desktop keyboards)\r\n   */\r\n   getModifierState(layerId: string): number {\r\n    var modifier=0;\r\n    if(layerId.indexOf('shift') >= 0) {\r\n      modifier |= Codes.modifierCodes['SHIFT'];\r\n    }\r\n\r\n    // The chiral checks must not be directly exclusive due each other to visual OSK feedback.\r\n    var ctrlMatched=false;\r\n    if(layerId.indexOf('leftctrl') >= 0) {\r\n      modifier |= Codes.modifierCodes['LCTRL'];\r\n      ctrlMatched=true;\r\n    }\r\n    if(layerId.indexOf('rightctrl') >= 0) {\r\n      modifier |= Codes.modifierCodes['RCTRL'];\r\n      ctrlMatched=true;\r\n    }\r\n    if(layerId.indexOf('ctrl')  >= 0 && !ctrlMatched) {\r\n      modifier |= Codes.modifierCodes['CTRL'];\r\n    }\r\n\r\n    var altMatched=false;\r\n    if(layerId.indexOf('leftalt') >= 0) {\r\n      modifier |= Codes.modifierCodes['LALT'];\r\n      altMatched=true;\r\n    }\r\n    if(layerId.indexOf('rightalt') >= 0) {\r\n      modifier |= Codes.modifierCodes['RALT'];\r\n      altMatched=true;\r\n    }\r\n    if(layerId.indexOf('alt')  >= 0 && !altMatched) {\r\n      modifier |= Codes.modifierCodes['ALT'];\r\n    }\r\n\r\n    return modifier;\r\n  },\r\n\r\n  /**\r\n   * Get state key state from layer id\r\n   *\r\n   * @param       {string}      layerId       layer id (e.g. caps)\r\n   * @return      {number}                    modifier key state (desktop keyboards)\r\n   */\r\n  getStateFromLayer(layerId: string): number {\r\n    var modifier=0;\r\n\r\n    if(layerId.indexOf('caps') >= 0) {\r\n      modifier |= Codes.modifierCodes['CAPS'];\r\n    } else {\r\n      modifier |= Codes.modifierCodes['NO_CAPS'];\r\n    }\r\n\r\n    return modifier;\r\n  }\r\n}\r\n\r\nexport default Codes;",
    "// TODO:  Move to separate folder:  'codes'\r\n// We should start splitting off code needed by keyboards even without a KeyboardProcessor active.\r\n// There's an upcoming `/common/web/types` package that 'codes' and 'keyboards' may fit well within.\r\n\r\nimport Codes from \"./codes.js\";\r\nimport type KeyEvent from \"./keyEvent.js\";\r\nimport type OutputTarget from \"./outputTarget.js\";\r\n\r\n// The only members referenced are to produce warning and error logs.  A little abstraction\r\n// via an optional 'logger' interface can maintain it while facilitating a the split alluded\r\n// to above.\r\n//\r\n// Alternatively, we could just... not take in the parameter at all, which'd also facilitate\r\n// the future modularization effort.\r\nimport RuleBehavior from \"./ruleBehavior.js\";\r\n\r\nexport enum EmulationKeystrokes {\r\n  Enter = '\\n',\r\n  Backspace = '\\b'\r\n}\r\n\r\n/**\r\n * Defines a collection of static library functions that define KeymanWeb's default (implied) keyboard rule behaviors.\r\n */\r\nexport default class DefaultRules {\r\n  public constructor() {\r\n  }\r\n\r\n  codeForEvent(Lkc: KeyEvent) {\r\n    return Codes.keyCodes[Lkc.kName] || Lkc.Lcode;;\r\n  }\r\n\r\n  /**\r\n   * Serves as a default keycode lookup table.  This may be referenced safely by mnemonic handling without fear of side-effects.\r\n   * Also used by Processor.defaultRuleBehavior to generate output after filtering for special cases.\r\n   */\r\n  public forAny(Lkc: KeyEvent, isMnemonic: boolean, ruleBehavior?: RuleBehavior) {\r\n    var char = '';\r\n\r\n    // A pretty simple table of lookups, corresponding VERY closely to the original defaultKeyOutput.\r\n    if((char = this.forSpecialEmulation(Lkc)) != null) {\r\n      return char;\r\n    } else if(!isMnemonic && ((char = this.forNumpadKeys(Lkc)) != null)) {\r\n      return char;\r\n    } else if((char = this.forUnicodeKeynames(Lkc, ruleBehavior)) != null) {\r\n      return char;\r\n    } else if((char = this.forBaseKeys(Lkc, ruleBehavior)) != null) {\r\n      return char;\r\n    } else {\r\n      // // For headless and embeddded, we may well allow '\\t'.  It's DOM mode that has other uses.\r\n      // // Not originally defined for text output within defaultKeyOutput.\r\n      // // We can't enable it yet, as it'll cause hardware keystrokes in the DOM to output '\\t' rather\r\n      // // than rely on the browser-default handling.\r\n      let code = this.codeForEvent(Lkc);\r\n      switch(code) {\r\n      //   case Codes.keyCodes['K_TAB']:\r\n      //   case Codes.keyCodes['K_TABBACK']:\r\n      //   case Codes.keyCodes['K_TABFWD']:\r\n      //     return '\\t';\r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * isCommand - returns a boolean indicating if a non-text event should be triggered by the keystroke.\r\n   */\r\n  public isCommand(Lkc: KeyEvent): boolean {\r\n    let code = this.codeForEvent(Lkc);\r\n\r\n    switch(code) {\r\n      // Should we ever implement them:\r\n      // case Codes.keyCodes['K_LEFT']:  // would not output text, but would alter the caret's position in the context.\r\n      // case Codes.keyCodes['K_RIGHT']:\r\n      //   return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Used when a RuleBehavior represents a non-text \"command\" within the Engine.  This will generally\r\n   * trigger events that require context reset - often by moving the caret or by moving what OutputTarget\r\n   * the caret is in.  However, we let those events perform the actual context reset.\r\n   *\r\n   * Note:  is extended by DOM-aware KeymanWeb code.\r\n   */\r\n  public applyCommand(Lkc: KeyEvent, outputTarget: OutputTarget): void {\r\n    // Notes for potential default-handling extensions:\r\n    //\r\n    // switch(code) {\r\n      // // Problem:  clusters, and doing them right.\r\n      // // The commented-out code below should be a decent starting point, but clusters make it complex.\r\n      // // Mostly based on pre-12.0 code, but the general idea should be relatively clear.\r\n      //\r\n      // case Codes.keyCodes['K_LEFT']:\r\n      //   if(touchAlias) {\r\n      //     var caretPos = keymanweb.getTextCaret(Lelem);\r\n      //     keymanweb.setTextCaret(Lelem, caretPos - 1 >= 0 ? caretPos - 1 : 0);\r\n      //   }\r\n      //   break;\r\n      // case Codes.keyCodes['K_RIGHT']:\r\n      //   if(touchAlias) {\r\n      //     var caretPos = keymanweb.getTextCaret(Lelem);\r\n      //     keymanweb.setTextCaret(Lelem, caretPos + 1);\r\n      //   }\r\n      //   if(code == VisualKeyboard.keyCodes['K_RIGHT']) {\r\n      //     break;\r\n      //   }\r\n    // }\r\n    //\r\n    // Note that these would be useful even outside of a DOM context.\r\n  }\r\n\r\n  /**\r\n   * Codes matched here generally have default implementations when in a browser but require emulation\r\n   * for 'synthetic' `OutputTarget`s like `Mock`s, which have no default text handling.\r\n   */\r\n  public forSpecialEmulation(Lkc: KeyEvent): EmulationKeystrokes {\r\n    let code = this.codeForEvent(Lkc);\r\n\r\n    switch(code) {\r\n      case Codes.keyCodes['K_BKSP']:\r\n        return EmulationKeystrokes.Backspace;\r\n      case Codes.keyCodes['K_ENTER']:\r\n        return EmulationKeystrokes.Enter;\r\n      // case Codes.keyCodes['K_DEL']:\r\n      //   return '\\u007f'; // 127, ASCII / Unicode control code for DEL.\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  // Should not be used for mnenomic keyboards.  forAny()'s use of this method checks first.\r\n  public forNumpadKeys(Lkc: KeyEvent) {\r\n    // Translate numpad keystrokes into their non-numpad equivalents\r\n    if(Lkc.Lcode >= Codes.keyCodes[\"K_NP0\"]  &&  Lkc.Lcode <= Codes.keyCodes[\"K_NPSLASH\"]) {\r\n      // Number pad, numlock on\r\n      if(Lkc.Lcode < 106) {\r\n        var Lch = Lkc.Lcode-48;\r\n      } else {\r\n        Lch = Lkc.Lcode-64;\r\n      }\r\n      let ch = String._kmwFromCharCode(Lch); //I3319\r\n      return ch;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Test for fall back to U_xxxxxx key id\r\n  // For this first test, we ignore the keyCode and use the keyName\r\n  public forUnicodeKeynames(Lkc: KeyEvent, ruleBehavior?: RuleBehavior) {\r\n    const keyName = Lkc.kName;\r\n\r\n    // Test for fall back to U_xxxxxx key id\r\n    // For this first test, we ignore the keyCode and use the keyName\r\n    if(!keyName || keyName.substr(0,2) != 'U_') {\r\n      return null;\r\n    }\r\n\r\n    let result = '';\r\n    const codePoints = keyName.substr(2).split('_');\r\n    for(let codePoint of codePoints) {\r\n      const codePointValue = parseInt(codePoint, 16);\r\n      if (((0x0 <= codePointValue) && (codePointValue <= 0x1F)) || ((0x80 <= codePointValue) && (codePointValue <= 0x9F)) || isNaN(codePointValue)) {\r\n        // Code points [U_0000 - U_001F] and [U_0080 - U_009F] refer to Unicode C0 and C1 control codes.\r\n        // Check the codePoint number and do not allow output of these codes via U_xxxxxx shortcuts.\r\n        // Also handles invalid identifiers (e.g. `U_ghij`) for which parseInt returns NaN\r\n        if(ruleBehavior) {\r\n          ruleBehavior.errorLog = (\"Suppressing Unicode control code in \" + keyName);\r\n        }\r\n        // We'll attempt to add valid chars\r\n        continue;\r\n      } else {\r\n        // String.fromCharCode() is inadequate to handle the entire range of Unicode\r\n        // Someday after upgrading to ES2015, can use String.fromCodePoint()\r\n        result += String.kmwFromCharCode(codePointValue);\r\n      }\r\n    }\r\n    return result ? result : null;\r\n  }\r\n\r\n  // Test for otherwise unimplemented keys on the the base default & shift layers.\r\n  // Those keys must be blocked by keyboard rules if intentionally unimplemented; otherwise, this function will trigger.\r\n  public forBaseKeys(Lkc: KeyEvent, ruleBehavior?: RuleBehavior) {\r\n    let n = Lkc.Lcode;\r\n    let keyShiftState = Lkc.Lmodifiers;\r\n\r\n    // check if exact match to SHIFT's code.  Only the 'default' and 'shift' layers should have default key outputs.\r\n    // TODO:  Extend to allow AltGr as well - better mnemonic support.\r\n    if(keyShiftState == Codes.modifierCodes['SHIFT']) {\r\n      keyShiftState = 1;\r\n    } else if(keyShiftState != 0) {\r\n      if(ruleBehavior) {\r\n        ruleBehavior.warningLog = \"KMW only defines default key output for the 'default' and 'shift' layers!\";\r\n      }\r\n      return null;\r\n    }\r\n\r\n    // Now that keyShiftState is either 0 or 1, we can use the following structure to determine the default output.\r\n    try {\r\n      if(n == Codes.keyCodes['K_SPACE']) {\r\n        return ' ';\r\n      } else if(n >= Codes.keyCodes['K_0'] && n <= Codes.keyCodes['K_9']) { // The number keys.\r\n        return Codes.codesUS[keyShiftState][0][n-Codes.keyCodes['K_0']];\r\n      } else if(n >= Codes.keyCodes['K_A'] && n <= Codes.keyCodes['K_Z']) { // The base letter keys\r\n        return String.fromCharCode(n+(keyShiftState?0:32));  // 32 is the offset from uppercase to lowercase.\r\n      } else if(n >= Codes.keyCodes['K_COLON'] && n <= Codes.keyCodes['K_BKQUOTE']) {\r\n        return Codes.codesUS[keyShiftState][1][n-Codes.keyCodes['K_COLON']];\r\n      } else if(n >= Codes.keyCodes['K_LBRKT'] && n <= Codes.keyCodes['K_QUOTE']) {\r\n        return Codes.codesUS[keyShiftState][2][n-Codes.keyCodes['K_LBRKT']];\r\n      } else if(n == Codes.keyCodes['K_oE2']) {\r\n        return keyShiftState ? '|' : '\\\\';\r\n      }\r\n    } catch (e) {\r\n      if(ruleBehavior) {\r\n        ruleBehavior.errorLog = \"Error detected with default mapping for key:  code = \" + n + \", shift state = \" + (keyShiftState == 1 ? 'shift' : 'default');\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n",
    "// TODO:  Move to separate folder:  'codes'\r\n// We should start splitting off code needed by keyboards even without a KeyboardProcessor active.\r\n// There's an upcoming `/common/web/types` package that 'codes' and 'keyboards' may fit well within.\r\n\r\n// KeyEvent may be a _little_ bit of pollution, but this IS what the Web OSK currently generates to signal\r\n// a key event.  The most straightforward way to integrate Web OSK events on other platforms is to have\r\n// other platforms recognize and utilize this type.\r\n\r\nimport type Keyboard from \"../keyboards/keyboard.js\";\r\nimport { type DeviceSpec } from \"@keymanapp/web-utils\";\r\n\r\nimport Codes from './codes.js';\r\nimport DefaultRules from './defaultRules.js';\r\n\r\n// Represents a probability distribution over a keyboard's keys.\r\n// Defined here to avoid compilation issues.\r\nexport type KeyDistribution = {keyId: string, p: number}[];\r\n\r\n/**\r\n * A simple instance of the standard 'default rules' for keystroke processing from the\r\n * DefaultRules base class.\r\n */\r\nconst BASE_DEFAULT_RULES = new DefaultRules();\r\n\r\nexport interface KeyEventSpec {\r\n\r\n  Lcode: number;\r\n  Lstates: number;\r\n  LmodifierChange?: boolean;\r\n  Lmodifiers: number;\r\n  LisVirtualKey?: boolean;\r\n  vkCode?: number;\r\n  kName: string;\r\n  kLayer?: string;   // The key's layer property\r\n  kbdLayer?: string; // The virtual keyboard's active layer\r\n  kNextLayer?: string;\r\n\r\n  /**\r\n   * Marks the active keyboard at the time that this KeyEvent was generated by the user.\r\n   *\r\n   * Note:  this is NOT equivalent to the active keyboard at the time that the event handler begins\r\n   * processing!  It should be set via closure (or similar) on the event handler that can 100%\r\n   * guarantee that the keyboard instance known to the handler has not changed during JS execution\r\n   * since the user's interaction that raised the event.\r\n   */\r\n  srcKeyboard?: Keyboard;\r\n\r\n  // Holds relevant event properties leading to construction of this KeyEvent.\r\n  source?: any; // Technically, KeyEvent|MouseEvent|Touch - but those are DOM types that must be kept out of headless mode.\r\n  // Holds a generated fat-finger distribution (when appropriate)\r\n  keyDistribution?: KeyDistribution;\r\n\r\n  /**\r\n   * The device model for web-core to follow when processing the keystroke.\r\n   */\r\n  device: DeviceSpec;\r\n\r\n  /**\r\n   * `true` if this event was produced by sources other than a DOM-based KeyboardEvent.\r\n   */\r\n  isSynthetic?: boolean;\r\n}\r\n\r\n/**\r\n * This class is defined within its own file so that it can be loaded by code outside of KMW without\r\n * having to actually load the entirety of KMW.\r\n */\r\nexport default class KeyEvent implements KeyEventSpec {\r\n  Lcode: number;\r\n  Lstates: number;\r\n  LmodifierChange?: boolean;\r\n  Lmodifiers: number;\r\n  LisVirtualKey?: boolean;\r\n  vkCode?: number;\r\n  kName: string;\r\n  kLayer?: string;   // The key's layer property\r\n  kbdLayer?: string; // The virtual keyboard's active layer\r\n  kNextLayer?: string;\r\n\r\n  /**\r\n   * Marks the active keyboard at the time that this KeyEvent was generated by the user.\r\n   *\r\n   * Note:  this is NOT equivalent to the active keyboard at the time that the event handler begins\r\n   * processing!  It should be set via closure (or similar) on the event handler that can 100%\r\n   * guarantee that the keyboard instance known to the handler has not changed during JS execution\r\n   * since the user's interaction that raised the event.\r\n   */\r\n  srcKeyboard?: Keyboard;\r\n\r\n  // Holds relevant event properties leading to construction of this KeyEvent.\r\n  source?: any; // Technically, KeyEvent|MouseEvent|Touch - but those are DOM types that must be kept out of headless mode.\r\n  // Holds a generated fat-finger distribution (when appropriate)\r\n  keyDistribution?: KeyDistribution;\r\n\r\n  /**\r\n   * The device model for web-core to follow when processing the keystroke.\r\n   */\r\n  device: DeviceSpec;\r\n\r\n  /**\r\n   * `true` if this event was produced by sources other than a DOM-based KeyboardEvent.\r\n   */\r\n  isSynthetic: boolean = true;\r\n\r\n  public constructor(keyEventSpec: KeyEventSpec) {\r\n    for(let key in keyEventSpec) {\r\n      if(keyEventSpec[key] !== undefined) {\r\n        this[key] = keyEventSpec[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  public static constructNullKeyEvent(device: DeviceSpec): KeyEvent {\r\n    const keyEvent = new KeyEvent({\r\n      Lcode: 0,\r\n      kName: '',\r\n      device: device,\r\n      Lstates: undefined,\r\n      Lmodifiers: undefined,\r\n      vkCode: undefined,\r\n      LisVirtualKey: undefined\r\n    });\r\n    return keyEvent;\r\n  }\r\n\r\n  get isModifier(): boolean {\r\n    switch(this.Lcode) {\r\n      case 16: //\"K_SHIFT\":16,\"K_CONTROL\":17,\"K_ALT\":18\r\n      case 17:\r\n      case 18:\r\n      case 20: //\"K_CAPS\":20, \"K_NUMLOCK\":144,\"K_SCROLL\":145\r\n      case 144:\r\n      case 145:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  // FIXME:  makes some bad assumptions.\r\n  setMnemonicCode(shifted: boolean, capsActive: boolean) {\r\n    // K_SPACE is not handled by defaultKeyOutput for physical keystrokes unless using touch-aliased elements.\r\n    // It's also a \"exception required, March 2013\" for clickKey, so at least they both have this requirement.\r\n    if(this.Lcode != Codes.keyCodes['K_SPACE']) {\r\n      // So long as the key name isn't prefixed with 'U_', we'll get a default mapping based on the Lcode value.\r\n      // We need to determine the mnemonic base character - for example, SHIFT + K_PERIOD needs to map to '>'.\r\n      let mappingEvent: KeyEvent = new KeyEvent(this);\r\n      for(let key in (this as KeyEvent)) {\r\n        mappingEvent[key] = this[key];\r\n      }\r\n\r\n      // To facilitate storing relevant commands, we should probably reverse-lookup\r\n      // the actual keyname instead.\r\n      mappingEvent.kName = 'K_xxxx';\r\n      mappingEvent.Lmodifiers = (shifted ? 0x10 : 0);  // mnemonic lookups only exist for default & shift layers.\r\n      var mappedChar: string = BASE_DEFAULT_RULES.forAny(mappingEvent, true);\r\n\r\n      /* First, save a backup of the original code.  This one won't needlessly trigger keyboard\r\n        * rules, but allows us to replicate/emulate commands after rule processing if needed.\r\n        * (Like backspaces)\r\n        */\r\n      this.vkCode = this.Lcode;\r\n      if(mappedChar) {\r\n        // Will return 96 for 'a', which is a keycode corresponding to Codes.keyCodes('K_NP1') - a numpad key.\r\n        // That stated, we're in mnemonic mode - this keyboard's rules are based on the char codes.\r\n        this.Lcode = mappedChar.charCodeAt(0);\r\n      } else {\r\n        // Don't let command-type keys (like K_DEL, which will output '.' otherwise!)\r\n        // trigger keyboard rules.\r\n        //\r\n        // However, DO make sure modifier keys pass through safely.\r\n        // (https://github.com/keymanapp/keyman/issues/3744)\r\n        if(!this.isModifier) {\r\n          delete this.Lcode;\r\n        }\r\n      }\r\n    }\r\n\r\n    if(capsActive) {\r\n      // TODO:  Needs fixing - does not properly mirror physical keystrokes, as Lcode range 96-111 corresponds\r\n      // to numpad keys!  (Physical keyboard section has its own issues here.)\r\n      if((this.Lcode >= 65 && this.Lcode <= 90) /* 'A' - 'Z' */ || (this.Lcode >= 97 && this.Lcode <= 122) /* 'a' - 'z' */) {\r\n        this.Lmodifiers ^= 0x10;  // Flip the 'shifted' bit, so it'll act as the opposite key.\r\n        this.Lcode ^= 0x20; // Flips the 'upper' vs 'lower' bit for the base 'a'-'z' ASCII alphabetics.\r\n      }\r\n    }\r\n  }\r\n};",
    "/***\r\n   KeymanWeb 11.0\r\n   Copyright 2019 SIL International\r\n***/\r\n\r\nimport type KeyEvent from \"./keyEvent.js\";\r\nimport { KeyEventSpec } from \"./keyEvent.js\";\r\n\r\nclass KeyMap {\r\n  [keycode: string]: number;\r\n}\r\n\r\nclass BrowserKeyMaps {\r\n  FF:     KeyMap = new KeyMap();\r\n  Safari: KeyMap = new KeyMap();\r\n  Opera:  KeyMap = new KeyMap();\r\n\r\n  constructor() {\r\n    // All three have been around since at least May 2014 / FF 29.\r\n    // It'd hard to find precise history, but at least that much has been confirmed.\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode, on Feb 26 2021.\r\n    this.FF['k61'] = 187;  // =   // FF 2.0\r\n    this.FF['k59'] = 186;  // ;\r\n    this.FF['k173'] = 189; // -/_\r\n  }\r\n}\r\n\r\nclass LanguageKeyMaps {\r\n  [languageCode: string]: KeyMap;\r\n\r\n  // // Here are some old legacy definitions that were no longer referenced but are likely related:\r\n  // static _BaseLayoutEuro: {[code: string]: string} = {\r\n  //   'se': '\\u00a71234567890+´~~~QWERTYUIOP\\u00c5\\u00a8\\'~~~ASDFGHJKL\\u00d6\\u00c4~~~~~<ZXCVBNM,.-~~~~~ ',  // Swedish\r\n  //   'uk': '`1234567890-=~~~QWERTYUIOP[]#~~~ASDFGHJKL;\\'~~~~~\\\\ZXCVBNM,./~~~~~ ' // UK\r\n\r\n  constructor() {\r\n    /* I732 START - 13/03/2007 MCD: Swedish: Start mapping of keystroke to US keyboard #2 */\r\n    // Swedish key map\r\n    this['se'] = new KeyMap();\r\n    this['se']['k220'] =  192; // `\r\n    this['se']['k187'] =  189; // -\r\n    this['se']['k219'] =  187; // =\r\n    this['se']['k221'] =  219; // [\r\n    this['se']['k186'] =  221; // ]\r\n    this['se']['k191'] =  220; // \\\r\n    this['se']['k192'] =  186; // ;\r\n    this['se']['k189'] =  191; // /\r\n\r\n    this['uk'] = new KeyMap();  // I1299\r\n    this['uk']['k223'] =  192; // // ` U+00AC (logical not) =>  ` ~\r\n    this['uk']['k192'] =  222; // ' @  =>  ' \"\r\n    this['uk']['k222'] =  226; // # ~  => K_oE2     // I1504 - UK keyboard mixup #, \\\r\n    this['uk']['k220'] =  220; // \\ |  => \\ |       // I1504 - UK keyboard mixup #, \\\r\n  }\r\n}\r\n\r\nexport default class KeyMapping {\r\n  static readonly browserMap: BrowserKeyMaps = new BrowserKeyMaps();\r\n  static readonly languageMap: LanguageKeyMaps = new LanguageKeyMaps();\r\n\r\n  private static _usCharCodes: KeyMap[];\r\n\r\n  private constructor() {\r\n    // Do not construct this class.\r\n  }\r\n\r\n  private static _usCodeInit() {\r\n    var s0=new KeyMap(),s1=new KeyMap();\r\n\r\n    s0['k192'] = 96;\r\n    s0['k49'] = 49;\r\n    s0['k50'] = 50;\r\n    s0['k51'] = 51;\r\n    s0['k52'] = 52;\r\n    s0['k53'] = 53;\r\n    s0['k54'] = 54;\r\n    s0['k55'] = 55;\r\n    s0['k56'] = 56;\r\n    s0['k57'] = 57;\r\n    s0['k48'] = 48;\r\n    s0['k189'] = 45;\r\n    s0['k187'] = 61;\r\n    s0['k81'] = 113;\r\n    s0['k87'] = 119;\r\n    s0['k69'] = 101;\r\n    s0['k82'] = 114;\r\n    s0['k84'] = 116;\r\n    s0['k89'] = 121;\r\n    s0['k85'] = 117;\r\n    s0['k73'] = 105;\r\n    s0['k79'] = 111;\r\n    s0['k80'] = 112;\r\n    s0['k219'] = 91;\r\n    s0['k221'] = 93;\r\n    s0['k220'] = 92;\r\n    s0['k65'] = 97;\r\n    s0['k83'] = 115;\r\n    s0['k68'] = 100;\r\n    s0['k70'] = 102;\r\n    s0['k71'] = 103;\r\n    s0['k72'] = 104;\r\n    s0['k74'] = 106;\r\n    s0['k75'] = 107;\r\n    s0['k76'] = 108;\r\n    s0['k186'] = 59;\r\n    s0['k222'] = 39;\r\n    s0['k90'] = 122;\r\n    s0['k88'] = 120;\r\n    s0['k67'] = 99;\r\n    s0['k86'] = 118;\r\n    s0['k66'] = 98;\r\n    s0['k78'] = 110;\r\n    s0['k77'] = 109;\r\n    s0['k188'] = 44;\r\n    s0['k190'] = 46;\r\n    s0['k191'] = 47;\r\n\r\n    s1['k192'] = 126;\r\n    s1['k49'] = 33;\r\n    s1['k50'] = 64;\r\n    s1['k51'] = 35;\r\n    s1['k52'] = 36;\r\n    s1['k53'] = 37;\r\n    s1['k54'] = 94;\r\n    s1['k55'] = 38;\r\n    s1['k56'] = 42;\r\n    s1['k57'] = 40;\r\n    s1['k48'] = 41;\r\n    s1['k189'] = 95;\r\n    s1['k187'] = 43;\r\n    s1['k81'] = 81;\r\n    s1['k87'] = 87;\r\n    s1['k69'] = 69;\r\n    s1['k82'] = 82;\r\n    s1['k84'] = 84;\r\n    s1['k89'] = 89;\r\n    s1['k85'] = 85;\r\n    s1['k73'] = 73;\r\n    s1['k79'] = 79;\r\n    s1['k80'] = 80;\r\n    s1['k219'] = 123;\r\n    s1['k221'] = 125;\r\n    s1['k220'] = 124;\r\n    s1['k65'] = 65;\r\n    s1['k83'] = 83;\r\n    s1['k68'] = 68;\r\n    s1['k70'] = 70;\r\n    s1['k71'] = 71;\r\n    s1['k72'] = 72;\r\n    s1['k74'] = 74;\r\n    s1['k75'] = 75;\r\n    s1['k76'] = 76;\r\n    s1['k186'] = 58;\r\n    s1['k222'] = 34;\r\n    s1['k90'] = 90;\r\n    s1['k88'] = 88;\r\n    s1['k67'] = 67;\r\n    s1['k86'] = 86;\r\n    s1['k66'] = 66;\r\n    s1['k78'] = 78;\r\n    s1['k77'] = 77;\r\n    s1['k188'] = 60;\r\n    s1['k190'] = 62;\r\n    s1['k191'] = 63;\r\n\r\n    KeyMapping._usCharCodes = [s0,s1];\r\n  }\r\n\r\n  /**\r\n   * Function     _USKeyCodeToCharCode\r\n   * Scope        Private\r\n   * @param       {Event}     Levent      KMW event object\r\n   * @return      {number}                Character code\r\n   * Description Translate keyboard codes to standard US layout codes\r\n   */\r\n  static _USKeyCodeToCharCode(Levent: KeyEvent | KeyEventSpec) {\r\n    return KeyMapping.usCharCodes[Levent.Lmodifiers & 0x10 ? 1 : 0]['k'+Levent.Lcode];\r\n  };\r\n\r\n  public static get usCharCodes() {\r\n    if(!KeyMapping._usCharCodes) {\r\n      KeyMapping._usCodeInit();\r\n    }\r\n\r\n    return KeyMapping._usCharCodes;\r\n  }\r\n}",
    "import Codes from \"../text/codes.js\";\r\nimport KeyEvent, { KeyEventSpec } from \"../text/keyEvent.js\";\r\nimport KeyMapping from \"../text/keyMapping.js\";\r\nimport type { KeyDistribution } from \"../text/keyEvent.js\";\r\nimport type { LayoutKey, LayoutRow, LayoutLayer, LayoutFormFactor, ButtonClass } from \"./defaultLayouts.js\";\r\nimport type Keyboard from \"./keyboard.js\";\r\n\r\nimport { type DeviceSpec } from \"@keymanapp/web-utils\";\r\n\r\n// TS 3.9 changed behavior of getters to make them\r\n// non-enumerable by default. This broke our 'polyfill'\r\n// functions which depended on enumeration to copy the\r\n// relevant props over.\r\n// https://github.com/microsoft/TypeScript/pull/32264#issuecomment-677718191\r\nfunction Enumerable(\r\n  target: unknown,\r\n  propertyKey: string,\r\n  descriptor: PropertyDescriptor\r\n) {\r\n    descriptor.enumerable = true;\r\n};\r\n\r\nexport class ActiveKey implements LayoutKey {\r\n  static readonly DEFAULT_PAD=15;          // Padding to left of key, in virtual units\r\n  static readonly DEFAULT_RIGHT_MARGIN=15; // Padding to right of right-most key, in virtual units\r\n  static readonly DEFAULT_KEY_WIDTH=100;   // Width of a key, if not specified, in virtual units\r\n\r\n  // Defines key defaults\r\n  static readonly DEFAULT_KEY = {\r\n    text: '',\r\n    width: ActiveKey.DEFAULT_KEY_WIDTH,\r\n    sp: 0,\r\n    pad: ActiveKey.DEFAULT_PAD\r\n  };\r\n\r\n  /** WARNING - DO NOT USE DIRECTLY outside of @keymanapp/keyboard-processor! */\r\n  id?: string;\r\n\r\n  // These are fine.\r\n  width?: number;\r\n  pad?: number;\r\n\r\n  layer: string;\r\n  displayLayer: string;\r\n  nextlayer: string;\r\n  sp?: ButtonClass;\r\n\r\n  _baseKeyEvent: KeyEvent;\r\n  isMnemonic: boolean = false;\r\n\r\n  /**\r\n   * Only available on subkeys, but we don't distinguish between base keys and subkeys\r\n   * at this level yet in KMW.\r\n   */\r\n  default?: boolean;\r\n\r\n  proportionalPad: number;\r\n  proportionalX: number;\r\n  proportionalWidth: number;\r\n\r\n  sk?: ActiveKey[];\r\n\r\n  // Keeping things simple here, as this was added LATE in 14.0 beta.\r\n  // Could definitely extend in the future to instead return an object\r\n  // that denotes the 'nature' of the key.\r\n  // - isUnicode\r\n  // - isHardwareKey\r\n  // - etc.\r\n\r\n  // Reference for the terminology in the comments below:\r\n  // https://help.keyman.com/developer/current-version/guides/develop/creating-a-touch-keyboard-layout-for-amharic-the-nitty-gritty\r\n\r\n  /**\r\n   * Matches the key code as set within Keyman Developer for the layout.\r\n   * For example, K_R or U_0020.  Denotes either physical keys or virtual keys with custom output,\r\n   * with no additional metadata like layer or active modifiers.\r\n   *\r\n   * Is used to determine the keycode for input events, rule-matching, and keystroke processing.\r\n   */\r\n  @Enumerable\r\n  public get baseKeyID(): string {\r\n    if(typeof this.id === 'undefined') {\r\n      return undefined;\r\n    }\r\n\r\n    return this.id;\r\n  }\r\n\r\n  @Enumerable\r\n  public get isPadding(): boolean {\r\n    // Does not include 9 (class:  blank) as that may be an intentional 'catch' for misplaced\r\n    // keystrokes.\r\n    return this['sp'] == 10; // Button class: hidden.\r\n  }\r\n\r\n  /**\r\n   * A unique identifier based on both the key ID & the 'desktop layer' to be used for the key.\r\n   *\r\n   * Allows diambiguation of scenarios where the same key ID is used twice within a layer, but\r\n   * with different innate modifiers.  (Refer to https://github.com/keymanapp/keyman/issues/4617)\r\n   * The 'desktop layer' may be omitted if it matches the key's display layer.\r\n   *\r\n   * Examples, given a 'default' display layer, matching keys to Keyman keyboard language:\r\n   *\r\n   * ```\r\n   * \"K_Q\"\r\n   * + [K_Q]\r\n   * \"K_Q+shift\"\r\n   * + [K_Q SHIFT]\r\n   * ```\r\n   *\r\n   * Useful when the active layer of an input-event is already known.\r\n   */\r\n  @Enumerable\r\n  public get coreID(): string {\r\n    if(typeof this.id === 'undefined') {\r\n      return undefined;\r\n    }\r\n\r\n    let baseID = this.id || '';\r\n\r\n    if(this.displayLayer != this.layer) {\r\n      baseID = baseID + '+' + this.layer;\r\n    }\r\n\r\n    return baseID;\r\n  }\r\n\r\n  /**\r\n   * A keyboard-unique identifier to be used for any display elements representing this key\r\n   * in user interfaces and/or on-screen keyboards.\r\n   *\r\n   * Distinguishes between otherwise-identical keys on different layers of an OSK.\r\n   * Includes identifying information about the key's display layer.\r\n   *\r\n   * Examples, given a 'default' display layer, matching keys to Keyman keyboard language:\r\n   *\r\n   * ```\r\n   * \"default-K_Q\"\r\n   * + [K_Q]\r\n   * \"default-K_Q+shift\"\r\n   * + [K_Q SHIFT]\r\n   * ```\r\n   *\r\n   * Useful when only the active keyboard is known about an input event.\r\n   */\r\n  @Enumerable\r\n  public get elementID(): string {\r\n    if(typeof this.id === 'undefined') {\r\n      return undefined;\r\n    }\r\n\r\n    return this.displayLayer + '-' + this.coreID;\r\n  }\r\n\r\n  @Enumerable\r\n  public get baseKeyEvent(): KeyEvent {\r\n    return new KeyEvent(this._baseKeyEvent);\r\n  }\r\n\r\n  /**\r\n   * Converts key IDs of the U_* form to their corresponding UTF-16 text.\r\n   * If an ID not matching the pattern is received, returns null.\r\n   * @param id\r\n   * @returns\r\n   */\r\n  static unicodeIDToText(id: string, errorCallback?: (codeAsString: string) => void) {\r\n    if(!id || id.substring(0,2) != 'U_') {\r\n      return null;\r\n    }\r\n\r\n    let result = '';\r\n    const codePoints = id.substring(2).split('_');\r\n    for(let codePoint of codePoints) {\r\n      const codePointValue = parseInt(codePoint, 16);\r\n      if (((0x0 <= codePointValue) && (codePointValue <= 0x1F)) ||\r\n          ((0x80 <= codePointValue) && (codePointValue <= 0x9F)) ||\r\n          isNaN(codePointValue)) {\r\n        if(errorCallback) {\r\n          errorCallback(codePoint);\r\n        }\r\n        continue;\r\n      } else {\r\n        // String.fromCharCode() is inadequate to handle the entire range of Unicode\r\n        // Someday after upgrading to ES2015, can use String.fromCodePoint()\r\n        result += String.kmwFromCharCode(codePointValue);\r\n      }\r\n    }\r\n    return result ? result : null;\r\n  }\r\n\r\n  static sanitize(rawKey: LayoutKey) {\r\n    if(typeof rawKey.width == 'string') {\r\n      rawKey.width = parseInt(rawKey.width, 10);\r\n    }\r\n    // Handles NaN cases as well as 'set to 0' cases; both are intentional here.\r\n    rawKey.width ||= ActiveKey.DEFAULT_KEY_WIDTH;\r\n\r\n    if(typeof rawKey.pad == 'string') {\r\n      rawKey.pad = parseInt(rawKey.pad, 10);\r\n    }\r\n    rawKey.pad ||= ActiveKey.DEFAULT_PAD;\r\n\r\n    if(typeof rawKey.sp == 'string') {\r\n      rawKey.sp = Number.parseInt(rawKey.sp, 10) as ButtonClass;\r\n    }\r\n    rawKey.sp ||= 0; // The default button class.\r\n  }\r\n\r\n  static polyfill(key: LayoutKey, keyboard: Keyboard, layout: ActiveLayout, displayLayer: string) {\r\n    // Add class functions to the existing layout object, allowing it to act as an ActiveLayout.\r\n    let dummy = new ActiveKey();\r\n    let proto = Object.getPrototypeOf(dummy);\r\n\r\n    for(let prop in dummy) {\r\n      if(!key.hasOwnProperty(prop)) {\r\n        let descriptor = Object.getOwnPropertyDescriptor(proto, prop);\r\n        if(descriptor) {\r\n          // It's a computed property!  Copy the descriptor onto the key's object.\r\n          Object.defineProperty(key, prop, descriptor);\r\n        } else {\r\n          key[prop] = dummy[prop];\r\n        }\r\n      }\r\n    }\r\n\r\n    // Ensure subkeys are also properly extended.\r\n    if(key.sk) {\r\n      for(let subkey of key.sk) {\r\n        ActiveKey.polyfill(subkey, keyboard, layout, displayLayer);\r\n      }\r\n    }\r\n\r\n    let aKey = key as ActiveKey;\r\n    aKey.displayLayer = displayLayer;\r\n    aKey.layer = aKey.layer || displayLayer;\r\n\r\n    // Compute the key's base KeyEvent properties for use in future event generation\r\n    aKey.constructBaseKeyEvent(keyboard, layout, displayLayer);\r\n  }\r\n\r\n  private constructBaseKeyEvent(keyboard: Keyboard, layout: ActiveLayout, displayLayer: string) {\r\n    // Get key name and keyboard shift state (needed only for default layouts and physical keyboard handling)\r\n    // Note - virtual keys should be treated case-insensitive, so we force uppercasing here.\r\n    let layer = this.layer || displayLayer || '';\r\n    let keyName= this.id ? this.id.toUpperCase() : null;\r\n\r\n    // Start:  mirrors _GetKeyEventProperties\r\n\r\n    // First check the virtual key, and process shift, control, alt or function keys\r\n    let props: KeyEventSpec = {\r\n      // Override key shift state if specified for key in layout (corrected for popup keys KMEW-93)\r\n      Lmodifiers: Codes.getModifierState(layer),\r\n      Lstates: Codes.getStateFromLayer(layer),\r\n      Lcode: keyName ? Codes.keyCodes[keyName] : 0,\r\n      LisVirtualKey: true,\r\n      vkCode: 0,\r\n      kName: keyName,\r\n      kLayer: layer,\r\n      kbdLayer: displayLayer,\r\n      kNextLayer: this.nextlayer,\r\n      device: null,\r\n      isSynthetic: true\r\n    };\r\n\r\n    let Lkc: KeyEvent = new KeyEvent(props);\r\n\r\n    if(layout.keyboard) {\r\n      let keyboard = layout.keyboard;\r\n\r\n      // Include *limited* support for mnemonic keyboards (Sept 2012)\r\n      // If a touch layout has been defined for a mnemonic keyout, do not perform mnemonic mapping for rules on touch devices.\r\n      if(keyboard.isMnemonic && !(layout.isDefault && layout.formFactor != 'desktop')) {\r\n        if(Lkc.Lcode != Codes.keyCodes['K_SPACE']) { // exception required, March 2013\r\n          // Jan 2019 - interesting that 'K_SPACE' also affects the caps-state check...\r\n          Lkc.vkCode = Lkc.Lcode;\r\n          this.isMnemonic = true;\r\n        }\r\n      } else {\r\n        Lkc.vkCode=Lkc.Lcode;\r\n      }\r\n\r\n      // Support version 1.0 KeymanWeb keyboards that do not define positional vs mnemonic\r\n      if(!keyboard.definesPositionalOrMnemonic) {\r\n        // Not the best pattern, but currently safe - we don't look up any properties of any of the\r\n        // arguments in this use case, and the object's scope is extremely limited.\r\n        Lkc.Lcode = KeyMapping._USKeyCodeToCharCode(keyboard.constructKeyEvent(null, null, {\r\n          K_CAPS: false,\r\n          K_NUMLOCK: false,\r\n          K_SCROLL: false\r\n        }));\r\n        Lkc.LisVirtualKey=false;\r\n      }\r\n    }\r\n\r\n    this._baseKeyEvent = Lkc;\r\n  }\r\n\r\n  public getSubkey(coreID: string): ActiveKey {\r\n    if(this.sk) {\r\n      for(let key of this.sk) {\r\n        if(key.coreID == coreID) {\r\n          return key;\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexport class ActiveRow implements LayoutRow {\r\n  // Identify key labels (e.g. *Shift*) that require the special OSK font\r\n  static readonly SPECIAL_LABEL=/\\*\\w+\\*/;\r\n\r\n  id: number;\r\n  key: ActiveKey[];\r\n\r\n  /**\r\n   * Used for calculating fat-fingering offsets.\r\n   */\r\n  proportionalY: number;\r\n\r\n  private constructor() {\r\n\r\n  }\r\n\r\n  static sanitize(rawRow: LayoutRow) {\r\n    for(const key of rawRow.key) {\r\n      // Test for a trailing comma included in spec, added as null object by IE\r\n      // It has only ever appeared at the end of a row's spec.\r\n      if(key == null) {\r\n        rawRow.key.length = rawRow.key.length-1;\r\n      } else {\r\n        ActiveKey.sanitize(key);\r\n      }\r\n    }\r\n\r\n    if(typeof rawRow.id == 'string') {\r\n      rawRow.id = Number.parseInt(rawRow.id, 10);\r\n    }\r\n  }\r\n\r\n  static polyfill(row: LayoutRow, keyboard: Keyboard, layout: ActiveLayout, displayLayer: string, totalWidth: number, proportionalY: number) {\r\n    // Apply defaults, setting the width and other undefined properties for each key\r\n    let keys=row['key'];\r\n    for(let j=0; j<keys.length; j++) {\r\n      let key=keys[j];\r\n      for(var tp in ActiveKey.DEFAULT_KEY) {\r\n        if(typeof key[tp] != 'string' && typeof key[tp] != 'number') {\r\n          key[tp]=ActiveKey.DEFAULT_KEY[tp];\r\n        }\r\n      }\r\n\r\n      // Modify the key type for special keys with non-standard labels\r\n      // to allow the keyboard font to ovveride the SpecialOSK font.\r\n      // Blank keys are no longer reclassed - can use before/after CSS to add text\r\n      switch(key['sp']) {\r\n        case '1':\r\n          if(!ActiveRow.SPECIAL_LABEL.test(key['text']) && key['text'] != '') {\r\n            key['sp']='3';\r\n          }\r\n          break;\r\n        case '2':\r\n          if(!ActiveRow.SPECIAL_LABEL.test(key['text']) && key['text'] != '') {\r\n            key['sp']='4';\r\n          }\r\n          break;\r\n      }\r\n\r\n      ActiveKey.polyfill(key, keyboard, layout, displayLayer);\r\n    }\r\n\r\n    /* The calculations here are effectively 'virtualized'.  When used with the OSK, the VisualKeyboard\r\n      * will overwrite these values with their true runtime geometry.\r\n      *\r\n      * These calculations approximate those of the actual OSK (without fitting to a specific resolution)\r\n      * and are intended for use with layout testing (while headless) in the future.\r\n      */\r\n\r\n    let setProportions = function(key: ActiveKey, padPc: number, keyPc: number, totalPc: number) {\r\n      key.proportionalPad   = padPc;\r\n      key.proportionalWidth = keyPc;\r\n      key.proportionalX     = (totalPc + padPc + (keyPc/2));\r\n    }\r\n\r\n    // Calculate percentage-based scalings by summing defined widths and scaling each key to %.\r\n    // Save each percentage key width as a separate member (do *not* overwrite layout specified width!)\r\n    let totalPercent=0;\r\n    for(let j=0; j<keys.length-1; j++) {\r\n      const key = keys[j] as ActiveKey; // already 'polyfilled' in prior loop\r\n\r\n      // compute center's default x-coord (used in headless modes), assign 'proportional' props\r\n      setProportions(key, key.pad/totalWidth, key.width/totalWidth, totalPercent);\r\n\r\n      // These values are set on the key as part of the prior call.\r\n      totalPercent += key.proportionalPad;\r\n      totalPercent += key.proportionalWidth;\r\n    }\r\n\r\n    // Allow for right OSK margin (15 layout units)\r\n    let rightMargin = ActiveKey.DEFAULT_RIGHT_MARGIN/totalWidth;\r\n\r\n    if(keys.length > 0) {\r\n      const finalKey = keys[keys.length-1] as ActiveKey;\r\n\r\n      // If a single key, and padding is negative, add padding to right align the key\r\n      if(keys.length == 1 && finalKey.pad < 0) {\r\n        const keyPercent = finalKey.width/totalWidth;\r\n        const padPercent = 1-(totalPercent + keyPercent + rightMargin);\r\n\r\n        // compute center's default x-coord (used in headless modes)\r\n        setProportions(finalKey, padPercent, keyPercent, totalPercent);\r\n      } else {\r\n        const padPercent = finalKey.pad/totalWidth;\r\n        const keyPercent = 1-(totalPercent + padPercent + rightMargin);\r\n\r\n        // compute center's default x-coord (used in headless modes)\r\n        setProportions(finalKey, padPercent, keyPercent, totalPercent);\r\n      }\r\n    }\r\n\r\n    // Add class functions to the existing layout object, allowing it to act as an ActiveLayout.\r\n    let dummy = new ActiveRow();\r\n    for(let key in dummy) {\r\n      if(!row.hasOwnProperty(key)) {\r\n        row[key] = dummy[key];\r\n      }\r\n    }\r\n\r\n    let aRow = row as ActiveRow;\r\n    aRow.proportionalY = proportionalY;\r\n  }\r\n\r\n  populateKeyMap(map: {[keyId: string]: ActiveKey}) {\r\n    this.key.forEach(function(key: ActiveKey) {\r\n      if(key.coreID) {\r\n        map[key.coreID] = key;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport class ActiveLayer implements LayoutLayer {\r\n  row: ActiveRow[];\r\n  id: string;\r\n\r\n  // These already exist on the objects, pre-polyfill...\r\n  // but they still need to be proactively declared on this type.\r\n  capsKey?: ActiveKey;\r\n  numKey?: ActiveKey;\r\n  scrollKey?: ActiveKey;\r\n\r\n  totalWidth: number;\r\n\r\n  defaultKeyProportionalWidth: number;\r\n  rowProportionalHeight: number;\r\n\r\n  /**\r\n   * Facilitates mapping key id strings to their specification objects.\r\n   */\r\n  keyMap: {[keyId: string]: ActiveKey};\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  static sanitize(rawLayer: LayoutLayer) {\r\n    for(const row of rawLayer.row) {\r\n      ActiveRow.sanitize(row);\r\n    }\r\n  }\r\n\r\n  static polyfill(layer: LayoutLayer, keyboard: Keyboard, layout: ActiveLayout) {\r\n    layer.aligned=false;\r\n\r\n    // Create a DIV for each row of the group\r\n    let rows=layer['row'];\r\n\r\n    // Calculate the maximum row width (in layout units)\r\n    let totalWidth=0;\r\n    for(const row of rows) {\r\n      let width=0;\r\n      const keys=row['key'];\r\n\r\n      for(const key of keys) {\r\n        // So long as `sanitize` is called first, these coercions are safe.\r\n        width += (key.width as number) + (key.pad as number);\r\n      }\r\n\r\n      if(width > totalWidth) {\r\n        totalWidth = width;\r\n      }\r\n    }\r\n\r\n    // Add default right margin\r\n    if(layout.formFactor == 'desktop') {\r\n      totalWidth += 5; // TODO: resolve difference between touch and desktop; why don't we use ActiveKey.DEFAULT_RIGHT_MARGIN?\r\n    } else {\r\n      totalWidth += ActiveKey.DEFAULT_RIGHT_MARGIN;\r\n    }\r\n\r\n    let rowCount = layer.row.length;\r\n    for(let i=0; i<rowCount; i++) {\r\n      // Calculate proportional y-coord of row.  0 is at top with highest y-coord.\r\n      let rowProportionalY = (i + 0.5) / rowCount;\r\n      ActiveRow.polyfill(layer.row[i], keyboard, layout, layer.id, totalWidth, rowProportionalY);\r\n    }\r\n\r\n    // Add class functions and properties to the existing layout object, allowing it to act as an ActiveLayout.\r\n    let dummy = new ActiveLayer();\r\n    for(let key in dummy) {\r\n      if(!layer.hasOwnProperty(key)) {\r\n        layer[key] = dummy[key];\r\n      }\r\n    }\r\n\r\n    let aLayer = layer as ActiveLayer;\r\n    aLayer.totalWidth = totalWidth;\r\n    aLayer.defaultKeyProportionalWidth = ActiveKey.DEFAULT_KEY.width / totalWidth;\r\n    aLayer.rowProportionalHeight = 1.0 / rowCount;\r\n    aLayer.keyMap = aLayer.constructKeyMap();\r\n  }\r\n\r\n  private constructKeyMap(): {[keyId: string]: ActiveKey} {\r\n    let map: {[keyId: string]: ActiveKey} = {};\r\n    this.row.forEach(function(row: ActiveRow) {\r\n      row.populateKeyMap(map);\r\n    });\r\n\r\n    return map;\r\n  }\r\n\r\n  /**\r\n   * Builds a sorted-order array of most likely keys to be intended for a given touch.\r\n   * @param touchCoords A proportional (x, y) coordinate of the touch within the keyboard's geometry.\r\n   *                           Should be within [0, 0] to [1, 1].\r\n   * @param kbdScaleRatio The ratio of the keyboard's horizontal scale to its vertical scale.\r\n   *                           For a 400 x 200 keyboard, should be 2.\r\n   */\r\n  getTouchProbabilities(touchCoords: {x: number, y: number}, kbdScaleRatio: number): KeyDistribution {\r\n    let distribution = this.simpleTouchDistribution(touchCoords, kbdScaleRatio);\r\n    let list: {keyId: string, p: number}[] = [];\r\n\r\n    for(let key in distribution) {\r\n      list.push({keyId: key, p: distribution[key]});\r\n    }\r\n\r\n    return list.sort(function(a, b) {\r\n      return b.p - a.p; // Largest probability keys should be listed first.\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Computes a probability distribution regarding the likelihood of a touch command being intended\r\n   * for each of the layout's keys.\r\n   * @param touchCoords A proportional (x, y) coordinate of the touch within the keyboard's geometry.\r\n   *                           Should be within [0, 0] to [1, 1].\r\n   * @param kbdScaleRatio The ratio of the keyboard's horizontal scale to its vertical scale.\r\n   *                           For a 400 x 200 keyboard, should be 2.\r\n   */\r\n  simpleTouchDistribution(touchCoords: {x: number, y: number}, kbdScaleRatio: number): {[keyId: string]: number} {\r\n    let keyDists = this.keyTouchDistances(touchCoords, kbdScaleRatio);\r\n    let keyProbs: {[keyId: string]: number} = {};\r\n\r\n    let totalMass = 0;\r\n\r\n    // Should we wish to allow multiple different transforms for distance -> probability, use a function parameter in place\r\n    // of the formula in the loop below.\r\n    for(let key in keyDists) {\r\n      totalMass += keyProbs[key] = 1 / (Math.pow(keyDists[key], 2) + 1e-6); // Prevent div-by-0 errors.\r\n    }\r\n\r\n    for(let key in keyProbs) {\r\n      keyProbs[key] /= totalMass;\r\n    }\r\n\r\n    return keyProbs;\r\n  }\r\n\r\n  /**\r\n   * Computes a squared 'pseudo-distance' for the touch from each key.  (Not a proper metric.)\r\n   * Intended for use in generating a probability distribution over the keys based on the touch input.\r\n   * @param touchCoords A proportional (x, y) coordinate of the touch within the keyboard's geometry.\r\n   *                           Should be within [0, 0] to [1, 1].\r\n   * @param kbdScaleRatio The ratio of the keyboard's horizontal scale to its vertical scale.\r\n   *                           For a 400 x 200 keyboard, should be 2.\r\n   */\r\n  private keyTouchDistances(touchCoords: {x: number, y: number}, kbdScaleRatio: number): {[keyId: string]: number} {\r\n    let layer = this;\r\n\r\n    let keyDists: {[keyId: string]: number} = {};\r\n\r\n    // This double-nested loop computes a pseudo-distance for the touch from each key.  Quite useful for\r\n    // generating a probability distribution.\r\n    this.row.forEach(function(row: ActiveRow): void {\r\n      row.key.forEach(function(key: ActiveKey): void {\r\n        // If the key lacks an ID, just skip it.  Sometimes used for padding.\r\n        if(!key.baseKeyID) {\r\n          return;\r\n        } else {\r\n          // Attempt to filter out known non-output keys.\r\n          // Results in a more optimized distribution.\r\n          if(Codes.isKnownOSKModifierKey(key.baseKeyID)) {\r\n            return;\r\n          } else if(key.isPadding) { // to the user, blank / padding keys do not exist.\r\n            return;\r\n          }\r\n        }\r\n        // These represent the within-key distance of the touch from the key's center.\r\n        // Both should be on the interval [0, 0.5].\r\n        let dx = Math.abs(touchCoords.x - key.proportionalX);\r\n        let dy = Math.abs(touchCoords.y - row.proportionalY);\r\n\r\n        // If the touch isn't within the key, these store the out-of-key distance\r\n        // from the closest point on the key being checked.\r\n        let distX: number, distY: number;\r\n\r\n        if(dx > 0.5 * key.proportionalWidth) {\r\n          distX = (dx - 0.5 * key.proportionalWidth);\r\n          dx = 0.5;\r\n        } else {\r\n          distX = 0;\r\n          dx /= key.proportionalWidth;\r\n        }\r\n\r\n        if(dy > 0.5 * layer.rowProportionalHeight) {\r\n          distY = (dy - 0.5 * layer.rowProportionalHeight);\r\n          dy = 0.5;\r\n        } else {\r\n          distY = 0;\r\n          dy /= layer.rowProportionalHeight;\r\n        }\r\n\r\n        // Now that the differentials are computed, it's time to do distance scaling.\r\n        //\r\n        // For out-of-key distance, we scale the X component by the keyboard's aspect ratio\r\n        // to get the actual out-of-key distance rather than proportional.\r\n        distX *= kbdScaleRatio;\r\n\r\n        // While the keys are rarely perfect squares, we map all within-key distance\r\n        // to a square shape.  (ALT/CMD should seem as close to SPACE as a 'B'.)\r\n        //\r\n        // For that square, we take the rowHeight as its edge lengths.\r\n        distX += dx * layer.rowProportionalHeight;\r\n        distY += dy * layer.rowProportionalHeight;\r\n\r\n        let distance = distX * distX + distY * distY;\r\n        keyDists[key.coreID] = distance;\r\n      });\r\n    });\r\n\r\n    return keyDists;\r\n  }\r\n\r\n  getKey(keyId: string) {\r\n    // Keys usually are specified in a \"long form\" prefixed with their layer's ID.\r\n    if(keyId.indexOf(this.id + '-') == 0) {\r\n      keyId = keyId.replace(this.id + '-', '');\r\n    }\r\n\r\n    let idComponents = keyId.split('::');\r\n    if(idComponents.length > 1) {\r\n      let baseKey = this.keyMap[idComponents[0]];\r\n      return baseKey.getSubkey(idComponents[1]);\r\n    } else {\r\n      return this.keyMap[keyId];\r\n    }\r\n  }\r\n}\r\n\r\nexport class ActiveLayout implements LayoutFormFactor{\r\n  layer: ActiveLayer[];\r\n  font: string;\r\n  keyLabels: boolean;\r\n  isDefault?: boolean;\r\n  keyboard: Keyboard;\r\n  formFactor: DeviceSpec.FormFactor;\r\n\r\n  /**\r\n   * Facilitates mapping layer id strings to their specification objects.\r\n   */\r\n  layerMap: {[layerId: string]: ActiveLayer};\r\n\r\n  private constructor() {\r\n\r\n  }\r\n\r\n  getLayer(layerId: string): ActiveLayer {\r\n    return this.layerMap[layerId];\r\n  }\r\n\r\n  /**\r\n   * Refer to https://github.com/keymanapp/keyman/issues/254, which mentions\r\n   * KD-11 from a prior issue-tracking system from the closed-source days that\r\n   * resulted in an unintended extra empty row.\r\n   *\r\n   * It'll be pretty rare to see a keyboard affected by the bug, but we don't\r\n   * 100% control all keyboards out there, so it's best we make sure the edge\r\n   * case is covered.\r\n   *\r\n   * @param layers The layer group to be loaded for the form factor.  Will be\r\n   *               mutated by this operation.\r\n   */\r\n  static correctLayerEmptyRowBug(layers: LayoutLayer[]) {\r\n    for(let n=0; n<layers.length; n++) {\r\n      let layer=layers[n];\r\n      let rows=layer['row'];\r\n      let i: number;\r\n      for(i=rows.length-1; i>=0; i--) {\r\n        if(!Array.isArray(rows[i]['key']) || rows[i]['key'].length == 0) {\r\n          rows.splice(i, 1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  static sanitize(rawLayout: LayoutFormFactor) {\r\n    ActiveLayout.correctLayerEmptyRowBug(rawLayout.layer);\r\n\r\n    for(const layer of rawLayout.layer) {\r\n      ActiveLayer.sanitize(layer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param layout\r\n   * @param formFactor\r\n   */\r\n  static polyfill(layout: LayoutFormFactor, keyboard: Keyboard, formFactor: DeviceSpec.FormFactor): ActiveLayout {\r\n    if(layout == null) {\r\n      throw new Error(\"Cannot build an ActiveLayout for a null specification.\");\r\n    }\r\n\r\n    /* Standardize the layout object's data types.\r\n      *\r\n      * In older versions of KMW, some numeric properties were long represented as strings instead,\r\n      * and that lives on within a _lot_ of keyboards.  The data should be sanitized before it\r\n      * is processed by this method.\r\n      */\r\n    this.sanitize(layout);\r\n\r\n    // Create a separate OSK div for each OSK layer, only one of which will ever be visible\r\n    var n: number;\r\n    let layerMap: {[layerId: string]: ActiveLayer} = {};\r\n\r\n    let layers=layout.layer;\r\n\r\n    // Add class functions to the existing layout object, allowing it to act as an ActiveLayout.\r\n    let dummy = new ActiveLayout();\r\n    for(let key in dummy) {\r\n      if(!layout.hasOwnProperty(key)) {\r\n        layout[key] = dummy[key];\r\n      }\r\n    }\r\n\r\n    let aLayout = layout as ActiveLayout;\r\n    aLayout.keyboard = keyboard;\r\n    aLayout.formFactor = formFactor;\r\n\r\n    for(n=0; n<layers.length; n++) {\r\n      ActiveLayer.polyfill(layers[n], keyboard, aLayout);\r\n      layerMap[layers[n].id] = layers[n] as ActiveLayer;\r\n    }\r\n\r\n    aLayout.layerMap = layerMap;\r\n\r\n    return aLayout;\r\n  }\r\n}\r\n",
    "/**\r\n * Function     deepCopy\r\n * Scope        Private\r\n * @param       {Object}      p           object to copy\r\n * @param       {Array=}      c0          array member being copied\r\n * @return      {Object}                  clone ('deep copy') of object\r\n * Description  Makes an actual copy (not a reference) of an object, copying simple members,\r\n *              arrays and member objects but not functions, so use with care!\r\n */\r\nexport default function deepCopy<T>(p:T, c0?): T {\r\n  var c = c0 || {};\r\n  for (var i in p) {\r\n    if(typeof p[i] === 'object' && p[i] != null) {\r\n      c[i] = (p[i].constructor === Array ) ? [] : {};\r\n      deepCopy(p[i],c[i]);\r\n    }\r\n    else {\r\n      c[i] = p[i];\r\n    }\r\n  }\r\n\r\n  return c;\r\n}",
    "/**\r\n * This class provides an abstract version of com.keyman.Device that is core-friendly,\r\n * containing only the information needed by web-core for text processing use, devoid\r\n * of any direct references to the DOM.\r\n */\r\nexport class DeviceSpec {\r\n  readonly browser: DeviceSpec.Browser;\r\n  readonly formFactor: DeviceSpec.FormFactor;\r\n  readonly OS: DeviceSpec.OperatingSystem;\r\n  readonly touchable: boolean;\r\n\r\n  constructor(browser: string, formFactor: string, OS: string, touchable: boolean) {\r\n    switch(browser.toLowerCase() as DeviceSpec.Browser) {\r\n      case DeviceSpec.Browser.Chrome:\r\n      case DeviceSpec.Browser.Edge:\r\n      case DeviceSpec.Browser.Firefox:\r\n      case DeviceSpec.Browser.Native:\r\n      case DeviceSpec.Browser.Opera:\r\n      case DeviceSpec.Browser.Safari:\r\n        this.browser = browser.toLowerCase() as DeviceSpec.Browser;\r\n        break;\r\n      default:\r\n        this.browser = DeviceSpec.Browser.Other;\r\n    }\r\n\r\n    switch(formFactor.toLowerCase() as DeviceSpec.FormFactor) {\r\n      case DeviceSpec.FormFactor.Desktop:\r\n      case DeviceSpec.FormFactor.Phone:\r\n      case DeviceSpec.FormFactor.Tablet:\r\n        this.formFactor = formFactor.toLowerCase() as DeviceSpec.FormFactor;\r\n        break;\r\n      default:\r\n        throw (\"Invalid form factor specified for device: \" + formFactor);\r\n    }\r\n\r\n    switch(OS.toLowerCase() as DeviceSpec.OperatingSystem) {\r\n      case DeviceSpec.OperatingSystem.Windows.toLowerCase():\r\n      case DeviceSpec.OperatingSystem.macOS.toLowerCase():\r\n      case DeviceSpec.OperatingSystem.Linux.toLowerCase():\r\n      case DeviceSpec.OperatingSystem.Android.toLowerCase():\r\n      case DeviceSpec.OperatingSystem.iOS.toLowerCase():\r\n        this.OS = OS.toLowerCase() as DeviceSpec.OperatingSystem;\r\n        break;\r\n      default:\r\n        this.OS = DeviceSpec.OperatingSystem.Other;\r\n    }\r\n\r\n    this.touchable = touchable;\r\n  }\r\n}\r\n\r\n// Namespaces these under DeviceSpec, as each is primarily used with it.\r\nexport namespace DeviceSpec {\r\n  export enum Browser {\r\n    Chrome = 'chrome',\r\n    Edge = 'edge',\r\n    Firefox = 'firefox',\r\n    Native = 'native', // Used by embedded mode\r\n    Opera = 'opera',\r\n    Safari = 'safari',\r\n    Other = 'other'\r\n  }\r\n\r\n  export enum OperatingSystem {\r\n    Windows = 'windows',\r\n    macOS = 'macosx',\r\n    Linux = 'linux',\r\n    Android = 'android',\r\n    iOS = 'ios',\r\n    Other = 'other'\r\n  }\r\n\r\n  export enum FormFactor {\r\n    Desktop = 'desktop',\r\n    Phone = 'phone',\r\n    Tablet = 'tablet'\r\n  }\r\n}\r\n\r\nexport function physicalKeyDeviceAlias(device: DeviceSpec) {\r\n  return new DeviceSpec(device.browser, DeviceSpec.FormFactor.Desktop, device.OS, false);\r\n}\r\n\r\nexport default DeviceSpec;",
    "\n// Generated by common/web/keyman-version/build.sh\n//\n// Note:  does not use the 'default' keyword so that the export name is\n// correct when converted to a CommonJS module with `esbuild`.\nexport class KEYMAN_VERSION {\n  static readonly VERSION = \"17.0.211\";\n  static readonly VERSION_RELEASE =\"17.0\";\n  static readonly VERSION_MAJOR = \"17\";\n  static readonly VERSION_MINOR = \"0\";\n  static readonly VERSION_PATCH = \"211\";\n  static readonly TIER =\"alpha\";\n  static readonly VERSION_TAG = \"-alpha\";\n  static readonly VERSION_WITH_TAG = \"17.0.211-alpha\";\n  static readonly VERSION_ENVIRONMENT = \"alpha\";\n  static readonly VERSION_GIT_TAG = \"release@17.0.211-alpha\";\n}\n\n// Also provides it as a 'default' export.\nexport default KEYMAN_VERSION;\n  \n",
    "import KEYMAN_VERSION from \"@keymanapp/keyman-version\";\r\n\r\n// Dotted-decimal version\r\nexport default class Version {\r\n  public static readonly CURRENT = new Version(KEYMAN_VERSION.VERSION_RELEASE);\r\n\r\n  // Represents a default version value for keyboards compiled before this was compiled into keyboards.\r\n  // The exact version is unknown at this point, but the value is \"good enough\" for what we need.\r\n  public static readonly DEVELOPER_VERSION_FALLBACK = new Version([9, 0, 0]);\r\n\r\n  // For 12.0, the old default behavior of adding missing keycaps to the default layers was removed,\r\n  // as it results in unexpected, bug-like behavior for keyboard designers when it is unwanted.\r\n  public static readonly NO_DEFAULT_KEYCAPS = new Version([12, 0]);\r\n\r\n  public static readonly MAC_POSSIBLE_IPAD_ALIAS = new Version([10, 15]);\r\n\r\n  private readonly components: number[]\r\n\r\n  /**\r\n   * Parses version information, preparing it for use in comparisons.\r\n   * @param text Either a string representing a version number (ex: \"9.0.0\") or an array representing\r\n   *             its components (ex: [9, 0, 0]).\r\n   */\r\n  constructor(text: String | number[]) {\r\n    // If a keyboard doesn't specify a version, use the DEVELOPER_VERSION_FALLBACK values.\r\n    if(text === undefined || text === null) {\r\n      this.components = [].concat(Version.DEVELOPER_VERSION_FALLBACK.components);\r\n      return;\r\n    }\r\n\r\n    if(Array.isArray(text)) {\r\n      let components = text as number[];\r\n      if(components.length < 2) {\r\n        throw new Error(\"Version string must have at least a major and minor component!\");\r\n      } else {\r\n        this.components = [].concat(components);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // else, standard constructor path.\r\n    let parts = text.split('.');\r\n    let componentArray: number[] = [];\r\n\r\n    if(parts.length < 2) {\r\n      throw new Error(\"Version string must have at least a major and minor component!\");\r\n    }\r\n\r\n    for(let i=0; i < parts.length; i++) {\r\n      let value = parseInt(parts[i], 10);\r\n      if(isNaN(value)) {\r\n        throw new Error(\"Version string components must be numerical!\");\r\n      }\r\n\r\n      componentArray.push(value);\r\n    }\r\n\r\n    this.components = componentArray;\r\n  }\r\n\r\n  get major(): number {\r\n    return this.components[0];\r\n  }\r\n\r\n  get minor(): number {\r\n    return this.components[1];\r\n  }\r\n\r\n  toString(): string {\r\n    return this.components.join('.');\r\n  }\r\n\r\n  toJSON(): string {\r\n    return this.toString();\r\n  }\r\n\r\n  equals(other: Version): boolean {\r\n    return this.compareTo(other) == 0;\r\n  }\r\n\r\n  precedes(other: Version): boolean {\r\n    return this.compareTo(other) < 0;\r\n  }\r\n\r\n  compareTo(other: Version): number {\r\n    // If the version info depth differs, we need a flag to indicate which instance is shorter.\r\n    var isShorter: boolean = this.components.length < other.components.length;\r\n    var maxDepth: number = (this.components.length < other.components.length) ? this.components.length : other.components.length;\r\n\r\n    var i: number;\r\n    for(i = 0; i < maxDepth; i++) {\r\n      let delta = this.components[i] - other.components[i];\r\n      if(delta != 0) {\r\n        return delta;\r\n      }\r\n    }\r\n\r\n    var longList = isShorter ? other.components : this.components;\r\n    do {\r\n      if(longList[i] > 0) {\r\n        return isShorter ? -1 : 1;\r\n      }\r\n      i++;\r\n    } while (i < longList.length);\r\n\r\n    // Equal.\r\n    return 0;\r\n  }\r\n}",
    "/**\r\n * Returns the base global object available to the current JS platform.\r\n * - In browsers, returns `window`.\r\n * - In WebWorkers, returns `self`.\r\n * - In Node, returns `global`.\r\n */\r\nexport default function getGlobalObject(): typeof globalThis {\r\n  // Evergreen browsers have started defining 'globalThis'.\r\n  // Refer to https://devblogs.microsoft.com/typescript/announcing-typescript-3-4/#type-checking-for-globalthis\r\n  // and its referenced polyfill.  Said polyfill is very complex, so we opt for this far leaner variant.\r\n  if(typeof globalThis != 'undefined') {\r\n    return globalThis;  // Not available in IE or older Edge versions\r\n    // @ts-ignore (TS will throw errors for whatever platform we're not compiling for.)\r\n  } else if(typeof window != 'undefined') {\r\n    // @ts-ignore\r\n    return window; // The browser-based classic\r\n    // @ts-ignore\r\n  } else if(typeof self != 'undefined') {\r\n    // @ts-ignore\r\n    return self; // WebWorker global\r\n  } else {\r\n    // Assumption - if neither of the above exist, we're in Node, for unit-testing.\r\n    // Node doesn't have as many methods and properties as the other two, but what\r\n    // matters for us is that it's the base global.\r\n    //\r\n    // Some other headless JS solutions use 'this' instead, but Node's enough for our needs.\r\n    // @ts-ignore\r\n    return (global as any) as typeof globalThis;\r\n  }\r\n}",
    "/***\r\n   KeymanWeb 14.0\r\n   Copyright 2020 SIL International\r\n***/\r\n\r\n\r\n/*\r\n * TODO:  Remove this file as part of addressing https://github.com/keymanapp/keyman/issues/2492.\r\n */\r\n\r\ndeclare global {\r\n  interface StringConstructor {\r\n    kmwFromCharCode(cp0: number): string,\r\n    _kmwFromCharCode(cp0: number): string,\r\n    kmwEnableSupplementaryPlane(bEnable: boolean)\r\n  }\r\n\r\n  interface String {\r\n    kmwCharCodeAt(codePointIndex: number): number,\r\n    kmwCharAt(codePointIndex: number) : string,\r\n    kmwIndexOf(searchValue: string, fromIndex?: number) : number,\r\n    kmwLastIndexOf(searchValue: string, fromIndex?: number) : number,\r\n    kmwSlice(beginSlice: number, endSlice: number) : string,\r\n    kmwSubstring(start: number, length: number) : string,\r\n    kmwSubstr(start: number, length?: number) : string,\r\n    kmwBMPSubstr(start: number, length?: number) : string,\r\n    kmwLength(): number,\r\n    kmwBMPLength(): number,\r\n    kmwNextChar(codeUnitIndex: number): number,\r\n    kmwBMPNextChar(codeUnitIndex: number): number,\r\n    kmwPrevChar(codeUnitIndex: number): number,\r\n    kmwBMPPrevChar(codeUnitIndex: number): number,\r\n    kmwCodePointToCodeUnit(codePointIndex: number) : number,\r\n    kmwBMPCodePointToCodeUnit(codePointIndex: number) : number,\r\n    kmwCodeUnitToCodePoint(codeUnitIndex: number) : number,\r\n    kmwBMPCodeUnitToCodePoint(codeUnitIndex: number) : number,\r\n    _kmwCharCodeAt(codePointIndex: number): number,\r\n    _kmwCharAt(codePointIndex: number) : string,\r\n    _kmwIndexOf(searchValue: string, fromIndex?: number) : number,\r\n    _kmwLastIndexOf(searchValue: string, fromIndex?: number) : number,\r\n    _kmwSlice(beginSlice: number, endSlice: number) : string,\r\n    _kmwSubstring(start: number, length?: number) : string,\r\n    _kmwSubstr(start: number, length?: number) : string,\r\n    _kmwLength(): number,\r\n    _kmwNextChar(codeUnitIndex: number): number,\r\n    _kmwPrevChar(codeUnitIndex: number): number,\r\n    _kmwCodePointToCodeUnit(codePointIndex: number) : number,\r\n    _kmwCodeUnitToCodePoint(codeUnitIndex: number) : number\r\n  }\r\n}\r\n\r\nexport default function extendString() {\r\n  /**\r\n   * Constructs a string from one or more Unicode character codepoint values\r\n   * passed as integer parameters.\r\n   *\r\n   * @param  {number} cp0,...   1 or more Unicode codepoints, e.g. 0x0065, 0x10000\r\n   * @return {string|null}      The new String object.\r\n   */\r\n  String.kmwFromCharCode = function(cp0) {\r\n    var chars = [], i;\r\n    for (i = 0; i < arguments.length; i++) {\r\n      var c = Number(arguments[i]);\r\n      if (!isFinite(c) || c < 0 || c > 0x10FFFF || Math.floor(c) !== c) {\r\n        throw new RangeError(\"Invalid code point \" + c);\r\n      }\r\n      if (c < 0x10000) {\r\n        chars.push(c);\r\n      } else {\r\n        c -= 0x10000;\r\n        chars.push((c >> 10) + 0xD800);\r\n        chars.push((c % 0x400) + 0xDC00);\r\n      }\r\n    }\r\n    return String.fromCharCode.apply(undefined, chars);\r\n  }\r\n\r\n  /**\r\n   * Returns a number indicating the Unicode value of the character at the given\r\n   * code point index, with support for supplementary plane characters.\r\n   *\r\n   * @param  {number}  codePointIndex  The code point index into the string (not\r\n                                       the code unit index) to return\r\n  * @return {number}                  The Unicode character value\r\n  */\r\n  String.prototype.kmwCharCodeAt = function(codePointIndex) {\r\n    var str = String(this);\r\n    var codeUnitIndex = 0;\r\n\r\n    if (codePointIndex < 0 || codePointIndex  >= str.length) {\r\n      return NaN;\r\n    }\r\n\r\n    for(var i = 0; i < codePointIndex; i++) {\r\n      codeUnitIndex = str.kmwNextChar(codeUnitIndex);\r\n      if(codeUnitIndex === null) return NaN;\r\n    }\r\n\r\n    var first = str.charCodeAt(codeUnitIndex);\r\n    if (first >= 0xD800 && first <= 0xDBFF && str.length > codeUnitIndex + 1) {\r\n      var second = str.charCodeAt(codeUnitIndex + 1);\r\n      if (second >= 0xDC00 && second <= 0xDFFF) {\r\n        return ((first - 0xD800) << 10) + (second - 0xDC00) + 0x10000;\r\n      }\r\n    }\r\n    return first;\r\n  }\r\n\r\n  /**\r\n   * Returns the code point index within the calling String object of the first occurrence\r\n   * of the specified value, or -1 if not found.\r\n   *\r\n   * @param  {string}  searchValue    The value to search for\r\n   * @param  {number}  [fromIndex]    Optional code point index to start searching from\r\n   * @return {number}                 The code point index of the specified search value\r\n   */\r\n  String.prototype.kmwIndexOf = function(searchValue, fromIndex) {\r\n    var str = String(this);\r\n    var codeUnitIndex = str.indexOf(searchValue, fromIndex);\r\n\r\n    if(codeUnitIndex < 0) {\r\n      return codeUnitIndex;\r\n    }\r\n\r\n    var codePointIndex = 0;\r\n    for(var i = 0; i !== null && i < codeUnitIndex; i = str.kmwNextChar(i)) codePointIndex++;\r\n    return codePointIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns the code point index within the calling String object of the last occurrence\r\n   * of the specified value, or -1 if not found.\r\n   *\r\n   * @param  {string}  searchValue    The value to search for\r\n   * @param  {number}  fromIndex      Optional code point index to start searching from\r\n   * @return {number}                 The code point index of the specified search value\r\n   */\r\n  String.prototype.kmwLastIndexOf = function(searchValue, fromIndex)\r\n  {\r\n    var str = String(this);\r\n    var codeUnitIndex = str.lastIndexOf(searchValue, fromIndex);\r\n\r\n    if(codeUnitIndex < 0) {\r\n      return codeUnitIndex;\r\n    }\r\n\r\n    var codePointIndex = 0;\r\n    for(var i = 0; i !== null && i < codeUnitIndex; i = str.kmwNextChar(i)) codePointIndex++;\r\n    return codePointIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns the length of the string in code points, as opposed to code units.\r\n   *\r\n   * @return {number}                 The length of the string in code points\r\n   */\r\n  String.prototype.kmwLength = function() {\r\n    var str = String(this);\r\n\r\n    if(str.length == 0) return 0;\r\n\r\n    for(var i = 0, codeUnitIndex = 0; codeUnitIndex !== null; i++)\r\n      codeUnitIndex = str.kmwNextChar(codeUnitIndex);\r\n    return i;\r\n  }\r\n\r\n  /**\r\n   * Extracts a section of a string and returns a new string.\r\n   *\r\n   * @param  {number}  beginSlice    The start code point index in the string to\r\n   *                                 extract from\r\n   * @param  {number}  endSlice      Optional end code point index in the string\r\n   *                                 to extract to\r\n   * @return {string}                The substring as selected by beginSlice and\r\n   *                                 endSlice\r\n   */\r\n  String.prototype.kmwSlice = function(beginSlice, endSlice) {\r\n    var str = String(this);\r\n    var beginSliceCodeUnit = str.kmwCodePointToCodeUnit(beginSlice);\r\n    var endSliceCodeUnit = str.kmwCodePointToCodeUnit(endSlice);\r\n    if(beginSliceCodeUnit === null || endSliceCodeUnit === null)\r\n      return '';\r\n    else\r\n      return str.slice(beginSliceCodeUnit, endSliceCodeUnit);\r\n  }\r\n\r\n  /**\r\n   * Returns the characters in a string beginning at the specified location through\r\n   * the specified number of characters.\r\n   *\r\n   * @param  {number}  start         The start code point index in the string to\r\n   *                                 extract from\r\n   * @param  {number=}  length        Optional length to extract\r\n   * @return {string}                The substring as selected by start and length\r\n   */\r\n  String.prototype.kmwSubstr = function(start, length?)\r\n  {\r\n    var str = String(this);\r\n    if(start < 0)\r\n    {\r\n      start = str.kmwLength() + start;\r\n    }\r\n    if(start < 0) start = 0;\r\n    var startCodeUnit = str.kmwCodePointToCodeUnit(start);\r\n    var endCodeUnit = startCodeUnit;\r\n\r\n    if(startCodeUnit === null) return '';\r\n\r\n    if(arguments.length < 2) {\r\n      endCodeUnit = str.length;\r\n    } else {\r\n      for(var i = 0; i < length; i++) endCodeUnit = str.kmwNextChar(endCodeUnit);\r\n    }\r\n    if(endCodeUnit === null)\r\n      return str.substring(startCodeUnit);\r\n    else\r\n      return str.substring(startCodeUnit, endCodeUnit);\r\n  }\r\n\r\n  /**\r\n   * Returns the characters in a string between two indexes into the string.\r\n   *\r\n   * @param  {number}  indexA        The start code point index in the string to\r\n   *                                 extract from\r\n   * @param  {number}  indexB        The end code point index in the string to\r\n   *                                 extract to\r\n   * @return {string}                The substring as selected by indexA and indexB\r\n   */\r\n  String.prototype.kmwSubstring = function(indexA, indexB)\r\n  {\r\n    var str = String(this),indexACodeUnit,indexBCodeUnit;\r\n\r\n    if(typeof(indexB) == 'undefined')\r\n    {\r\n      indexACodeUnit = str.kmwCodePointToCodeUnit(indexA);\r\n      indexBCodeUnit =  str.length;\r\n    }\r\n    else\r\n    {\r\n      if(indexA > indexB) { var c = indexA; indexA = indexB; indexB = c; }\r\n\r\n      indexACodeUnit = str.kmwCodePointToCodeUnit(indexA);\r\n      indexBCodeUnit = str.kmwCodePointToCodeUnit(indexB);\r\n    }\r\n    if(isNaN(indexACodeUnit) || indexACodeUnit === null) indexACodeUnit = 0;\r\n    if(isNaN(indexBCodeUnit) || indexBCodeUnit === null) indexBCodeUnit = str.length;\r\n\r\n    return str.substring(indexACodeUnit, indexBCodeUnit);\r\n  }\r\n\r\n  /*\r\n    Helper functions\r\n  */\r\n\r\n  /**\r\n   * Returns the code unit index for the next code point in the string, accounting for\r\n   * supplementary pairs\r\n   *\r\n   * @param  {number|null}  codeUnitIndex  The code unit position to increment\r\n   * @return {number|null}                 The index of the next code point in the string,\r\n   *                                       in code units\r\n   */\r\n  String.prototype.kmwNextChar = function(codeUnitIndex) {\r\n    var str = String(this);\r\n\r\n    if(codeUnitIndex === null || codeUnitIndex < 0 || codeUnitIndex >= str.length - 1) {\r\n      return null;\r\n    }\r\n\r\n    var first = str.charCodeAt(codeUnitIndex);\r\n    if (first >= 0xD800 && first <= 0xDBFF && str.length > codeUnitIndex + 1) {\r\n      var second = str.charCodeAt(codeUnitIndex + 1);\r\n      if (second >= 0xDC00 && second <= 0xDFFF) {\r\n        if(codeUnitIndex == str.length - 2) {\r\n          return null;\r\n        }\r\n        return codeUnitIndex + 2;\r\n      }\r\n    }\r\n    return codeUnitIndex + 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the code unit index for the previous code point in the string, accounting\r\n   * for supplementary pairs\r\n   *\r\n   * @param  {number|null}  codeUnitIndex  The code unit position to decrement\r\n   * @return {number|null}                 The index of the previous code point in the\r\n   *                                       string, in code units\r\n  */\r\n  String.prototype.kmwPrevChar = function(codeUnitIndex) {\r\n    var str = String(this);\r\n\r\n    if(codeUnitIndex == null || codeUnitIndex <= 0 || codeUnitIndex > str.length) {\r\n      return null;\r\n    }\r\n\r\n    var second = str.charCodeAt(codeUnitIndex - 1);\r\n    if (second >= 0xDC00 && second <= 0xDFFF && codeUnitIndex > 1) {\r\n      var first = str.charCodeAt(codeUnitIndex - 2);\r\n      if(first >= 0xD800 && first <= 0xDBFF) {\r\n        return codeUnitIndex - 2;\r\n      }\r\n    }\r\n    return codeUnitIndex - 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the corresponding code unit index to the code point index passed\r\n   *\r\n   * @param  {number|null} codePointIndex  A code point index in the string\r\n   * @return {number|null}                 The corresponding code unit index\r\n   */\r\n  String.prototype.kmwCodePointToCodeUnit = function(codePointIndex) {\r\n\r\n    if(codePointIndex === null) return null;\r\n\r\n    var str = String(this);\r\n    var codeUnitIndex = 0;\r\n\r\n    if(codePointIndex < 0) {\r\n      codeUnitIndex = str.length;\r\n      for(var i = 0; i > codePointIndex; i--)\r\n        codeUnitIndex = str.kmwPrevChar(codeUnitIndex);\r\n      return codeUnitIndex;\r\n    }\r\n\r\n    if(codePointIndex == str.kmwLength()) return str.length;\r\n\r\n    for(var i = 0; i < codePointIndex; i++)\r\n      codeUnitIndex = str.kmwNextChar(codeUnitIndex);\r\n    return codeUnitIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns the corresponding code point index to the code unit index passed\r\n   *\r\n   * @param  {number|null}  codeUnitIndex  A code unit index in the string\r\n   * @return {number|null}                 The corresponding code point index\r\n   */\r\n  String.prototype.kmwCodeUnitToCodePoint = function(codeUnitIndex) {\r\n    var str = String(this);\r\n\r\n    if(codeUnitIndex === null)\r\n      return null;\r\n    else if(codeUnitIndex == 0)\r\n      return 0;\r\n    else if(codeUnitIndex < 0)\r\n      return str.substr(codeUnitIndex).kmwLength();\r\n    else\r\n      return str.substr(0,codeUnitIndex).kmwLength();\r\n  }\r\n\r\n  /**\r\n   * Returns the character at a the code point index passed\r\n   *\r\n   * @param  {number}  codePointIndex  A code point index in the string\r\n   * @return {string}                  The corresponding character\r\n   */\r\n  String.prototype.kmwCharAt = function(codePointIndex) {\r\n    var str = String(this);\r\n\r\n    if(codePointIndex >= 0) return str.kmwSubstr(codePointIndex,1); else return '';\r\n  }\r\n\r\n  /**\r\n   * String prototype library extensions for basic plane characters,\r\n   * to simplify enabling or disabling supplementary plane functionality (I3319)\r\n   */\r\n\r\n  /**\r\n   * Returns the code unit index for the next code point in the string\r\n   *\r\n   * @param  {number}  codeUnitIndex    A code point index in the string\r\n   * @return {number|null}                   The corresponding character\r\n   */\r\n  String.prototype.kmwBMPNextChar = function(codeUnitIndex)\r\n  {\r\n    var str = String(this);\r\n    if(codeUnitIndex < 0 || codeUnitIndex >= str.length - 1) {\r\n      return null;\r\n    }\r\n    return codeUnitIndex + 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the code unit index for the previous code point in the string\r\n   *\r\n   * @param  {number}  codeUnitIndex    A code unit index in the string\r\n   * @return {number|null}                   The corresponding character\r\n   */\r\n  String.prototype.kmwBMPPrevChar = function(codeUnitIndex)\r\n  {\r\n    var str = String(this);\r\n\r\n    if(codeUnitIndex <= 0 || codeUnitIndex > str.length) {\r\n      return null;\r\n    }\r\n    return codeUnitIndex - 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the code unit index for a code point index\r\n   *\r\n   * @param  {number}  codePointIndex   A code point index in the string\r\n   * @return {number}                   The corresponding character\r\n   */\r\n  String.prototype.kmwBMPCodePointToCodeUnit = function(codePointIndex)\r\n  {\r\n    return codePointIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns the code point index for a code unit index\r\n   *\r\n   * @param  {number}  codeUnitIndex    A code point index in the string\r\n   * @return {number}                   The corresponding character\r\n   */\r\n  String.prototype.kmwBMPCodeUnitToCodePoint = function(codeUnitIndex)\r\n  {\r\n    return codeUnitIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns the length of a BMP string\r\n   *\r\n   * @return {number}                   The length in code points\r\n   */\r\n  String.prototype.kmwBMPLength = function()\r\n  {\r\n    var str = String(this);\r\n    return str.length;\r\n  }\r\n\r\n  /**\r\n   * Returns a substring\r\n   *\r\n   * @param  {number}  n\r\n   * @param  {number=}  ln\r\n   * @return {string}\r\n   */\r\n  String.prototype.kmwBMPSubstr = function(n,ln?)\r\n  {\r\n    var str=String(this);\r\n    if(n > -1)\r\n      return str.substr(n,ln);\r\n    else\r\n      return str.substr(str.length+n,-n);\r\n  }\r\n\r\n  /**\r\n   * Enable or disable supplementary plane string handling\r\n   *\r\n   * @param  {boolean}  bEnable\r\n   */\r\n  String.kmwEnableSupplementaryPlane = function(bEnable)\r\n  {\r\n    var p=String.prototype;\r\n    String._kmwFromCharCode = bEnable ? String.kmwFromCharCode : String.fromCharCode;\r\n    p._kmwCharAt = bEnable ? p.kmwCharAt : p.charAt;\r\n    p._kmwCharCodeAt = bEnable ? p.kmwCharCodeAt : p.charCodeAt;\r\n    p._kmwIndexOf = bEnable ? p.kmwIndexOf :p.indexOf;\r\n    p._kmwLastIndexOf = bEnable ? p.kmwLastIndexOf : p.lastIndexOf ;\r\n    p._kmwSlice = bEnable ? p.kmwSlice : p.slice;\r\n    p._kmwSubstring = bEnable ? p.kmwSubstring : p.substring;\r\n    p._kmwSubstr = bEnable ? p.kmwSubstr : p.kmwBMPSubstr;\r\n    p._kmwLength = bEnable ? p.kmwLength : p.kmwBMPLength;\r\n    p._kmwNextChar = bEnable ? p.kmwNextChar : p.kmwBMPNextChar;\r\n    p._kmwPrevChar = bEnable ? p.kmwPrevChar : p.kmwBMPPrevChar;\r\n    p._kmwCodePointToCodeUnit = bEnable ? p.kmwCodePointToCodeUnit : p.kmwBMPCodePointToCodeUnit;\r\n    p._kmwCodeUnitToCodePoint = bEnable ? p.kmwCodeUnitToCodePoint : p.kmwBMPCodeUnitToCodePoint;\r\n  }\r\n\r\n  // Ensure that _all_ String extensions are established, even if disabled by default.\r\n  if(!String._kmwFromCharCode) {\r\n    String.kmwEnableSupplementaryPlane(false);\r\n  }\r\n}\r\n\r\n// For side-effect imports:\r\nextendString();",
    "type ResolveSignature<Type> = (value: Type | PromiseLike<Type>) => void;\r\ntype RejectSignature = (reason?: any) => void;\r\n\r\nexport default class ManagedPromise<Type> {\r\n  public resolve: ResolveSignature<Type>;\r\n  public reject: RejectSignature;\r\n\r\n  private _hasResolved: boolean = false;\r\n  private _hasRejected: boolean = false;\r\n\r\n  public get hasResolved(): boolean {\r\n    return this._hasResolved;\r\n  }\r\n\r\n  public get hasRejected(): boolean {\r\n    return this._hasRejected;\r\n  }\r\n\r\n  public get hasFinalized(): boolean {\r\n    return this.hasResolved || this.hasRejected;\r\n  }\r\n\r\n  private _promise: Promise<Type>;\r\n\r\n  constructor();\r\n  constructor(executor: (resolve: ResolveSignature<Type>, reject: RejectSignature) => Type);\r\n  constructor(executor?: (resolve: ResolveSignature<Type>, reject: RejectSignature) => Type) {\r\n    this._promise = new Promise<Type>((resolve, reject) => {\r\n      this.resolve = (value) => {\r\n        this._hasResolved = true;\r\n        resolve(value);\r\n      };\r\n\r\n      this.reject = (reason) => {\r\n        this._hasRejected = true;\r\n        reject(reason);\r\n      };\r\n\r\n      if(executor) {\r\n        executor(this.resolve, this.reject);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Cannot actually extend the Promise class in ES5; attempt to use it will throw errors.\r\n  // So, we just implement a Promise-like interface.\r\n\r\n  then<TResult1 = Type, TResult2 = never>(onfulfilled?: ((value: Type) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2> {\r\n    return this._promise.then(onfulfilled, onrejected);\r\n  }\r\n\r\n  catch(onrejected?: (reason: any) => PromiseLike<never>): Promise<Type> {\r\n    return this._promise.catch(onrejected);\r\n  }\r\n\r\n  finally(onfinally?: () => void): Promise<Type> {\r\n    return this._promise.finally(onfinally);\r\n  }\r\n\r\n  // And for things that actually need to provide something typed to Promise... well...\r\n  get corePromise(): Promise<Type> {\r\n    return this._promise;\r\n  }\r\n}",
    "/***\r\n   KeymanWeb 10.0\r\n   Copyright 2017 SIL International\r\n***/\r\n\r\nimport Codes from \"../text/codes.js\";\r\nimport type Keyboard from \"./keyboard.js\";\r\nimport { Version, deepCopy } from \"@keymanapp/web-utils\";\r\n\r\nexport type KLS = {[layerName: string]: string[]};\r\n\r\n// The following types provide type definitions for the full JSON format we use for visual keyboard definitions.\r\nexport type ButtonClass       =  0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;\r\nexport type ButtonClassString = \"0\"|\"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"|\"8\"|\"9\"|\"10\";\r\n\r\nexport type LayoutKey = {\r\n  \"id\"?: string,\r\n  \"text\"?: string,\r\n  \"sp\"?: ButtonClass | ButtonClassString,\r\n  \"width\"?: string | number,\r\n  \"layer\"?: string, // Key derives any modifiers from the value set here if specified, not the actual display layer.\r\n  \"nextlayer\"?: string,\r\n  \"pad\"?: string | number,\r\n  \"sk\"?: LayoutKey[]\r\n  \"default\"?: boolean\r\n}\r\n\r\nexport type LayoutRow = {\r\n  \"id\": string | number,\r\n  \"key\": LayoutKey[]\r\n};\r\n\r\nexport type LayoutLayer = {\r\n  \"id\": string,\r\n  \"row\": LayoutRow[],\r\n\r\n  // Post-processing elements.\r\n  shiftKey?: LayoutKey,\r\n  capsKey?: LayoutKey,\r\n  numKey?: LayoutKey,\r\n  scrollKey?: LayoutKey,\r\n  aligned?: boolean\r\n}\r\n\r\nexport type LayoutFormFactor = {\r\n  \"displayUnderlying\"?: boolean,\r\n  \"font\": string,\r\n  \"layer\": LayoutLayer[],\r\n  isDefault?: boolean\r\n}\r\n\r\nexport type LayoutSpec = {\r\n  \"desktop\"?: LayoutFormFactor,\r\n  \"phone\"?: LayoutFormFactor,\r\n  \"tablet\"?: LayoutFormFactor\r\n}\r\n\r\n// This class manages default layout construction for consumption by OSKs without a specified layout.\r\nexport class Layouts {\r\n  static dfltCodes=[\r\n    \"K_BKQUOTE\",\"K_1\",\"K_2\",\"K_3\",\"K_4\",\"K_5\",\"K_6\",\"K_7\",\"K_8\",\"K_9\",\"K_0\",\r\n    \"K_HYPHEN\",\"K_EQUAL\",\"K_*\",\"K_*\",\"K_*\",\"K_Q\",\"K_W\",\"K_E\",\"K_R\",\"K_T\",\r\n    \"K_Y\",\"K_U\",\"K_I\",\"K_O\",\"K_P\",\"K_LBRKT\",\"K_RBRKT\",\"K_BKSLASH\",\"K_*\",\r\n    \"K_*\",\"K_*\",\"K_A\",\"K_S\",\"K_D\",\"K_F\",\"K_G\",\"K_H\",\"K_J\",\"K_K\",\"K_L\",\r\n    \"K_COLON\",\"K_QUOTE\",\"K_*\",\"K_*\",\"K_*\",\"K_*\",\"K_*\",\"K_oE2\",\r\n    \"K_Z\",\"K_X\",\"K_C\",\"K_V\",\"K_B\",\"K_N\",\"K_M\",\"K_COMMA\",\"K_PERIOD\",\r\n    \"K_SLASH\",\"K_*\",\"K_*\",\"K_*\",\"K_*\",\"K_*\",\"K_SPACE\"\r\n  ];\r\n\r\n  static dfltText='`1234567890-=\\xA7~~qwertyuiop[]\\\\~~~asdfghjkl;\\'~~~~~?zxcvbnm,./~~~~~ '\r\n    +'~!@#$%^&*()_+\\xA7~~QWERTYUIOP{}\\\\~~~ASDFGHJKL:\"~~~~~?ZXCVBNM<>?~~~~~ ';\r\n\r\n  static readonly DEFAULT_RAW_SPEC = {'F':'Tahoma', 'BK': Layouts.dfltText};\r\n\r\n  // Cross-reference with the ids in osk.setButtonClass.\r\n  static buttonClasses: {[name: string]: ButtonClass} = {\r\n    'DEFAULT':0,\r\n    'SHIFT':1,\r\n    'SHIFT-ON':2,\r\n    'SPECIAL':3,\r\n    'SPECIAL-ON':4,\r\n    'DEADKEY':8,\r\n    'BLANK':9,\r\n    'HIDDEN':10\r\n  };\r\n\r\n  static modifierSpecials = {\r\n    'leftalt': '*LAlt*',\r\n    'rightalt': '*RAlt*',\r\n    'alt': '*Alt*',\r\n    'leftctrl': '*LCtrl*',\r\n    'rightctrl': '*RCtrl*',\r\n    'ctrl': '*Ctrl*',\r\n    'ctrl-alt': '*AltGr*',\r\n    'leftctrl-leftalt': '*LAltCtrl*',\r\n    'rightctrl-rightalt': '*RAltCtrl*',\r\n    'leftctrl-leftalt-shift': '*LAltCtrlShift*',\r\n    'rightctrl-rightalt-shift': '*RAltCtrlShift*',\r\n    'shift': '*Shift*',\r\n    'shift-alt': '*AltShift*',\r\n    'shift-ctrl': '*CtrlShift*',\r\n    'shift-ctrl-alt': '*AltCtrlShift*',\r\n    'leftalt-shift': '*LAltShift*',\r\n    'rightalt-shift': '*RAltShift*',\r\n    'leftctrl-shift': '*LCtrlShift*',\r\n    'rightctrl-shift': '*RCtrlShift*'\r\n  };\r\n\r\n  /**\r\n  * Build a default layout for keyboards with no explicit layout\r\n  *\r\n  * @param   {Object}  PVK         raw specifications\r\n  * @param   {Keyboard} keyboard   keyboard object (as loaded)\r\n  * @param   {string} formFactor   (really utils.FormFactor)\r\n  * @return  {LayoutFormFactor}\r\n  */\r\n  static buildDefaultLayout(PVK, keyboard: Keyboard, formFactor: string): LayoutFormFactor {\r\n    // Build a layout using the default for the device\r\n    var layoutType=formFactor;\r\n\r\n    if(typeof Layouts.dfltLayout[layoutType] != 'object') {\r\n      layoutType = 'desktop';\r\n    }\r\n\r\n    let kbdBitmask = Codes.modifierBitmasks['NON_CHIRAL'];\r\n    // An unfortunate dependency there.  Should probably also set a version within web-core for use.\r\n    let kbdDevVersion = Version.CURRENT;\r\n    if(keyboard) {\r\n      kbdBitmask = keyboard.modifierBitmask;\r\n      kbdDevVersion = keyboard.compilerVersion;\r\n    }\r\n\r\n    if(!PVK) {\r\n      PVK = this.DEFAULT_RAW_SPEC;\r\n    }\r\n\r\n    // Clone the default layout object for this device\r\n    var layout: LayoutFormFactor = deepCopy(Layouts.dfltLayout[layoutType]);\r\n\r\n    var n,layers=layout['layer'], keyLabels: KLS=PVK['KLS'], key102=PVK['K102'];\r\n    var i, j, k, m, row, rows: LayoutRow[], key: LayoutKey, keys: LayoutKey[];\r\n    var chiral: boolean = (kbdBitmask & Codes.modifierBitmasks.IS_CHIRAL) != 0;\r\n\r\n    if(PVK['F']) {\r\n      // The KeymanWeb compiler generates a string of the format `[italic ][bold ] 1em \"<font>\"`\r\n      // We will ignore the bold, italic and font size spec\r\n      let legacyFontSpec = /^(?:(?:italic|bold) )* *[0-9.eE-]+(?:[a-z]+) \"(.+)\"$/.exec(PVK['F']);\r\n      if(legacyFontSpec) {\r\n        layout.font = legacyFontSpec[1];\r\n      }\r\n    }\r\n\r\n    var kmw10Plus = !(typeof keyLabels == 'undefined' || !keyLabels);\r\n    if(!kmw10Plus) {\r\n      // Save the processed key label information to the keyboard's general data.\r\n      // Makes things more efficient elsewhere and for reloading after keyboard swaps.\r\n      keyLabels = PVK['KLS'] = Layouts.processLegacyDefinitions(PVK['BK']);\r\n    }\r\n\r\n    // Identify key labels (e.g. *Shift*) that require the special OSK font\r\n    var specialLabel=/\\*\\w+\\*/;\r\n\r\n    // *** Step 1:  instantiate the layer objects. ***\r\n\r\n    // Get the list of valid layers, enforcing that the 'default' layer must be the first one processed.\r\n    var validIdList = Object.getOwnPropertyNames(keyLabels), invalidIdList = [];\r\n    validIdList.splice(validIdList.indexOf('default'), 1);\r\n    validIdList = [ 'default' ].concat(validIdList);\r\n\r\n    // Automatic AltGr emulation if the 'leftctrl-leftalt' layer is otherwise undefined.\r\n    if(keyboard && keyboard.emulatesAltGr) {\r\n      // We insert only the layers that need to be emulated.\r\n      if((validIdList.indexOf('leftctrl-leftalt') == -1) && validIdList.indexOf('rightalt') != -1) {\r\n        validIdList.push('leftctrl-leftalt');\r\n        keyLabels['leftctrl-leftalt'] = keyLabels['rightalt'];\r\n      }\r\n\r\n      if((validIdList.indexOf('leftctrl-leftalt-shift') == -1) && validIdList.indexOf('rightalt-shift') != -1) {\r\n        validIdList.push('leftctrl-leftalt-shift');\r\n        keyLabels['leftctrl-leftalt-shift'] = keyLabels['rightalt-shift'];\r\n      }\r\n    }\r\n\r\n    // If there is no predefined layout, even touch layouts will follow the desktop's\r\n    // setting for the displayUnderlying flag.  As the desktop layout uses a different\r\n    // format for its layout spec, that's found at the field referenced below.\r\n    layout[\"displayUnderlying\"] = keyboard ? !!keyboard.scriptObject['KDU'] : false;\r\n\r\n    // For desktop devices, we must create all layers, even if invalid.\r\n    if(formFactor == 'desktop') {\r\n      invalidIdList = Layouts.generateLayerIds(chiral);\r\n\r\n      // Filter out all ids considered valid.  (We also don't want duplicates in the following list...)\r\n      for(n=0; n<invalidIdList.length; n++) {\r\n        if(validIdList.indexOf(invalidIdList[n]) != -1) {\r\n          invalidIdList.splice(n--, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    // This ensures all 'valid' layers are at the front of the layer array and managed by the main loop below.\r\n    // 'invalid' layers aren't handled by the loop and thus remain blank after it.\r\n    var idList = validIdList.concat(invalidIdList);\r\n\r\n    if(kmw10Plus && formFactor != 'desktop') { // KLS exists, so we know the exact layer set.\r\n      // Find the SHIFT key...\r\n      var shiftKey: LayoutKey = null;\r\n\r\n      rows = layers[0]['row'];\r\n      for(var r=0; r < rows.length; r++) {\r\n        keys = rows[r]['key'];\r\n        for(var c=0; c < keys.length; c++) {\r\n          key = keys[c];\r\n          if(key['id'] == 'K_SHIFT') {\r\n            shiftKey = key;\r\n          }\r\n        }\r\n      }\r\n\r\n      if(shiftKey) {\r\n        // Erase the legacy shifted subkey array.\r\n        shiftKey['sk'] = [];\r\n\r\n        for(var layerID in keyLabels) {\r\n          if(layerID == 'default' || layerID == 'shift') {\r\n            // These two are accessible from the layer without subkeys.\r\n            continue;\r\n          }\r\n\r\n          // Create a new subkey for the specified layer so that it will be accessible via OSK.\r\n          var specialChar = Layouts.modifierSpecials[layerID];\r\n          let subkey: LayoutKey = {\r\n            id: \"K_\" + specialChar,\r\n            text: specialChar,\r\n            sp: \"1\",\r\n            nextlayer: layerID\r\n          }\r\n          shiftKey['sk'].push(subkey);\r\n        }\r\n      } else {\r\n        // Seriously, this should never happen.  It's here for the debugging log only.\r\n        console.warn(\"Error in default layout - cannot find default Shift key!\");\r\n      }\r\n    }\r\n\r\n    for(n=0; n<idList.length; n++) {\r\n      // Populate non-default (shifted) keygroups\r\n      if(n > 0) {\r\n        layers[n]=deepCopy(layers[0]);\r\n      }\r\n      layers[n]['id']=idList[n];\r\n      layers[n]['nextlayer']=idList[n]; // This would only be different for a dynamic keyboard\r\n\r\n      // Extraced into a helper method to improve readability.\r\n      Layouts.formatDefaultLayer(layers[n], chiral, formFactor, !!key102);\r\n    }\r\n\r\n    // *** Step 2: Layer objects now exist; time to fill them with the appropriate key labels and key styles ***\r\n    for(n=0; n<layers.length; n++) {\r\n      var layer=layers[n], kx, shiftKey: LayoutKey = null, nextKey=null, allText='';\r\n      var capsKey: LayoutKey = null, numKey: LayoutKey = null, scrollKey: LayoutKey = null;  // null if not in the OSK layout.\r\n      var layerSpec = keyLabels[layer['id']];\r\n      var isShift = layer['id'] == 'shift' ? 1 : 0;\r\n      var isDefault = layer['id'] == 'default' || isShift ? 1 : 0;\r\n\r\n      rows=layer['row'];\r\n      for(i=0; i<rows.length; i++) {\r\n        keys=rows[i]['key'];\r\n        for(j=0; j<keys.length; j++) {\r\n          key=keys[j];\r\n          kx=Layouts.dfltCodes.indexOf(key['id']);\r\n\r\n          // Only create keys for defined layers.  ('default' and 'shift' are always defined.)\r\n          if(layerSpec || isDefault) {\r\n            // Get keycap text from visual keyboard array, if defined in keyboard\r\n            if(layerSpec) {\r\n              if(kx >= 0 && kx < layerSpec.length) key['text']=layerSpec[kx];\r\n            }\r\n\r\n            // Legacy (pre 12.0) behavior:  fall back to US English keycap text as default for the base two layers\r\n            // if a key cap is not otherwise defined. (Any intentional 'ghost' keys must be explicitly defined.)\r\n            if(isDefault && kbdDevVersion.precedes(Version.NO_DEFAULT_KEYCAPS)) {\r\n              if(key['id'] != 'K_SPACE' && kx+65 * isShift < Layouts.dfltText.length && key['text'] !== null) {\r\n                key['text'] = key['text'] || Layouts.dfltText[kx+65*isShift];\r\n              }\r\n            }\r\n          }\r\n\r\n          // Leave any unmarked key caps as null strings\r\n          if(key['text'] !== null) {\r\n            key['text'] = key['text'] || '';\r\n          }\r\n\r\n          // Detect important tracking keys.\r\n          switch(key['id']) {\r\n            case \"K_SHIFT\":\r\n              shiftKey=key;\r\n              break;\r\n            case \"K_TAB\":\r\n              nextKey=key;\r\n              break;\r\n            case \"K_CAPS\":\r\n              capsKey=key;\r\n              break;\r\n            case \"K_NUMLOCK\":\r\n              numKey=key;\r\n              break;\r\n            case \"K_SCROLL\":\r\n              scrollKey=key;\r\n              break;\r\n          }\r\n\r\n          // Remove pop-up shift keys referencing invalid layers (Build 349)\r\n          if(key['sk'] != null) {\r\n            for(k=0; k<key['sk'].length; k++) {\r\n              if(validIdList.indexOf(key['sk'][k]['nextlayer']) == -1) {\r\n                key['sk'].splice(k--, 1);\r\n              }\r\n            }\r\n\r\n            if(key['sk'].length == 0) {\r\n              key['sk']=null;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // We're done with the layer keys initialization pass.  Time to do post-analysis layer-level init where necessary.\r\n      layer.shiftKey=shiftKey;\r\n      layer.capsKey=capsKey;\r\n      layer.numKey=numKey;\r\n      layer.scrollKey=scrollKey;\r\n\r\n      // Set modifier key appearance and behaviour for non-desktop devices using the default layout\r\n      if(formFactor != 'desktop') {\r\n        if(n > 0 && shiftKey != null) {\r\n          shiftKey['sp']=Layouts.buttonClasses['SHIFT-ON'];\r\n          shiftKey['sk']=null;\r\n          shiftKey['text'] = Layouts.modifierSpecials[layers[n].id] ? Layouts.modifierSpecials[layers[n].id] : \"*Shift*\";\r\n        }\r\n      }\r\n    }\r\n\r\n    return layout;\r\n  }\r\n\r\n      /**\r\n   * Function     getLayerId\r\n   * Scope        Private\r\n   * @param       {number}      m     shift modifier code\r\n   * @return      {string}            layer string from shift modifier code (desktop keyboards)\r\n   * Description  Get name of layer from code, where the modifer order is determined by ascending bit-flag value.\r\n   */\r\n  static getLayerId(m: number): string {\r\n    let modifierCodes = Codes.modifierCodes;\r\n\r\n    var s='';\r\n    if(m == 0) {\r\n      return 'default';\r\n    } else {\r\n      if(m & modifierCodes['LCTRL']) {\r\n        s = (s.length > 0 ? s + '-' : '') + 'leftctrl';\r\n      }\r\n      if(m & modifierCodes['RCTRL']) {\r\n        s = (s.length > 0 ? s + '-' : '') + 'rightctrl';\r\n      }\r\n      if(m & modifierCodes['LALT']) {\r\n        s = (s.length > 0 ? s + '-' : '') + 'leftalt';\r\n      }\r\n      if(m & modifierCodes['RALT']) {\r\n        s = (s.length > 0 ? s + '-' : '') + 'rightalt';\r\n      }\r\n      if(m & modifierCodes['SHIFT']) {\r\n        s = (s.length > 0 ? s + '-' : '') + 'shift';\r\n      }\r\n      if(m & modifierCodes['CTRL']) {\r\n        s = (s.length > 0 ? s + '-' : '') + 'ctrl';\r\n      }\r\n      if(m & modifierCodes['ALT']) {\r\n        s = (s.length > 0 ? s + '-' : '') + 'alt';\r\n      }\r\n      return s;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates a list of potential layer ids for the specified chirality mode.\r\n   *\r\n   * @param   {boolean}   chiral    // Does the keyboard use chiral modifiers or not?\r\n   */\r\n  static generateLayerIds(chiral: boolean): string[] {\r\n    var layerCnt, offset;\r\n\r\n    if(chiral) {\r\n      layerCnt=32;\r\n      offset=0x01;\r\n    } else {\r\n      layerCnt=8;\r\n      offset=0x10;\r\n    }\r\n\r\n    var layerIds = [];\r\n\r\n    for(var i=0; i < layerCnt; i++) {\r\n      layerIds.push(Layouts.getLayerId(i * offset));\r\n    }\r\n\r\n    return layerIds;\r\n  }\r\n\r\n  /**\r\n   * Sets a formatting property for the modifier keys when constructing a default layout for a keyboard.\r\n   *\r\n   * @param   {Object}    layer   // One layer specification\r\n   * @param   {boolean}   chiral  // Whether or not the keyboard uses chiral modifier information.\r\n   * @param   {string}    formFactor  // The form factor of the device the layout is being constructed for.\r\n   * @param   {boolean}   key102      // Whether or not the extended key 102 should be hidden.\r\n   */\r\n  static formatDefaultLayer(layer: LayoutLayer, chiral: boolean, formFactor: string, key102: boolean) {\r\n    var layerId = layer['id'];\r\n    let buttonClasses = Layouts.buttonClasses;\r\n\r\n    // Correct appearance of state-dependent modifier keys according to group\r\n    for(var i=0; i<layer['row'].length; i++) {\r\n      var row=layer['row'][i];\r\n      var keys=row['key'];\r\n      for(var j=0; j<keys.length; j++) {\r\n        var key=keys[j];\r\n        switch(key['id']) {\r\n          case 'K_SHIFT':\r\n          case 'K_LSHIFT':\r\n          case 'K_RSHIFT':\r\n            if(layerId.indexOf('shift') != -1) {\r\n              key['sp'] = buttonClasses['SHIFT-ON'];\r\n            }\r\n            if(formFactor != 'desktop') {\r\n              if(layerId != 'default') {\r\n                key['nextlayer']='default';\r\n              } else {\r\n                key['nextlayer']='shift';\r\n              }\r\n            }\r\n            break;\r\n          case 'K_LCTRL':\r\n          case 'K_LCONTROL':\r\n            if(chiral) {\r\n              if(layerId.indexOf('leftctrl') != -1) {\r\n                key['sp'] = buttonClasses['SHIFT-ON'];\r\n              }\r\n              break;\r\n            }\r\n          case 'K_RCTRL':\r\n          case 'K_RCONTROL':\r\n            if(chiral) {\r\n              if(layerId.indexOf('rightctrl') != -1) {\r\n                key['sp'] = buttonClasses['SHIFT-ON'];\r\n              }\r\n              break;\r\n            }\r\n          case 'K_CONTROL':\r\n            if(layerId.indexOf('ctrl') != -1) {\r\n              if(!chiral || (layerId.indexOf('leftctrl') != -1 && layerId.indexOf('rightctrl') != -1)) {\r\n                key['sp'] = buttonClasses['SHIFT-ON'];\r\n              }\r\n            }\r\n            break;\r\n          case 'K_LALT':\r\n            if(chiral) {\r\n              if(layerId.indexOf('leftalt') != -1) {\r\n                key['sp'] = buttonClasses['SHIFT-ON'];\r\n              }\r\n              break;\r\n            }\r\n          case 'K_RALT':\r\n            if(chiral) {\r\n              if(layerId.indexOf('rightalt') != -1) {\r\n                key['sp'] = buttonClasses['SHIFT-ON'];\r\n              }\r\n              break;\r\n            }\r\n          case 'K_ALT':\r\n            if(layerId.indexOf('alt') != -1) {\r\n              if(!chiral || (layerId.indexOf('leftalt') != -1 && layerId.indexOf('rightalt') != -1)) {\r\n                key['sp'] = buttonClasses['SHIFT-ON'];\r\n              }\r\n            }\r\n            break;\r\n          case 'K_oE2':\r\n            if(typeof key102 == 'undefined' || !key102) {\r\n              if(formFactor == 'desktop') {\r\n                keys.splice(j--, 1);\r\n                keys[0]['width']='200';\r\n              } else {\r\n                keys[j]['sp']=buttonClasses['HIDDEN'];\r\n              }\r\n            }\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts the legacy BK property from pre 10.0 into the KLS keyboard layer spec format,\r\n   * sparsifying it as possible to pre-emptively check invalid layers.\r\n   *\r\n   * @param   {Array}   BK      keyboard object (as loaded)\r\n   * @return  {Object}\r\n   */\r\n  static processLegacyDefinitions(BK: string[]): KLS {\r\n    //['default','shift','ctrl','shiftctrl','alt','shiftalt','ctrlalt','shiftctrlalt'];\r\n    var idList=Layouts.generateLayerIds(false); // Non-chiral.\r\n\r\n    var KLS: KLS = {};\r\n\r\n    // The old default:  eight auto-managed layers...\r\n    for(var n=0; n<idList.length; n++) {\r\n      var id = idList[n], arr = [], valid = false;\r\n\r\n      // ... with keycode mappings in blocks of 65.\r\n      for(var k=0; k < 65; k++) {\r\n        var index = k + 65 * n;\r\n        arr.push(BK[index]);\r\n\r\n        // The entry for K_SPACE's keycode tends to hold ' ' instead of '', which causes\r\n        // the whole layer to be treated as 'valid' if not included in the conditional.\r\n        if(index < BK.length && BK[index] != '' && k != Layouts.dfltCodes.indexOf('K_SPACE')) {\r\n          valid = true;\r\n        }\r\n      }\r\n\r\n      if(valid) {\r\n        KLS[id] = arr;\r\n      }\r\n    }\r\n\r\n    // There must always be at least a plain 'default' layer.  Array(65).fill('') would be preferable but isn't supported on IE,\r\n    // but buildDefaultLayer will set the defaults for these layers if no entry exists for them in the array due to length.\r\n    if(typeof KLS['default'] == 'undefined' || ! KLS['default']) {\r\n      KLS['default'] = [''];\r\n    }\r\n\r\n    // There must always be at least a plain 'shift' layer.\r\n    if(typeof KLS['shift'] == 'undefined' || ! KLS['shift']) {\r\n      KLS['shift'] = [''];\r\n    }\r\n\r\n    return KLS;\r\n  }\r\n\r\n  // Defines the default visual layout for a keyboard.\r\n  /* c8 ignore start */\r\n  static dfltLayout: LayoutSpec = {\r\n      \"desktop\":\r\n      {\r\n          \"font\": \"Tahoma,Helvetica\",\r\n          \"layer\": [\r\n              {\r\n                  \"id\": \"default\",\r\n                  \"row\": [\r\n                      {\r\n                          \"id\": \"1\",\r\n                          \"key\": [\r\n                              { \"id\": \"K_BKQUOTE\" },\r\n                              { \"id\": \"K_1\" },\r\n                              { \"id\": \"K_2\" },\r\n                              { \"id\": \"K_3\" },\r\n                              { \"id\": \"K_4\" },\r\n                              { \"id\": \"K_5\" },\r\n                              { \"id\": \"K_6\" },\r\n                              { \"id\": \"K_7\" },\r\n                              { \"id\": \"K_8\" },\r\n                              { \"id\": \"K_9\" },\r\n                              { \"id\": \"K_0\" },\r\n                              { \"id\": \"K_HYPHEN\" },\r\n                              { \"id\": \"K_EQUAL\" },\r\n                              { \"id\": \"K_BKSP\", \"text\": \"*BkSp*\", \"sp\": \"1\", \"width\": \"130\" }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": \"2\",\r\n                          \"key\": [\r\n                              { \"id\": \"K_TAB\", \"text\": \"*Tab*\", \"sp\": \"1\", \"width\": \"130\" },\r\n                              { \"id\": \"K_Q\" },\r\n                              { \"id\": \"K_W\" },\r\n                              { \"id\": \"K_E\" },\r\n                              { \"id\": \"K_R\" },\r\n                              { \"id\": \"K_T\" },\r\n                              { \"id\": \"K_Y\" },\r\n                              { \"id\": \"K_U\" },\r\n                              { \"id\": \"K_I\" },\r\n                              { \"id\": \"K_O\" },\r\n                              { \"id\": \"K_P\" },\r\n                              { \"id\": \"K_LBRKT\" },\r\n                              { \"id\": \"K_RBRKT\" },\r\n                              { \"id\": \"K_BKSLASH\" }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": \"3\",\r\n                          \"key\": [\r\n                              { \"id\": \"K_CAPS\", \"text\": \"*Caps*\", \"sp\": \"1\", \"width\": \"165\" },\r\n                              { \"id\": \"K_A\" },\r\n                              { \"id\": \"K_S\" },\r\n                              { \"id\": \"K_D\" },\r\n                              { \"id\": \"K_F\" },\r\n                              { \"id\": \"K_G\" },\r\n                              { \"id\": \"K_H\" },\r\n                              { \"id\": \"K_J\" },\r\n                              { \"id\": \"K_K\" },\r\n                              { \"id\": \"K_L\" },\r\n                              { \"id\": \"K_COLON\" },\r\n                              { \"id\": \"K_QUOTE\" },\r\n                              { \"id\": \"K_ENTER\", \"text\": \"*Enter*\", \"sp\": \"1\", \"width\": \"165\" }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": \"4\",\r\n                          \"key\": [\r\n                              { \"id\": \"K_SHIFT\", \"text\": \"*Shift*\", \"sp\": \"1\", \"width\": \"130\" },\r\n                              { \"id\": \"K_oE2\" },\r\n                              { \"id\": \"K_Z\" },\r\n                              { \"id\": \"K_X\" },\r\n                              { \"id\": \"K_C\" },\r\n                              { \"id\": \"K_V\" },\r\n                              { \"id\": \"K_B\" },\r\n                              { \"id\": \"K_N\" },\r\n                              { \"id\": \"K_M\" },\r\n                              { \"id\": \"K_COMMA\" },\r\n                              { \"id\": \"K_PERIOD\" },\r\n                              { \"id\": \"K_SLASH\" },\r\n                              { \"id\": \"K_RSHIFT\", \"text\": \"*Shift*\", \"sp\": \"1\", \"width\": \"130\" }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": \"5\",\r\n                          \"key\": [\r\n                              { \"id\": \"K_LCONTROL\", \"text\": \"*Ctrl*\", \"sp\": \"1\", \"width\": \"170\" },\r\n                              { \"id\": \"K_LALT\", \"text\": \"*Alt*\", \"sp\": \"1\", \"width\": \"160\" },\r\n                              { \"id\": \"K_SPACE\", \"text\": \"\", \"width\": \"770\" },\r\n                              { \"id\": \"K_RALT\", \"text\": \"*Alt*\", \"sp\": \"1\", \"width\": \"160\" },\r\n                              { \"id\": \"K_RCONTROL\", \"text\": \"*Ctrl*\", \"sp\": \"1\", \"width\": \"170\" }\r\n                          ]\r\n                      }\r\n                  ]\r\n              }\r\n          ]\r\n      },\r\n      \"tablet\":\r\n      {\r\n          \"font\": \"Tahoma,Helvetica\",\r\n          \"layer\": [\r\n              {\r\n                  \"id\": \"default\",\r\n                  \"row\": [\r\n                      {\r\n                          \"id\": \"0\",\r\n                          \"key\": [\r\n                              { \"id\": \"K_1\" },\r\n                              { \"id\": \"K_2\" },\r\n                              { \"id\": \"K_3\" },\r\n                              { \"id\": \"K_4\" },\r\n                              { \"id\": \"K_5\" },\r\n                              { \"id\": \"K_6\" },\r\n                              { \"id\": \"K_7\" },\r\n                              { \"id\": \"K_8\" },\r\n                              { \"id\": \"K_9\" },\r\n                              { \"id\": \"K_0\" },\r\n                              { \"id\": \"K_HYPHEN\" },\r\n                              { \"id\": \"K_EQUAL\" },\r\n                              { \"sp\": \"10\", \"width\": \"1\" }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": \"1\",\r\n                          \"key\": [\r\n                              { \"id\": \"K_Q\", \"pad\": \"25\" },\r\n                              { \"id\": \"K_W\" },\r\n                              { \"id\": \"K_E\" },\r\n                              { \"id\": \"K_R\" },\r\n                              { \"id\": \"K_T\" },\r\n                              { \"id\": \"K_Y\" },\r\n                              { \"id\": \"K_U\" },\r\n                              { \"id\": \"K_I\" },\r\n                              { \"id\": \"K_O\" },\r\n                              { \"id\": \"K_P\" },\r\n                              { \"id\": \"K_LBRKT\" },\r\n                              { \"id\": \"K_RBRKT\" },\r\n                              { \"sp\": \"10\", \"width\": \"1\" }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": \"2\",\r\n                          \"key\": [\r\n                              { \"id\": \"K_A\", \"pad\": \"50\" },\r\n                              { \"id\": \"K_S\" },\r\n                              { \"id\": \"K_D\" },\r\n                              { \"id\": \"K_F\" },\r\n                              { \"id\": \"K_G\" },\r\n                              { \"id\": \"K_H\" },\r\n                              { \"id\": \"K_J\" },\r\n                              { \"id\": \"K_K\" },\r\n                              { \"id\": \"K_L\" },\r\n                              { \"id\": \"K_COLON\" },\r\n                              { \"id\": \"K_QUOTE\" },\r\n                              { \"id\": \"K_BKSLASH\", \"width\": \"90\" }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": \"3\",\r\n                          \"key\": [\r\n                              { \"id\": \"K_oE2\", \"width\": \"90\" },\r\n                              { \"id\": \"K_Z\" },\r\n                              { \"id\": \"K_X\" },\r\n                              { \"id\": \"K_C\" },\r\n                              { \"id\": \"K_V\" },\r\n                              { \"id\": \"K_B\" },\r\n                              { \"id\": \"K_N\" },\r\n                              { \"id\": \"K_M\" },\r\n                              { \"id\": \"K_COMMA\" },\r\n                              { \"id\": \"K_PERIOD\" },\r\n                              { \"id\": \"K_SLASH\" },\r\n                              { \"id\": \"K_BKQUOTE\" },\r\n                              { \"sp\": \"10\", \"width\": \"1\" }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": \"4\",\r\n                          \"key\": [\r\n                              {\r\n                                  \"id\": \"K_SHIFT\", \"text\": \"*Shift*\", \"sp\": \"1\", \"width\": \"200\", \"sk\": [\r\n                                      { \"id\": \"K_LCONTROL\", \"text\": \"*Ctrl*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"ctrl\" },\r\n                                      { \"id\": \"K_LCONTROL\", \"text\": \"*LCtrl*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"leftctrl\" },\r\n                                      { \"id\": \"K_RCONTROL\", \"text\": \"*RCtrl*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"rightctrl\" },\r\n                                      { \"id\": \"K_LALT\", \"text\": \"*Alt*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"alt\" },\r\n                                      { \"id\": \"K_LALT\", \"text\": \"*LAlt*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"leftalt\" },\r\n                                      { \"id\": \"K_RALT\", \"text\": \"*RAlt*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"rightalt\" },\r\n                                      { \"id\": \"K_ALTGR\", \"text\": \"*AltGr*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"ctrl-alt\" }]\r\n                              },\r\n                              { \"id\": \"K_LOPT\", \"text\": \"*Menu*\", \"sp\": \"1\", \"width\": \"150\" },\r\n                              { \"id\": \"K_SPACE\", \"text\": \"\", \"width\": \"570\" },\r\n                              { \"id\": \"K_BKSP\", \"text\": \"*BkSp*\", \"sp\": \"1\", \"width\": \"150\" },\r\n                              { \"id\": \"K_ENTER\", \"text\": \"*Enter*\", \"sp\": \"1\", \"width\": \"200\" }\r\n                          ]\r\n                      }\r\n                  ]\r\n              }\r\n          ]\r\n      },\r\n      \"phone\":\r\n      {\r\n          \"font\": \"Tahoma,Helvetica\",\r\n          \"layer\": [\r\n              {\r\n                  \"id\": \"default\",\r\n                  \"row\": [\r\n                      {\r\n                          \"id\": \"0\",\r\n                          \"key\": [\r\n                              { \"id\": \"K_1\" },\r\n                              { \"id\": \"K_2\" },\r\n                              { \"id\": \"K_3\" },\r\n                              { \"id\": \"K_4\" },\r\n                              { \"id\": \"K_5\" },\r\n                              { \"id\": \"K_6\" },\r\n                              { \"id\": \"K_7\" },\r\n                              { \"id\": \"K_8\" },\r\n                              { \"id\": \"K_9\" },\r\n                              { \"id\": \"K_0\" },\r\n                              { \"id\": \"K_HYPHEN\" },\r\n                              { \"id\": \"K_EQUAL\" },\r\n                              { \"sp\": \"10\", \"width\": \"1\" }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": \"1\",\r\n                          \"key\": [\r\n                              { \"id\": \"K_Q\", \"pad\": \"25\" },\r\n                              { \"id\": \"K_W\" },\r\n                              { \"id\": \"K_E\" },\r\n                              { \"id\": \"K_R\" },\r\n                              { \"id\": \"K_T\" },\r\n                              { \"id\": \"K_Y\" },\r\n                              { \"id\": \"K_U\" },\r\n                              { \"id\": \"K_I\" },\r\n                              { \"id\": \"K_O\" },\r\n                              { \"id\": \"K_P\" },\r\n                              { \"id\": \"K_LBRKT\" },\r\n                              { \"id\": \"K_RBRKT\" },\r\n                              { \"sp\": \"10\", \"width\": \"1\" }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": \"2\",\r\n                          \"key\": [\r\n                              { \"id\": \"K_A\", \"pad\": \"50\" },\r\n                              { \"id\": \"K_S\" },\r\n                              { \"id\": \"K_D\" },\r\n                              { \"id\": \"K_F\" },\r\n                              { \"id\": \"K_G\" },\r\n                              { \"id\": \"K_H\" },\r\n                              { \"id\": \"K_J\" },\r\n                              { \"id\": \"K_K\" },\r\n                              { \"id\": \"K_L\" },\r\n                              { \"id\": \"K_COLON\" },\r\n                              { \"id\": \"K_QUOTE\" },\r\n                              { \"id\": \"K_BKSLASH\", \"width\": \"90\" }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": \"3\",\r\n                          \"key\": [\r\n                              { \"id\": \"K_oE2\", \"width\": \"90\" },\r\n                              { \"id\": \"K_Z\" },\r\n                              { \"id\": \"K_X\" },\r\n                              { \"id\": \"K_C\" },\r\n                              { \"id\": \"K_V\" },\r\n                              { \"id\": \"K_B\" },\r\n                              { \"id\": \"K_N\" },\r\n                              { \"id\": \"K_M\" },\r\n                              { \"id\": \"K_COMMA\" },\r\n                              { \"id\": \"K_PERIOD\" },\r\n                              { \"id\": \"K_SLASH\" },\r\n                              { \"id\": \"K_BKQUOTE\" },\r\n                              { \"sp\": \"10\", \"width\": \"1\" }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": \"4\",\r\n                          \"key\": [\r\n                              {\r\n                                  \"id\": \"K_SHIFT\", \"text\": \"*Shift*\", \"sp\": \"1\", \"width\": \"200\", \"sk\": [\r\n                                      { \"id\": \"K_LCONTROL\", \"text\": \"*Ctrl*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"ctrl\" },\r\n                                      { \"id\": \"K_LCONTROL\", \"text\": \"*LCtrl*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"leftctrl\" },\r\n                                      { \"id\": \"K_RCONTROL\", \"text\": \"*RCtrl*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"rightctrl\" },\r\n                                      { \"id\": \"K_LALT\", \"text\": \"*Alt*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"alt\" },\r\n                                      { \"id\": \"K_LALT\", \"text\": \"*LAlt*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"leftalt\" },\r\n                                      { \"id\": \"K_RALT\", \"text\": \"*RAlt*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"rightalt\" },\r\n                                      { \"id\": \"K_ALTGR\", \"text\": \"*AltGr*\", \"sp\": \"1\", \"width\": \"50\", \"nextlayer\": \"ctrl-alt\" }]\r\n                              },\r\n                              { \"id\": \"K_LOPT\", \"text\": \"*Menu*\", \"width\": \"150\", \"sp\": \"1\" },\r\n                              { \"id\": \"K_SPACE\", \"width\": \"570\", \"text\": \"\" },\r\n                              { \"id\": \"K_BKSP\", \"text\": \"*BkSp*\", \"width\": \"150\", \"sp\": \"1\" },\r\n                              { \"id\": \"K_ENTER\", \"text\": \"*Enter*\", \"width\": \"200\", \"sp\": \"1\" }\r\n                          ]\r\n                      }\r\n                  ]\r\n              }\r\n          ]\r\n      }\r\n  };\r\n  /* c8 ignore end */\r\n}\r\n",
    "import Codes from \"../text/codes.js\";\r\nimport { Layouts, type LayoutFormFactor } from \"./defaultLayouts.js\";\r\nimport { ActiveKey, ActiveLayout } from \"./activeLayout.js\";\r\nimport KeyEvent from \"../text/keyEvent.js\";\r\nimport type OutputTarget from \"../text/outputTarget.js\";\r\n\r\nimport type { ComplexKeyboardStore } from \"../text/kbdInterface.js\";\r\n\r\nimport { Version, DeviceSpec } from \"@keymanapp/web-utils\";\r\nimport StateKeyMap from \"./stateKeyMap.js\";\r\n\r\n/**\r\n * Stores preprocessed properties of a keyboard for quick retrieval later.\r\n */\r\nclass CacheTag {\r\n  stores: {[storeName: string]: ComplexKeyboardStore};\r\n\r\n  constructor() {\r\n    this.stores = {};\r\n  }\r\n}\r\n\r\nexport enum LayoutState {\r\n  NOT_LOADED = undefined,\r\n  POLYFILLED = 1,\r\n  CALIBRATED = 2\r\n}\r\n\r\nexport interface VariableStoreDictionary {\r\n  [name: string]: string;\r\n};\r\n\r\n\r\n/**\r\n * Acts as a wrapper class for Keyman keyboards compiled to JS, providing type information\r\n * and keyboard-centered functionality in an object-oriented way without modifying the\r\n * wrapped keyboard itself.\r\n */\r\nexport default class Keyboard {\r\n  public static DEFAULT_SCRIPT_OBJECT = {\r\n    'gs': function(outputTarget, keystroke) { return false; }, // no matching rules; rely on defaultRuleOutput entirely\r\n    'KI': '', // The currently-existing default keyboard ID; we already have checks that focus against this.\r\n    'KN': '',\r\n    'KV': Layouts.DEFAULT_RAW_SPEC,\r\n    'KM': 0 // May not be the best default, but this matches current behavior when there is no activeKeyboard.\r\n  }\r\n\r\n  /**\r\n   * This is the object provided to KeyboardInterface.registerKeyboard - that is, the keyboard\r\n   * being wrapped.\r\n   *\r\n   * TODO:  Make this private instead.  But there are a LOT of references that must be rooted out first.\r\n   */\r\n  public readonly scriptObject: any;\r\n  private layoutStates: {[layout: string]: LayoutState};\r\n\r\n  constructor(keyboardScript: any) {\r\n    if(keyboardScript) {\r\n      this.scriptObject = keyboardScript;\r\n    } else {\r\n      this.scriptObject = Keyboard.DEFAULT_SCRIPT_OBJECT;\r\n    }\r\n    this.layoutStates = {};\r\n  }\r\n\r\n  /**\r\n   * Calls the keyboard's `gs` function, which represents the keyboard source's begin Unicode group.\r\n   */\r\n  process(outputTarget: OutputTarget, keystroke: KeyEvent): boolean {\r\n    return this.scriptObject['gs'](outputTarget, keystroke);\r\n  }\r\n\r\n  /**\r\n   * Calls the keyboard's `gn` function, which represents the keyboard source's begin newContext group.\r\n   */\r\n  processNewContextEvent(outputTarget: OutputTarget, keystroke: KeyEvent): boolean {\r\n    return this.scriptObject['gn'] ? this.scriptObject['gn'](outputTarget, keystroke) : false;\r\n  }\r\n\r\n  /**\r\n   * Calls the keyboard's `gpk` function, which represents the keyboard source's begin postKeystroke group.\r\n   */\r\n  processPostKeystroke(outputTarget: OutputTarget, keystroke: KeyEvent): boolean {\r\n    return this.scriptObject['gpk'] ? this.scriptObject['gpk'](outputTarget, keystroke) : false;\r\n  }\r\n\r\n  get isHollow(): boolean {\r\n    return this.scriptObject == Keyboard.DEFAULT_SCRIPT_OBJECT;\r\n  }\r\n\r\n  get id(): string {\r\n    return this.scriptObject['KI'];\r\n  }\r\n\r\n  get name(): string {\r\n    return this.scriptObject['KN'];\r\n  }\r\n\r\n  /**\r\n   * Cache variable store values\r\n   *\r\n   * Primarily used for predictive text to prevent variable store\r\n   * values from being changed in 'fat finger' processing.\r\n   *\r\n   * KVS is available in keyboards compiled with Keyman Developer 15\r\n   * and later versions. See #2924.\r\n   *\r\n   * @returns an object with each property referencing a variable store\r\n   */\r\n  get variableStores(): VariableStoreDictionary {\r\n    const storeNames = this.scriptObject['KVS'];\r\n    let values = {};\r\n    if(Array.isArray(storeNames)) {\r\n      for(let store of storeNames) {\r\n        values[store] = this.scriptObject[store];\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * Restore variable store values from cache\r\n   *\r\n   * KVS is available in keyboards compiled with Keyman Developer 15\r\n   * and later versions. See #2924.\r\n   *\r\n   * @param values  name-value pairs for each store value\r\n   */\r\n  set variableStores(values: VariableStoreDictionary) {\r\n    const storeNames = this.scriptObject['KVS'];\r\n    if(Array.isArray(storeNames)) {\r\n      for(let store of storeNames) {\r\n        // If the value is not present in the cache, don't overwrite it;\r\n        // while this is not used in initial implementation, we could use\r\n        // it in future to update a single variable store value rather than\r\n        // the whole cache.\r\n        if(typeof values[store] == 'string') {\r\n          this.scriptObject[store] = values[store];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // TODO:  Better typing.\r\n  private get _legacyLayoutSpec(): any {\r\n    return this.scriptObject['KV'];  // used with buildDefaultLayout; layout must be constructed at runtime.\r\n  }\r\n\r\n  // May return null if no layouts exist or have been initialized.\r\n  private get _layouts(): {[formFactor: string]: LayoutFormFactor} {\r\n    return this.scriptObject['KVKL'];  // This one is compiled by Developer's visual keyboard layout editor.\r\n  }\r\n\r\n  private set _layouts(value) {\r\n    this.scriptObject['KVKL'] = value;\r\n  }\r\n\r\n  get compilerVersion(): Version {\r\n    return new Version(this.scriptObject['KVER']);\r\n  }\r\n\r\n  get isMnemonic(): boolean {\r\n    return !!this.scriptObject['KM'];\r\n  }\r\n\r\n  get definesPositionalOrMnemonic(): boolean {\r\n    return typeof this.scriptObject['KM'] != 'undefined';\r\n  }\r\n\r\n  /**\r\n   * HTML help text, as specified by either the &kmw_helptext or &kmw_helpfile system stores.\r\n   *\r\n   * Reference: https://help.keyman.com/developer/language/reference/kmw_helptext,\r\n   *            https://help.keyman.com/developer/language/reference/kmw_helpfile\r\n   */\r\n  get helpText(): string {\r\n    return this.scriptObject['KH'];\r\n  }\r\n\r\n  /**\r\n   * Embedded JS script designed for use with a keyboard's HTML help text.  Always defined\r\n   * within the file referenced by &kmw_embedjs in a keyboard's source, though that file\r\n   * may also contain _other_ script definitions as well.  (`KHF` must be explicitly defined\r\n   * within that file.)\r\n   */\r\n  get hasScript(): boolean {\r\n    return !!this.scriptObject['KHF'];\r\n  }\r\n\r\n  /**\r\n   * Embeds a custom script for use by the OSK, which may be interactive (like with sil_euro_latin).\r\n   * Note:  this must be called AFTER any contents of `helpText` have been inserted into the DOM.\r\n   * (See sil_euro_latin's source -> sil_euro_latin_js.txt)\r\n   *\r\n   * Reference: https://help.keyman.com/developer/language/reference/kmw_embedjs\r\n   */\r\n  embedScript(e: any) {\r\n    // e:  Expects the OSKManager's _Box element.  We don't add type info here b/c it would\r\n    //     reference the DOM.\r\n    this.scriptObject['KHF'](e);\r\n  }\r\n\r\n  get oskStyling(): string {\r\n    return this.scriptObject['KCSS'];\r\n  }\r\n\r\n  /**\r\n   * true if this keyboard uses a (legacy) pick list (Chinese, Japanese, Korean, etc.)\r\n   *\r\n   * TODO:  Make a property on keyboards (say, `isPickList` / `KPL`) to signal this when we\r\n   *        get around to better, generalized picker-list support.\r\n   */\r\n  get isCJK(): boolean { // I3363 (Build 301)\r\n    var lg: string;\r\n    if(typeof(this.scriptObject['KLC']) != 'undefined') {\r\n      lg = this.scriptObject['KLC'];\r\n    } else if(typeof(this.scriptObject['LanguageCode']) != 'undefined') {\r\n      lg = this.scriptObject['LanguageCode'];\r\n    }\r\n\r\n    // While some of these aren't proper BCP-47 language codes, the CJK keyboards predate our use of BCP-47.\r\n    // So, we preserve the old ISO 639-3 codes, as that's what the keyboards are matching against.\r\n    return ((lg == 'cmn') || (lg == 'jpn') || (lg == 'kor'));\r\n  }\r\n\r\n  get isRTL(): boolean {\r\n    return !!this.scriptObject['KRTL'];\r\n  }\r\n\r\n  /**\r\n   * Obtains the currently-active modifier bitmask for the active keyboard.\r\n   */\r\n  get modifierBitmask(): number {\r\n    // NON_CHIRAL is the default bitmask if KMBM is not defined.\r\n    // We always need a bitmask to compare against, as seen in `isChiral`.\r\n    return this.scriptObject['KMBM'] || Codes.modifierBitmasks['NON_CHIRAL'];\r\n  }\r\n\r\n  get isChiral(): boolean {\r\n    return !!(this.modifierBitmask & Codes.modifierBitmasks['IS_CHIRAL']);\r\n  }\r\n\r\n  get desktopFont(): string {\r\n    if(this.scriptObject['KV']) {\r\n      return this.scriptObject['KV']['F'];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private get cacheTag(): CacheTag {\r\n    let tag = this.scriptObject['_kmw'];\r\n\r\n    if(!tag) {\r\n      tag = new CacheTag();\r\n      this.scriptObject['_kmw'] = tag;\r\n    }\r\n\r\n    return tag;\r\n  }\r\n\r\n  get explodedStores(): {[storeName: string]: ComplexKeyboardStore} {\r\n    return this.cacheTag.stores;\r\n  }\r\n\r\n  /**\r\n   * Signifies whether or not a layout or OSK should include AltGr / Right-alt emulation for this keyboard.\r\n   * @param   {Object=}   keyLabels\r\n   * @return  {boolean}\r\n   */\r\n  get emulatesAltGr(): boolean {\r\n    let modifierCodes = Codes.modifierCodes;\r\n\r\n    // If we're not chiral, we're not emulating.\r\n    if(!this.isChiral) {\r\n      return false;\r\n    }\r\n\r\n    if(this._legacyLayoutSpec == null) {\r\n      return false;\r\n    }\r\n\r\n    // Only exists in KMW 10.0+, but before that Web had no chirality support, so... return false.\r\n    let layers = this._legacyLayoutSpec['KLS'];\r\n    if(!layers) {\r\n      return false;\r\n    }\r\n\r\n    var emulationMask = modifierCodes['LCTRL'] | modifierCodes['LALT'];\r\n    var unshiftedEmulationLayer = layers[Layouts.getLayerId(emulationMask)];\r\n    var shiftedEmulationLayer = layers[Layouts.getLayerId(modifierCodes['SHIFT'] | emulationMask)];\r\n\r\n    // buildDefaultLayout ensures that these are aliased to the original modifier set being emulated.\r\n    // As a result, we can directly test for reference equality.\r\n    //\r\n    // This allows us to still return `true` after creating the layers for emulation; during keyboard\r\n    // construction, the two layers should be null for AltGr emulation to succeed.\r\n    if(unshiftedEmulationLayer != null &&\r\n        unshiftedEmulationLayer != layers[Layouts.getLayerId(modifierCodes['RALT'])]) {\r\n      return false;\r\n    }\r\n\r\n    if(shiftedEmulationLayer != null &&\r\n        shiftedEmulationLayer != layers[Layouts.getLayerId(modifierCodes['RALT'] | modifierCodes['SHIFT'])]) {\r\n      return false;\r\n    }\r\n\r\n    // It's technically possible for the OSK to not specify anything while allowing chiral input.  A last-ditch catch:\r\n    var bitmask = this.modifierBitmask;\r\n    if((bitmask & emulationMask) != emulationMask) {\r\n      // At least one of the emulation modifiers is never used by the keyboard!  We can confirm everything's safe.\r\n      return true;\r\n    }\r\n\r\n    if(unshiftedEmulationLayer == null && shiftedEmulationLayer == null) {\r\n      // We've run out of things to go on; we can't detect if chiral AltGr emulation is intended or not.\r\n      // TODO:  handle this again!\r\n      // if(!osk.altGrWarning) {\r\n      //   console.warn(\"Could not detect if AltGr emulation is safe, but defaulting to active emulation!\")\r\n      //   // Avoid spamming the console with warnings on every call of the method.\r\n      //   osk.altGrWarning = true;\r\n      // }\r\n      return true;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  get usesSupplementaryPlaneChars(): boolean {\r\n    let kbd = this.scriptObject;\r\n    // I3319 - SMP extension, I3363 (Build 301)\r\n    return kbd && ((kbd['KS'] && kbd['KS'] == 1) || kbd['KN'] == 'Hieroglyphic');\r\n  }\r\n\r\n  get version(): string {\r\n    return this.scriptObject['KBVER'] || '';\r\n  }\r\n\r\n  usesDesktopLayoutOnDevice(device: DeviceSpec) {\r\n    if(this.scriptObject['KVKL']) {\r\n      // A custom mobile layout is defined... but are we using it?\r\n      return device.formFactor == DeviceSpec.FormFactor.Desktop;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param       {number}    _PCommand     event code (16,17,18) or 0\r\n   * @param       {Object}    _PTarget      target element\r\n   * @param       {number}    _PData        1 or 0\r\n   * Notifies keyboard of keystroke or other event\r\n   */\r\n  notify(_PCommand: number, _PTarget: OutputTarget, _PData: number) { // I2187\r\n    // Good example use case - the Japanese CJK-picker keyboard\r\n    if(typeof(this.scriptObject['KNS']) == 'function') {\r\n      this.scriptObject['KNS'](_PCommand, _PTarget, _PData);\r\n    }\r\n  }\r\n\r\n  private findOrConstructLayout(formFactor: DeviceSpec.FormFactor): LayoutFormFactor {\r\n    if(this._layouts) {\r\n      // Search for viable layouts.  `null` is allowed for desktop form factors when help text is available,\r\n      // so we check explicitly against `undefined`.\r\n      if(this._layouts[formFactor] !== undefined) {\r\n        return this._layouts[formFactor];\r\n      } else if(formFactor == DeviceSpec.FormFactor.Phone && this._layouts[DeviceSpec.FormFactor.Tablet]) {\r\n        return this._layouts[DeviceSpec.FormFactor.Phone] = this._layouts[DeviceSpec.FormFactor.Tablet];\r\n      } else if(formFactor == DeviceSpec.FormFactor.Tablet && this._layouts[DeviceSpec.FormFactor.Phone]) {\r\n        return this._layouts[DeviceSpec.FormFactor.Tablet] = this._layouts[DeviceSpec.FormFactor.Phone];\r\n      }\r\n    }\r\n\r\n    // No pre-built layout available; time to start constructing it via defaults.\r\n    // First, if we have non-default keys specified by the ['BK'] array, we've got\r\n    // enough to work with to build a default layout.\r\n    let rawSpecifications: any = null;  // TODO:  better typing, same type as this._legacyLayoutSpec.\r\n    if(this._legacyLayoutSpec != null && this._legacyLayoutSpec['KLS']) { // KLS is only specified whenever there are non-default keys.\r\n      rawSpecifications = this._legacyLayoutSpec;\r\n    } else if(this._legacyLayoutSpec != null && this._legacyLayoutSpec['BK'] != null) {\r\n      var keyCaps=this._legacyLayoutSpec['BK'];\r\n      for(var i=0; i<keyCaps.length; i++) {\r\n        if(keyCaps[i].length > 0) {\r\n          rawSpecifications = this._legacyLayoutSpec;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // If we don't have key definitions to use for a layout but also lack help text or are a touch-based layout,\r\n    // we make a default layout anyway.  We have to show display something usable.\r\n    if(!rawSpecifications && (this.helpText == '' || formFactor != DeviceSpec.FormFactor.Desktop)) {\r\n      rawSpecifications = {'F':'Tahoma', 'BK': Layouts.dfltText};\r\n    }\r\n\r\n    // Regardless of success, we'll want to initialize the field that backs the property;\r\n    // may as well cache the default layout we just built, or a 'null' if it shouldn't exist..\r\n    if(!this._layouts) {\r\n      this._layouts = {};\r\n    }\r\n\r\n    // Final check - do we construct a layout, or is this a case where helpText / insertHelpHTML should take over?\r\n    if(rawSpecifications) {\r\n      // Now to generate a layout from our raw specifications.\r\n      let layout = this._layouts[formFactor] = Layouts.buildDefaultLayout(rawSpecifications, this, formFactor);\r\n      layout.isDefault = true;\r\n      return layout;\r\n    } else {\r\n      // The fact that it doesn't exist will indicate that help text/HTML should be inserted instead.\r\n      this._layouts[formFactor] = null; // provides a cached value for the check at the top of this method.\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an ActiveLayout object representing the keyboard's layout for this form factor.  May return null if a custom desktop \"help\" OSK is defined, as with sil_euro_latin.\r\n   *\r\n   * In such cases, please use either `helpText` or `insertHelpHTML` instead.\r\n   * @param formFactor {string} The desired form factor for the layout.\r\n   */\r\n  public layout(formFactor: DeviceSpec.FormFactor): ActiveLayout {\r\n    let rawLayout = this.findOrConstructLayout(formFactor);\r\n\r\n    if(rawLayout) {\r\n      // Prevents accidentally reprocessing layouts; it's a simple enough check.\r\n      if(this.layoutStates[formFactor] == LayoutState.NOT_LOADED) {\r\n        rawLayout = ActiveLayout.polyfill(rawLayout, this, formFactor);\r\n        this.layoutStates[formFactor] = LayoutState.POLYFILLED;\r\n      }\r\n\r\n      return rawLayout as ActiveLayout;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public refreshLayouts() {\r\n    let formFactors = [ DeviceSpec.FormFactor.Desktop, DeviceSpec.FormFactor.Phone, DeviceSpec.FormFactor.Tablet ];\r\n\r\n    let _this = this;\r\n\r\n    formFactors.forEach(function(form) {\r\n      // Currently doesn't work if we reset it to POLYFILLED, likely due to how 'calibration'\r\n      // currently works.\r\n      _this.layoutStates[form] = LayoutState.NOT_LOADED;\r\n    });\r\n  }\r\n\r\n  public markLayoutCalibrated(formFactor: DeviceSpec.FormFactor) {\r\n    if(this.layoutStates[formFactor] != LayoutState.NOT_LOADED) {\r\n      this.layoutStates[formFactor] = LayoutState.CALIBRATED;\r\n    }\r\n  }\r\n\r\n  public getLayoutState(formFactor: DeviceSpec.FormFactor) {\r\n    return this.layoutStates[formFactor];\r\n  }\r\n\r\n\r\n  constructNullKeyEvent(device: DeviceSpec, stateKeys?: StateKeyMap): KeyEvent {\r\n    stateKeys = stateKeys || {\r\n      K_CAPS: false,\r\n      K_NUMLOCK: false,\r\n      K_SCROLL: false\r\n    }\r\n\r\n    const keyEvent = KeyEvent.constructNullKeyEvent(device);\r\n    this.setSyntheticEventDefaults(keyEvent, stateKeys);\r\n    return keyEvent;\r\n  }\r\n\r\n  constructKeyEvent(key: ActiveKey, device: DeviceSpec, stateKeys: StateKeyMap): KeyEvent {\r\n    // Make a deep copy of our preconstructed key event, filling it out from there.\r\n    const Lkc = key.baseKeyEvent;\r\n    Lkc.device = device;\r\n\r\n    if(this.isMnemonic) {\r\n      Lkc.setMnemonicCode(key.layer.indexOf('shift') != -1, stateKeys['K_CAPS']);\r\n    }\r\n\r\n    // Performs common pre-analysis for both 'native' and 'embedded' OSK key & subkey input events.\r\n    // This part depends on the keyboard processor's active state.\r\n    this.setSyntheticEventDefaults(Lkc, stateKeys);\r\n\r\n    // If it's a state key modifier, trigger its effects as part of the\r\n    // keystroke.\r\n    const bitmap = {\r\n      'K_CAPS': Codes.stateBitmasks.CAPS,\r\n      'K_NUMLOCK': Codes.stateBitmasks.NUM_LOCK,\r\n      'K_SCROLL': Codes.stateBitmasks.SCROLL_LOCK\r\n    };\r\n    const bitmask = bitmap[Lkc.kName];\r\n\r\n    if(bitmask) {\r\n      Lkc.Lstates ^= bitmask;\r\n      Lkc.LmodifierChange = true;\r\n    }\r\n\r\n    return Lkc;\r\n  }\r\n\r\n  setSyntheticEventDefaults(Lkc: KeyEvent, stateKeys: StateKeyMap) {\r\n    // Set the flags for the state keys - for desktop devices. For touch\r\n    // devices, the only state key in use currently is Caps Lock, which is set\r\n    // when the 'caps' layer is active in ActiveKey::constructBaseKeyEvent.\r\n    if(!Lkc.device.touchable) {\r\n      /*\r\n       * For desktop-style keyboards, start from a blank slate.  They have a 'default'\r\n       * (implicit 'NO_CAPS') layer but not a 'caps' layer.  With caps set, it just\r\n       * highlights the key on the 'default' layer instead.\r\n       *\r\n       * We should never set both `CAPS` and `NO_CAPS` at the same time, and\r\n       * same for the other modifiers.\r\n       */\r\n      Lkc.Lstates = 0;\r\n      Lkc.Lstates |= stateKeys['K_CAPS']    ? Codes.modifierCodes['CAPS'] : Codes.modifierCodes['NO_CAPS'];\r\n      Lkc.Lstates |= stateKeys['K_NUMLOCK'] ? Codes.modifierCodes['NUM_LOCK'] : Codes.modifierCodes['NO_NUM_LOCK'];\r\n      Lkc.Lstates |= stateKeys['K_SCROLL']  ? Codes.modifierCodes['SCROLL_LOCK'] : Codes.modifierCodes['NO_SCROLL_LOCK'];\r\n    }\r\n\r\n    // Set LisVirtualKey to false to ensure that nomatch rule does fire for U_xxxx keys\r\n    if(Lkc.kName && Lkc.kName.substr(0,2) == 'U_') {\r\n      Lkc.LisVirtualKey=false;\r\n    }\r\n\r\n    // Get code for non-physical keys (T_KOKAI, U_05AB etc)\r\n    if(typeof Lkc.Lcode == 'undefined') {\r\n      Lkc.Lcode = this.getVKDictionaryCode(Lkc.kName);// Updated for Build 347\r\n      if(!Lkc.Lcode) {\r\n        // Special case for U_xxxx keys. This vk code will never be used\r\n        // in a keyboard, so we use this to ensure that keystroke processing\r\n        // occurs for the key.\r\n        Lkc.Lcode = 1;\r\n      }\r\n    }\r\n\r\n    // Handles modifier states when the OSK is emulating rightalt through the leftctrl-leftalt layer.\r\n    if((Lkc.Lmodifiers & Codes.modifierBitmasks['ALT_GR_SIM']) == Codes.modifierBitmasks['ALT_GR_SIM'] && this.emulatesAltGr) {\r\n      Lkc.Lmodifiers &= ~Codes.modifierBitmasks['ALT_GR_SIM'];\r\n      Lkc.Lmodifiers |= Codes.modifierCodes['RALT'];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Look up a custom virtual key code in the virtual key code dictionary KVKD.\r\n   * On first run, will build the dictionary.\r\n   *\r\n   * `VKDictionary` is constructed from the keyboard's `KVKD` member. This list is constructed\r\n   * at compile-time and is a list of 'additional' virtual key codes, starting at 256 (i.e.\r\n   * outside the range of standard virtual key codes). These additional codes are both\r\n   * `[T_xxx]` and `[U_xxxx]` custom key codes from the Keyman keyboard language. However,\r\n   * `[U_xxxx]` keys only generate an entry in `KVKD` if there is a corresponding rule that\r\n   * is associated with them in the keyboard rules. If the `[U_xxxx]` key code is only\r\n   * referenced as the id of a key in the touch layout, then it does not get an entry in\r\n   * the `KVKD` property.\r\n   *\r\n   * @private\r\n   * @param       {string}      keyName   custom virtual key code to lookup in the dictionary\r\n   * @return      {number}                key code > 255 on success, or 0 if not found\r\n   */\r\n  getVKDictionaryCode(keyName: string) {\r\n    if(!this.scriptObject['VKDictionary']) {\r\n      const a=[];\r\n      if(typeof this.scriptObject['KVKD'] == 'string') {\r\n        // Build the VK dictionary\r\n        // TODO: Move the dictionary build into the compiler -- so compiler generates code such as following.\r\n        // Makes the VKDictionary member unnecessary.\r\n        //       this.KVKD={\"K_ABC\":256,\"K_DEF\":257,...};\r\n        const s=this.scriptObject['KVKD'].split(' ');\r\n        for(var i=0; i<s.length; i++) {\r\n          a[s[i].toUpperCase()]=i+256; // We force upper-case since virtual keys should be case-insensitive.\r\n        }\r\n      }\r\n      this.scriptObject['VKDictionary']=a;\r\n    }\r\n\r\n    const res=this.scriptObject['VKDictionary'][keyName.toUpperCase()];\r\n    return res ? res : 0;\r\n  }\r\n}",
    "import Keyboard from \"./keyboard.js\";\r\nimport Codes from \"../text/codes.js\";\r\n\r\n/**\r\n * Defines members of the top-level `keyman` global object necessary to guarantee\r\n * successful loading of a keyboard.\r\n */\r\nexport interface KeyboardKeymanGlobal {\r\n  // Omitting this will prevent debug-compiled keyboards from loading.\r\n  readonly osk: MinimalCodesInterface;\r\n}\r\n\r\n/**\r\n * Defines any public API points used by debug-compiled keyboards for human-readable\r\n * nomenclature in rules within a Keyman keyboard's script for keyboard rules.\r\n *\r\n * Refer to C:\\keymanapp\\keyman\\developer\\src\\tike\\compile\\CompileKeymanWeb.pas,\r\n * TCompileKeymanWeb.JavaScript_SetupDebug.\r\n */\r\nexport interface MinimalCodesInterface {\r\n  readonly modifierCodes: typeof Codes.modifierCodes;\r\n  readonly keyCodes: typeof Codes.keyCodes;\r\n  readonly modifierBitmasks: typeof Codes.modifierBitmasks;\r\n  readonly stateBitmasks: typeof Codes.stateBitmasks;\r\n}\r\n\r\nexport const MinimalKeymanGlobal: KeyboardKeymanGlobal = {\r\n  // While this CERTAINLY isn't polymorphic with an actual OSK, it's \"enough\" to\r\n  // facilitate loading of debug-compiled Keyman keyboards that rely on constants\r\n  // defined within Codes at relevant legacy endpoints.\r\n  osk: Codes\r\n}\r\n\r\n/**\r\n * Defines the minimum interface needed to ensure successful loading of Keyman\r\n * keyboards of _any_ type.\r\n *\r\n * This interface is minimal; note that critical functions needed for the evaluation\r\n * of keyboard rules are not included.\r\n */\r\nexport class KeyboardHarness {\r\n  public readonly _jsGlobal: any;\r\n  public readonly keymanGlobal: KeyboardKeymanGlobal;\r\n\r\n  /**\r\n   * Constructs and configures a harness for receiving dynamically-loaded Keyman keyboards.\r\n   *\r\n   * @param _jsGlobal The object that the keyboard script will perceive as the top-level global\r\n   *                  with the name `KeymanWeb`.\r\n   * - In the DOM, as a member of `window` (which may be that of an iframe)\r\n   * - In a WebWorker, as a member of `self`\r\n   * - In Node, as a member of `global` (or of a context object supplied to `vm`)\r\n   * @param keymanGlobal An object to stand-in as the `keyman` global variable within _jsGlobal.\r\n   */\r\n  public constructor(_jsGlobal: any, keymanGlobal: KeyboardKeymanGlobal) {\r\n    this._jsGlobal = _jsGlobal;\r\n    this.keymanGlobal = keymanGlobal;\r\n\r\n    this.install();\r\n  }\r\n\r\n  /**\r\n   * This field serves as the receptacle for a successfully-loaded Keyboard.\r\n   */\r\n  public loadedKeyboard: Keyboard = null;\r\n\r\n  /**\r\n   * Keyman keyboards register themselves into the Keyman Engine for Web by directly\r\n   * calling `KeymanWeb.KR` - the function provided here after \"installation\" of the harness.\r\n   *\r\n   * Note that the resulting Keyboard's internal rule scripting has its global object bound via\r\n   * closure/capture; that global object must have a rule-compatible harness set in order to\r\n   * facilitate keyboard-rule evaluation.  Note that the mechanism for keyboard loading in\r\n   * Node (for headless unit tests) supplies a unique global per load if not supplied to the\r\n   * constructor that is not accessible for manipulation after the load!\r\n   *\r\n   * If the supplied global's accessible keyboard harness does not supply keyboard rule API\r\n   * functions, attempts to process keyboard rules will throw `Error`s instead.\r\n   * @param scriptObject\r\n   */\r\n  public KR(scriptObject: any) {\r\n    if(this.loadedKeyboard) {\r\n      throw new Error(\"Unexpected state:  the most-recently loaded keyboard field was not properly reset.\");\r\n    }\r\n    this.loadedKeyboard = new Keyboard(scriptObject);\r\n  }\r\n\r\n  /**\r\n   * Installs this harness instance into the object that the keyboard script will perceive\r\n   * as the top-level global with the name `KeymanWeb`.\r\n   * - In the DOM, as a member of `window` (which may be that of an iframe)\r\n   * - In a WebWorker, as a member of `self`\r\n   * - In Node, as a member of `global` (or of a context object supplied to `vm`)\r\n   *\r\n   * In doing so, the following properties will have endpoints within the global:\r\n   * - `KeymanWeb` - this harness instance\r\n   * - `keyman` - the `minKeymanGlobal` constructor argument.\r\n   */\r\n  public install() {\r\n    this._jsGlobal.KeymanWeb = this;\r\n    this._jsGlobal.keyman = this.keymanGlobal;\r\n  }\r\n\r\n  public uninstall() {\r\n    if(this._jsGlobal.KeymanWeb == this) {\r\n      delete this._jsGlobal.KeymanWeb;\r\n    }\r\n\r\n    if(this._jsGlobal.keyman == this.keymanGlobal) {\r\n      delete this._jsGlobal.keyman;\r\n    }\r\n  }\r\n}\r\n\r\n",
    "import Keyboard from \"./keyboard.js\";\r\nimport { KeyboardHarness } from \"./keyboardHarness.js\";\r\nimport KeyboardProperties from \"./keyboardProperties.js\";\r\n\r\ntype KeyboardStub = KeyboardProperties & { filename: string };\r\n\r\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\r\n *\r\n * While TS doesn't yet recognize it as a property of error, recent versions of JS define it.\r\n * So, we should obviously conform to that spec, even if older versions of JS won't expect it\r\n * to exist.\r\n */\r\ntype ErrorWithCause = Error & { cause?: Error };\r\n\r\nexport interface KeyboardLoadErrorBuilder {\r\n  scriptError(err?: Error);\r\n  missingError(err: Error);\r\n}\r\n\r\nexport class KeyboardScriptError extends Error {\r\n  public readonly cause;\r\n\r\n  constructor(msg: string, cause?: Error) {\r\n    super(msg);\r\n    this.cause = cause;\r\n  }\r\n}\r\n\r\nexport class KeyboardMissingError extends Error {\r\n  public readonly cause;\r\n\r\n  constructor(msg: string, cause?: Error) {\r\n    super(msg);\r\n    this.cause = cause;\r\n  }\r\n}\r\n\r\nclass UriBasedErrorBuilder implements KeyboardLoadErrorBuilder {\r\n  readonly uri: string;\r\n\r\n  constructor(uri: string) {\r\n    this.uri = uri;\r\n  }\r\n\r\n  missingError(err: Error) {\r\n    const msg = `Cannot find the keyboard at ${this.uri}.`;\r\n    return new KeyboardMissingError(msg, err);\r\n  }\r\n\r\n  scriptError(err: Error) {\r\n    const msg = `Error registering the keyboard script at ${this.uri}; it may contain an error.`;\r\n    return new KeyboardScriptError(msg, err);\r\n  }\r\n}\r\n\r\nclass StubBasedErrorBuilder implements KeyboardLoadErrorBuilder {\r\n  readonly stub: KeyboardStub;\r\n\r\n  constructor(stub: KeyboardStub) {\r\n    this.stub = stub;\r\n  }\r\n\r\n  missingError(err: Error) {\r\n    const stub = this.stub;\r\n    const msg = `Cannot find the ${stub.name} keyboard for ${stub.langName} at ${stub.filename}.`;\r\n    return new KeyboardMissingError(msg, err);\r\n  }\r\n\r\n  scriptError(err: Error) {\r\n    const stub = this.stub;\r\n    const msg = `Error registering the ${stub.name} keyboard for ${stub.langName}; keyboard script at ${stub.filename} may contain an error.`;\r\n    return new KeyboardScriptError(msg, err);\r\n  }\r\n}\r\n\r\nexport default abstract class KeyboardLoaderBase {\r\n  private _harness: KeyboardHarness;\r\n\r\n  public get harness(): KeyboardHarness {\r\n    return this._harness;\r\n  }\r\n\r\n  constructor(harness: KeyboardHarness) {\r\n    this._harness = harness;\r\n  }\r\n\r\n  public loadKeyboardFromPath(uri: string): Promise<Keyboard> {\r\n    this.harness.install();\r\n    const promise = this.loadKeyboardInternal(uri, new UriBasedErrorBuilder(uri));\r\n\r\n    return promise;\r\n  }\r\n\r\n  public loadKeyboardFromStub(stub: KeyboardStub) {\r\n    this.harness.install();\r\n    let promise = this.loadKeyboardInternal(stub.filename, new StubBasedErrorBuilder(stub), stub.id);\r\n\r\n    return promise;\r\n  }\r\n\r\n  protected abstract loadKeyboardInternal(\r\n    uri: string,\r\n    errorBuilder: KeyboardLoadErrorBuilder,\r\n    id?: string\r\n  ): Promise<Keyboard>;\r\n}",
    "// Compiles completely out if `const enum`, making it unavailable in JS-based unit tests.\r\nenum SpacebarText {\r\n  KEYBOARD = 'keyboard',\r\n  LANGUAGE = 'language',\r\n  LANGUAGE_KEYBOARD = 'languageKeyboard',\r\n  BLANK = 'blank'\r\n};\r\n\r\nexport default SpacebarText;",
    "import SpacebarText from './spacebarText.js';\r\n\r\nexport interface InternalKeyboardFont {\r\n  family: string;\r\n  filename?: never;\r\n  files: string | string[];  // internal\r\n  source?: never;\r\n  path: string;\r\n}\r\n\r\ninterface CloudKeyboardFont1 {\r\n  family: string;\r\n  filename: string | string[];\r\n  files?: never;\r\n  source?: never;\r\n}\r\n\r\ninterface CloudKeyboardFont2 {\r\n  family: string;\r\n  filename?: never;\r\n  files?: never;\r\n  source: string | string[];\r\n}\r\n\r\nexport type CloudKeyboardFont = CloudKeyboardFont1 | CloudKeyboardFont2;\r\n\r\n/**\r\n * Converts one of three public-facing font-specification formats into a consistent structure\r\n * used generally among the Keyman JS/TS modules.\r\n * @param fontObj\r\n * @param fontPath\r\n * @returns\r\n */\r\nexport function internalizeFont(fontObj: CloudKeyboardFont, fontPath: string): InternalKeyboardFont {\r\n  if(!fontObj) {\r\n    return undefined;\r\n  } else {\r\n    return {\r\n      family: fontObj.family,\r\n      path: fontPath,\r\n      files: fontObj.filename || fontObj.source\r\n    }\r\n  }\r\n}\r\n\r\nexport type KeyboardFont = CloudKeyboardFont | InternalKeyboardFont;\r\n\r\n// Filename properties are deliberately omitted here; we can add that at higher-levels where it matters\r\n// via 'mix-in'.\r\n//\r\n// For example, the OSK module doesn't care about the filename of a loaded keyboard.  It doesn't do\r\n// keyboard loading on its own whatsoever.\r\n\r\n// Corresponds to Keyman Engine for Web's internal \"keyboard stub\" format.\r\n// Also referred to by KMW 2.0-era loaders:  https://help.keyman.com/developer/8.0/docs/reference_kmw20_example\r\nexport interface KeyboardInternalPropertySpec {\r\n  KI: string,\r\n  KFont: InternalKeyboardFont,\r\n  KOskFont: InternalKeyboardFont,\r\n  displayName?: string,\r\n  KN?: string,\r\n  KL?: string,\r\n  KLC?: string\r\n};\r\n\r\nexport type LanguageAPIPropertySpec = {\r\n  id: string,\r\n  name: string,\r\n  font: CloudKeyboardFont,\r\n  oskFont: CloudKeyboardFont,\r\n  region?: number|string\r\n}\r\n\r\n/**\r\n * Corresponds to the documented API for the Web engine's `addKeyboards` function\r\n * when a single language object is specified - not an array.\r\n *\r\n * See https://help.keyman.com/DEVELOPER/ENGINE/WEB/15.0/reference/core/addKeyboards,\r\n * \"Using an `object`\".\r\n */\r\nexport type KeyboardAPIPropertySpec = {\r\n  id: string,\r\n  name: string,\r\n\r\n  /**\r\n   * @deprecated Replaced with `languages`.\r\n   */\r\n  language?: LanguageAPIPropertySpec;\r\n  languages: LanguageAPIPropertySpec;\r\n}\r\n\r\n/**\r\n * Corresponds to the documented API for the Web engine's `addKeyboards` function\r\n * when a language array is specified for the object.\r\n *\r\n * See https://help.keyman.com/DEVELOPER/ENGINE/WEB/15.0/reference/core/addKeyboards,\r\n * \"Using an `object`\".\r\n */\r\nexport type KeyboardAPIPropertyMultilangSpec = {\r\n  id: string,\r\n  name: string,\r\n\r\n  /**\r\n   * @deprecated Replaced with `languages`.\r\n   */\r\n  language?: LanguageAPIPropertySpec[];\r\n  languages: LanguageAPIPropertySpec[];\r\n}\r\n\r\nexport type MetadataObj = KeyboardInternalPropertySpec | KeyboardAPIPropertySpec | KeyboardAPIPropertyMultilangSpec;\r\n\r\nexport default class KeyboardProperties implements KeyboardInternalPropertySpec {\r\n  KI: string;\r\n  KN: string;\r\n  KL: string;\r\n  KLC: string;\r\n  KFont: InternalKeyboardFont;\r\n  KOskFont: InternalKeyboardFont;\r\n  _displayName?: string;\r\n\r\n  private static spacebarTextModeSrc: SpacebarText | (() => SpacebarText) = SpacebarText.KEYBOARD;\r\n\r\n  public static get spacebarTextMode(): SpacebarText {\r\n    if(typeof this.spacebarTextModeSrc == 'string') {\r\n      return this.spacebarTextModeSrc;\r\n    } else {\r\n      return this.spacebarTextModeSrc();\r\n    }\r\n  }\r\n\r\n  public static set spacebarTextMode(source: typeof KeyboardProperties.spacebarTextModeSrc) {\r\n    this.spacebarTextModeSrc = source;\r\n  }\r\n\r\n  public constructor(metadataObj: MetadataObj, fontPath?: string);\r\n  public constructor(keyboardId: string, languageCode: string);\r\n  public constructor(arg1: MetadataObj | string, arg2?: string) {\r\n    if(!(typeof arg1 == 'string')) {\r\n      if(arg1['KI'] || arg1['KL'] || arg1['KLC'] || arg1['KFont'] || arg1['KOskFont']) {\r\n        const other = arg1 as KeyboardInternalPropertySpec;\r\n        this.KI = other.KI;\r\n        this.KN = other.KN;\r\n        this.KL = other.KL;\r\n        this.KLC = other.KLC;\r\n        // Do NOT apply fontPath here; the mobile apps will have font issues if you do!\r\n        this.KFont = other.KFont;\r\n        this.KOskFont = other.KOskFont;\r\n        this._displayName = (other instanceof KeyboardProperties) ? other._displayName : other.displayName;\r\n      } else {\r\n        let apiStub = arg1 as KeyboardAPIPropertySpec; // TODO:  could be an array, as currently specified.  :(\r\n\r\n        apiStub.languages ||= apiStub.language;\r\n\r\n        this.KI = apiStub.id,\r\n        this.KN = apiStub.name,\r\n        this.KL = apiStub.languages.name,\r\n        this.KLC = apiStub.languages.id,\r\n        this.KFont = internalizeFont(apiStub.languages.font, arg2),\r\n        this.KOskFont = internalizeFont(apiStub.languages.oskFont, arg2)\r\n      }\r\n    } else {\r\n      this.KI = arg1;\r\n      this.KLC = arg2;\r\n    }\r\n  }\r\n\r\n  public static fromMultilanguageAPIStub(apiStub: KeyboardAPIPropertyMultilangSpec): KeyboardProperties[] {\r\n    let stubs: KeyboardProperties[] = [];\r\n\r\n    apiStub.languages ||= apiStub.language;\r\n\r\n    for(let langSpec of apiStub.languages) {\r\n      let stub: KeyboardAPIPropertySpec = {\r\n        id: apiStub.id,\r\n        name: apiStub.name,\r\n        languages: langSpec\r\n      };\r\n\r\n      stubs.push(new KeyboardProperties(stub));\r\n    }\r\n\r\n    return stubs;\r\n  }\r\n\r\n  public get id(): string {\r\n    return this.KI;\r\n  }\r\n\r\n  public get name(): string {\r\n    return this.KN;\r\n  }\r\n\r\n  public get langId(): string {\r\n    return this.KLC;\r\n  }\r\n\r\n  public get langName(): string {\r\n    return this.KL;\r\n  }\r\n\r\n  public get displayName(): string {\r\n    if(this._displayName) {\r\n      return this._displayName;\r\n    }\r\n\r\n    // else, construct it.\r\n    const kbdName = this.KN;\r\n    const lgName = this.KL;\r\n\r\n    switch (KeyboardProperties.spacebarTextMode) {\r\n      case SpacebarText.KEYBOARD:\r\n        return kbdName;\r\n      case SpacebarText.LANGUAGE:\r\n        return lgName;\r\n      case SpacebarText.LANGUAGE_KEYBOARD:\r\n        return (kbdName == lgName) ? lgName : lgName + ' - ' + kbdName;\r\n      case SpacebarText.BLANK:\r\n        return '';\r\n      default:\r\n        return kbdName;\r\n    }\r\n  }\r\n\r\n  public set displayName(name: string) {\r\n    this._displayName = name;\r\n  }\r\n\r\n  public get textFont() {\r\n    return this.KFont;\r\n  }\r\n\r\n  public get oskFont() {\r\n    return this.KOskFont;\r\n  }\r\n\r\n  /**\r\n   * Generates an error for objects with specification levels insufficient for use in the on-screen-keyboard\r\n   * module, complete with a message about one or more details in need of correction.\r\n   * @returns A preconstructed `Error` instance that may be thrown by the caller.\r\n   */\r\n  public validateForOSK(): Error {\r\n    if(!this.KLC) {\r\n      if(this.KI || this.KN) {\r\n        return new Error(`No language code was specified for use with the ${this.KI || this.KN} keyboard`);\r\n      } else {\r\n        return new Error(\"No language code was specified for use with the corresponding keyboard\")\r\n      }\r\n    }\r\n\r\n    if(this.displayName === undefined || (KeyboardProperties.spacebarTextMode != SpacebarText.BLANK && !this.displayName)) {\r\n      return new Error(\"A display name is missing for this keyboard and cannot be generated under current settings.\")\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public validateForCustomKeyboard(): Error {\r\n    if(!this.KI || !this.KN || !this.KL || !this.KLC) {\r\n      return new Error(\"To use a custom keyboard, you must specify keyboard id, keyboard name, language and language code.\");\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}",
    "// Defines the base Deadkey-tracking object.\r\nexport class Deadkey {\r\n  p: number;  // Position of deadkey\r\n  d: number;  // Numerical id of the deadkey\r\n  o: number;  // Ordinal value of the deadkey (resolves same-place conflicts)\r\n  matched: number;\r\n\r\n  static ordinalSeed: number = 0;\r\n\r\n  constructor(pos: number, id: number) {\r\n    this.p = pos;\r\n    this.d = id;\r\n    this.o = Deadkey.ordinalSeed++;\r\n  }\r\n\r\n  match(p: number, d: number): boolean {\r\n    var result:boolean = (this.p == p && this.d == d);\r\n\r\n    return result;\r\n  }\r\n\r\n  set(): void {\r\n    this.matched = 1;\r\n  }\r\n\r\n  reset(): void {\r\n    this.matched = 0;\r\n  }\r\n\r\n  before(other: Deadkey): boolean {\r\n    return this.o < other.o;\r\n  }\r\n\r\n  clone(): Deadkey {\r\n    let dk = new Deadkey(this.p, this.d);\r\n    dk.o = this.o;\r\n\r\n    return dk;\r\n  }\r\n\r\n  /**\r\n   * Sorts the deadkeys in reverse order.\r\n   */\r\n  static sortFunc = function(a: Deadkey, b: Deadkey) {\r\n    // We want descending order, so we want 'later' deadkeys first.\r\n    if(a.p != b.p) {\r\n      return b.p - a.p;\r\n    } else {\r\n      return b.o - a.o;\r\n    }\r\n  };\r\n}\r\n\r\n// Object-orients deadkey management.\r\nexport class DeadkeyTracker {\r\n  dks: Deadkey[] = [];\r\n\r\n  toSortedArray(): Deadkey[] {\r\n    this.dks = this.dks.sort(Deadkey.sortFunc);\r\n    return [].concat(this.dks);\r\n  }\r\n\r\n  clone(): DeadkeyTracker {\r\n    let dkt = new DeadkeyTracker();\r\n    let dks = this.toSortedArray();\r\n\r\n    // Make sure to clone the deadkeys themselves - the Deadkey object is mutable.\r\n    dkt.dks = [];\r\n    dks.forEach(function(value: Deadkey) {\r\n      dkt.dks.push(value.clone());\r\n    });\r\n\r\n    return dkt;\r\n  }\r\n\r\n  /**\r\n   * Function     isMatch\r\n   * Scope        Public\r\n   * @param       {number}      caretPos  current cursor position\r\n   * @param       {number}      n         expected offset of deadkey from cursor\r\n   * @param       {number}      d         deadkey\r\n   * @return      {boolean}               True if deadkey found selected context matches val\r\n   * Description  Match deadkey at current cursor position\r\n   */\r\n  isMatch(caretPos: number, n: number, d: number): boolean {\r\n    if(this.dks.length == 0) {\r\n      return false; // I3318\r\n    }\r\n\r\n    var sp=caretPos;\r\n    n = sp - n;\r\n    for(var i = 0; i < this.dks.length; i++) {\r\n      // Don't re-match an already-matched deadkey.  It's possible to have two identical\r\n      // entries, and they should be kept separately.\r\n      if(this.dks[i].match(n, d) && !this.dks[i].matched) {\r\n        this.dks[i].set();\r\n        // Assumption:  since we match the first possible entry in the array, we\r\n        // match the entry with the lower ordinal - the 'first' deadkey in the position.\r\n        return true; // I3318\r\n      }\r\n    }\r\n\r\n    this.resetMatched(); // I3318\r\n\r\n    return false;\r\n  }\r\n\r\n  add(dk: Deadkey) {\r\n    this.dks = this.dks.concat(dk);\r\n  }\r\n\r\n  remove(dk: Deadkey) {\r\n    var index = this.dks.indexOf(dk);\r\n    this.dks.splice(index, 1);\r\n  }\r\n\r\n  clear() {\r\n    this.dks = [];\r\n  }\r\n\r\n  resetMatched() {\r\n    for(let dk of this.dks) {\r\n      dk.reset();\r\n    }\r\n  }\r\n\r\n  deleteMatched(): void {\r\n    for(var Li = 0; Li < this.dks.length; Li++) {\r\n      if(this.dks[Li].matched) {\r\n        this.dks.splice(Li--, 1); // Don't forget to decrement!\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     adjustPositions (formerly _DeadkeyAdjustPos)\r\n   * Scope        Private\r\n   * @param       {number}      Lstart      start position in context\r\n   * @param       {number}      Ldelta      characters to adjust by\r\n   * Description  Adjust saved positions of deadkeys in context\r\n   */\r\n  adjustPositions(Lstart: number, Ldelta: number): void {\r\n    if(Ldelta == 0) {\r\n      return;\r\n    }\r\n\r\n    for(let dk of this.dks) {\r\n      if(dk.p > Lstart) {\r\n        dk.p += Ldelta;\r\n      }\r\n    }\r\n  }\r\n\r\n  count(): number {\r\n    return this.dks.length;\r\n  }\r\n}",
    "import type KeyboardInterface from \"./kbdInterface.js\";\r\nimport { SystemStoreIDs } from \"./kbdInterface.js\";\r\n\r\n/**\r\n * Defines common behaviors associated with system stores.\r\n */\r\nexport abstract class SystemStore {\r\n  public readonly id: number;\r\n\r\n  constructor(id: number) {\r\n    this.id = id;\r\n  }\r\n\r\n  abstract matches(value: string): boolean;\r\n\r\n  set(value: string): void {\r\n    throw new Error(\"System store with ID \" + this.id + \" may not be directly set.\");\r\n  }\r\n}\r\n\r\n/**\r\n * A handler designed to receive feedback whenever a system store's value is changed.\r\n * @param source    The system store being mutated, before the value change occurs.\r\n * @param newValue  The new value being set\r\n * @returns         `false` / `undefined` to allow the change, `true` to block the change.\r\n */\r\nexport type SystemStoreMutationHandler = (source: MutableSystemStore, newValue: string) => boolean;\r\n\r\nexport class MutableSystemStore extends SystemStore {\r\n  private _value: string;\r\n  handler?: SystemStoreMutationHandler = null;\r\n\r\n  constructor(id: number, defaultValue: string) {\r\n    super(id);\r\n    this._value = defaultValue;\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  matches(value: string) {\r\n    return this._value == value;\r\n  }\r\n\r\n  set(value: string) {\r\n    // Even if things stay the same, we should still signal this.\r\n    // It's important for tracking if a rule directly set the layer\r\n    // versus if it passively remained.\r\n    if(this.handler) {\r\n      if(this.handler(this, value)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    this._value = value;\r\n  }\r\n}\r\n\r\n/**\r\n * Handles checks against the current platform.\r\n */\r\nexport class PlatformSystemStore extends SystemStore {\r\n  private readonly kbdInterface: KeyboardInterface;\r\n\r\n  constructor(keyboardInterface: KeyboardInterface) {\r\n    super(SystemStoreIDs.TSS_PLATFORM);\r\n\r\n    this.kbdInterface = keyboardInterface;\r\n  }\r\n\r\n  matches(value: string) {\r\n    var i,constraint,constraints=value.split(' ');\r\n    let device = this.kbdInterface.activeDevice;\r\n\r\n    for(i=0; i<constraints.length; i++) {\r\n      constraint=constraints[i].toLowerCase();\r\n      switch(constraint) {\r\n        case 'touch':\r\n        case 'hardware':\r\n          if(device.touchable != (constraint == 'touch')) {\r\n            return false;\r\n          }\r\n          break;\r\n\r\n        case 'macos':\r\n        case 'mac':\r\n          constraint = 'macosx';\r\n          // fall through\r\n        case 'macosx':\r\n        case 'windows':\r\n        case 'android':\r\n        case 'ios':\r\n        case 'linux':\r\n          if(device.OS != constraint) {\r\n            return false;\r\n          }\r\n          break;\r\n\r\n        case 'tablet':\r\n        case 'phone':\r\n        case 'desktop':\r\n          if(device.formFactor != constraint) {\r\n            return false;\r\n          }\r\n          break;\r\n\r\n        case 'web':\r\n          if(device.browser == 'native') {\r\n            return false; // web matches anything other than 'native'\r\n          }\r\n          break;\r\n\r\n        case 'native':\r\n          // This will return true for embedded KeymanWeb\r\n        case 'chrome':\r\n        case 'firefox':\r\n        case 'safari':\r\n        case 'edge':\r\n        case 'opera':\r\n          if(device.browser != constraint) {\r\n            return false;\r\n          }\r\n          break;\r\n\r\n        default:\r\n          return false;\r\n      }\r\n    }\r\n\r\n    // Everything we checked against was valid and had matches - it's a match!\r\n    return true;\r\n  }\r\n}",
    "///<reference types=\"@keymanapp/models-types\" />\r\n\r\nimport { extendString } from \"@keymanapp/web-utils\";\r\n\r\nextendString();\r\n\r\n// Defines deadkey management in a manner attachable to each element interface.\r\nimport type KeyEvent from \"./keyEvent.js\";\r\nimport { Deadkey, DeadkeyTracker } from \"./deadkeys.js\";\r\n\r\n// Also relies on string-extensions provided by the web-utils package.\r\n\r\nexport function isEmptyTransform(transform: Transform) {\r\n  if(!transform) {\r\n    return false;\r\n  }\r\n  return transform.insert === '' && transform.deleteLeft === 0 && (transform.deleteRight ?? 0) === 0;\r\n}\r\n\r\nexport class TextTransform implements Transform {\r\n  readonly insert: string;\r\n  readonly deleteLeft: number;\r\n  readonly deleteRight?: number;\r\n\r\n  constructor(insert: string, deleteLeft: number, deleteRight?: number) {\r\n    this.insert = insert;\r\n    this.deleteLeft = deleteLeft;\r\n    this.deleteRight = deleteRight || 0;\r\n  }\r\n\r\n  public static readonly nil = new TextTransform('', 0, 0);\r\n}\r\n\r\nexport class Transcription {\r\n  readonly token: number;\r\n  readonly keystroke: KeyEvent;\r\n  readonly transform: Transform;\r\n  alternates: Alternate[]; // constructed after the rest of the transcription.\r\n  readonly preInput: Mock;\r\n\r\n  private static tokenSeed: number = 0;\r\n\r\n  constructor(keystroke: KeyEvent, transform: Transform, preInput: Mock, alternates?: Alternate[]/*, removedDks: Deadkey[], insertedDks: Deadkey[]*/) {\r\n    let token = this.token = Transcription.tokenSeed++;\r\n\r\n    this.keystroke = keystroke;\r\n    this.transform = transform;\r\n    this.alternates = alternates;\r\n    this.preInput = preInput;\r\n\r\n    this.transform.id = this.token;\r\n\r\n    // Assign the ID to each alternate, as well.\r\n    if(alternates) {\r\n      alternates.forEach(function(alt) {\r\n        alt.sample.id = token;\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport type Alternate = ProbabilityMass<Transform>;\r\n\r\nexport default abstract class OutputTarget {\r\n  private _dks: DeadkeyTracker;\r\n\r\n  constructor() {\r\n    this._dks = new DeadkeyTracker();\r\n  }\r\n\r\n  /**\r\n   * Signifies that this OutputTarget has no default key processing behaviors.  This should be false\r\n   * for OutputTargets backed by web elements like HTMLInputElement or HTMLTextAreaElement.\r\n   */\r\n  get isSynthetic(): boolean {\r\n    return true;\r\n  }\r\n\r\n  resetContext(): void {\r\n    this.deadkeys().clear();\r\n  }\r\n\r\n  deadkeys(): DeadkeyTracker {\r\n    return this._dks;\r\n  }\r\n\r\n  hasDeadkeyMatch(n: number, d: number): boolean {\r\n    return this.deadkeys().isMatch(this.getDeadkeyCaret(), n, d);\r\n  }\r\n\r\n  insertDeadkeyBeforeCaret(d: number) {\r\n    var dk: Deadkey = new Deadkey(this.getDeadkeyCaret(), d);\r\n    this.deadkeys().add(dk);\r\n  }\r\n\r\n  /**\r\n   * Should be called by each output target immediately before text mutation operations occur.\r\n   *\r\n   * Maintains solutions to old issues:  I3318,I3319\r\n   * @param {number} delta  Use negative values if characters were deleted, positive if characters were added.\r\n   */\r\n  protected adjustDeadkeys(delta: number) {\r\n    this.deadkeys().adjustPositions(this.getDeadkeyCaret(), delta);\r\n  }\r\n\r\n  /**\r\n   * Needed to properly clone deadkeys for use with Mock element interfaces toward predictive text purposes.\r\n   * @param {object}  dks   An existing set of deadkeys to deep-copy for use by this element interface.\r\n   */\r\n  protected setDeadkeys(dks: DeadkeyTracker) {\r\n    this._dks = dks.clone();\r\n  }\r\n\r\n  /**\r\n   * Determines the basic operations needed to reconstruct the current OutputTarget's text from the prior state specified\r\n   * by another OutputTarget based on their text and caret positions.\r\n   *\r\n   * This is designed for use as a \"before and after\" comparison to determine the effect of a single keyboard rule at a time.\r\n   * As such, it assumes that the caret is immediately after any inserted text.\r\n   * @param from An output target (preferably a Mock) representing the prior state of the input/output system.\r\n   */\r\n  buildTransformFrom(original: OutputTarget): Transform {\r\n    let to = this.getText();\r\n    let from = original.getText();\r\n\r\n    let fromCaret = original.getDeadkeyCaret();\r\n    let toCaret = this.getDeadkeyCaret();\r\n\r\n    // Step 1:  Determine the number of left-deletions.\r\n    let maxSMPLeftMatch = fromCaret < toCaret ? fromCaret : toCaret;\r\n\r\n    // We need the corresponding non-SMP caret location in order to binary-search efficiently.\r\n    // (Examining code units is much more computationally efficient.)\r\n    let maxLeftMatch = to._kmwCodePointToCodeUnit(maxSMPLeftMatch);\r\n\r\n    // 1.1:  use a non-SMP-aware binary search to determine the divergence point.\r\n    let start = 0;\r\n    let end = maxLeftMatch;  // the index AFTER the last possible matching char.\r\n\r\n    // This search is O(maxLeftMatch).  1/2 + 1/4 + 1/8 + ... converges to = 1.\r\n    while(start < end) {\r\n      let mid = Math.floor((end+start+1) / 2); // round up (compare more)\r\n      let fromLeft = from.substr(start, mid-start);\r\n      let toLeft   = to.substr(start, mid-start);\r\n\r\n      if(fromLeft == toLeft) {\r\n        start = mid;\r\n      } else {\r\n        end = mid - 1;\r\n      }\r\n    }\r\n\r\n    // At the loop's end:  `end` now holds the non-SMP-aware divergence point.\r\n    // The 'caret' is after the last matching code unit.\r\n\r\n    // 1.2:  detect a possible surrogate-pair split scenario, correcting for it\r\n    //       (by moving the split before the high-surrogate) if detected.\r\n\r\n    // If the split location is precisely on either end of the context, we can't\r\n    // have split a surrogate pair.\r\n    if(end > 0 && end < maxLeftMatch) {\r\n      let potentialHigh    = from.charCodeAt(end-1);\r\n      let potentialFromLow = from.charCodeAt(end);\r\n      let potentialToLow   = to.charCodeAt(end);\r\n\r\n      // if potentialHigh is a possible high surrogate...\r\n      if(potentialHigh >= 0xD800 && potentialHigh <= 0xDBFF) {\r\n        // and at least one potential 'low' is a possible low surrogate...\r\n        let flag = potentialFromLow >= 0xDC00 && potentialFromLow <= 0xDFFF;\r\n        flag = flag || (potentialToLow >= 0XDC00 && potentialToLow <= 0xDFFF);\r\n\r\n        // Correct the split location, moving it 'before' the high surrogate.\r\n        if(flag) {\r\n          end = end - 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // 1.3:  take substring from start to the split point; determine SMP-aware length.\r\n    //       This yields the SMP-aware divergence index, which gives the number of left-deletes.\r\n    let newCaret = from._kmwCodeUnitToCodePoint(end);\r\n    let deletedLeft = fromCaret - newCaret;\r\n\r\n    // Step 2:  Determine the other properties.\r\n    // Since the 'after' OutputTarget's caret indicates the end of any inserted text, we\r\n    // can easily calculate the rest.\r\n    let insertedLength = toCaret - newCaret;\r\n    let delta = to._kmwSubstr(newCaret, insertedLength);\r\n\r\n    let undeletedRight = to._kmwLength() - toCaret;\r\n    let originalRight = from._kmwLength() - fromCaret;\r\n    let deletedRight = originalRight - undeletedRight;\r\n\r\n    // May occur when reverting a suggestion that had been applied mid-word.\r\n    if(deletedRight < 0) {\r\n      // Restores deleteRight characters.\r\n      delta = delta + to._kmwSubstr(toCaret, -deletedRight);\r\n      deletedRight = 0;\r\n    }\r\n\r\n    return new TextTransform(delta, deletedLeft, deletedRight);\r\n  }\r\n\r\n  buildTranscriptionFrom(original: OutputTarget, keyEvent: KeyEvent, readonly: boolean, alternates?: Alternate[]): Transcription {\r\n    let transform = this.buildTransformFrom(original);\r\n\r\n    // If we ever decide to re-add deadkey tracking, this is the place for it.\r\n\r\n    return new Transcription(keyEvent, transform, Mock.from(original, readonly), alternates);\r\n  }\r\n\r\n  /**\r\n   * Restores the `OutputTarget` to the indicated state.  Designed for use with `Transcription.preInput`.\r\n   * @param original An `OutputTarget` (usually a `Mock`).\r\n   */\r\n  restoreTo(original: OutputTarget) {\r\n    //\r\n    this.setTextBeforeCaret(original.getTextBeforeCaret());\r\n    this.setTextAfterCaret(original.getTextAfterCaret());\r\n\r\n    // Also, restore the deadkeys!\r\n    this._dks = original._dks.clone();\r\n  }\r\n\r\n  apply(transform: Transform) {\r\n    if(transform.deleteRight) {\r\n      this.setTextAfterCaret(this.getTextAfterCaret()._kmwSubstr(transform.deleteRight));\r\n    }\r\n\r\n    if(transform.deleteLeft) {\r\n      this.deleteCharsBeforeCaret(transform.deleteLeft);\r\n    }\r\n\r\n    if(transform.insert) {\r\n      this.insertTextBeforeCaret(transform.insert);\r\n    }\r\n\r\n    // We assume that all deadkeys are invalidated after applying a Transform, since\r\n    // prediction implies we'll be completing a word, post-deadkeys.\r\n    this._dks.clear();\r\n  }\r\n\r\n  /**\r\n   * Helper to `restoreTo` - allows directly setting the 'before' context to that of another\r\n   * `OutputTarget`.\r\n   * @param s\r\n   */\r\n  protected setTextBeforeCaret(s: string): void {\r\n    // This one's easy enough to provide a default implementation for.\r\n    this.deleteCharsBeforeCaret(this.getTextBeforeCaret()._kmwLength());\r\n    this.insertTextBeforeCaret(s);\r\n  }\r\n\r\n  /**\r\n   * Helper to `restoreTo` - allows directly setting the 'after' context to that of another\r\n   * `OutputTarget`.\r\n   * @param s\r\n   */\r\n  protected abstract setTextAfterCaret(s: string): void;\r\n\r\n  /**\r\n   * Clears any selected text within the wrapper's element(s).\r\n   * Silently does nothing if no such text exists.\r\n   */\r\n  abstract clearSelection(): void;\r\n\r\n  /**\r\n   * Clears any cached selection-related state values.\r\n   */\r\n  abstract invalidateSelection(): void;\r\n\r\n  /**\r\n   * Indicates whether or not the underlying element has its own selection (input, textarea)\r\n   * or is part of (or possesses) the DOM's active selection. Don't confuse with isSelectionEmpty().\r\n   *\r\n   * TODO: rename to supportsOwnSelection\r\n   */\r\n  abstract hasSelection(): boolean;\r\n\r\n  /**\r\n   * Returns true if there is no current selection -- that is, the selection range is empty\r\n   */\r\n  abstract isSelectionEmpty(): boolean;\r\n\r\n  /**\r\n   * Returns an index corresponding to the caret's position for use with deadkeys.\r\n   */\r\n  abstract getDeadkeyCaret(): number;\r\n\r\n  /**\r\n   * Relative to the caret, gets the current context within the wrapper's element.\r\n   */\r\n  abstract getTextBeforeCaret(): string;\r\n\r\n  /**\r\n   * Gets the element's-currently selected text.\r\n   */\r\n  abstract getSelectedText(): string;\r\n\r\n  /**\r\n   * Relative to the caret (and/or active selection), gets the element's text after the caret,\r\n   * excluding any actively selected text that would be immediately replaced upon text entry.\r\n   */\r\n  abstract getTextAfterCaret(): string;\r\n\r\n  /**\r\n   * Gets the element's full text, including any text that is actively selected.\r\n   */\r\n  abstract getText(): string;\r\n\r\n  /**\r\n   * Performs context deletions (from the left of the caret) as needed by the KeymanWeb engine and\r\n   * corrects the location of any affected deadkeys.\r\n   *\r\n   * Does not delete deadkeys (b/c KMW 1 & 2 behavior maintenance).\r\n   * @param dn The number of characters to delete.  If negative, context will be left unchanged.\r\n   */\r\n  abstract deleteCharsBeforeCaret(dn: number): void;\r\n\r\n  /**\r\n   * Inserts text immediately before the caret's current position, moving the caret after the\r\n   * newly inserted text in the process along with any affected deadkeys.\r\n   *\r\n   * @param s Text to insert before the caret's current position.\r\n   */\r\n  abstract insertTextBeforeCaret(s: string): void;\r\n\r\n  /**\r\n   * Allows element-specific handling for ENTER key inputs.  Conceptually, this should usually\r\n   * correspond to `insertTextBeforeCaret('\\n'), but actual implementation will vary greatly among\r\n   * elements.\r\n   */\r\n  abstract handleNewlineAtCaret(): void;\r\n\r\n  /**\r\n   * Saves element-specific state properties prone to mutation, enabling restoration after\r\n   * text-output operations.\r\n   */\r\n  saveProperties() {\r\n    // Most element interfaces won't need anything here.\r\n  }\r\n\r\n  /**\r\n   * Restores previously-saved element-specific state properties.  Designed for use after text-output\r\n   * ops to facilitate more-seamless web-dev and user interactions.\r\n   */\r\n  restoreProperties(){\r\n    // Most element interfaces won't need anything here.\r\n  }\r\n\r\n  /**\r\n   * Generates a synthetic event on the underlying element, signalling that its value has changed.\r\n   */\r\n  abstract doInputEvent(): void;\r\n}\r\n\r\n// Due to some interesting requirements on compile ordering in TS,\r\n// this needs to be in the same file as OutputTarget now.\r\nexport class Mock extends OutputTarget {\r\n  text: string;\r\n\r\n  selStart: number;\r\n  selEnd: number;\r\n  selForward: boolean = true;\r\n\r\n  constructor(text?: string, caretPos?: number);\r\n  constructor(text?: string, selStart?: number, selEnd?: number);\r\n  constructor(text?: string, selStart?: number, selEnd?: number) {\r\n    super();\r\n\r\n    this.text = text ? text : \"\";\r\n    var defaultLength = this.text._kmwLength();\r\n\r\n    // Ensures that `caretPos == 0` is handled correctly.\r\n    this.selStart = typeof selStart == \"number\" ? selStart : defaultLength;\r\n\r\n    // If no selection-end is set, selection length is implied to be 0.\r\n    this.selEnd = typeof selEnd == \"number\" ? selEnd : this.selStart;\r\n\r\n    this.selForward = this.selEnd >= this.selStart;\r\n  }\r\n\r\n  // Clones the state of an existing EditableElement, creating a Mock version of its state.\r\n  static from(outputTarget: OutputTarget, readonly?: boolean) {\r\n    let clone: Mock;\r\n\r\n    if(outputTarget instanceof Mock) {\r\n      // Avoids the need to run expensive kmwstring.ts / `_kmwLength()`\r\n      // calculations when deep-copying Mock instances.\r\n      let priorMock = outputTarget as Mock;\r\n      clone = new Mock(priorMock.text, priorMock.selStart, priorMock.selEnd);\r\n    } else {\r\n      const text = outputTarget.getText();\r\n      const textLen = text._kmwLength();\r\n\r\n      // If !hasSelection()\r\n      let selectionStart: number = textLen;\r\n      let selectionEnd: number = 0;\r\n\r\n      if(outputTarget.hasSelection()) {\r\n        let beforeText = outputTarget.getTextBeforeCaret();\r\n        let afterText = outputTarget.getTextAfterCaret();\r\n        selectionStart = beforeText._kmwLength();\r\n        selectionEnd = textLen - afterText._kmwLength();\r\n      }\r\n\r\n      // readonly group or not, the returned Mock remains the same.\r\n      // New-context events should act as if the caret were at the earlier-in-context\r\n      // side of the selection, same as standard keyboard rules.\r\n      clone = new Mock(text, selectionStart, selectionEnd);\r\n    }\r\n\r\n    // Also duplicate deadkey state!  (Needed for fat-finger ops.)\r\n    clone.setDeadkeys(outputTarget.deadkeys());\r\n\r\n    return clone;\r\n  }\r\n\r\n  clearSelection(): void {\r\n    this.text = this.getTextBeforeCaret() + this.getTextAfterCaret();\r\n    this.selEnd = this.selStart;\r\n    this.selForward = true;\r\n  }\r\n\r\n  invalidateSelection(): void {\r\n    return;\r\n  }\r\n\r\n  isSelectionEmpty(): boolean {\r\n    return this.selStart == this.selEnd;\r\n  }\r\n\r\n  hasSelection(): boolean {\r\n    return true;\r\n  }\r\n\r\n  getDeadkeyCaret(): number {\r\n    return this.selStart;\r\n  }\r\n\r\n  setSelection(start: number, end?: number) {\r\n    this.selStart = start;\r\n    this.selEnd = typeof end == 'number' ? end : start;\r\n\r\n    this.selForward = end >= start;\r\n    if(!this.selForward) {\r\n      let temp = this.selStart;\r\n      this.selStart = this.selEnd;\r\n      this.selEnd = temp;\r\n    }\r\n  }\r\n\r\n  getTextBeforeCaret(): string {\r\n    return this.text.kmwSubstr(0, this.selStart);\r\n  }\r\n\r\n  getSelectedText(): string {\r\n    return this.text.kmwSubstr(this.selStart, this.selEnd - this.selStart);\r\n  }\r\n\r\n  getTextAfterCaret(): string {\r\n    return this.text.kmwSubstr(this.selEnd);\r\n  }\r\n\r\n  getText(): string {\r\n    return this.text;\r\n  }\r\n\r\n  deleteCharsBeforeCaret(dn: number): void {\r\n    if(dn >= 0) {\r\n      if(dn > this.selStart) {\r\n        dn = this.selStart;\r\n      }\r\n      this.adjustDeadkeys(-dn);\r\n      this.text = this.text.kmwSubstr(0, this.selStart - dn) + this.text.kmwSubstr(this.selStart);\r\n      this.selStart -= dn;\r\n      this.selEnd -= dn;\r\n    }\r\n  }\r\n\r\n  insertTextBeforeCaret(s: string): void {\r\n    this.adjustDeadkeys(s._kmwLength());\r\n    this.text = this.getTextBeforeCaret() + s + this.text.kmwSubstr(this.selStart);\r\n    this.selStart += s.kmwLength();\r\n    this.selEnd += s.kmwLength();\r\n  }\r\n\r\n  handleNewlineAtCaret(): void {\r\n    this.insertTextBeforeCaret('\\n');\r\n  }\r\n\r\n  protected setTextAfterCaret(s: string): void {\r\n    this.text = this.getTextBeforeCaret() + s;\r\n  }\r\n\r\n  doInputEvent() {\r\n    // Mock isn't backed by an element, so it won't have any event listeners.\r\n  }\r\n}",
    "///<reference types=\"@keymanapp/models-types\" />\r\n\r\nimport KeyboardProcessor from \"./keyboardProcessor.js\";\r\nimport OutputTarget, { Mock, type Transcription } from \"./outputTarget.js\";\r\nimport { VariableStoreDictionary } from \"../keyboards/keyboard.js\";\r\nimport type { VariableStore } from \"./kbdInterface.js\";\r\n\r\n/**\r\n * Represents the commands and state changes that result from a matched keyboard rule.\r\n */\r\nexport default class RuleBehavior {\r\n  /**\r\n   * The before-and-after Transform from matching a keyboard rule.  May be `null`\r\n   * if no keyboard rules were matched for the keystroke.\r\n   */\r\n  transcription: Transcription = null;\r\n\r\n  /**\r\n   * Indicates whether or not a BEEP command was issued by the matched keyboard rule.\r\n   */\r\n  beep?: boolean;\r\n\r\n  /**\r\n   * A set of changed store values triggered by the matched keyboard rule.\r\n   */\r\n  setStore: {[id: number]: string} = {};\r\n\r\n  /**\r\n   * A set of variable stores with save requests triggered by the matched keyboard rule\r\n   */\r\n  saveStore: {[name: string]: VariableStore} = {};\r\n\r\n  /**\r\n   * A set of variable stores with possible changes to be applied during finalization.\r\n   */\r\n    variableStores: VariableStoreDictionary = {};\r\n\r\n  /**\r\n   * Denotes a non-output default behavior; this should be evaluated later, against the true keystroke.\r\n   */\r\n  triggersDefaultCommand: boolean = false;\r\n\r\n  /**\r\n   * Denotes error log messages generated when attempting to generate this behavior.\r\n   */\r\n  errorLog?: string;\r\n\r\n  /**\r\n   * Denotes warning log messages generated when attempting to generate this behavior.\r\n   */\r\n  warningLog?: string;\r\n\r\n  /**\r\n   * If predictive text is active, contains a Promise returning predictive Suggestions.\r\n   */\r\n  predictionPromise?: Promise<Suggestion[]>;\r\n\r\n  /**\r\n   * In reference to https://github.com/keymanapp/keyman/pull/4350#issuecomment-768753852:\r\n   *\r\n   * If the final group processed is a context and keystroke group (using keys),\r\n   * and there is no nomatch rule, and the keystroke is not matched in the group,\r\n   * the keystroke's default behavior should trigger, regardless of whether or not any\r\n   * rules in prior groups matched.\r\n   */\r\n  triggerKeyDefault?: boolean;\r\n\r\n  finalize(processor: KeyboardProcessor, outputTarget: OutputTarget, readonly: boolean) {\r\n    if(!this.transcription) {\r\n      throw \"Cannot finalize a RuleBehavior with no transcription.\";\r\n    }\r\n\r\n    if(processor.beepHandler && this.beep) {\r\n      processor.beepHandler(outputTarget);\r\n    }\r\n\r\n    for(let storeID in this.setStore) {\r\n      let sysStore = processor.keyboardInterface.systemStores[storeID];\r\n      if(sysStore) {\r\n        try {\r\n          sysStore.set(this.setStore[storeID]);\r\n        } catch (error) {\r\n          if(processor.errorLogger) {\r\n            processor.errorLogger(\"Rule attempted to perform illegal operation - 'platform' may not be changed.\");\r\n          }\r\n        }\r\n      } else if(processor.warningLogger) {\r\n        processor.warningLogger(\"Unknown store affected by keyboard rule: \" + storeID);\r\n      }\r\n    }\r\n\r\n    processor.keyboardInterface.applyVariableStores(this.variableStores);\r\n\r\n    if(processor.keyboardInterface.variableStoreSerializer) {\r\n      for(let storeID in this.saveStore) {\r\n        processor.keyboardInterface.variableStoreSerializer.saveStore(processor.activeKeyboard.id, storeID, this.saveStore[storeID]);\r\n      }\r\n    }\r\n\r\n    if(this.triggersDefaultCommand) {\r\n      let keyEvent = this.transcription.keystroke;\r\n      processor.defaultRules.applyCommand(keyEvent, outputTarget);\r\n    }\r\n\r\n    if(processor.warningLogger && this.warningLog) {\r\n      processor.warningLogger(this.warningLog);\r\n    } else if(processor.errorLogger && this.errorLog) {\r\n      processor.errorLogger(this.errorLog);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Merges default-related behaviors from another RuleBehavior into this one.  Assumes that the current instance\r\n   * \"came first\" chronologically.  Both RuleBehaviors must be sourced from the same keystroke.\r\n   *\r\n   * Intended use:  merging rule-based behavior with default key behavior during scenarios like those described\r\n   * at https://github.com/keymanapp/keyman/pull/4350#issuecomment-768753852.\r\n   *\r\n   * This function does not attempt a \"complete\" merge for two fully-constructed RuleBehaviors!  Things\r\n   * WILL break for unintended uses.\r\n   * @param other\r\n   */\r\n  mergeInDefaults(other: RuleBehavior) {\r\n    let keystroke = this.transcription.keystroke;\r\n    let keyFromOther = other.transcription.keystroke;\r\n    if(keystroke.Lcode != keyFromOther.Lcode || keystroke.Lmodifiers != keyFromOther.Lmodifiers) {\r\n      throw \"RuleBehavior default-merge not supported unless keystrokes are identical!\";\r\n    }\r\n\r\n    this.triggersDefaultCommand = this.triggersDefaultCommand || other.triggersDefaultCommand;\r\n\r\n    let mergingMock = Mock.from(this.transcription.preInput, false);\r\n    mergingMock.apply(this.transcription.transform);\r\n    mergingMock.apply(other.transcription.transform);\r\n\r\n    this.transcription = mergingMock.buildTranscriptionFrom(this.transcription.preInput, keystroke, false, this.transcription.alternates);\r\n  }\r\n}",
    "/***\r\n   KeymanWeb 11.0\r\n   Copyright 2019 SIL International\r\n***/\r\n\r\n//#region Imports\r\n\r\nimport { type DeviceSpec } from \"@keymanapp/web-utils\";\r\n\r\nimport Codes from \"./codes.js\";\r\nimport type KeyEvent from \"./keyEvent.js\";\r\nimport type { Deadkey } from \"./deadkeys.js\";\r\nimport KeyMapping from \"./keyMapping.js\";\r\nimport { SystemStore, MutableSystemStore, PlatformSystemStore } from \"./systemStores.js\";\r\nimport type { VariableStoreSerializer } from \"./keyboardProcessor.js\";\r\nimport type OutputTarget from \"./outputTarget.js\";\r\nimport { Mock } from \"./outputTarget.js\";\r\nimport RuleBehavior from \"./ruleBehavior.js\";\r\nimport Keyboard, { VariableStoreDictionary } from \"../keyboards/keyboard.js\";\r\nimport { KeyboardHarness, KeyboardKeymanGlobal } from \"../keyboards/keyboardHarness.js\";\r\n\r\n//#endregion\r\n\r\n//#region Helper type definitions\r\n\r\nexport class KeyInformation {\r\n  vk: boolean;\r\n  code: number;\r\n  modifiers: number;\r\n}\r\n\r\n/*\r\n* Type alias definitions to reflect the parameters of the fullContextMatch() callback (KMW 10+).\r\n* No constructors or methods since keyboards will not utilize the same backing prototype, and\r\n* property names are shorthanded to promote minification.\r\n*/\r\ntype PlainKeyboardStore = string;\r\n\r\nexport type KeyboardStoreElement = (string|StoreNonCharEntry);\r\nexport type ComplexKeyboardStore = KeyboardStoreElement[];\r\n\r\ntype KeyboardStore = PlainKeyboardStore | ComplexKeyboardStore;\r\n\r\nexport type VariableStore = {[name: string]: string};\r\n\r\ntype RuleChar = string;\r\n\r\nclass RuleDeadkey {\r\n  /** Discriminant field - 'd' for Deadkey.\r\n   */\r\n  ['t']: 'd';\r\n\r\n  /**\r\n   * Value:  the deadkey's ID.\r\n   */\r\n  ['d']: number; // For 'd'eadkey; also reflects the Deadkey class's 'd' property.\r\n}\r\n\r\nclass ContextAny {\r\n  /** Discriminant field - 'a' for `any()`.\r\n   */\r\n  ['t']: 'a';\r\n\r\n  /**\r\n   * Value:  the store to search.\r\n   */\r\n  ['a']: KeyboardStore; // For 'a'ny statement.\r\n\r\n  /**\r\n   * If set to true, negates the 'any'.\r\n   */\r\n  ['n']: boolean|0|1;\r\n}\r\n\r\nclass RuleIndex {\r\n  /** Discriminant field - 'i' for `index()`.\r\n   */\r\n  ['t']: 'i';\r\n\r\n  /**\r\n   * Value: the Store from which to output\r\n   */\r\n  ['i']: KeyboardStore;\r\n\r\n  /**\r\n   * Offset: the offset in context for the corresponding `any()`.\r\n   */\r\n  ['o']: number;\r\n}\r\n\r\nclass ContextEx {\r\n  /** Discriminant field - 'c' for `context()`.\r\n   */\r\n  ['t']: 'c';\r\n\r\n  /**\r\n   * Value:  The offset into the current rule's context to be matched.\r\n   */\r\n  ['c']: number; // For 'c'ontext statement.\r\n}\r\n\r\nclass ContextNul {\r\n  /** Discriminant field - 'n' for `nul`\r\n   */\r\n  ['t']: 'n';\r\n}\r\n\r\nclass StoreBeep {\r\n  /** Discriminant field - 'b' for `beep`\r\n   */\r\n  ['t']: 'b';\r\n}\r\n\r\ntype ContextNonCharEntry = RuleDeadkey | ContextAny | RuleIndex | ContextEx | ContextNul;\r\ntype ContextEntry = RuleChar | ContextNonCharEntry;\r\n\r\ntype StoreNonCharEntry = RuleDeadkey | StoreBeep;\r\n\r\n/**\r\n * Cache of context storing and retrieving return values from KC\r\n * Must be reset prior to each keystroke and after any text changes\r\n * MCD 3/1/14\r\n **/\r\nclass CachedContext {\r\n  _cache: string[][];\r\n\r\n  reset(): void {\r\n    this._cache = [];\r\n  }\r\n\r\n  get(n: number, ln: number): string {\r\n    // return null; // uncomment this line to disable context caching\r\n    if(typeof this._cache[n] == 'undefined') {\r\n      return null;\r\n    } else if(typeof this._cache[n][ln] == 'undefined') {\r\n      return null;\r\n    }\r\n    return this._cache[n][ln];\r\n  }\r\n\r\n  set(n: number, ln: number, val: string): void {\r\n    if(typeof this._cache[n] == 'undefined') {\r\n      this._cache[n] = [];\r\n    }\r\n    this._cache[n][ln] = val;\r\n  }\r\n};\r\n\r\ntype CachedExEntry = {valContext: (string|number)[], deadContext: Deadkey[]};\r\n/**\r\n * An extended version of cached context storing designed to work with\r\n * `fullContextMatch` and its helper functions.\r\n */\r\nclass CachedContextEx {\r\n  _cache: CachedExEntry[][];\r\n\r\n  reset(): void {\r\n    this._cache = [];\r\n  }\r\n\r\n  get(n: number, ln: number): CachedExEntry {\r\n    // return null; // uncomment this line to disable context caching\r\n    if(typeof this._cache[n] == 'undefined') {\r\n      return null;\r\n    } else if(typeof this._cache[n][ln] == 'undefined') {\r\n      return null;\r\n    }\r\n    return this._cache[n][ln];\r\n  }\r\n\r\n  set(n: number, ln: number, val: CachedExEntry): void {\r\n    if(typeof this._cache[n] == 'undefined') {\r\n      this._cache[n] = [];\r\n    }\r\n    this._cache[n][ln] = val;\r\n  }\r\n\r\n  clone(): CachedContextEx {\r\n    let r = new CachedContextEx();\r\n    r._cache = this._cache;\r\n    return r;\r\n  }\r\n};\r\n\r\nexport enum SystemStoreIDs {\r\n  TSS_LAYER = 33,\r\n  TSS_PLATFORM = 31,\r\n  TSS_NEWLAYER = 42,\r\n  TSS_OLDLAYER = 43\r\n}\r\n\r\n//#endregion\r\n\r\nexport default class KeyboardInterface extends KeyboardHarness {\r\n  static readonly GLOBAL_NAME = 'KeymanWeb';\r\n\r\n  cachedContext: CachedContext = new CachedContext();\r\n  cachedContextEx: CachedContextEx = new CachedContextEx();\r\n  ruleContextEx: CachedContextEx;\r\n\r\n  activeTargetOutput: OutputTarget;\r\n  ruleBehavior: RuleBehavior;\r\n\r\n  systemStores: {[storeID: number]: SystemStore};\r\n\r\n  _AnyIndices:  number[] = [];    // AnyIndex - array of any/index match indices\r\n\r\n  // Must be accessible to some of the keyboard API methods.\r\n  activeKeyboard: Keyboard;\r\n  activeDevice: DeviceSpec;\r\n\r\n  variableStoreSerializer?: VariableStoreSerializer;\r\n\r\n  // A 'reference point' that debug keyboards may use to access KMW's code constants.\r\n  public get Codes(): typeof Codes {\r\n    return Codes;\r\n  }\r\n\r\n  constructor(_jsGlobal: any, keymanGlobal: KeyboardKeymanGlobal, variableStoreSerializer: VariableStoreSerializer = null) {\r\n    super(_jsGlobal, keymanGlobal);\r\n\r\n    this.systemStores = {};\r\n\r\n    this.systemStores[SystemStoreIDs.TSS_PLATFORM] = new PlatformSystemStore(this);\r\n    this.systemStores[SystemStoreIDs.TSS_LAYER] = new MutableSystemStore(SystemStoreIDs.TSS_LAYER, 'default');\r\n    this.systemStores[SystemStoreIDs.TSS_NEWLAYER] = new MutableSystemStore(SystemStoreIDs.TSS_NEWLAYER, '');\r\n    this.systemStores[SystemStoreIDs.TSS_OLDLAYER] = new MutableSystemStore(SystemStoreIDs.TSS_OLDLAYER, '');\r\n\r\n    this.variableStoreSerializer = variableStoreSerializer;\r\n  }\r\n\r\n  /**\r\n   * Function     KSF\r\n   * Scope        Public\r\n   *\r\n   * Saves the document's current focus settings on behalf of the keyboard.  Often paired with insertText.\r\n   */\r\n  saveFocus(): void { }\r\n\r\n  /**\r\n   * A text-insertion method used by custom OSKs for helpHTML interaction, like with sil_euro_latin.\r\n   *\r\n   * This function currently bypasses web-core's standard text handling control path and all predictive text processing.\r\n   * It also has DOM-dependencies that help ensure KMW's active OutputTarget retains focus during use.\r\n   */\r\n  insertText?: (Ptext: string, PdeadKey: number) => void;\r\n\r\n  /**\r\n   * Function     registerKeyboard  KR\r\n   * Scope        Public\r\n   * @param       {Object}      Pk      Keyboard  object\r\n   * Description  Registers a keyboard with KeymanWeb once its script has fully loaded.\r\n   *\r\n   *              In web-core, this also activates the keyboard; in other modules, this method\r\n   *              may be replaced with other implementations.\r\n   */\r\n  registerKeyboard(Pk): void {\r\n    // NOTE:  This implementation is web-core specific and is intentionally replaced, whole-sale,\r\n    //        by DOM-aware code.\r\n    let keyboard = new Keyboard(Pk);\r\n    this.loadedKeyboard = keyboard;\r\n  }\r\n\r\n  /**\r\n   * Get *cached or uncached* keyboard context for a specified range, relative to caret\r\n   *\r\n   * @param       {number}      n       Number of characters to move back from caret\r\n   * @param       {number}      ln      Number of characters to return\r\n   * @param       {Object}      Pelem   Element to work with (must be currently focused element)\r\n   * @return      {string}              Context string\r\n   *\r\n   * Example     [abcdef|ghi] as INPUT, with the caret position marked by |:\r\n   *             KC(2,1,Pelem) == \"e\"\r\n   *             KC(3,3,Pelem) == \"def\"\r\n   *             KC(10,10,Pelem) == \"abcdef\"  i.e. return as much as possible of the requested string\r\n   */\r\n\r\n  context(n: number, ln: number, outputTarget: OutputTarget): string {\r\n    var v = this.cachedContext.get(n, ln);\r\n    if(v !== null) {\r\n      return v;\r\n    }\r\n\r\n    var r = this.KC_(n, ln, outputTarget);\r\n    this.cachedContext.set(n, ln, r);\r\n    return r;\r\n  }\r\n\r\n  /**\r\n   * Get (uncached) keyboard context for a specified range, relative to caret\r\n   *\r\n   * @param       {number}      n       Number of characters to move back from caret\r\n   * @param       {number}      ln      Number of characters to return\r\n   * @param       {Object}      Pelem   Element to work with (must be currently focused element)\r\n   * @return      {string}              Context string\r\n   *\r\n   * Example     [abcdef|ghi] as INPUT, with the caret position marked by |:\r\n   *             KC(2,1,Pelem) == \"e\"\r\n   *             KC(3,3,Pelem) == \"def\"\r\n   *             KC(10,10,Pelem) == \"XXXXabcdef\"  i.e. return as much as possible of the requested string, where X = \\uFFFE\r\n   */\r\n  private KC_(n: number, ln: number, outputTarget: OutputTarget): string {\r\n    var tempContext = '';\r\n\r\n    // If we have a selection, we have an empty context\r\n    tempContext = outputTarget.isSelectionEmpty() ? outputTarget.getTextBeforeCaret() : \"\";\r\n\r\n    if(tempContext._kmwLength() < n) {\r\n      tempContext = Array(n-tempContext._kmwLength()+1).join(\"\\uFFFE\") + tempContext;\r\n    }\r\n\r\n    return tempContext._kmwSubstr(-n)._kmwSubstr(0,ln);\r\n  }\r\n\r\n  /**\r\n   * Function     nul           KN\r\n   * Scope        Public\r\n   * @param       {number}      n       Length of context to check\r\n   * @param       {Object}      Ptarg   Element to work with (must be currently focused element)\r\n   * @return      {boolean}             True if length of context is less than or equal to n\r\n   * Description  Test length of context, return true if the length of the context is less than or equal to n\r\n   *\r\n   * Example     [abc|def] as INPUT, with the caret position marked by |:\r\n   *             KN(3,Pelem) == TRUE\r\n   *             KN(2,Pelem) == FALSE\r\n   *             KN(4,Pelem) == TRUE\r\n   */\r\n  nul(n: number, outputTarget: OutputTarget): boolean {\r\n    var cx=this.context(n+1, 1, outputTarget);\r\n\r\n    // With #31, the result will be a replacement character if context is empty.\r\n    return cx === \"\\uFFFE\";\r\n  }\r\n\r\n  /**\r\n   * Function     contextMatch  KCM\r\n   * Scope        Public\r\n   * @param       {number}      n       Number of characters to move back from caret\r\n   * @param       {Object}      Ptarg   Focused element\r\n   * @param       {string}      val     String to match\r\n   * @param       {number}      ln      Number of characters to return\r\n   * @return      {boolean}             True if selected context matches val\r\n   * Description  Test keyboard context for match\r\n   */\r\n  contextMatch(n: number, outputTarget: OutputTarget, val: string, ln: number): boolean {\r\n    var cx=this.context(n, ln, outputTarget);\r\n    if(cx === val) {\r\n      return true; // I3318\r\n    }\r\n    outputTarget.deadkeys().resetMatched(); // I3318\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Builds the *cached or uncached* keyboard context for a specified range, relative to caret\r\n   *\r\n   * @param       {number}      n       Number of characters to move back from caret\r\n   * @param       {number}      ln      Number of characters to return\r\n   * @param       {Object}      Pelem   Element to work with (must be currently focused element)\r\n   * @return      {Array}               Context array (of strings and numbers)\r\n   */\r\n  private _BuildExtendedContext(n: number, ln: number, outputTarget: OutputTarget): CachedExEntry {\r\n    var cache: CachedExEntry = this.cachedContextEx.get(n, ln);\r\n    if(cache !== null) {\r\n      return cache;\r\n    } else {\r\n      // By far the easiest way to correctly build what we want is to start from the right and work to what we need.\r\n      // We may have done it for a similar cursor position before.\r\n      cache = this.cachedContextEx.get(n, n);\r\n      if(cache === null) {\r\n        // First, let's make sure we have a cloned, sorted copy of the deadkey array.\r\n        let unmatchedDeadkeys = outputTarget.deadkeys().toSortedArray(); // Is reverse-order sorted for us already.\r\n\r\n        // Time to build from scratch!\r\n        var index = 0;\r\n        cache = { valContext: [], deadContext: []};\r\n        while(cache.valContext.length < n) {\r\n          // As adapted from `deadkeyMatch`.\r\n          var sp = outputTarget.getDeadkeyCaret();\r\n          var deadPos = sp - index;\r\n          if(unmatchedDeadkeys.length > 0 && unmatchedDeadkeys[0].p > deadPos) {\r\n            // We have deadkeys at the right-hand side of the caret!  They don't belong in the context, so pop 'em off.\r\n            unmatchedDeadkeys.splice(0, 1);\r\n            continue;\r\n          } else if(unmatchedDeadkeys.length > 0 && unmatchedDeadkeys[0].p == deadPos) {\r\n            // Take the deadkey.\r\n            cache.deadContext[n-cache.valContext.length-1] = unmatchedDeadkeys[0];\r\n            cache.valContext = ([unmatchedDeadkeys[0].d] as (string|number)[]).concat(cache.valContext);\r\n            unmatchedDeadkeys.splice(0, 1);\r\n          } else {\r\n            // Take the character.  We get \"\\ufffe\" if it doesn't exist.\r\n            var kc = this.context(++index, 1, outputTarget);\r\n            cache.valContext = ([kc] as (string|number)[]).concat(cache.valContext);\r\n          }\r\n        }\r\n        this.cachedContextEx.set(n, n, cache);\r\n      }\r\n\r\n      // Now that we have the cache...\r\n      var subCache = cache;\r\n      subCache.valContext = subCache.valContext.slice(0, ln);\r\n      for(var i=0; i < subCache.valContext.length; i++) {\r\n        if(subCache[i] == '\\ufffe') {\r\n          subCache.valContext.splice(0, 1);\r\n          subCache.deadContext.splice(0, 1);\r\n        }\r\n      }\r\n\r\n      if(subCache.valContext.length == 0) {\r\n        subCache.valContext = ['\\ufffe'];\r\n        subCache.deadContext = [];\r\n      }\r\n\r\n      this.cachedContextEx.set(n, ln, subCache);\r\n\r\n      return subCache;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function       fullContextMatch    KFCM\r\n   * Scope          Private\r\n   * @param         {number}    n       Number of characters to move back from caret\r\n   * @param         {Object}    Ptarg   Focused element\r\n   * @param         {Array}     rule    An array of ContextEntries to match.\r\n   * @return        {boolean}           True if the fully-specified rule context matches the current KMW state.\r\n   *\r\n   * A KMW 10+ function designed to bring KMW closer to Keyman Desktop functionality,\r\n   * near-directly modeling (externally) the compiled form of Desktop rules' context section.\r\n   */\r\n  fullContextMatch(n: number, outputTarget: OutputTarget, rule: ContextEntry[]): boolean {\r\n    // Stage one:  build the context index map.\r\n    var fullContext = this._BuildExtendedContext(n, rule.length, outputTarget);\r\n    this.ruleContextEx = this.cachedContextEx.clone();\r\n    var context = fullContext.valContext;\r\n    var deadContext = fullContext.deadContext;\r\n\r\n    var mismatch = false;\r\n\r\n    // This symbol internally indicates lack of context in a position.  (See KC_)\r\n    const NUL_CONTEXT = \"\\uFFFE\";\r\n\r\n    var assertNever = function(x: never): never {\r\n      // Could be accessed by improperly handwritten calls to `fullContextMatch`.\r\n      throw new Error(\"Unexpected object in fullContextMatch specification: \" + x);\r\n    }\r\n\r\n    // Stage two:  time to match against the rule specified.\r\n    for(var i=0; i < rule.length; i++) {\r\n      if(typeof rule[i] == 'string') {\r\n        var str = rule[i] as string;\r\n        if(str !== context[i]) {\r\n          mismatch = true;\r\n          break;\r\n        }\r\n      } else {\r\n        // TypeScript needs a cast to this intermediate type to do its discriminated union magic.\r\n        var r = rule[i] as ContextNonCharEntry;\r\n        switch(r.t) {\r\n          case 'd':\r\n            // We still need to set a flag here;\r\n            if(r['d'] !== context[i]) {\r\n              mismatch = true;\r\n            } else {\r\n              deadContext[i].set();\r\n            }\r\n            break;\r\n          case 'a':\r\n            var lookup: KeyboardStoreElement;\r\n\r\n            if(typeof context[i] == 'string') {\r\n              lookup = context[i] as string;\r\n            } else {\r\n              lookup = {'t': 'd', 'd': context[i] as number};\r\n            }\r\n\r\n            var result = this.any(i, lookup, r.a);\r\n\r\n            if(!r.n) { // If it's a standard 'any'...\r\n              if(!result) {\r\n                mismatch = true;\r\n              } else if(deadContext[i] !== undefined) {\r\n                // It's a deadkey match, so indicate that.\r\n                deadContext[i].set();\r\n              }\r\n              // 'n' for 'notany'.\r\n              // - if `result === true`, `any` would match:  this should thus fail.\r\n              // - if `context[i] === NUL_CONTEXT`, `notany` should not match.\r\n            } else if(r.n && (result || context[i] === NUL_CONTEXT)) {\r\n              mismatch = true;\r\n            }\r\n            break;\r\n          case 'i':\r\n            // The context will never hold a 'beep.'\r\n            var ch = this._Index(r.i, r.o) as string | RuleDeadkey;\r\n\r\n            if(ch !== undefined && (typeof(ch) == 'string' ? ch : ch.d) !== context[i]) {\r\n              mismatch = true;\r\n            } else if(deadContext[i] !== undefined) {\r\n              deadContext[i].set();\r\n            }\r\n            break;\r\n          case 'c':\r\n            if(context[r.c - 1] !== context[i]) {\r\n              mismatch = true;\r\n            } else if(deadContext[i] !== undefined) {\r\n              deadContext[i].set();\r\n            }\r\n            break;\r\n          case 'n':\r\n            // \\uFFFE is the internal 'no context here sentinel'.\r\n            if(context[i] != NUL_CONTEXT) {\r\n              mismatch = true;\r\n            }\r\n            break;\r\n          default:\r\n            assertNever(r);\r\n        }\r\n      }\r\n    }\r\n\r\n    if(mismatch) {\r\n      // Reset the matched 'any' indices, if any.\r\n      outputTarget.deadkeys().resetMatched();\r\n      this._AnyIndices = [];\r\n    }\r\n\r\n    return !mismatch;\r\n  }\r\n\r\n  /**\r\n   * Function     KIK\r\n   * Scope        Public\r\n   * @param       {Object}  e   keystroke event\r\n   * @return      {boolean}     true if keypress event\r\n   * Description  Test if event as a keypress event\r\n   */\r\n  isKeypress(e: KeyEvent): boolean {\r\n    if(this.activeKeyboard.isMnemonic) {   // I1380 - support KIK for positional layouts\r\n      return !e.LisVirtualKey;             // will now return true for U_xxxx keys, but not for T_xxxx keys\r\n    } else {\r\n      return KeyMapping._USKeyCodeToCharCode(e) ? true : false; // I1380 - support KIK for positional layouts\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Maps a KeyEvent's modifiers to their appropriate value for key-rule evaluation\r\n   * based on the rule's specified target modifier set.\r\n   *\r\n   * Mostly used to correct chiral OSK-keys targeting non-chiral rules.\r\n   * @param e The source KeyEvent\r\n   * @returns\r\n   */\r\n  private static matchModifiersToRuleChirality(eventModifiers: number, targetModifierMask: number): number {\r\n    const CHIRAL_ALT  = Codes.modifierCodes[\"LALT\"]  | Codes.modifierCodes[\"RALT\"];\r\n    const CHIRAL_CTRL = Codes.modifierCodes[\"LCTRL\"] | Codes.modifierCodes[\"RCTRL\"];\r\n\r\n    let modifiers = eventModifiers;\r\n\r\n    // If the target rule does not use chiral alt...\r\n    if(!(targetModifierMask & CHIRAL_ALT)) {\r\n      const altIntersection  = modifiers & CHIRAL_ALT;\r\n\r\n      if(altIntersection) {\r\n        // Undo the chiral part         and replace with non-chiral.\r\n        modifiers ^= altIntersection  | Codes.modifierCodes[\"ALT\"];\r\n      }\r\n    }\r\n\r\n    // If the target rule does not use chiral ctrl...\r\n    if(!(targetModifierMask & CHIRAL_CTRL)) {\r\n      const ctrlIntersection = modifiers & CHIRAL_CTRL;\r\n\r\n      if(ctrlIntersection) {\r\n        // Undo the chiral part         and replace with non-chiral.\r\n        modifiers ^= ctrlIntersection | Codes.modifierCodes[\"CTRL\"];\r\n      }\r\n    }\r\n\r\n    return modifiers;\r\n  }\r\n\r\n  /**\r\n   * Function     keyMatch      KKM\r\n   * Scope        Public\r\n   * @param       {Object}      e           keystroke event\r\n   * @param       {number}      Lruleshift\r\n   * @param       {number}      Lrulekey\r\n   * @return      {boolean}                 True if key matches rule\r\n   * Description  Test keystroke with modifiers against rule\r\n   */\r\n  keyMatch(e: KeyEvent, Lruleshift:number, Lrulekey:number): boolean {\r\n    var retVal = false; // I3318\r\n    var keyCode = (e.Lcode == 173 ? 189 : e.Lcode);  //I3555 (Firefox hyphen issue)\r\n\r\n    let bitmask = this.activeKeyboard.modifierBitmask;\r\n    var modifierBitmask = bitmask & Codes.modifierBitmasks[\"ALL\"];\r\n    var stateBitmask = bitmask & Codes.stateBitmasks[\"ALL\"];\r\n\r\n    const eventModifiers = KeyboardInterface.matchModifiersToRuleChirality(e.Lmodifiers, Lruleshift);\r\n\r\n    if(e.vkCode > 255) {\r\n      keyCode = e.vkCode; // added to support extended (touch-hold) keys for mnemonic layouts\r\n    }\r\n\r\n    if(e.LisVirtualKey || keyCode > 255) {\r\n      if((Lruleshift & 0x4000) == 0x4000 || (keyCode > 255)) { // added keyCode test to support extended keys\r\n        retVal = ((Lrulekey == keyCode) && ((Lruleshift & modifierBitmask) == eventModifiers)); //I3318, I3555\r\n        retVal = retVal && this.stateMatch(e, Lruleshift & stateBitmask);\r\n      }\r\n    } else if((Lruleshift & 0x4000) == 0) {\r\n      retVal = (keyCode == Lrulekey); // I3318, I3555\r\n    }\r\n    if(!retVal) {\r\n      this.activeTargetOutput.deadkeys().resetMatched();  // I3318\r\n    }\r\n    return retVal; // I3318\r\n  };\r\n\r\n  /**\r\n   * Function     stateMatch    KSM\r\n   * Scope        Public\r\n   * @param       {Object}      e       keystroke event\r\n   * @param       {number}      Lstate\r\n   * Description  Test keystroke against state key rules\r\n   */\r\n  stateMatch(e: KeyEvent, Lstate: number) {\r\n    return ((Lstate & e.Lstates) == Lstate);\r\n  }\r\n\r\n  /**\r\n   * Function     keyInformation  KKI\r\n   * Scope        Public\r\n   * @param       {Object}      e\r\n   * @return      {Object}              Object with event's virtual key flag, key code, and modifiers\r\n   * Description  Get object with extended key event information\r\n   */\r\n  keyInformation(e: KeyEvent): KeyInformation {\r\n    var ei = new KeyInformation();\r\n    ei['vk'] = e.LisVirtualKey;\r\n    ei['code'] = e.Lcode;\r\n    ei['modifiers'] = e.Lmodifiers;\r\n    return ei;\r\n  };\r\n\r\n  /**\r\n   * Function     deadkeyMatch  KDM\r\n   * Scope        Public\r\n   * @param       {number}      n       offset from current cursor position\r\n   * @param       {Object}      Ptarg   target element\r\n   * @param       {number}      d       deadkey\r\n   * @return      {boolean}             True if deadkey found selected context matches val\r\n   * Description  Match deadkey at current cursor position\r\n   */\r\n  deadkeyMatch(n: number, outputTarget: OutputTarget, d: number): boolean {\r\n    return outputTarget.hasDeadkeyMatch(n, d);\r\n  }\r\n\r\n  /**\r\n   * Function     beep          KB\r\n   * Scope        Public\r\n   * @param       {Object}      Pelem     element to flash\r\n   * Description  Flash body as substitute for audible beep; notify embedded device to vibrate\r\n   */\r\n  beep(outputTarget: OutputTarget): void {\r\n    this.resetContextCache();\r\n\r\n    // Denote as part of the matched rule's behavior.\r\n    this.ruleBehavior.beep = true;\r\n  }\r\n\r\n  _ExplodeStore(store: KeyboardStore): ComplexKeyboardStore {\r\n    if(typeof(store) == 'string') {\r\n      let cachedStores = this.activeKeyboard.explodedStores;\r\n\r\n      // Is the result cached?\r\n      if(cachedStores[store]) {\r\n        return cachedStores[store];\r\n      }\r\n\r\n      // Nope, so let's build its cache.\r\n      var result: ComplexKeyboardStore = [];\r\n      for(var i=0; i < store._kmwLength(); i++) {\r\n        result.push(store._kmwCharAt(i));\r\n      }\r\n\r\n      // Cache the result for later!\r\n      cachedStores[store] = result;\r\n      return result;\r\n    } else {\r\n      return store;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     any           KA\r\n   * Scope        Public\r\n   * @param       {number}      n     character position (index)\r\n   * @param       {string}      ch    character to find in string\r\n   * @param       {string}      s     'any' string\r\n   * @return      {boolean}           True if character found in 'any' string, sets index accordingly\r\n   * Description  Test for character matching\r\n   */\r\n  any(n: number, ch: KeyboardStoreElement, s: KeyboardStore): boolean {\r\n    if(ch == '') {\r\n      return false;\r\n    }\r\n\r\n    s = this._ExplodeStore(s);\r\n    var Lix = -1;\r\n    for(var i=0; i < s.length; i++) {\r\n      if(typeof(s[i]) == 'string') {\r\n        if(s[i] == ch) {\r\n          Lix = i;\r\n          break;\r\n        }\r\n      } else if(s[i]['d'] === ch['d']) {\r\n        Lix = i;\r\n        break;\r\n      }\r\n    }\r\n    this._AnyIndices[n] = Lix;\r\n    return Lix >= 0;\r\n  }\r\n\r\n  /**\r\n   * Function     _Index\r\n   * Scope        Public\r\n   * @param       {string}      Ps      string\r\n   * @param       {number}      Pn      index\r\n   * Description  Returns the character from a store string according to the offset in the index array\r\n   */\r\n  _Index(Ps: KeyboardStore, Pn: number): KeyboardStoreElement {\r\n    Ps = this._ExplodeStore(Ps);\r\n\r\n    if(this._AnyIndices[Pn-1] < Ps.length) {   //I3319\r\n      return Ps[this._AnyIndices[Pn-1]];\r\n    } else {\r\n      /* Should not be possible for a compiled keyboard, but may arise\r\n      * during the development of handwritten keyboards.\r\n      */\r\n      console.warn(\"Unmatched contextual index() statement detected in rule with index \" + Pn + \"!\");\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     indexOutput   KIO\r\n   * Scope        Public\r\n   * @param       {number}      Pdn     no of character to overwrite (delete)\r\n   * @param       {string}      Ps      string\r\n   * @param       {number}      Pn      index\r\n   * @param       {Object}      Pelem   element to output to\r\n   * Description  Output a character selected from the string according to the offset in the index array\r\n   */\r\n  indexOutput(Pdn: number, Ps: KeyboardStore, Pn: number, outputTarget: OutputTarget): void {\r\n    this.resetContextCache();\r\n\r\n    var assertNever = function(x: never): never {\r\n      // Could be accessed by improperly handwritten calls to `fullContextMatch`.\r\n      throw new Error(\"Unexpected object in fullContextMatch specification: \" + x);\r\n    }\r\n\r\n    var indexChar = this._Index(Ps, Pn);\r\n    if(indexChar !== \"\") {\r\n      if(typeof indexChar == 'string' ) {\r\n        this.output(Pdn, outputTarget, indexChar);  //I3319\r\n      } else if(indexChar['t']) {\r\n        var storeEntry = indexChar as StoreNonCharEntry;\r\n\r\n        switch(storeEntry.t) {\r\n          case 'b': // Beep commands may appear within stores.\r\n            this.beep(outputTarget);\r\n            break;\r\n          case 'd':\r\n            this.deadkeyOutput(Pdn, outputTarget, indexChar['d']);\r\n            break;\r\n          default:\r\n            assertNever(storeEntry);\r\n        }\r\n      } else { // For keyboards developed during 10.0's alpha phase - t:'d' was assumed.\r\n        this.deadkeyOutput(Pdn, outputTarget, indexChar['d']);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Function     deleteContext KDC\r\n   * Scope        Public\r\n   * @param       {number}      dn      number of context entries to overwrite\r\n   * @param       {Object}      Pelem   element to output to\r\n   * @param       {string}      s       string to output\r\n   * Description  Keyboard output\r\n   */\r\n  deleteContext(dn: number, outputTarget: OutputTarget): void {\r\n    var context: CachedExEntry;\r\n\r\n    // We want to control exactly which deadkeys get removed.\r\n    if(dn > 0) {\r\n      context = this._BuildExtendedContext(dn, dn, outputTarget);\r\n      let nulCount = 0;\r\n\r\n      for(var i=0; i < context.valContext.length; i++) {\r\n        var dk = context.deadContext[i];\r\n\r\n        if(dk) {\r\n          // Remove deadkey in context.\r\n          outputTarget.deadkeys().remove(dk);\r\n\r\n          // Reduce our reported context size.\r\n          dn--;\r\n        } else if(context.valContext[i] == \"\\uFFFE\") {\r\n          // Count any `nul` sentinels that would contribute to our deletion count.\r\n          nulCount++;\r\n        }\r\n      }\r\n\r\n      // Prevent attempts to delete nul sentinels, as they don't exist in the actual context.\r\n      // (Addresses regression from KMW v 12.0 paired with Developer bug through same version)\r\n      let contextLength = context.valContext.length - nulCount;\r\n      if(dn > contextLength) {\r\n        dn = contextLength;\r\n      }\r\n    }\r\n\r\n    // If a matched deadkey hasn't been deleted, we don't WANT to delete it.\r\n    outputTarget.deadkeys().resetMatched();\r\n\r\n    // Why reinvent the wheel?  Delete the remaining characters by 'inserting a blank string'.\r\n    this.output(dn, outputTarget, '');\r\n  }\r\n\r\n  /**\r\n   * Function     output        KO\r\n   * Scope        Public\r\n   * @param       {number}      dn      number of characters to overwrite\r\n   * @param       {Object}      Pelem   element to output to\r\n   * @param       {string}      s       string to output\r\n   * Description  Keyboard output\r\n   */\r\n  output(dn: number, outputTarget: OutputTarget, s:string): void {\r\n    this.resetContextCache();\r\n\r\n    outputTarget.saveProperties();\r\n    outputTarget.clearSelection();\r\n    outputTarget.deadkeys().deleteMatched(); // I3318\r\n    if(dn >= 0) {\r\n      // Automatically manages affected deadkey positions.  Does not delete deadkeys b/c legacy behavior support.\r\n      outputTarget.deleteCharsBeforeCaret(dn);\r\n    }\r\n    // Automatically manages affected deadkey positions.\r\n    outputTarget.insertTextBeforeCaret(s);\r\n    outputTarget.restoreProperties();\r\n  }\r\n\r\n  /**\r\n   * `contextExOutput` function emits the character or object at `contextOffset` from the\r\n   * current matched rule's context. Introduced in Keyman 14.0, in order to resolve a\r\n   * gap between desktop and web core functionality for context(n) matching on notany().\r\n   * See #917 for additional detail.\r\n   * @alias       KCXO\r\n   * @public\r\n   * @param       {number}        Pdn            number of characters to delete left of cursor\r\n   * @param       {OutputTarget}  outputTarget   target to output to\r\n   * @param       {number}        contextLength  length of current rule context to retrieve\r\n   * @param       {number}        contextOffset  offset from start of current rule context, 1-based\r\n   */\r\n  contextExOutput(Pdn: number, outputTarget: OutputTarget, contextLength: number, contextOffset: number): void {\r\n    this.resetContextCache();\r\n\r\n    if(Pdn >= 0) {\r\n      this.output(Pdn, outputTarget, \"\");\r\n    }\r\n\r\n    const context = this.ruleContextEx.get(contextLength, contextLength);\r\n    const dk = context.deadContext[contextOffset-1], vc = context.valContext[contextOffset-1];\r\n    if(dk) {\r\n      outputTarget.insertDeadkeyBeforeCaret(dk.d);\r\n    } else if(typeof vc == 'string') {\r\n      this.output(-1, outputTarget, vc);\r\n    } else {\r\n      throw new Error(\"contextExOutput: should never be a numeric valContext with no corresponding deadContext\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     deadkeyOutput KDO\r\n   * Scope        Public\r\n   * @param       {number}      Pdn     no of character to overwrite (delete)\r\n   * @param       {Object}      Pelem   element to output to\r\n   * @param       {number}      Pd      deadkey id\r\n   * Description  Record a deadkey at current cursor position, deleting Pdn characters first\r\n   */\r\n  deadkeyOutput(Pdn: number, outputTarget: OutputTarget, Pd: number): void {\r\n    this.resetContextCache();\r\n\r\n    if(Pdn >= 0) {\r\n      this.output(Pdn, outputTarget,\"\");  //I3318 corrected to >=\r\n    }\r\n\r\n    outputTarget.insertDeadkeyBeforeCaret(Pd);\r\n    //    _DebugDeadKeys(Pelem, 'KDeadKeyOutput: dn='+Pdn+'; deadKey='+Pd);\r\n  }\r\n\r\n  /**\r\n   * KIFS compares the content of a system store with a string value\r\n   *\r\n   * @param       {number}      systemId    ID of the system store to test (only TSS_LAYER currently supported)\r\n   * @param       {string}      strValue    String value to compare to\r\n   * @param       {Object}      Pelem       Currently active element (may be needed by future tests)\r\n   * @return      {boolean}                 True if the test succeeds\r\n   */\r\n  ifStore(systemId: number, strValue: string, outputTarget: OutputTarget): boolean {\r\n    var result=true;\r\n    let store = this.systemStores[systemId];\r\n    if(store) {\r\n      result = store.matches(strValue);\r\n    }\r\n    return result; //Moved from previous line, now supports layer selection, Build 350\r\n  }\r\n\r\n  /**\r\n   * KSETS sets the value of a system store to a string\r\n   *\r\n   * @param       {number}      systemId    ID of the system store to set (only TSS_LAYER currently supported)\r\n   * @param       {string}      strValue    String to set as the system store content\r\n   * @param       {Object}      Pelem       Currently active element (may be needed in future tests)\r\n   * @return      {boolean}                 True if command succeeds\r\n   *                                        (i.e. for TSS_LAYER, if the layer is successfully selected)\r\n   *\r\n   * Note that option/variable stores are instead set within keyboard script code, as they only\r\n   * affect keyboard behavior.\r\n   */\r\n  setStore(systemId: number, strValue: string, outputTarget: OutputTarget): boolean {\r\n    this.resetContextCache();\r\n    // Unique case:  we only allow set(&layer) ops from keyboard rules triggered by touch OSKs.\r\n    if(systemId == SystemStoreIDs.TSS_LAYER && this.activeDevice.touchable) {\r\n      // Denote the changed store as part of the matched rule's behavior.\r\n      this.ruleBehavior.setStore[systemId] = strValue;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load an option store value from a cookie or default value\r\n   *\r\n   * @param       {string}      kbdName     keyboard internal name\r\n   * @param       {string}      storeName   store (option) name, embedded in cookie name\r\n   * @param       {string}      dfltValue   default value\r\n   * @return      {string}                  current or default option value\r\n   *\r\n   * This will only ever be called when the keyboard is loaded, as it is used by keyboards\r\n   * to initialize a store value on the keyboard's script object.\r\n   */\r\n  loadStore(kbdName: string, storeName:string, dfltValue:string): string {\r\n    this.resetContextCache();\r\n    if(this.variableStoreSerializer) {\r\n      let cValue = this.variableStoreSerializer.loadStore(kbdName, storeName);\r\n      return cValue[storeName] || dfltValue;\r\n    } else {\r\n      return dfltValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save an option store value to a cookie\r\n   *\r\n   * @param       {string}      storeName   store (option) name, embedded in cookie name\r\n   * @param       {string}      optValue    option value to save\r\n   * @return      {boolean}                 true if save successful\r\n   *\r\n   * Note that a keyboard will freely manipulate the value of its variable stores on the\r\n   * script object within its own code.  This function's use is merely to _persist_ that\r\n   * value across sessions, providing a custom user default for later uses of the keyboard.\r\n   */\r\n  saveStore(storeName:string, optValue:string): boolean {\r\n    this.resetContextCache();\r\n    var kbd=this.activeKeyboard;\r\n    if(!kbd || typeof kbd.id == 'undefined' || kbd.id == '') {\r\n      return false;\r\n    }\r\n\r\n    // And the lookup under that entry looks for the value under the store name, again.\r\n    let valueObj: VariableStore = {};\r\n    valueObj[storeName] = optValue;\r\n\r\n    // Null-check in case of invocation during unit-test\r\n    if(this.ruleBehavior) {\r\n      this.ruleBehavior.saveStore[storeName] = valueObj;\r\n    } else {\r\n      // We're in a unit-test environment, directly invoking this method from outside of a keyboard.\r\n      // In this case, we should immediately commit the change.\r\n      this.variableStoreSerializer.saveStore(this.activeKeyboard.id, storeName, valueObj);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  resetContextCache(): void {\r\n    this.cachedContext.reset();\r\n    this.cachedContextEx.reset();\r\n  }\r\n\r\n  defaultBackspace(outputTarget: OutputTarget) {\r\n    if(outputTarget.isSelectionEmpty()) {\r\n      // Delete the character left of the caret\r\n      this.output(1, outputTarget, \"\");\r\n    } else {\r\n      // Delete just the selection\r\n      this.output(0, outputTarget, \"\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     processNewContextEvent\r\n   * Scope        Private\r\n   * @param       {Object}        outputTarget   The target receiving input\r\n   * @param       {Object}        keystroke      The input keystroke (with its properties) to be mapped by the keyboard.\r\n   * Description  Calls the keyboard's `begin newContext` group\r\n   * @returns     {RuleBehavior}  Record of commands and state changes that result from executing `begin NewContext`\r\n   */\r\n  processNewContextEvent(outputTarget: OutputTarget, keystroke: KeyEvent): RuleBehavior {\r\n    if(!this.activeKeyboard) {\r\n      throw \"No active keyboard for keystroke processing!\";\r\n    }\r\n    return this.process(this.activeKeyboard.processNewContextEvent.bind(this.activeKeyboard), outputTarget, keystroke, true);\r\n  }\r\n\r\n  /**\r\n   * Function     processPostKeystroke\r\n   * Scope        Private\r\n   * @param       {Object}        outputTarget   The target receiving input\r\n   * @param       {Object}        keystroke      The input keystroke with relevant properties to be mapped by the keyboard.\r\n   * Description  Calls the keyboard's `begin postKeystroke` group\r\n   * @returns     {RuleBehavior}  Record of commands and state changes that result from executing `begin PostKeystroke`\r\n   */\r\n  processPostKeystroke(outputTarget: OutputTarget, keystroke: KeyEvent): RuleBehavior {\r\n    if(!this.activeKeyboard) {\r\n      throw \"No active keyboard for keystroke processing!\";\r\n    }\r\n    return this.process(this.activeKeyboard.processPostKeystroke.bind(this.activeKeyboard), outputTarget, keystroke, true);\r\n  }\r\n\r\n  /**\r\n   * Function     processKeystroke\r\n   * Scope        Private\r\n   * @param       {Object}        outputTarget   The target receiving input\r\n   * @param       {Object}        keystroke   The input keystroke (with its properties) to be mapped by the keyboard.\r\n   * Description  Encapsulates calls to keyboard input processing.\r\n   * @returns     {RuleBehavior}  Record of commands and state changes that result from executing `begin Unicode`\r\n   */\r\n  processKeystroke(outputTarget: OutputTarget, keystroke: KeyEvent): RuleBehavior {\r\n    if(!this.activeKeyboard) {\r\n      throw \"No active keyboard for keystroke processing!\";\r\n    }\r\n    return this.process(this.activeKeyboard.process.bind(this.activeKeyboard), outputTarget, keystroke, false);\r\n  }\r\n\r\n  private process(callee, outputTarget: OutputTarget, keystroke: KeyEvent, readonly: boolean): RuleBehavior {\r\n    // Clear internal state tracking data from prior keystrokes.\r\n    if(!outputTarget) {\r\n      throw \"No target specified for keyboard output!\";\r\n    } else if(!this.activeKeyboard) {\r\n      throw \"No active keyboard for keystroke processing!\";\r\n    } else if(!callee) {\r\n      throw \"No callee for keystroke processing!\";\r\n    }\r\n\r\n    outputTarget.invalidateSelection();\r\n\r\n    outputTarget.deadkeys().resetMatched();       // I3318\r\n    this.resetContextCache();\r\n\r\n    // Capture the initial state of the OutputTarget before any rules are matched.\r\n    let preInput = Mock.from(outputTarget, true);\r\n\r\n    // Capture the initial state of any variable stores\r\n    const cachedVariableStores = this.activeKeyboard.variableStores;\r\n\r\n    // Establishes the results object, allowing corresponding commands to set values here as appropriate.\r\n    this.ruleBehavior = new RuleBehavior();\r\n\r\n    // Ensure the settings are in place so that KIFS/ifState activates and deactivates\r\n    // the appropriate rule(s) for the modeled device.\r\n    this.activeDevice = keystroke.device;\r\n\r\n    // Calls the start-group of the active keyboard.\r\n    this.activeTargetOutput = outputTarget;\r\n    var matched = callee(outputTarget, keystroke);\r\n    this.activeTargetOutput = null;\r\n\r\n    // Finalize the rule's results.\r\n    this.ruleBehavior.transcription = outputTarget.buildTranscriptionFrom(preInput, keystroke, readonly);\r\n\r\n    // We always backup the changes to variable stores to the RuleBehavior, to\r\n    // be applied during finalization, then restore them to the cached initial\r\n    // values to avoid side-effects with predictive text mocks.\r\n    this.ruleBehavior.variableStores = this.activeKeyboard.variableStores;\r\n    this.activeKeyboard.variableStores = cachedVariableStores;\r\n\r\n    // `matched` refers to whether or not the FINAL rule (from any group) matched, rather than\r\n    // whether or not ANY rule matched.  If the final rule doesn't match, we trigger the key's\r\n    // default behavior (if appropriate).\r\n    //\r\n    // See https://github.com/keymanapp/keyman/pull/4350#issuecomment-768753852\r\n    this.ruleBehavior.triggerKeyDefault = !matched;\r\n\r\n    // Clear our result-tracking variable to prevent any possible pollution for future processing.\r\n    let behavior = this.ruleBehavior;\r\n    this.ruleBehavior = null;\r\n\r\n    return behavior;\r\n  }\r\n\r\n  /**\r\n   * Applies the dictionary of variable store values to the active keyboard\r\n   *\r\n   * Has no effect on keyboards compiled with 14.0 or earlier; system store\r\n   * names are not exposed unless compiled with Developer 15.0 or later.\r\n   *\r\n   * @param stores A dictionary of stores which should be found in the\r\n   *               keyboard\r\n   */\r\n  applyVariableStores(stores: VariableStoreDictionary): void {\r\n    this.activeKeyboard.variableStores = stores;\r\n  }\r\n\r\n  /**\r\n   * Publishes the KeyboardInterface's shorthand API names.  As this assigns the current functions\r\n   * held by the longform versions, note that this should be called after replacing any of them via\r\n   * JS method extension.\r\n   *\r\n   * DOM-aware KeymanWeb should call this after its domKbdInterface.ts code is loaded, as it replaces\r\n   * a few.  (This is currently done within its kmwapi.ts.)\r\n   */\r\n  static __publishShorthandAPI() {\r\n    // Keyboard callbacks\r\n    let prototype = this.prototype;\r\n\r\n    var exportKBCallback = function(miniName: string, longName: string) {\r\n      if(prototype[longName]) {\r\n        prototype[miniName] = prototype[longName];\r\n      }\r\n    }\r\n\r\n    exportKBCallback('KSF', 'saveFocus');\r\n    exportKBCallback('KBR', 'beepReset');\r\n    exportKBCallback('KT', 'insertText');\r\n    exportKBCallback('KR', 'registerKeyboard');\r\n    exportKBCallback('KRS', 'registerStub');\r\n    exportKBCallback('KC', 'context');\r\n    exportKBCallback('KN', 'nul');\r\n    exportKBCallback('KCM', 'contextMatch');\r\n    exportKBCallback('KFCM', 'fullContextMatch');\r\n    exportKBCallback('KIK', 'isKeypress');\r\n    exportKBCallback('KKM', 'keyMatch');\r\n    exportKBCallback('KSM', 'stateMatch');\r\n    exportKBCallback('KKI', 'keyInformation');\r\n    exportKBCallback('KDM', 'deadkeyMatch');\r\n    exportKBCallback('KB', 'beep');\r\n    exportKBCallback('KA', 'any');\r\n    exportKBCallback('KDC', 'deleteContext');\r\n    exportKBCallback('KO', 'output');\r\n    exportKBCallback('KDO', 'deadkeyOutput');\r\n    exportKBCallback('KCXO', 'contextExOutput');\r\n    exportKBCallback('KIO', 'indexOutput');\r\n    exportKBCallback('KIFS', 'ifStore');\r\n    exportKBCallback('KSETS', 'setStore');\r\n    exportKBCallback('KLOAD', 'loadStore');\r\n    exportKBCallback('KSAVE', 'saveStore');\r\n  }\r\n}\r\n\r\n(function() {\r\n  // This will be the only call within the keyboard-processor module.\r\n  KeyboardInterface.__publishShorthandAPI();\r\n}());",
    "// #region Big ol' list of imports\r\n\r\nimport EventEmitter from 'eventemitter3';\r\n\r\nimport Codes from \"./codes.js\";\r\nimport type Keyboard from \"../keyboards/keyboard.js\";\r\nimport { MinimalKeymanGlobal } from '../keyboards/keyboardHarness.js';\r\nimport KeyEvent from \"./keyEvent.js\";\r\nimport { Layouts } from \"../keyboards/defaultLayouts.js\";\r\nimport type { MutableSystemStore } from \"./systemStores.js\";\r\n\r\nimport DefaultRules, { EmulationKeystrokes } from \"./defaultRules.js\";\r\nimport type OutputTarget from \"./outputTarget.js\";\r\nimport { Mock } from \"./outputTarget.js\";\r\n\r\nimport KeyboardInterface, { SystemStoreIDs, VariableStore } from \"./kbdInterface.js\";\r\nimport RuleBehavior from \"./ruleBehavior.js\";\r\n\r\nimport { DeviceSpec, globalObject } from \"@keymanapp/web-utils\";\r\n\r\n// #endregion\r\n\r\n// Also relies on @keymanapp/web-utils, which is included via tsconfig.json.\r\n\r\nexport type BeepHandler = (outputTarget: OutputTarget) => void;\r\nexport type LogMessageHandler = (str: string) => void;\r\n\r\nexport interface VariableStoreSerializer {\r\n  loadStore(keyboardID: string, storeName: string): VariableStore;\r\n  saveStore(keyboardID: string, storeName: string, storeMap: VariableStore);\r\n}\r\n\r\nexport interface ProcessorInitOptions {\r\n  baseLayout?: string;\r\n  keyboardInterface?: KeyboardInterface;\r\n  defaultOutputRules?: DefaultRules; // Takes the class def object, not an instance thereof.\r\n}\r\n\r\ninterface EventMap {\r\n  statekeychange: (stateKeys: typeof KeyboardProcessor.prototype.stateKeys) => void;\r\n}\r\n\r\nexport default class KeyboardProcessor extends EventEmitter<EventMap> {\r\n  public static readonly DEFAULT_OPTIONS: ProcessorInitOptions = {\r\n    baseLayout: 'us',\r\n    defaultOutputRules: new DefaultRules()\r\n  };\r\n\r\n  // Tracks the simulated value for supported state keys, allowing the OSK to mirror a physical keyboard for them.\r\n  // Using the exact keyCode name from the Codes definitions will allow for certain optimizations elsewhere in the code.\r\n  stateKeys = {\r\n    \"K_CAPS\":false,\r\n    \"K_NUMLOCK\":false,\r\n    \"K_SCROLL\":false\r\n  };\r\n\r\n  // Tracks the most recent modifier state information in order to quickly detect changes\r\n  // in keyboard state not otherwise captured by the hosting page in the browser.\r\n  // Needed for AltGr simulation.\r\n  modStateFlags: number = 0;\r\n\r\n  keyboardInterface: KeyboardInterface;\r\n\r\n  /**\r\n   * Indicates the device (platform) to be used for non-keystroke events,\r\n   * such as those sent to `begin postkeystroke` and `begin newcontext`\r\n   * entry points.\r\n   */\r\n  contextDevice: DeviceSpec;\r\n\r\n  baseLayout: string;\r\n\r\n  defaultRules: DefaultRules;\r\n\r\n  // Callbacks for various feedback types\r\n  beepHandler?: BeepHandler;\r\n  warningLogger?: LogMessageHandler;\r\n  errorLogger?: LogMessageHandler;\r\n\r\n  constructor(device: DeviceSpec, options?: ProcessorInitOptions) {\r\n    super();\r\n\r\n    if(!options) {\r\n      options = KeyboardProcessor.DEFAULT_OPTIONS;\r\n    }\r\n\r\n    this.contextDevice = device;\r\n\r\n    this.baseLayout = options.baseLayout || KeyboardProcessor.DEFAULT_OPTIONS.baseLayout;\r\n    this.keyboardInterface = options.keyboardInterface || new KeyboardInterface(globalObject(), MinimalKeymanGlobal);\r\n    this.defaultRules = options.defaultOutputRules || KeyboardProcessor.DEFAULT_OPTIONS.defaultOutputRules;\r\n  }\r\n\r\n  public get activeKeyboard(): Keyboard {\r\n    return this.keyboardInterface.activeKeyboard;\r\n  }\r\n\r\n  public set activeKeyboard(keyboard: Keyboard) {\r\n    this.keyboardInterface.activeKeyboard = keyboard;\r\n\r\n    // All old deadkeys and keyboard-specific cache should immediately be invalidated\r\n    // on a keyboard change.\r\n    this.resetContext();\r\n  }\r\n\r\n  get layerStore(): MutableSystemStore {\r\n    return this.keyboardInterface.systemStores[SystemStoreIDs.TSS_LAYER] as MutableSystemStore;\r\n  }\r\n\r\n  public get newLayerStore(): MutableSystemStore {\r\n    return this.keyboardInterface.systemStores[SystemStoreIDs.TSS_NEWLAYER] as MutableSystemStore;\r\n  }\r\n\r\n  public get oldLayerStore(): MutableSystemStore {\r\n    return this.keyboardInterface.systemStores[SystemStoreIDs.TSS_OLDLAYER] as MutableSystemStore;\r\n  }\r\n\r\n  public get layerId(): string {\r\n    return this.layerStore.value;\r\n  }\r\n\r\n  // Note:  will trigger an 'event' callback designed to notify the OSK of layer changes.\r\n  public set layerId(value: string) {\r\n    this.layerStore.set(value);\r\n  }\r\n\r\n  /**\r\n   * Get the default RuleBehavior for the specified key, attempting to mimic standard browser defaults\r\n   * where and when appropriate.\r\n   *\r\n   * @param   {object}  Lkc           The pre-analyzed KeyEvent object\r\n   * @param   {boolean} outputTarget  The OutputTarget receiving the KeyEvent\r\n   * @return  {string}\r\n   */\r\n  defaultRuleBehavior(Lkc: KeyEvent, outputTarget: OutputTarget, readonly: boolean): RuleBehavior {\r\n    let preInput = Mock.from(outputTarget, readonly);\r\n    let ruleBehavior = new RuleBehavior();\r\n\r\n    let matched = false;\r\n    var char = '';\r\n    var special: EmulationKeystrokes;\r\n    if(Lkc.isSynthetic || outputTarget.isSynthetic) {\r\n      matched = true;  // All the conditions below result in matches until the final else, which restores the expected default\r\n                        // if no match occurs.\r\n\r\n      if(this.defaultRules.isCommand(Lkc)) {\r\n        // Note this in the rule behavior, return successfully.  We'll consider applying it later.\r\n        ruleBehavior.triggersDefaultCommand = true;\r\n\r\n        // We'd rather let the browser handle these keys, but we're using emulated keystrokes, forcing KMW\r\n        // to emulate default behavior here.\r\n      } else if((special = this.defaultRules.forSpecialEmulation(Lkc)) != null) {\r\n        switch(special) {\r\n          case EmulationKeystrokes.Backspace:\r\n            this.keyboardInterface.defaultBackspace(outputTarget);\r\n            break;\r\n          case EmulationKeystrokes.Enter:\r\n            outputTarget.handleNewlineAtCaret();\r\n            break;\r\n          // case '\\u007f': // K_DEL\r\n            // // For (possible) future implementation.\r\n            // // Would recommend (conceptually) equaling K_RIGHT + K_BKSP, the former of which would technically be a 'command'.\r\n          default:\r\n            // In case we extend the allowed set, but forget to implement its handling case above.\r\n            ruleBehavior.errorLog = \"Unexpected 'special emulation' character (\\\\u\" + (special as String).kmwCharCodeAt(0).toString(16) + \") went unhandled!\";\r\n        }\r\n      } else {\r\n        // Back to the standard default, pending normal matching.\r\n        matched = false;\r\n      }\r\n    }\r\n\r\n    let isMnemonic = this.activeKeyboard && this.activeKeyboard.isMnemonic;\r\n\r\n    if(!matched) {\r\n      if((char = this.defaultRules.forAny(Lkc, isMnemonic)) != null) {\r\n        special = this.defaultRules.forSpecialEmulation(Lkc)\r\n        if(special == EmulationKeystrokes.Backspace) {\r\n          // A browser's default backspace may fail to delete both parts of an SMP character.\r\n          this.keyboardInterface.defaultBackspace(outputTarget);\r\n        } else if(special || this.defaultRules.isCommand(Lkc)) { // Filters out 'commands' like TAB.\r\n          // We only do the \"for special emulation\" cases under the condition above... aside from backspace\r\n          // Let the browser handle those.\r\n          return null;\r\n        } else {\r\n          this.keyboardInterface.output(0, outputTarget, char);\r\n        }\r\n      } else {\r\n        // No match, no default RuleBehavior.\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Shortcut things immediately if there were issues generating this rule behavior.\r\n    if(ruleBehavior.errorLog) {\r\n      return ruleBehavior;\r\n    }\r\n\r\n    let transcription = outputTarget.buildTranscriptionFrom(preInput, Lkc, readonly);\r\n    ruleBehavior.transcription = transcription;\r\n\r\n    return ruleBehavior;\r\n  }\r\n\r\n  processNewContextEvent(device: DeviceSpec, outputTarget: OutputTarget): RuleBehavior {\r\n    return this.activeKeyboard ?\r\n      this.keyboardInterface.processNewContextEvent(outputTarget, this.activeKeyboard.constructNullKeyEvent(device, this.stateKeys)) :\r\n      null;\r\n  }\r\n\r\n  processPostKeystroke(device: DeviceSpec, outputTarget: OutputTarget): RuleBehavior {\r\n    return this.activeKeyboard ?\r\n      this.keyboardInterface.processPostKeystroke(outputTarget, this.activeKeyboard.constructNullKeyEvent(device, this.stateKeys)) :\r\n      null;\r\n  }\r\n\r\n  processKeystroke(keyEvent: KeyEvent, outputTarget: OutputTarget): RuleBehavior {\r\n    var matchBehavior: RuleBehavior;\r\n\r\n    // Pass this key code and state to the keyboard program\r\n    if(this.activeKeyboard && keyEvent.Lcode != 0) {\r\n      matchBehavior = this.keyboardInterface.processKeystroke(outputTarget, keyEvent);\r\n    }\r\n\r\n    if(!matchBehavior || matchBehavior.triggerKeyDefault) {\r\n      // Restore the virtual key code if a mnemonic keyboard is being used\r\n      // If no vkCode value was stored, maintain the original Lcode value.\r\n      keyEvent.Lcode=keyEvent.vkCode || keyEvent.Lcode;\r\n\r\n      // Handle unmapped keys, including special keys\r\n      // The following is physical layout dependent, so should be avoided if possible.  All keys should be mapped.\r\n      this.keyboardInterface.activeTargetOutput = outputTarget;\r\n\r\n      // Match against the 'default keyboard' - rules to mimic the default string output when typing in a browser.\r\n      // Many keyboards rely upon these 'implied rules'.\r\n      let defaultBehavior = this.defaultRuleBehavior(keyEvent, outputTarget, false);\r\n      if(defaultBehavior) {\r\n        if(!matchBehavior) {\r\n          matchBehavior = defaultBehavior;\r\n        } else {\r\n          matchBehavior.mergeInDefaults(defaultBehavior);\r\n        }\r\n        matchBehavior.triggerKeyDefault = false; // We've triggered it successfully.\r\n      } // If null, we must rely on something else (like the browser, in DOM-aware code) to fulfill the default.\r\n\r\n      this.keyboardInterface.activeTargetOutput = null;\r\n    }\r\n\r\n    return matchBehavior;\r\n  }\r\n\r\n  /**\r\n   * Function     _UpdateVKShift\r\n   * Scope        Private\r\n   * @param       {Object}            e     OSK event\r\n   * @return      {boolean}                 Always true\r\n   * Description  Updates the current shift state within KMW, updating the OSK's visualization thereof.\r\n   */\r\n  _UpdateVKShift(e: KeyEvent): boolean {\r\n    let keyShiftState=0;\r\n\r\n    const lockNames  = ['CAPS', 'NUM_LOCK', 'SCROLL_LOCK'];\r\n    const lockKeys   = ['K_CAPS', 'K_NUMLOCK', 'K_SCROLL'];\r\n\r\n    if(!this.activeKeyboard) {\r\n      return true;\r\n    }\r\n\r\n    if(e) {\r\n      // read shift states from Pevent\r\n      keyShiftState = e.Lmodifiers;\r\n\r\n      // Are we simulating AltGr?  If it's a simulation and not real, time to un-simulate for the OSK.\r\n      if(this.activeKeyboard.isChiral && (this.activeKeyboard.emulatesAltGr) &&\r\n          (this.modStateFlags & Codes.modifierBitmasks['ALT_GR_SIM']) == Codes.modifierBitmasks['ALT_GR_SIM']) {\r\n        keyShiftState |= Codes.modifierBitmasks['ALT_GR_SIM'];\r\n        keyShiftState &= ~Codes.modifierCodes['RALT'];\r\n      }\r\n\r\n      // Set stateKeys where corresponding value is passed in e.Lstates\r\n      let stateMutation = false;\r\n      for(let i=0; i < lockNames.length; i++) {\r\n        if(e.Lstates & Codes.stateBitmasks[lockNames[i]]) {\r\n          this.stateKeys[lockKeys[i]] = !!(e.Lstates & Codes.modifierCodes[lockNames[i]]);\r\n          stateMutation = true;\r\n        }\r\n      }\r\n\r\n      if(stateMutation) {\r\n        this.emit('statekeychange', this.stateKeys);\r\n      }\r\n    }\r\n\r\n    this.updateStates();\r\n\r\n    if(this.activeKeyboard.isMnemonic && this.stateKeys['K_CAPS']) {\r\n      // Modifier keypresses doesn't trigger mnemonic manipulation of modifier state.\r\n      // Only an output key does; active use of Caps will also flip the SHIFT flag.\r\n      if(!e || !e.isModifier) {\r\n        // Mnemonic keystrokes manipulate the SHIFT property based on CAPS state.\r\n        // We need to unflip them when tracking the OSK layer.\r\n        keyShiftState ^= Codes.modifierCodes['SHIFT'];\r\n      }\r\n    }\r\n\r\n    this.layerId = this.getLayerId(keyShiftState);\r\n    return true;\r\n  }\r\n\r\n  private updateStates(): void {\r\n    var lockNames  = ['CAPS', 'NUM_LOCK', 'SCROLL_LOCK'];\r\n    var lockKeys   = ['K_CAPS', 'K_NUMLOCK', 'K_SCROLL'];\r\n\r\n    for(let i=0; i < lockKeys.length; i++) {\r\n      const key = lockKeys[i];\r\n      const flag = this.stateKeys[key];\r\n      const onBit = lockNames[i];\r\n      const offBit = 'NO_' + lockNames[i];\r\n\r\n      // Ensures that the current mod-state info properly matches the currently-simulated\r\n      // state key states.\r\n      if(flag) {\r\n        this.modStateFlags |= Codes.modifierCodes[onBit];\r\n        this.modStateFlags &= ~Codes.modifierCodes[offBit];\r\n      } else {\r\n        this.modStateFlags &= ~Codes.modifierCodes[onBit];\r\n        this.modStateFlags |= Codes.modifierCodes[offBit];\r\n      }\r\n    }\r\n  }\r\n\r\n  getLayerId(modifier: number): string {\r\n    return Layouts.getLayerId(modifier);\r\n  }\r\n\r\n  /**\r\n   * Select the OSK's next keyboard layer based upon layer switching keys as a default\r\n   * The next layer will be determined from the key name unless otherwise specifed\r\n   *\r\n   *  @param  {string}                    keyName     key identifier\r\n   *  @return {boolean}                               return true if keyboard layer changed\r\n   */\r\n  selectLayer(keyEvent: KeyEvent): boolean {\r\n    let keyName = keyEvent.kName;\r\n    var nextLayer = keyEvent.kNextLayer;\r\n    var isChiral = this.activeKeyboard && this.activeKeyboard.isChiral;\r\n\r\n    // Layer must be identified by name, not number (27/08/2015)\r\n    if(typeof nextLayer == 'number') {\r\n      nextLayer = this.getLayerId(nextLayer * 0x10);\r\n    }\r\n\r\n    // Identify next layer, if required by key\r\n    if(!nextLayer) {\r\n      switch(keyName) {\r\n        case 'K_LSHIFT':\r\n        case 'K_RSHIFT':\r\n        case 'K_SHIFT':\r\n          nextLayer = 'shift';\r\n          break;\r\n        case 'K_LCONTROL':\r\n        case 'K_LCTRL':\r\n          if(isChiral) {\r\n            nextLayer = 'leftctrl';\r\n            break;\r\n          }\r\n        case 'K_RCONTROL':\r\n        case 'K_RCTRL':\r\n          if(isChiral) {\r\n            nextLayer = 'rightctrl';\r\n            break;\r\n          }\r\n        case 'K_CTRL':\r\n          nextLayer = 'ctrl';\r\n          break;\r\n        case 'K_LMENU':\r\n        case 'K_LALT':\r\n          if(isChiral) {\r\n            nextLayer = 'leftalt';\r\n            break;\r\n          }\r\n        case 'K_RMENU':\r\n        case 'K_RALT':\r\n          if(isChiral) {\r\n            nextLayer = 'rightalt';\r\n            break;\r\n          }\r\n        case 'K_ALT':\r\n          nextLayer = 'alt';\r\n          break;\r\n        case 'K_ALTGR':\r\n          if(isChiral) {\r\n            nextLayer = 'leftctrl-rightalt';\r\n          } else {\r\n            nextLayer = 'ctrl-alt';\r\n          }\r\n          break;\r\n        case 'K_CURRENCIES':\r\n        case 'K_NUMERALS':\r\n        case 'K_SHIFTED':\r\n        case 'K_UPPER':\r\n        case 'K_LOWER':\r\n        case 'K_SYMBOLS':\r\n          nextLayer = 'default';\r\n          break;\r\n      }\r\n    }\r\n\r\n    // If no key corresponding to a layer transition is pressed, maintain the current layer.\r\n    if(!nextLayer) {\r\n      return false;\r\n    }\r\n\r\n    // Change layer and refresh OSK\r\n    this.updateLayer(keyEvent, nextLayer);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Sets the new layer id, allowing for toggling shift/ctrl/alt while preserving the remainder\r\n   * of the modifiers represented by the current layer id (where applicable)\r\n   *\r\n   * @param       {string}      id      layer id (e.g. ctrlshift)\r\n   */\r\n  updateLayer(keyEvent: KeyEvent, id: string) {\r\n    let activeLayer = this.layerId;\r\n    var s = activeLayer;\r\n\r\n    // Do not change layer unless needed (27/08/2015)\r\n    if(id == activeLayer && keyEvent.device.formFactor != DeviceSpec.FormFactor.Desktop) {\r\n      return false;\r\n    }\r\n\r\n    var idx=id;\r\n    var i;\r\n\r\n    if(keyEvent.device.formFactor == DeviceSpec.FormFactor.Desktop) {\r\n      // Need to test if target layer is a standard layer (based on the plain 'default')\r\n      var replacements= ['leftctrl', 'rightctrl', 'ctrl', 'leftalt', 'rightalt', 'alt', 'shift'];\r\n\r\n      for(i=0; i < replacements.length; i++) {\r\n        // Don't forget to remove the kebab-case hyphens!\r\n        idx=idx.replace(replacements[i] + '-', '');\r\n        idx=idx.replace(replacements[i],'');\r\n      }\r\n\r\n      // If we are presently on the default layer, drop the 'default' and go straight to the shifted mode.\r\n      // If on a common symbolic layer, drop out of symbolic mode and go straight to the shifted mode.\r\n      if(activeLayer == 'default' || activeLayer == 'numeric' || activeLayer == 'symbol' || activeLayer == 'currency' || idx != '') {\r\n        s = id;\r\n      }\r\n      // Otherwise, we are based upon a layer that accepts modifier variations.\r\n      // Modify the layer according to the current state and key pressed.\r\n      //\r\n      // TODO:  Consider:  should this ever be allowed for a base layer other than 'default'?  If not,\r\n      // if(idx == '') with accompanying if-else structural shift would be a far better test here.\r\n      else {\r\n        // Save our current modifier state.\r\n        var modifier=Codes.getModifierState(s);\r\n\r\n        // Strip down to the base modifiable layer.\r\n        for(i=0; i < replacements.length; i++) {\r\n          // Don't forget to remove the kebab-case hyphens!\r\n          s=s.replace(replacements[i] + '-', '');\r\n          s=s.replace(replacements[i],'');\r\n        }\r\n\r\n        // Toggle the modifier represented by our input argument.\r\n        switch(id) {\r\n          case 'shift':\r\n            modifier ^= Codes.modifierCodes['SHIFT'];\r\n            break;\r\n          case 'leftctrl':\r\n            modifier ^= Codes.modifierCodes['LCTRL'];\r\n            break;\r\n          case 'rightctrl':\r\n            modifier ^= Codes.modifierCodes['RCTRL'];\r\n            break;\r\n          case 'ctrl':\r\n            modifier ^= Codes.modifierCodes['CTRL'];\r\n            break;\r\n          case 'leftalt':\r\n            modifier ^= Codes.modifierCodes['LALT'];\r\n            break;\r\n          case 'rightalt':\r\n            modifier ^= Codes.modifierCodes['RALT'];\r\n            break;\r\n          case 'alt':\r\n            modifier ^= Codes.modifierCodes['ALT'];\r\n            break;\r\n          default:\r\n            s = id;\r\n        }\r\n\r\n        // Combine our base modifiable layer and attach the new modifier variation info to obtain our destination layer.\r\n        if(s != 'default') {\r\n          if(s == '') {\r\n            s = this.getLayerId(modifier);\r\n          } else {\r\n            s = this.getLayerId(modifier) + '-' + s;\r\n          }\r\n        }\r\n      }\r\n\r\n      if(s == '') {\r\n        s = 'default';\r\n      }\r\n    } else {\r\n      // Mobile form-factor.  Either the layout is specified by a keyboard developer with direct layer name references\r\n      // or all layers are accessed via subkey of a single layer-shifting key - no need for modifier-combining logic.\r\n      s = id;\r\n    }\r\n\r\n    let layout = this.activeKeyboard.layout(keyEvent.device.formFactor);\r\n    if(layout.getLayer(s)) {\r\n      this.layerId = s;\r\n    } else {\r\n      this.layerId = 'default';\r\n    }\r\n\r\n    let baseModifierState = Codes.getModifierState(this.layerId);\r\n    this.modStateFlags = baseModifierState | keyEvent.Lstates;\r\n  }\r\n\r\n  // Returns true if the key event is a modifier press, allowing keyPress to return selectively\r\n  // in those cases.\r\n  doModifierPress(Levent: KeyEvent, outputTarget: OutputTarget, isKeyDown: boolean): boolean {\r\n    if(!this.activeKeyboard) {\r\n      return false;\r\n    }\r\n\r\n    if(Levent.isModifier) {\r\n      this.activeKeyboard.notify(Levent.Lcode, outputTarget, isKeyDown ? 1 : 0);\r\n      // For eventual integration - we bypass an OSK update for physical keystrokes when in touch mode.\r\n      if(!Levent.device.touchable) {\r\n        return this._UpdateVKShift(Levent); // I2187\r\n      } else {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if(Levent.LmodifierChange) {\r\n      this.activeKeyboard.notify(0, outputTarget, 1);\r\n      if(!Levent.device.touchable) {\r\n        this._UpdateVKShift(Levent);\r\n      }\r\n    }\r\n\r\n    // No modifier keypresses detected.\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tell the currently active keyboard that a new context has been selected,\r\n   * e.g. by focus change, selection change, keyboard change, etc.\r\n   *\r\n   * @param    {Object}   outputTarget  The OutputTarget that has focus\r\n   * @returns  {Object}                 A RuleBehavior object describing the cumulative effects of\r\n   *                                    all matched keyboard rules\r\n   */\r\n  performNewContextEvent(outputTarget: OutputTarget): RuleBehavior {\r\n    const ruleBehavior = this.processNewContextEvent(this.contextDevice, outputTarget);\r\n\r\n    if(ruleBehavior) {\r\n      ruleBehavior.finalize(this, outputTarget, true);\r\n    }\r\n    return ruleBehavior;\r\n  }\r\n\r\n  resetContext(target?: OutputTarget) {\r\n    this.layerId = 'default';\r\n    this.keyboardInterface.resetContextCache();\r\n\r\n    // May be null if it's a keyboard swap.\r\n    // Performed before _UpdateVKShift since the op may modify the displayed layer\r\n    // Also updates the layer for predictions.\r\n    if(target) {\r\n      this.performNewContextEvent(target);\r\n    }\r\n\r\n    if(!this.contextDevice.touchable) {\r\n      this._UpdateVKShift(null);\r\n    }\r\n  };\r\n\r\n  setNumericLayer(device: DeviceSpec) {\r\n    if (this.activeKeyboard) {\r\n      let layout = this.activeKeyboard.layout(device.formFactor);\r\n      if(layout.getLayer('numeric')) {\r\n        this.layerId = 'numeric';\r\n      }\r\n    }\r\n  };\r\n}\r\n",
    "import { PathOptionSpec } from \"./optionSpec.interface.js\";\r\nimport { OSKResourcePathConfiguration } from 'keyman/engine/osk';\r\n\r\nconst addDelimiter = (p: string) => {\r\n  // Add delimiter if missing\r\n  if(p.substring(p.length-1) != '/') {\r\n    return p + '/';\r\n  } else {\r\n    return p;\r\n  }\r\n}\r\n\r\nexport default class PathConfiguration implements OSKResourcePathConfiguration {\r\n  private readonly sourcePath: string;\r\n  private _root: string;\r\n  private _resources: string;\r\n  private _keyboards: string;\r\n\r\n  // May get its initial value from the Keyman Cloud API after a query if not\r\n  // otherwise specified.\r\n  private _fonts: string;\r\n  readonly protocol: string;\r\n\r\n  /*\r\n   * Pre-modularization code corresponding to `sourcePath`:\r\n  ```\r\n   // Determine path and protocol of executing script, setting them as\r\n   // construction defaults.\r\n   //\r\n   // This can only be done during load when the active script will be the\r\n   // last script loaded.  Otherwise the script must be identified by name.\r\n\r\n   var scripts = document.getElementsByTagName('script');\r\n   var ss = scripts[scripts.length-1].src;\r\n   var sPath = ss.substr(0,ss.lastIndexOf('/')+1);\r\n   ```\r\n   */\r\n  constructor(pathSpec: Required<PathOptionSpec>, sourcePath: string) {\r\n    sourcePath = addDelimiter(sourcePath);\r\n    this.sourcePath = sourcePath;\r\n    this.protocol = sourcePath.replace(/(.{3,5}:)(.*)/,'$1');\r\n\r\n    this.updateFromOptions(pathSpec);\r\n  }\r\n\r\n  updateFromOptions(pathSpec: Required<PathOptionSpec>) {\r\n    const _rootPath = this.sourcePath.replace(/(https?:\\/\\/)([^\\/]*)(.*)/,'$1$2/');\r\n\r\n    // Get default paths and device options\r\n    this._root = _rootPath;\r\n    if(pathSpec.root != '') {\r\n      this._root = this.fixPath(pathSpec.root);\r\n    } else {\r\n      this._root = this.fixPath(_rootPath);\r\n    }\r\n\r\n    // Resources are located with respect to the engine by default\r\n    let resources = pathSpec.resources; // avoid mutating the parameter!\r\n    if(resources == '') {\r\n      resources = this.sourcePath;\r\n    }\r\n\r\n    // Convert resource, keyboard and font paths to absolute URLs\r\n    this._resources = this.fixPath(resources);\r\n    this._keyboards = this.fixPath(pathSpec.keyboards);\r\n    this._fonts = this.fixPath(pathSpec.fonts);\r\n  }\r\n\r\n  // Local function to convert relative to absolute URLs\r\n  // with respect to the source path, server root and protocol\r\n  fixPath(p: string) {\r\n    if(p.length == 0) {\r\n      return p;\r\n    }\r\n\r\n    p = addDelimiter(p);\r\n\r\n    // Absolute\r\n    if((p.replace(/^(http)s?:.*/,'$1') == 'http') || (p.replace(/^(file):.*/,'$1') == 'file')) {\r\n      return p;\r\n    }\r\n\r\n    // Absolute (except for protocol)\r\n    if(p.substring(0,2) == '//') {\r\n      return this.protocol + p;\r\n    }\r\n\r\n    // Relative to server root\r\n    if(p.substring(0,1) == '/') {\r\n      return this.root + p.substring(1);\r\n    }\r\n\r\n    // Otherwise, assume relative to source path\r\n    return this.sourcePath + p;\r\n  }\r\n\r\n  get fonts(): string {\r\n    return this._fonts;\r\n  }\r\n\r\n  updateFontPath(path: string) {\r\n    this._fonts = this.fixPath(path);\r\n  }\r\n\r\n  get root(): string {\r\n    return this._root;\r\n  }\r\n\r\n  get resources(): string {\r\n    return this._resources;\r\n  }\r\n\r\n  get keyboards(): string {\r\n    return this._keyboards;\r\n  }\r\n}",
    "export interface PathOptionSpec {\r\n  /**\r\n   * If defined, specifies the root path of the default location hosting KMW resources.\r\n   * Is typically just the protocol + domain name.\r\n   */\r\n  root?: string;\r\n\r\n  /**\r\n   * The base path to prepend on relative paths for other types of resources.\r\n   */\r\n  resources?: string;\r\n\r\n  /**\r\n   * The base path to prepend on relative paths when loading keyboards.\r\n   */\r\n  keyboards?: string;\r\n\r\n  /**\r\n   * The base path to prepend on relative paths when loading fonts.\r\n   */\r\n  fonts?: string;\r\n}\r\n\r\nexport const PathOptionDefaults: Required<PathOptionSpec> = {\r\n  root: '',\r\n  resources: '',\r\n  keyboards: '',\r\n  fonts: ''\r\n}",
    "import { DeviceSpec } from \"@keymanapp/web-utils\";\r\n\r\n/*\r\n * This file is intended for CSS-styling constants that see use with the OSK.\r\n */\r\n\r\n/**\r\n * Defines device-level constants used for CSS styling.\r\n */\r\nexport default class StyleConstants {\r\n  constructor(device: DeviceSpec) {\r\n    // popupCanvasBackgroundColor\r\n    if(device.OS == DeviceSpec.OperatingSystem.Android) {\r\n      this.popupCanvasBackgroundColor = '#999';\r\n    } else {\r\n      this.popupCanvasBackgroundColor = StyleConstants.prefersDarkMode() ? '#0f1319' : '#ffffff';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks is a user's browser is in dark mode, if the feature is supported.  Returns false otherwise.\r\n   *\r\n   * Thanks to https://stackoverflow.com/a/57795518 for this code.\r\n   */\r\n    static prefersDarkMode(): boolean {\r\n    // Ensure the detector exists (otherwise, returns false)\r\n    return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n  }\r\n\r\n  public readonly popupCanvasBackgroundColor: string;\r\n}",
    "import StyleConstants from './utils/styleConstants.js';\r\nimport { DeviceSpec, Version } from \"@keymanapp/web-utils\";\r\n\r\n// The Device object definition -------------------------------------------------\r\n\r\nexport class Device {\r\n  // These correspond directly to the properties & parameters for `DeviceSpec`.\r\n  touchable: boolean;\r\n  OS: string;\r\n  formFactor: string;\r\n  browser: string;\r\n\r\n  // These components aren't needed for key events.  All but `version` could be a sort\r\n  // of `DeviceStyle`.\r\n  dyPortrait: number;   // Its value is only referenced by an unused method.\r\n  dyLandscape: number;  // Its value is only referenced by an unused method.\r\n  orientation: string|number; // Appears to be unused as well?\r\n  colorScheme: 'light' | 'dark';  // Also unused?\r\n  version: string;  // As in, device version; only really persisted for Android.\r\n                    // No real sign of actual use, though.\r\n\r\n  private detected: boolean = false;\r\n\r\n  // Generates a default Device value.\r\n  constructor() {\r\n    this.touchable = !!('ontouchstart' in window);\r\n    this.OS = '';\r\n    this.formFactor='desktop';\r\n    this.browser='';\r\n\r\n    this.dyPortrait=0;\r\n    this.dyLandscape=0;\r\n    this.version='0';\r\n    this.orientation=window.orientation;\r\n  }\r\n\r\n  /**\r\n   * Get device horizontal DPI for touch devices, to set actual size of active regions\r\n   * Note that the actual physical DPI may be somewhat different.\r\n   *\r\n   * @return      {number}\r\n   */\r\n  getDPI(): number {\r\n    var t=document.createElement('DIV') ,s=t.style,dpi=96;\r\n    if(document.readyState !== 'complete') {\r\n      return dpi;\r\n    }\r\n\r\n    t.id='calculateDPI';\r\n    s.position='absolute'; s.display='block';s.visibility='hidden';\r\n    s.left='10px'; s.top='10px'; s.width='1in'; s.height='10px';\r\n    document.body.appendChild(t);\r\n    dpi=(typeof window.devicePixelRatio == 'undefined') ? t.offsetWidth : t.offsetWidth * window.devicePixelRatio;\r\n    document.body.removeChild(t);\r\n    return dpi;\r\n  }\r\n\r\n  detect() : DeviceSpec {\r\n    var possMacSpoof = false;\r\n\r\n    if(navigator && navigator.userAgent) {\r\n      var agent=navigator.userAgent;\r\n\r\n      if(agent.indexOf('iPad') >= 0) {\r\n        this.OS='iOS';\r\n        this.formFactor='tablet';\r\n        this.dyPortrait=this.dyLandscape=0;\r\n      } else if(agent.indexOf('iPhone') >= 0) {\r\n        this.OS='iOS';\r\n        this.formFactor='phone';\r\n        this.dyPortrait=this.dyLandscape=25;\r\n      } else if(agent.indexOf('Android') >= 0) {\r\n        this.OS='Android';\r\n        this.formFactor='phone';    // form factor may be redefined on initialization\r\n        this.dyPortrait=75;\r\n        this.dyLandscape=25;\r\n        try {\r\n          var rx=new RegExp(\"(?:Android\\\\s+)(\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\");\r\n          this.version=agent.match(rx)[1];\r\n        } catch(ex) {}\r\n      } else if(agent.indexOf('Linux') >= 0) {\r\n        this.OS='Linux';\r\n      } else if(agent.indexOf('Macintosh') >= 0) {\r\n        // Starting with 13.1, \"Macintosh\" can reflect iPads (by default) or iPhones\r\n        // (by user setting); a new \"Request Desktop Website\" setting for Safari will\r\n        // change the user agent string to match a desktop Mac.\r\n        //\r\n        // Firefox uses '.' between version components, while Chrome and Safari use\r\n        // '_' instead.  So, we have to check for both.  Yay.\r\n        let regex = /Intel Mac OS X (\\d+(?:[_\\.]\\d+)+)/i;\r\n        let results = regex.exec(agent);\r\n\r\n        // Match result:  a version string with components separated by underscores.\r\n        if(!results) {\r\n          console.warn(\"KMW could not properly parse the user agent string.\"\r\n            + \"A suboptimal keyboard layout may result.\");\r\n          this.OS='MacOSX';\r\n        } else if(results.length > 1 && results[1]) {\r\n          // Convert version string into a usable form.\r\n          let versionString = results[1].replace('_', '.');\r\n          let version = new Version(versionString);\r\n\r\n          possMacSpoof = Version.MAC_POSSIBLE_IPAD_ALIAS.compareTo(version) <= 0;\r\n          this.OS='MacOSX';\r\n        }\r\n      } else if(agent.indexOf('Windows NT') >= 0) {\r\n        this.OS='Windows';\r\n        if(agent.indexOf('Touch') >= 0) {\r\n          this.formFactor='phone';   // will be redefined as tablet if resolution high enough\r\n        }\r\n\r\n        // Windows Phone and Tablet PC\r\n        if(typeof (<any>navigator).msMaxTouchPoints == 'number' && (<any>navigator).msMaxTouchPoints > 0) {\r\n          this.touchable=true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // We look at the screen resolution for Android, because we can't tell from\r\n    // the user agent string whether or not this is supposed to be a tablet.\r\n    // It seems that there are a handful of older phones out there that report a\r\n    // higher resolution than 700px*___px, but it is proving hard to test these,\r\n    // and the majority have an aspect ratio <= 0.5625 anyway.\r\n    // But we trust what iOS tells us for phone vs tablet.\r\n\r\n    const dimMin = Math.min(screen.width,screen.height), dimMax = Math.max(screen.width,screen.height);\r\n    const aspect = dimMin / dimMax;\r\n\r\n    if(this.OS != 'iOS' &&\r\n        this.formFactor == 'phone' &&\r\n        ((dimMin >= 600 && aspect > 0.5625) || // 0.5625 -> 1920x1080 is common phone res\r\n        (aspect >= 0.625)) // all reported devices with aspect >= 0.625 are tablets per https://screensiz.es/\r\n      ) {\r\n      this.formFactor='tablet';\r\n    }\r\n\r\n    // Test for potential Chrome emulation on Windows or macOS X (used only in next if-check)\r\n    let possibleChromeEmulation = navigator.platform == 'Win32' || navigator.platform == 'MacIntel'\r\n\r\n    //                           alert(sxx+'->'+device.formFactor);\r\n    // Check for phony iOS devices (but don't undo for Chrome emulation used during development)\r\n    if(this.OS == 'iOS' && !('ongesturestart' in window) && !possibleChromeEmulation) {\r\n      this.OS='Android';\r\n    }\r\n\r\n    // Determine application or browser\r\n    this.browser='web';\r\n    if(this.OS == 'iOS' || this.OS.toLowerCase() == 'macosx') {\r\n      this.browser='safari';\r\n    }\r\n\r\n    var bMatch=/Firefox|Chrome|OPR|Safari|Edge/;\r\n    if(bMatch.test(navigator.userAgent)) {\r\n      if((navigator.userAgent.indexOf('Firefox') >= 0) && ('onmozorientationchange' in screen)) {\r\n        this.browser='firefox';\r\n      } else if(navigator.userAgent.indexOf('OPR') >= 0) {\r\n        this.browser='opera';\r\n      } else if(navigator.userAgent.indexOf(' Edge/') >= 0) {\r\n        // Edge is too common a word, so test for Edge/ :)\r\n        // Must come before Chrome and Safari test because\r\n        // Edge pretends to be both\r\n        this.browser='edge';\r\n      } else if(navigator.userAgent.indexOf('Chrome') >= 0) {\r\n        // This test must come before Safari test because on macOS,\r\n        // Chrome also reports \"Safari\"\r\n        this.browser='chrome';\r\n      } else if(navigator.userAgent.indexOf('Safari') >= 0) {\r\n        this.browser='safari';\r\n      }\r\n    }\r\n\r\n    if(possMacSpoof && this.browser == 'safari') {\r\n      // Indistinguishable user agent string!  We need a different test; fortunately, true macOS\r\n      // Safari doesn't support TouchEvents.  (Chrome does, though!  Hence the filter above.)\r\n      if(window['TouchEvent']) {\r\n        this.OS='iOS';\r\n        this.formFactor='tablet';\r\n        this.dyPortrait=this.dyLandscape=0;\r\n\r\n        // It's currently impossible to differentiate between iPhone and iPad here\r\n        // except for by screen dimensions.\r\n        let aspectRatio = screen.height / screen.width;\r\n        if(aspectRatio < 1) {\r\n          aspectRatio = 1 / aspectRatio;\r\n        }\r\n\r\n        // iPhones usually have a ratio of 16:9 (or 1.778) or higher, while iPads use 4:3 (or 1.333)\r\n        if(aspectRatio > 1.6) {\r\n          // Override - we'll treat this device as an iPhone.\r\n          this.formFactor = 'phone';\r\n          this.dyPortrait=this.dyLandscape=25;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.colorScheme = StyleConstants.prefersDarkMode() ? 'dark' : 'light';\r\n    this.detected = true;\r\n\r\n    return this.coreSpec;\r\n  }\r\n\r\n  /**\r\n   * Returns a slimmer, web-core compatible version of this object.\r\n   */\r\n  public get coreSpec(): DeviceSpec {\r\n    return new DeviceSpec(this.browser, this.formFactor, this.OS, this.touchable);\r\n  }\r\n}\r\n\r\nexport default Device;",
    "import EventEmitter from 'eventemitter3';\r\nimport { DeviceSpec, ManagedPromise, type Keyboard, type KeyboardInterface, type OutputTarget } from '@keymanapp/keyboard-processor';\r\nimport { StubAndKeyboardCache, type KeyboardStub } from 'keyman/engine/package-cache';\r\nimport { PredictionContext } from '@keymanapp/input-processor';\r\nimport { EngineConfiguration } from './engineConfiguration.js';\r\n\r\ninterface EventMap {\r\n  // target, then keyboard.\r\n  'targetchange': (target: OutputTarget) => boolean;\r\n\r\n  /**\r\n   * This event is raised whenever a keyboard change is requested.\r\n   *\r\n   * Note that if the keyboard has not been previously loaded, this event will be raised twice.\r\n   * 1. Before the keyboard is loaded into Keyman Engine for Web.\r\n   * 2. Once the keyboard is loaded, but before it is activated.\r\n   * @param metadata     The to-be-activated keyboard's properties\r\n   * @returns\r\n   */\r\n  'beforekeyboardchange': (metadata: KeyboardStub) => void;\r\n\r\n  /**\r\n   * This event is raised whenever an activating keyboard is being loaded into Keyman Engine for\r\n   * the first time in the user's current session, which is an asynchronous operation.  It is called\r\n   * once the async request is initiated.\r\n   * @param metadata  The registered properties for the keyboard being asynchronously loaded\r\n   * @param onload    A Promise that resolves with `null` when loading successfully completes or\r\n   *                  with an `error` if it fails.\r\n   * @returns\r\n   */\r\n  'keyboardasyncload': (metadata: KeyboardStub, onload: Promise<Error>) => void;\r\n\r\n  /**\r\n   * This event is raised whenever a keyboard is fully activated and set as the current active\r\n   * keyboard within Keyman Engine for Web.\r\n   * @param kbd\r\n   * @returns\r\n   */\r\n  'keyboardchange': (kbd: {keyboard: Keyboard, metadata: KeyboardStub}) => void;\r\n}\r\n\r\nexport interface ContextManagerConfiguration {\r\n  /**\r\n   * A function that resets any state-dependent keyboard key-state information such as\r\n   * emulated modifier state and layer id.  Also purges the context cache.\r\n   * If an `outputTarget` is specified, it will also trigger new-context rule processing.\r\n   *\r\n   * Does not reset option-stores, variable-stores, etc.\r\n   */\r\n  readonly resetContext: (outputTarget?: OutputTarget) => void;\r\n\r\n  /**\r\n   * A predictive-state management object that interfaces the predictive-text banner\r\n   * with the active context.\r\n   */\r\n  readonly predictionContext: PredictionContext;\r\n\r\n  /**\r\n   * The stub & keyboard curation cache holding preloaded keyboards and metadata useable\r\n   * to load those not yet loaded.\r\n   */\r\n  readonly keyboardCache: StubAndKeyboardCache;\r\n}\r\n\r\ninterface PendingActivation {\r\n  target: OutputTarget,\r\n  keyboard: Promise<Keyboard>,\r\n  stub: KeyboardStub;\r\n}\r\n\r\nexport abstract class ContextManagerBase<MainConfig extends EngineConfiguration> extends EventEmitter<EventMap> {\r\n  public static readonly TIMEOUT_THRESHOLD = 10000;\r\n\r\n  abstract initialize(): void;\r\n\r\n  abstract get activeTarget(): OutputTarget;\r\n\r\n  private _predictionContext: PredictionContext;\r\n  protected keyboardCache: StubAndKeyboardCache;\r\n  private _resetContext: (outputTarget?: OutputTarget) => void;\r\n\r\n  private pendingActivations: PendingActivation[] = [];\r\n  protected engineConfig: MainConfig;\r\n\r\n  get predictionContext(): PredictionContext {\r\n    return this._predictionContext;\r\n  }\r\n\r\n  constructor(engineConfig: MainConfig) {\r\n    super();\r\n\r\n    this.engineConfig = engineConfig;\r\n  }\r\n\r\n  configure(config: ContextManagerConfiguration) {\r\n    this._resetContext = config.resetContext;\r\n    this._predictionContext = config.predictionContext;\r\n    this.keyboardCache = config.keyboardCache;\r\n  }\r\n\r\n  insertText(kbdInterface: KeyboardInterface, Ptext: string, PdeadKey: number) {\r\n    // Find the correct output target to manipulate.\r\n    const outputTarget = this.activeTarget;\r\n\r\n    if(outputTarget != null) {\r\n      if(Ptext != null) {\r\n        kbdInterface.output(0, outputTarget, Ptext);\r\n      }\r\n\r\n      if((typeof(PdeadKey)!=='undefined') && (PdeadKey !== null)) {\r\n        kbdInterface.deadkeyOutput(0, outputTarget, PdeadKey);\r\n      }\r\n\r\n      outputTarget.invalidateSelection();\r\n\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  resetContext() {\r\n    this._resetContext(this.activeTarget);\r\n    this.predictionContext.resetContext();\r\n  }\r\n\r\n  abstract get activeKeyboard(): {keyboard: Keyboard, metadata: KeyboardStub};\r\n\r\n  /**\r\n   * Determines the 'target' currently used to determine which keyboard should be active.\r\n   * When `null`, keyboard-activation operations will affect the global default; otherwise,\r\n   * such operations affect only the specified `target`.\r\n   *\r\n   * This method exists to facilitate independent-keyboard mode operations for specific\r\n   * attached elements within the app/browser target.  For `app/webview`, this should\r\n   * always return a consistent value - likely, `null`.\r\n   */\r\n  protected abstract currentKeyboardSrcTarget(): OutputTarget;\r\n\r\n  /**\r\n   * Ensures that newly activated keyboards are set correctly within managed context, possibly\r\n   * against inactive output targets.\r\n   * @param kbd\r\n   * @param target\r\n   */\r\n  protected abstract activateKeyboardForTarget(kbd: {keyboard: Keyboard, metadata: KeyboardStub}, target: OutputTarget);\r\n\r\n  /**\r\n   * Checks the pending keyboard-activation array for an entry corresponding to the specified\r\n   * OutputTarget.  If found, also removes the entry for bookkeeping purposes.\r\n   * @param target  The specific OutputTarget affected by the pending Keyboard activation.\r\n   *                May be `null`, which corresponds to the global default Keyboard.\r\n   * @returns `true` if pending activation is still valid, `false` otherwise.\r\n   */\r\n  private findAndPopActivation(target: OutputTarget): PendingActivation {\r\n    // Array.findIndex requires Chrome 45+. :(\r\n    let activationIndex;\r\n    for(activationIndex = 0; activationIndex < this.pendingActivations.length; activationIndex++) {\r\n      if(this.pendingActivations[activationIndex].target == target) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if(activationIndex == this.pendingActivations.length) {\r\n      return null;\r\n    }\r\n\r\n    return this.pendingActivations.splice(activationIndex, 1)[0];\r\n  }\r\n\r\n  /**\r\n   * Internally registers a pending keyboard-activation's properties, only resolving to a non-null\r\n   * activation if it is still the most recent keyboard-activation request that would affect the\r\n   * corresponding context.\r\n   * @param kbdPromise\r\n   * @param metadata\r\n   * @param target\r\n   * @returns\r\n   */\r\n  protected async deferredKeyboardActivation(\r\n    kbdPromise: Promise<Keyboard>,\r\n    metadata: KeyboardStub,\r\n    target: OutputTarget\r\n  ): Promise<PendingActivation> {\r\n    const activation: PendingActivation = {\r\n      target: target,\r\n      keyboard: kbdPromise,\r\n      stub: metadata\r\n    };\r\n\r\n    // Invalidate existing requests for the specified target.\r\n    this.findAndPopActivation(target);\r\n    this.pendingActivations.push(activation);\r\n    await kbdPromise;\r\n\r\n    // The keyboard-load is complete; is the activation still desired?\r\n    const activationAfterAwait = this.findAndPopActivation(target);\r\n    if(activationAfterAwait == activation) {\r\n      return activation;\r\n    } else if(activationAfterAwait) {\r\n      // Restore the popped element; it doesn't match the current activation attempt.\r\n      this.pendingActivations.push(activationAfterAwait);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Specifies the keyboard id and the language code to use when a 'default' keyboard\r\n   * must be selected by the engine for fallback behaviors.\r\n   */\r\n  protected abstract getFallbackStubKey(): {\r\n    id: string,\r\n    langId: string\r\n  };\r\n\r\n  /**\r\n   * Change active keyboard to keyboard selected by (internal) name and language code\r\n   *\r\n   * Test if selected keyboard already loaded, and simply update active stub if so.\r\n   * Otherwise, insert a script to download and insert the keyboard from the repository\r\n   * or user-indicated file location.\r\n   *\r\n   * @param keyboardId\r\n   * @param languageCode\r\n   * @param saveCookie\r\n   * @returns\r\n   */\r\n  public async activateKeyboard(keyboardId: string, languageCode?: string, saveCookie?: boolean): Promise<boolean> {\r\n    // TODO:  relocate default keyboard behavior here once we can also move core error handling for\r\n    // unfound stubs here.\r\n\r\n    // If there was a previous activation attempt set and still active for the specified keyboard target,\r\n    // cancel it.  For exmaple, if the user selects a preloaded keyboard after having tried to select one\r\n    // still async-loading, we should go with the later setting - the preloaded one.\r\n    this.findAndPopActivation(this.currentKeyboardSrcTarget());\r\n\r\n    const activatingKeyboard = this.prepareKeyboardForActivation(keyboardId, languageCode);\r\n\r\n    const originalKeyboardTarget = this.currentKeyboardSrcTarget();\r\n\r\n    const keyboard = await activatingKeyboard.keyboard;\r\n    if(keyboard == null && activatingKeyboard.metadata) {\r\n      // The activation was async and was cancelled - either by `beforeKeyboardChange` first-pass\r\n      // cancellation or because a different keyboard was requested before completion of the async load.\r\n      return false;\r\n    }\r\n\r\n    /*\r\n     * Triggers `beforeKeyboardChange` event if the current context at the time when activation is possible\r\n     * would be affected by the requested keyboard change.\r\n     * - if a keyboard was asynchronously loaded for this...\r\n     *   - it is possible for the context (in app/browser) to have changed to a page element in\r\n     *     \"independent keyboard\" mode (or away from one)\r\n     *   - This is the \"second\" `beforeKeyboardChange` call - a loaded keyboard may now be activated.\r\n     *\r\n     * If the now-current context would be unaffected by the keyboard change, we do not raise the corresponding\r\n     * event.\r\n     */\r\n    if(this.currentKeyboardSrcTarget() == originalKeyboardTarget) {\r\n      this.emit('beforekeyboardchange', activatingKeyboard.metadata);\r\n    }\r\n\r\n    let kbdStubPair: { keyboard: Keyboard, metadata: KeyboardStub } = null;\r\n    if(keyboard) {\r\n      kbdStubPair = {\r\n        keyboard: keyboard,\r\n        metadata: activatingKeyboard.metadata\r\n      };\r\n    }\r\n\r\n    this.activateKeyboardForTarget(kbdStubPair, originalKeyboardTarget);\r\n\r\n    // Only trigger `keyboardchange` events when they will affect the active context.\r\n    if(this.currentKeyboardSrcTarget() == originalKeyboardTarget) {\r\n      // Perform standard context-reset ops, including the processing of new-context events.\r\n      this.resetContext();\r\n      // Will trigger KeymanEngine handler that passes keyboard to the OSK, displays it.\r\n      this.emit('keyboardchange', this.activeKeyboard);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Based on the provided keyboard id and language code, selects and (if necessary) loads the\r\n   * corresponding keyboard but does not activate it.\r\n   *\r\n   * This acts as a helper to `activateKeyboard`, helping to centralize and DRY out the actual\r\n   * activation of the requested keyboard.  Note that it is a synchronous method and should stay\r\n   * that way, though it should return a `Promise` for the activating keyboard.\r\n   * @param keyboardId\r\n   * @param languageCode\r\n   * @returns\r\n   */\r\n  protected prepareKeyboardForActivation(\r\n    keyboardId: string,\r\n    languageCode?: string\r\n  ): {keyboard: Promise<Keyboard>, metadata: KeyboardStub} {\r\n    // Set default language code\r\n    languageCode ||= '';\r\n\r\n    // Check that the saved keyboard is currently registered\r\n    let requestedStub = null;\r\n    if(keyboardId) {\r\n      requestedStub = this.keyboardCache.getStub(keyboardId, languageCode);\r\n    } else {\r\n      languageCode == '';\r\n    }\r\n\r\n    if(!requestedStub) {\r\n      if(keyboardId) {\r\n        throw new Error(\"No matching stub has been registered.\");\r\n      } else {\r\n        return {\r\n          keyboard: Promise.resolve(null),\r\n          metadata: null\r\n        }\r\n      }\r\n    }\r\n\r\n    // Check if current keyboard matches requested keyboard, but not (necessarily) stub\r\n    if(this.activeKeyboard?.metadata && keyboardId == this.activeKeyboard.metadata.id) {\r\n      const keyboard = this.activeKeyboard.keyboard;\r\n      // In this case, the keyboard is loaded; just update the stub.\r\n\r\n      return {\r\n        keyboard: Promise.resolve(keyboard),\r\n        metadata: requestedStub\r\n      };\r\n    }\r\n\r\n    // Determine if the keyboard was previously loaded but is not active; use the cached, pre-loaded version if so.\r\n    let keyboard: Keyboard;\r\n    if(keyboard = this.keyboardCache.getKeyboardForStub(requestedStub)) {\r\n      return {\r\n        keyboard: Promise.resolve(keyboard),\r\n        metadata: requestedStub\r\n      };\r\n    } else {\r\n      // It's async time - the keyboard is not preloaded within the cache.  Use the stub's data to load it.\r\n\r\n      // `beforeKeyboardChange` - first call\r\n      this.emit('beforekeyboardchange', requestedStub);\r\n\r\n      const defermentPromise = this.engineConfig.deferForInitialization.then(() => {\r\n        // Provide a Promise for completion of the async load process.\r\n        const completionPromise = new ManagedPromise<Error>();\r\n        this.emit('keyboardasyncload', requestedStub, completionPromise.corePromise);\r\n\r\n        let keyboardPromise = this.keyboardCache.fetchKeyboardForStub(requestedStub);\r\n        let timeoutPromise = new Promise<Keyboard>((resolve, reject) => {\r\n          const timeoutMsg = `Sorry, the ${requestedStub.name} keyboard for ${requestedStub.langName} is not currently available.`;\r\n          window.setTimeout(() => reject(new Error(timeoutMsg)), ContextManagerBase.TIMEOUT_THRESHOLD);\r\n        });\r\n\r\n        let combinedPromise = Promise.race([keyboardPromise, timeoutPromise]);\r\n\r\n        // Ensure the async-load Promise completes properly.\r\n        combinedPromise.then(() => {\r\n          completionPromise.resolve(null);\r\n          // Prevent any 'unhandled Promise rejection' events that may otherwise occur from the timeout promise.\r\n          timeoutPromise.catch(() => {});\r\n        });\r\n        combinedPromise.catch((err) => {\r\n          completionPromise.resolve(err);\r\n          throw err;\r\n        });\r\n\r\n        return combinedPromise;\r\n      });\r\n\r\n      // Now the fun part:  note the original call's parameters as a pending activation.\r\n      let promise = this.deferredKeyboardActivation(defermentPromise, requestedStub, this.currentKeyboardSrcTarget());\r\n      return {\r\n        keyboard: promise.then(async (activation) => {\r\n          // Is the activation we requested still pending, or was it cancelled in favor of a\r\n          // different activation in some manner?\r\n          if(!activation) {\r\n            // If the user chose to load a different keyboard afterward that would affect the same\r\n            // output target, the activation is no longer valid.\r\n            return Promise.resolve(null);\r\n          } else {\r\n            return defermentPromise;\r\n          }\r\n        }),\r\n        metadata: requestedStub\r\n      }\r\n    }\r\n  }\r\n}",
    "import EventEmitter from \"eventemitter3\";\r\nimport { type KeyEvent, type RuleBehavior } from \"@keymanapp/keyboard-processor\";\r\nimport KeyEventSourceInterface from './keyEventSource.interface.js';\r\n\r\ninterface EventMap {\r\n  /**\r\n   * Designed to pass key events off to any consuming modules/libraries.\r\n   */\r\n  'keyevent': (event: KeyEvent, callback?: (result: RuleBehavior, error?: Error) => void) => void\r\n}\r\n\r\nexport default class HardKeyboard extends EventEmitter<EventMap> implements KeyEventSourceInterface { }\r\n\r\n// Intended design:\r\n// - KeyEventKeyboard:  website-integrated handler for hardware-keystroke input; interprets DOM events.\r\n//   - app/web\r\n// - AppPassthroughKeyboard:  WebView-hosted forwarding of hardware key events through to the Web engine.\r\n//   - app/embed",
    "import { Keyboard, KeyboardLoaderBase as KeyboardLoader } from \"@keymanapp/keyboard-processor\";\r\nimport EventEmitter from \"eventemitter3\";\r\n\r\nimport KeyboardStub from \"./keyboardStub.js\";\r\n\r\nconst KEYBOARD_PREFIX = \"Keyboard_\";\r\n\r\nfunction prefixed(text: string) {\r\n  if(!text.startsWith(KEYBOARD_PREFIX)) {\r\n    return KEYBOARD_PREFIX + text;\r\n  } else {\r\n    return text;\r\n  }\r\n}\r\n\r\nexport {prefixed as toPrefixedKeyboardId};\r\n\r\nfunction withoutPrefix(text: string) {\r\n  if(text.startsWith(KEYBOARD_PREFIX)) {\r\n    return text.substring(KEYBOARD_PREFIX.length);\r\n  } else {\r\n    return text;\r\n  }\r\n}\r\n\r\nexport {withoutPrefix as toUnprefixedKeyboardId};\r\n\r\ninterface EventMap {\r\n  /**\r\n   * Indicates that the specified stub has just been registered within the cache.\r\n   *\r\n   * Note for future hook:  establish a listener for this event during engine init\r\n   * to denote the first added stub to facilitate auto-activation of the first\r\n   * keyboard to be registered.\r\n   */\r\n  stubadded: (stub: KeyboardStub) => void;\r\n\r\n  /**\r\n   * Indicates that the specified Keyboard has just been added to the cache.\r\n   */\r\n  keyboardadded: (keyboard: Keyboard) => void;\r\n}\r\n\r\nexport default class StubAndKeyboardCache extends EventEmitter<EventMap> {\r\n  private stubSetTable: Record<string, Record<string, KeyboardStub>> = {};\r\n  private keyboardTable: Record<string, Keyboard | Promise<Keyboard>> = {};\r\n\r\n  private readonly keyboardLoader: KeyboardLoader;\r\n\r\n  constructor(keyboardLoader?: KeyboardLoader) {\r\n    super();\r\n    this.keyboardLoader = keyboardLoader;\r\n  }\r\n\r\n  getKeyboardForStub(stub: KeyboardStub): Keyboard {\r\n    return this.getKeyboard(stub.KI);\r\n  }\r\n\r\n  getKeyboard(keyboardID: string): Keyboard {\r\n    if(!keyboardID) {\r\n      return null;\r\n    }\r\n    const entry = this.keyboardTable[prefixed(keyboardID)];\r\n\r\n    // Unit testing may 'trip up' in the DOM, as bundled versions of a class from one bundled\r\n    // module will fail against an `instanceof` expecting the version bundled in a second.\r\n    //\r\n    // Thus, we filter based on `Promise`, which needs no module.\r\n    return entry instanceof Promise ? null : entry;\r\n  }\r\n\r\n  get defaultStub(): KeyboardStub {\r\n    /* See the following two StackOverflow links:\r\n     * - https://stackoverflow.com/a/23202095\r\n     * - https://stackoverflow.com/a/5525820\r\n     *\r\n     * Also: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/values#description\r\n     *\r\n     * As keyboard IDs are never purely numeric, any sufficiently-recent browser will\r\n     * maintain the order in which stubs were added to this cache.\r\n     *\r\n     * Note that if a keyboard is removed, its matching stubs are also removed, so the next most-recent\r\n     * property will take precedence.\r\n     *\r\n     * Might possibly fail to return the oldest registered stub for the oldest of supported browsers\r\n     * (i.e, Android 5.0), but will work for anything decently recent.  Even then... we still supply\r\n     * _a_ keyboard.  Just not in a way that will seem deterministic/controllable to site designers.\r\n     *\r\n     * Warning:  Object.values and Object.entries require Chrome for Android 54, which is higher than\r\n     * API 21's base. Object.keys only requires Chrome for Android 18, so is safe.\r\n     */\r\n\r\n    // An `Object.keys`-based helper function.  Gets the first entry of Object.values for the object.\r\n    // Can be written with stronger type safety... if we get very explicit with generics during calls.\r\n    // That'd be more verbose than desired here.\r\n    function getFirstValue(obj: any) {\r\n      const keys = Object.keys(obj);\r\n      if(keys.length == 0) {\r\n        return undefined;\r\n      } else {\r\n        return obj[keys[0]];\r\n      }\r\n    };\r\n\r\n    const stubTable = getFirstValue(this.stubSetTable) as Record<string, KeyboardStub>;\r\n    if(!stubTable) {\r\n      return undefined;\r\n    } else {\r\n      // First value = first registered stub for that first keyboard.\r\n      // Does not consider later-added stubs, but neither does removeKeyboard - removal is \"all or nothing\".\r\n      return getFirstValue(stubTable) as KeyboardStub;\r\n    }\r\n  }\r\n\r\n  addKeyboard(keyboard: Keyboard) {\r\n    const keyboardID = prefixed(keyboard.id);\r\n    this.keyboardTable[keyboardID] = keyboard;\r\n\r\n    this.emit('keyboardadded', keyboard);\r\n  }\r\n\r\n  fetchKeyboardForStub(stub: KeyboardStub) : Promise<Keyboard> {\r\n    return this.fetchKeyboard(stub.KI);\r\n  }\r\n\r\n  isFetchingKeyboard(keyboardID: string): boolean {\r\n    if(!keyboardID) {\r\n      throw new Error(\"Keyboard ID must be specified\");\r\n    }\r\n\r\n    keyboardID = prefixed(keyboardID);\r\n\r\n    const cachedEntry = this.keyboardTable[keyboardID];\r\n    return cachedEntry instanceof Promise;\r\n  }\r\n\r\n  fetchKeyboard(keyboardID: string): Promise<Keyboard> {\r\n    if(!keyboardID) {\r\n      throw new Error(\"Keyboard ID must be specified\");\r\n    }\r\n\r\n    if(!this.keyboardLoader) {\r\n      throw new Error(\"Cannot load keyboards; this cache was configured without a loader\");\r\n    }\r\n\r\n    keyboardID = prefixed(keyboardID);\r\n\r\n    const cachedEntry = this.keyboardTable[keyboardID];\r\n    if(cachedEntry instanceof Keyboard) {\r\n      return Promise.resolve(cachedEntry);\r\n    } else if(cachedEntry instanceof Promise) {\r\n      return cachedEntry;\r\n    }\r\n\r\n    const stub = this.getStub(keyboardID, null);\r\n    if(!stub) {\r\n      throw new Error(`No stub for ${withoutPrefix(keyboardID)} has been registered`);\r\n    }\r\n\r\n    if(!stub.filename) {\r\n      throw new Error(`The registered stub for ${withoutPrefix(keyboardID)} lacks a path to the main keyboard file`);\r\n    }\r\n\r\n    const promise = this.keyboardLoader.loadKeyboardFromStub(stub);\r\n    this.keyboardTable[keyboardID] = promise;\r\n\r\n    promise.then((kbd) => {\r\n      // Overrides the built-in ID in case of keyboard namespacing.\r\n      kbd.scriptObject[\"KI\"] = keyboardID;\r\n      this.addKeyboard(kbd);\r\n    }).catch((err) => {\r\n      delete this.keyboardTable[keyboardID];\r\n      throw err;\r\n    })\r\n\r\n    return promise;\r\n  }\r\n\r\n  addStub(stub: KeyboardStub) {\r\n    const keyboardID = prefixed(stub.KI);\r\n    const stubTable = this.stubSetTable[keyboardID] = this.stubSetTable[keyboardID] ?? {};\r\n    stubTable[stub.KLC] = stub;\r\n\r\n    this.emit('stubadded', stub);\r\n  }\r\n\r\n  findMatchingStub(stub: KeyboardStub) {\r\n    return this.getStub(stub.KI, stub.KLC);\r\n  }\r\n\r\n  getStub(keyboardID: string, languageID: string): KeyboardStub;\r\n  getStub(keyboard: Keyboard, languageID?: string): KeyboardStub;\r\n  getStub(arg0: string | Keyboard, arg1?: string): KeyboardStub {\r\n    let keyboardID: string;\r\n    let languageID = arg1 || '---';\r\n\r\n    if(arg0 instanceof Keyboard) {\r\n      keyboardID = arg0.id;\r\n    } else {\r\n      keyboardID = arg0;\r\n    }\r\n\r\n    if(keyboardID) {\r\n      keyboardID = prefixed(keyboardID);\r\n    }\r\n\r\n    const stubTable = this.stubSetTable[keyboardID] ?? {};\r\n\r\n    if(languageID != '---') {\r\n      return stubTable[languageID];\r\n    } else {\r\n      const keys = Object.keys(stubTable);\r\n      if(keys.length == 0) {\r\n        return null;\r\n      } else {\r\n        return stubTable[keys[0]];\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Removes all metadata (stubs) associated with a specific keyboard from the cache, optionally\r\n   * removing the cached keyboard as well.\r\n   * @param keyboard Either the keyboard ID or `Keyboard` instance\r\n   * @param purge If `true`, will also purge the `Keyboard` instance itself from the cache.\r\n   *              If `false`, only forgets the metadata (stubs).\r\n   */\r\n  forgetKeyboard(keyboard: string | Keyboard, purge: boolean = false) {\r\n    let id: string = (keyboard instanceof Keyboard) ? keyboard.id : prefixed(keyboard);\r\n\r\n    if(this.stubSetTable[id]) {\r\n      delete this.stubSetTable[id];\r\n    }\r\n\r\n    if(purge && this.keyboardTable[id]) {\r\n      delete this.keyboardTable[id];\r\n    }\r\n  }\r\n\r\n  getStubList(): KeyboardStub[] {\r\n    let arr: KeyboardStub[] = [];\r\n\r\n    const kbdIds = Object.keys(this.stubSetTable);\r\n    for(let kbdId of kbdIds) {\r\n      let row = this.stubSetTable[kbdId];\r\n      const langIds = Object.keys(row);\r\n      for(let langId of langIds) {\r\n        arr.push(row[langId]);\r\n      }\r\n    }\r\n\r\n    return arr;\r\n  }\r\n}",
    "import {\r\n  type KeyboardAPIPropertySpec as APISimpleKeyboard,\r\n  type KeyboardAPIPropertyMultilangSpec as APICompoundKeyboard,\r\n  KeyboardProperties,\r\n  type LanguageAPIPropertySpec,\r\n} from '@keymanapp/keyboard-processor';\r\nimport { toPrefixedKeyboardId as prefixed } from './stubAndKeyboardCache.js';\r\n\r\n\r\n// Language regions as defined by cloud server\r\nexport const REGIONS = ['World','Africa','Asia','Europe','South America','North America','Oceania','Central America','Middle East'];\r\nexport const REGION_CODES = ['un','af','as','eu','sa','na','oc','ca','me'];\r\n\r\nexport type KeyboardAPISpec = (APISimpleKeyboard | APICompoundKeyboard) & {\r\n  displayName?: string;\r\n  filename: string\r\n};\r\n\r\nexport interface RawKeyboardStub extends KeyboardStub {};\r\n\r\n/*\r\n * Get keyboard path (relative or absolute)\r\n * KeymanWeb 2 revised keyboard location specification:\r\n *  (a) absolute URL (includes ':') - load from specified URL\r\n *  (b) relative URL (starts with /, ./, ../) - load with respect to current page\r\n *  (c) filename only (anything else) - prepend keyboards option to URL\r\n *      (e.g. default keyboards option will be set by Cloud)\r\n *\r\n * So, to fully interpret the following regex, it detects the following patterns (at minimum):\r\n * ../file (but not .../file)\r\n * ./file\r\n * /file\r\n * http:// (on the colon)\r\n * hello:world (on the colon) - that one miiiight be less intentional, though.  Would 'fall\r\n * over' on attempted use anyway, since it's not a valid path.\r\n *\r\n * Alternative clearer version - '^(\\.{0,2}/)|(:)'?\r\n * Unless backslashes should be able to replace dots?\r\n */\r\nconst REGEX_FOR_PRECONFIGURED_PATH=RegExp('^(([\\\\.]/)|([\\\\.][\\\\.]/)|(/))|(:)');\r\n\r\nfunction configureFilePathing(path: string, configurationBasePath: string) {\r\n  configurationBasePath = configurationBasePath || '';\r\n  if(path && !REGEX_FOR_PRECONFIGURED_PATH.test(path)) {\r\n    return configurationBasePath + path;\r\n  } else {\r\n    return path;\r\n  }\r\n}\r\n\r\nexport default class KeyboardStub extends KeyboardProperties {\r\n  KR: string;\r\n  KRC: string;\r\n  KF: string;\r\n\r\n  KP?: string;\r\n\r\n  // For the first flavor of constructor, note that Developer relies on KMW's path config to complete the paths...\r\n  // even though supplying an 'internal'-style stub.\r\n  public constructor(rawStub: RawKeyboardStub, keyboardBaseUri?: string, fontBaseUri?: string);\r\n  public constructor(apiSpec: APISimpleKeyboard & { filename: string }, keyboardBaseUri?: string, fontBaseUri?: string);\r\n  public constructor(kbdId: string, lngId: string);\r\n  constructor(arg0: string | RawKeyboardStub | (APISimpleKeyboard & { filename: string }), arg1?: string, arg2?: string) {\r\n    if(typeof arg0 !== 'string') {\r\n      if(arg0.id !== undefined) {\r\n        let apiSpec = arg0 as APISimpleKeyboard & { filename: string };\r\n        apiSpec.id = prefixed(apiSpec.id);\r\n        super(apiSpec, arg2);\r\n        this.KF = configureFilePathing(apiSpec.filename, arg1);\r\n        this.mapRegion(apiSpec.languages);\r\n      } else {\r\n        let rawStub = arg0 as RawKeyboardStub;\r\n        rawStub.KI = prefixed(rawStub.KI);\r\n        super(rawStub, arg2);\r\n\r\n        this.KF = configureFilePathing(rawStub.KF, arg1);\r\n        this.KP = rawStub.KP;\r\n        this.KR = rawStub.KR;\r\n        this.KRC = rawStub.KRC;\r\n\r\n\r\n        return;\r\n      }\r\n    } else {\r\n      super(prefixed(arg0), arg1);\r\n    }\r\n  }\r\n\r\n  private mapRegion(language: LanguageAPIPropertySpec) {\r\n    // Accept region as number (from Cloud server), code, or name\r\n    const region=language.region;\r\n    let rIndex=0;\r\n    if(typeof(region) == 'number') {\r\n      if(region < 1 || region > 9) {\r\n        rIndex = 0;\r\n      } else {\r\n        rIndex = region-1;\r\n      }\r\n    } else if(typeof(region) == 'string') {\r\n      let list = (region.length == 2 ? REGION_CODES : REGIONS);\r\n      for(let i=0; i<list.length; i++) {\r\n        if(region.toLowerCase() == list[i].toLowerCase()) {\r\n          rIndex=i;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.KR = REGIONS[rIndex];\r\n    this.KRC = REGION_CODES[rIndex];\r\n  }\r\n\r\n  get region(): string {\r\n    return this.KR;\r\n  }\r\n\r\n  get regionCode(): string {\r\n    return this.KRC;\r\n  }\r\n\r\n  get filename(): string {\r\n    return this.KF;\r\n  }\r\n\r\n  /**\r\n   * Utility to convert API 'stubs' to internal KeyboardStub[]\r\n   * @param arg\r\n   * @returns (KeyboardStub|ErrorStub)[]\r\n   */\r\n  public static toStubs(arg: KeyboardAPISpec, keyboardBaseUri: string, fontBaseUri: string): (KeyboardStub|ErrorStub)[] {\r\n    let errorMsg: string = '';\r\n\r\n    if(typeof(arg.language) != \"undefined\") {\r\n      console.warn(\"The 'language' property for keyboard stubs has been deprecated.  Please use the 'languages' property instead.\");\r\n    }\r\n    arg.languages ||= arg.language;\r\n\r\n    if (!arg) {\r\n      errorMsg = \"Stub undefined\";\r\n    } else if (!arg.id) {\r\n      errorMsg = \"KeyboardStub has undefined id\";\r\n    } else if (!arg.languages) {\r\n      errorMsg = \"KeyboardStub has undefined languages\"\r\n    }\r\n    if (errorMsg != '') {\r\n      return [{error: new Error(errorMsg)}];\r\n    }\r\n\r\n    // We have a valid API object to convert over.\r\n\r\n    // Extract all the languages\r\n    let languages: LanguageAPIPropertySpec[] = [];\r\n    if (!Array.isArray(arg.languages)) {\r\n      languages.push(arg.languages);\r\n    } else {\r\n      languages = languages.concat(arg.languages);\r\n    }\r\n\r\n    let stubs: KeyboardStub[] = [];\r\n    languages.forEach(language => {\r\n      // The deprecated `language` is assigned to satisfy TS type-checking.\r\n      const intermediate = {...arg, languages: language, language: undefined};\r\n      const stub: KeyboardStub = new KeyboardStub(intermediate, keyboardBaseUri, fontBaseUri);\r\n\r\n      stubs.push(stub);\r\n    })\r\n\r\n    return stubs;\r\n  }\r\n\r\n  public merge(stub: KeyboardStub) {\r\n    this.KL ||= stub.KL;\r\n    this.KR ||= stub.KR;\r\n    this.KRC ||= stub.KRC;\r\n    this.KN ||= stub.KN;\r\n    this.KF ||= stub.KF;\r\n    this.KFont ||= stub.KFont;\r\n    this.KOskFont ||= stub.KOskFont;\r\n\r\n    if(stub._displayName) {\r\n      this._displayName ||= stub._displayName;\r\n    }\r\n  }\r\n\r\n  public validateForCustomKeyboard(): Error {\r\n    if(super.validateForCustomKeyboard() || !this.KF || !this.KR) {\r\n      return new Error('To use a custom keyboard, you must specify file name, keyboard id, keyboard name, language, language code, and region.');\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n// Information about a keyboard that fails to get added\r\nexport interface ErrorStub {\r\n  keyboard?: {\r\n    id: string;\r\n    name: string;\r\n  },\r\n  language?: {\r\n    id?: string;\r\n    name?: string;\r\n  }\r\n\r\n  error: Error;\r\n}\r\n\r\nexport function mergeAndResolveStubPromises(keyboardStubs: (KeyboardStub|ErrorStub)[], errorStubs: ErrorStub[]) :\r\n  Promise<(KeyboardStub|ErrorStub)[]> {\r\n  if (errorStubs.length == 0) {\r\n    return Promise.resolve(keyboardStubs);\r\n  } if (keyboardStubs.length == 0) {\r\n    return Promise.reject(errorStubs);\r\n  } else {\r\n    // Merge this with errorStubs\r\n    let result: (KeyboardStub|ErrorStub)[] = keyboardStubs;\r\n    return Promise.resolve(result.concat(errorStubs));\r\n  }\r\n}",
    "import EventEmitter from 'eventemitter3';\r\n\r\nimport { PathConfiguration } from 'keyman/engine/paths';\r\n\r\nimport { default as KeyboardStub, ErrorStub, KeyboardAPISpec, mergeAndResolveStubPromises } from '../keyboardStub.js';\r\nimport { LanguageAPIPropertySpec, ManagedPromise, Version } from '@keymanapp/keyboard-processor';\r\nimport CloudRequesterInterface from './requesterInterface.js';\r\n\r\n// For when the API call straight-up times out.\r\nexport const CLOUD_TIMEOUT_ERR = \"The Cloud API request timed out.\";\r\n// Currently cannot distinguish between \"no matching keyboard\" and other script-load errors.\r\nexport const CLOUD_MALFORMED_OBJECT_ERR = \"Could not find a keyboard with that ID.\";\r\n// Represents unspecified errors that occur when registering the results of a successful API call.\r\nexport const CLOUD_STUB_REGISTRATION_ERR = \"The Cloud API failed to find an appropriate keyboard.\";\r\n// Represents custom, specified KMW errors that occur when registering the results of a successful API call.\r\nexport const CLOUD_REGISTRATION_ERR = \"Error occurred while registering keyboards: \";\r\n\r\nexport const MISSING_KEYBOARD = function(kbdid: string) {\r\n  return kbdid + ' keyboard not found.';\r\n}\r\n\r\ntype CloudAPIFont = {\r\n  family: string,\r\n  source: string | string[]\r\n}\r\n\r\ntype CloudQueryOptions = {\r\n  context: 'keyboard' | 'language';\r\n  keyboardid?: string,\r\n  keyboardBaseUri?: string,\r\n  fontBaseUri?: string\r\n}\r\n\r\ntype CloudKeyboardQueryResult = {\r\n  /**\r\n   * A 1D array is returned for keyboard-id based queries: `addKeyboards('sil_cameroon_qwerty')`\r\n   * returns a single array with one entry.\r\n   *\r\n   * A 2D array is returned for language-code based keyboard queries:  `addKeyboards('@fr,@en')`\r\n   * returns two arrays of keyboards, one per language code.\r\n   * - First index = fr\r\n   * - Second = en\r\n   */\r\n  keyboard: KeyboardAPISpec | KeyboardAPISpec[] | KeyboardAPISpec[][],\r\n  options: { context: 'keyboard' } & CloudQueryOptions,\r\n  error?: string,\r\n  timerid: string\r\n};\r\n\r\ntype CloudLanguagesQueryResult = {\r\n  languages: LanguageAPIPropertySpec[],\r\n  options: { context: 'language' } & CloudQueryOptions,\r\n  error?: string,\r\n  keyboardid?: string,\r\n  timerid: string\r\n}\r\n\r\nexport type CloudQueryResult = CloudKeyboardQueryResult | CloudLanguagesQueryResult;\r\n\r\ninterface EventMap {\r\n  'unboundregister': (registration: ReturnType<CloudQueryEngine['_registerCore']>) => void\r\n}\r\n\r\nexport default class CloudQueryEngine extends EventEmitter<EventMap> {\r\n  private cloudResolutionPromises: Record<number, ManagedPromise<KeyboardStub[] | ManagedPromise<LanguageAPIPropertySpec[]>>> = {};\r\n\r\n  private _languageListPromise: ManagedPromise<LanguageAPIPropertySpec[]>;\r\n  private languageFetchStarted: boolean = false;\r\n\r\n  private requestEngine: CloudRequesterInterface;\r\n  private pathConfig: PathConfiguration;\r\n\r\n  constructor(requestEngine: CloudRequesterInterface, pathConfig: PathConfiguration) {\r\n    super();\r\n\r\n    this.requestEngine = requestEngine;\r\n    this.pathConfig = pathConfig;\r\n\r\n    this._languageListPromise = new ManagedPromise<LanguageAPIPropertySpec[]>;\r\n  }\r\n\r\n  public get languageListPromise(): Promise<LanguageAPIPropertySpec[]> {\r\n    if(!this.languageFetchStarted) {\r\n      this.languageFetchStarted = true;\r\n\r\n      this.keymanCloudRequest('', true).catch((error) => {\r\n        // If promise is not error, then...\r\n        this.languageFetchStarted = false;\r\n\r\n        // We should allow retries.\r\n        this._languageListPromise.reject(error);\r\n        this._languageListPromise = new ManagedPromise<LanguageAPIPropertySpec[]>;\r\n      });\r\n    }\r\n\r\n    return this._languageListPromise.corePromise;\r\n  }\r\n\r\n  /**\r\n   *  Request keyboard metadata from the Keyman Cloud keyboard metadata server\r\n   *\r\n   *  @param  {string}   cmd        command string\r\n   *  @param  {boolean?} byLanguage if true, context=languages, else context=keyboards\r\n   *  @returns {Promise<(KeyboardStub[]>} Promise of added keyboard stubs\r\n   **/\r\n  keymanCloudRequest(cmd: string, byLanguage: true): Promise<LanguageAPIPropertySpec[]>;\r\n  keymanCloudRequest(cmd: string, byLanguage: false): Promise<KeyboardStub[]>;\r\n  keymanCloudRequest(cmd: string, byLanguage?: boolean): Promise<KeyboardStub[]> | Promise<LanguageAPIPropertySpec[]> {\r\n    // Some basic support toward #5044, but definitely not a full solution toward it.\r\n    // Wraps the cloud API keyboard-stub request in a Promise, allowing response on network\r\n    // and/or parser errors.  Also detects when `register` returns due to an error case that\r\n    // does not throw errors.  (There are a few such \"empty\" `return` statements there.)\r\n    const URL='https://api.keyman.com/cloud/4.0/'\r\n              + ((arguments.length > 1) && byLanguage ? 'languages' : 'keyboards');\r\n\r\n\r\n    const queryConfig = '?jsonp=keyman.register&languageidtype=bcp47&version='+Version.CURRENT.toString();\r\n\r\n    const query = URL + queryConfig + cmd;\r\n\r\n    let { promise, queryId } = this.requestEngine.request(query);\r\n    this.cloudResolutionPromises[queryId] = promise as any;\r\n\r\n    promise.finally(() => {\r\n      delete this.cloudResolutionPromises[queryId];\r\n    });\r\n\r\n    return promise.corePromise as any;\r\n  }\r\n\r\n  /**\r\n   * Call back from cloud for adding keyboard metadata\r\n   *\r\n   * This function should be published to scripts returned from the cloud;\r\n   * they will expect to call it as `keyman.register`.\r\n   *\r\n   * @param {Object}    x   metadata object\r\n   **/\r\n  registerFromCloud = (x: CloudQueryResult) => {\r\n    const promiseid = x.timerid;\r\n\r\n    let result: KeyboardStub[] | LanguageAPIPropertySpec[] | Error;\r\n    try {\r\n      result = this._registerCore(x);\r\n    } catch(err) {\r\n      result = new Error(CLOUD_REGISTRATION_ERR + err);\r\n    }\r\n\r\n    if(!promiseid) {\r\n      this.emit('unboundregister', result);\r\n      return;\r\n    } else {\r\n      const promise: ManagedPromise<KeyboardStub[]> | ManagedPromise<LanguageAPIPropertySpec[]> = this.cloudResolutionPromises[promiseid];\r\n\r\n      if(!promise) {\r\n        this.emit('unboundregister', result);\r\n        return;\r\n      } else {\r\n        try {\r\n          if(result instanceof Error) {\r\n            promise.reject(result as Error);\r\n          } else {\r\n            promise.resolve(result as any);\r\n          }\r\n        } finally {\r\n          delete this.cloudResolutionPromises[promiseid];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call back from cloud for adding keyboard metadata\r\n   *\r\n   * @param {Object}    queryResult   metadata object\r\n   **/\r\n  private _registerCore(queryResult: CloudQueryResult): KeyboardStub[] | LanguageAPIPropertySpec[] | Error { // TODO (#5044): should return heterogenous type; allow array of stubs.\r\n    const options: CloudQueryOptions = queryResult.options;\r\n\r\n    // Font path defined by cloud entry\r\n    let fontPath=options['fontBaseUri'];\r\n\r\n    // or overridden locally, in page source\r\n    if(this.pathConfig.fonts != '') {\r\n      fontPath=this.pathConfig.fonts;\r\n    }\r\n    else {\r\n      // If there's no preconfigured option for font paths, uses the cloud's returned `fontPath` in its place.\r\n      this.pathConfig.updateFontPath(fontPath);\r\n    }\r\n\r\n    // Indicate if unable to register keyboard\r\n    if(typeof(queryResult.error) == 'string') {\r\n      // Currently unreachable (24 May 2021 - API returns a 404; returned 'script' does not call register)\r\n      var badName='';\r\n      if(typeof(queryResult.options.keyboardid) == 'string') {\r\n        let keyboardId = queryResult.options.keyboardid;\r\n        badName = keyboardId.substring(0,1).toUpperCase() + keyboardId.substring(1);\r\n      }\r\n\r\n      return new Error(MISSING_KEYBOARD(badName));\r\n    }\r\n\r\n    // Ignore callback unless the context is defined\r\n    if(typeof(options) == 'undefined' || typeof(options['context']) == 'undefined') {\r\n      return new Error(CLOUD_MALFORMED_OBJECT_ERR);\r\n    }\r\n\r\n    // Register each keyboard for the specified language codes\r\n    let stubs: KeyboardStub[] = [];\r\n\r\n    if(options.context == 'keyboard') {\r\n      let i, kp=(queryResult as CloudKeyboardQueryResult).keyboard;\r\n      // Process array of keyboard definitions\r\n      if(Array.isArray(kp)) {\r\n        for(i=0; i<kp.length; i++) {\r\n          // Note:  if an invalid language code is specified, the elements here may be\r\n          //        empty arrays.  Will not report an error if so.\r\n          stubs = stubs.concat(CloudQueryEngine.registerLanguagesForKeyboard(kp[i],options,i));\r\n        }\r\n      } else { // Process a single keyboard definition\r\n        stubs = stubs.concat(CloudQueryEngine.registerLanguagesForKeyboard(kp,options,0));\r\n      }\r\n    } else if(options.context == 'language') { // Download the full list of supported keyboard languages\r\n      const languageList = (queryResult as CloudLanguagesQueryResult).languages;\r\n      this._languageListPromise.resolve(languageList);\r\n      return languageList;\r\n    }\r\n\r\n    // Return any new entries to the `keyboardStubs` array.\r\n    return stubs;\r\n  }\r\n\r\n\r\n  /**\r\n   *  Register a keyboard for each associated language\r\n   *\r\n   *  @param  {Object}  kp  Keyboard Object or Object array\r\n   *  @param  {Object}  options   keymanCloud callback options\r\n   *  @param  {number}  nArg  keyboard index in argument array\r\n   *\r\n   **/\r\n  private static registerLanguagesForKeyboard(kp: KeyboardAPISpec | KeyboardAPISpec[], options: CloudQueryOptions, nArg: number): KeyboardStub[] {\r\n    let kbId='';\r\n\r\n    // Do not attempt to process badly formatted requests\r\n    if(typeof(kp) == 'undefined') {\r\n      return [];\r\n    }\r\n\r\n    if(typeof(options.keyboardid) == 'string') {\r\n      kbId = options.keyboardid.split(',')[nArg];\r\n    }\r\n\r\n    // When keyboards requested by language code, several keyboards may be returned as an array\r\n    if(Array.isArray(kp)) {\r\n      // If language code is suffixed by $, register all keyboards for this language\r\n      if(kp.length == 1 || kbId.substr(-1,1) == '$' || kbId == '') {\r\n        let stubs: KeyboardStub[] = [];\r\n\r\n        for(let i=0; i<kp.length; i++) {\r\n          stubs = stubs.concat(this.registerLanguagesForKeyboard(kp[i],options,nArg));\r\n        }\r\n\r\n        return stubs;\r\n      } else {\r\n        let nDflt = 0;\r\n\r\n        // Register the default keyboard for the language code\r\n        // Until a default is defined, the default will be the Windows keyboard,\r\n        // that is, the keyboard named for the language (exception: English:US), or the\r\n        // first keyboard found.\r\n\r\n        for(let i=0; i<kp.length; i++) {\r\n          let id=kp[i].id.toLowerCase();\r\n          if(id == 'us') {\r\n            id='english';\r\n          }\r\n\r\n          if(Array.isArray(kp[i].languages)) {\r\n            let langArray = kp[i].languages as LanguageAPIPropertySpec[];\r\n            for(let j=0; j < langArray.length; j++) {\r\n              if(id == langArray[j].name.toLowerCase()) {\r\n                nDflt = i;\r\n                break;\r\n              }\r\n            }\r\n          } // else nDflt === 0 already.\r\n        }\r\n\r\n        return this.registerLanguagesForKeyboard(kp[nDflt],options,nArg);\r\n      }\r\n    } else { // Otherwise, process a single keyboard for the specified languages\r\n      // Font path defined by cloud entry\r\n      let fontPath = options.fontBaseUri || '';\r\n\r\n      const allStubs = KeyboardStub.toStubs(kp, options.keyboardBaseUri, fontPath);\r\n\r\n      // May need to filter returned stubs by language\r\n      let lgCode=kbId.split('@')[1];\r\n      if(allStubs.length == 1 && typeof (allStubs[0] as ErrorStub).error != 'undefined') {\r\n        throw (allStubs[0] as ErrorStub).error;\r\n      } else if(typeof(lgCode) != 'string') {\r\n        return allStubs as KeyboardStub[];\r\n      } else {\r\n        lgCode=lgCode.replace(/\\$$/,'');\r\n        return [(allStubs as KeyboardStub[]).find((stub) => stub.KLC == lgCode)];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build 362: addKeyboardArray() link to Cloud. One or more arguments may be used\r\n   *\r\n   * @param   x  keyboard name string or keyboard metadata JSON object\r\n   * @returns resolved or rejected promise with merged array of stubs.\r\n   */\r\n  async fetchCloudStubs(cloudList: string[]): Promise<(KeyboardStub|ErrorStub)[]> {\r\n    // // Ensure keymanweb is initialized before continuing to add keyboards\r\n    // if(!this.keymanweb.initialized) {\r\n    //   await this.deferment;\r\n    // }\r\n\r\n    if(cloudList.length == 0) {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    // Update the keyboard metadata list from keyman.com - build the command\r\n    let cmd='&keyboardid=';\r\n    let comma = '';\r\n    for(let i=0; i<cloudList.length; i++) {\r\n      cmd=cmd+comma+cloudList[i].toString();\r\n      comma=',';\r\n    }\r\n\r\n    let errorStubs: ErrorStub[] = [];\r\n    // Request keyboard metadata from the Keyman Cloud keyboard metadata server\r\n    try {\r\n      let result: (KeyboardStub|ErrorStub)[]|Error = await this.keymanCloudRequest(cmd,false);\r\n      return mergeAndResolveStubPromises(result, errorStubs);\r\n    } catch(err) {\r\n      // We don't have keyboard info for this ErrorStub\r\n      console.error(err);\r\n      let stub: ErrorStub = {error: err};\r\n      errorStubs.push(stub);\r\n      return Promise.reject(errorStubs);\r\n    }\r\n  }\r\n}",
    "import {\r\n  KeyboardAPIPropertySpec,\r\n  KeyboardLoaderBase as KeyboardLoader,\r\n  LanguageAPIPropertySpec,\r\n  RawKeyboardMetadata\r\n} from \"@keymanapp/keyboard-processor\";\r\nimport { PathConfiguration } from \"keyman/engine/paths\";\r\n\r\n// TODO:  is cleanup needed here, to use local paths instead?\r\nimport {\r\n  CloudQueryEngine,\r\n  type ErrorStub,\r\n  KeyboardAPISpec,\r\n  KeyboardStub,\r\n  StubAndKeyboardCache,\r\n  RawKeyboardStub,\r\n  mergeAndResolveStubPromises,\r\n  toUnprefixedKeyboardId as unprefixed\r\n } from \"./index.js\";\r\nimport { default as CloudRequesterInterface } from \"./cloud/requesterInterface.js\";\r\n\r\nclass CloudRequestEntry {\r\n  id: string;\r\n  language?: string;\r\n  version?: string;\r\n\r\n  constructor(id: string, language?: string) {\r\n    this.id = id;\r\n    this.language = language;\r\n  }\r\n\r\n  toString(): string {\r\n    let str=this.id;\r\n\r\n    if(this.language) {\r\n      str=str+'@'+this.language;\r\n      if(this.version) {\r\n        str=str+'@'+this.version;\r\n      }\r\n    } else {\r\n      if(this.version) {\r\n        str=str+'@@'+this.version;\r\n      }\r\n    }\r\n\r\n    //TODO: add specifier validation...\r\n\r\n    return str;\r\n  }\r\n}\r\n\r\nfunction convertToErrorStub(stub: {id: string, name: string}, err: Error | string): ErrorStub {\r\n  return {\r\n    keyboard: {\r\n      id : stub.id,\r\n      name: stub.name\r\n    },\r\n    error: typeof err == 'string' ? new Error(err) : err\r\n  };\r\n}\r\n\r\nfunction toQuerySpecs(id: string, langId: string, version?: string): CloudRequestEntry {\r\n  let obj = new CloudRequestEntry(id, langId);\r\n  if(version) {\r\n    obj.version = version;\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Function       isUniqueRequest\r\n * Scope          Private\r\n * @param         {Object}    tEntry\r\n * Description    Checks to ensure that the stub isn't already loaded within KMW or subject\r\n *                to an already-pending request.\r\n */\r\nfunction isUniqueRequest(cache: StubAndKeyboardCache, cloudList: {id: string, language?: string}[], tEntry: CloudRequestEntry) {\r\n  if(cache.getStub(tEntry.id, tEntry.language) == null) {\r\n    for(let k=0; k < cloudList.length; k++) {\r\n      if(cloudList[k].id == tEntry['id'] && cloudList[k].language == tEntry.language) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\n// TODO:  Move to the keyboard-cache child project - we can test it headlessly there!\r\nexport default class KeyboardRequisitioner {\r\n  readonly cache: StubAndKeyboardCache;\r\n  readonly cloudQueryEngine: CloudQueryEngine;\r\n  readonly pathConfig: PathConfiguration;\r\n\r\n  constructor(keyboardLoader: KeyboardLoader, keyboardRequester: CloudRequesterInterface, pathConfig: PathConfiguration) {\r\n    this.pathConfig = pathConfig;\r\n    this.cache = new StubAndKeyboardCache(keyboardLoader);\r\n    this.cloudQueryEngine = new CloudQueryEngine(keyboardRequester, this.pathConfig);\r\n\r\n    // Handles keymanweb.com's precached keyboard array.  There is no associated promise,\r\n    // so there's nothing handling the `register` call's results otherwise.\r\n    this.cloudQueryEngine.on('unboundregister', (registration) => {\r\n      // Internal, undocumented use-case of `keyman.register`:  precached keyboard loading\r\n      // Other uses may trigger errors, especially if there's a type-structure mismatch.\r\n      // Those errors should not be handled here; let them surface.\r\n      if(Array.isArray(registration)) {\r\n        registration.forEach((entry) => {\r\n          this.cache.addStub(entry);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  addKeyboardArray(x: (string|RawKeyboardMetadata)[]): Promise<(KeyboardStub | ErrorStub)[]> {\r\n    let completeStubs: KeyboardStub[] = [];\r\n    let incompleteStubs: KeyboardStub[] = [];\r\n    let stubs: KeyboardStub[] = [];\r\n    let identifiers: string[] = [];\r\n    let errorStubs: ErrorStub[] = [];\r\n\r\n    // #region Parameter preprocessing: is incoming data already 'complete', or do we need to fetch the 'complete' version?\r\n\r\n    for(let entry of x) {\r\n      if(typeof entry == 'string' && entry.length > 0) {\r\n        identifiers.push(entry);\r\n      } else { // is some sort of object.\r\n        if(entry['KI'] || entry['KL'] || entry['KLC'] || entry['KFont'] || entry['KOskFont']) {\r\n          stubs.push(new KeyboardStub(entry as RawKeyboardStub));\r\n        } else {\r\n          let apiSpecEntry = entry as KeyboardAPISpec;\r\n          if(typeof(apiSpecEntry.language) != \"undefined\") {\r\n            console.warn(\"The 'language' property for keyboard stubs has been deprecated.  Please use the 'languages' property instead.\");\r\n          }\r\n          apiSpecEntry.languages ||= apiSpecEntry.language;\r\n\r\n          if(typeof apiSpecEntry.languages === 'undefined') {\r\n            let msg = 'To use keyboard \\'' + apiSpecEntry.id + '\\', you must specify languages.';\r\n            errorStubs.push(convertToErrorStub(apiSpecEntry, msg));\r\n          } else if(Array.isArray(apiSpecEntry.languages)) {\r\n            let splitStubs = KeyboardStub.toStubs(apiSpecEntry, this.pathConfig.keyboards, this.pathConfig.fonts);\r\n            for(let stub of splitStubs) {\r\n              if(stub instanceof KeyboardStub) {\r\n                stubs.push(stub);\r\n              } else {\r\n                errorStubs.push(stub);\r\n              }\r\n            }\r\n          } else { // is a single-language entry.\r\n            const singleLangEntry = apiSpecEntry as KeyboardAPIPropertySpec & { filename: string };\r\n            stubs.push(new KeyboardStub(singleLangEntry, this.pathConfig.keyboards, this.pathConfig.fonts));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Next pass: determine which stubs are fully-formed and which are not.\r\n    for(let stub of stubs) {\r\n      if(stub.KF) {\r\n        let err = stub.validateForCustomKeyboard();\r\n        if(err) {\r\n          errorStubs.push(convertToErrorStub(stub, err));\r\n        } else {\r\n          completeStubs.push(stub); // completes are directly added (if possible without error)\r\n        }\r\n      } else {\r\n        incompleteStubs.push(stub);  // incompletes are only used to build a query & are not merged back later.\r\n      }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // After that, request stubs that aren't fully-formed / are just requested by string.\r\n    // Verify that we have at least a keyboard ID or a language code.\r\n    let cloudList: CloudRequestEntry[] = [];\r\n    for(let incomplete of incompleteStubs) {\r\n      if(!incomplete.KI && !incomplete.KLC) {\r\n        errorStubs.push(convertToErrorStub(incomplete, \"Cannot fetch keyboard information without a keyboard ID or language code.\"));\r\n        continue;\r\n      }\r\n\r\n      // Requests not of string form never specify a specific version.\r\n      // If an 'incomplete stub', we may have prefixed the keyboard ID - undo that!\r\n      const querySpec = toQuerySpecs(unprefixed(incomplete.id), incomplete.langId);\r\n      if(isUniqueRequest(this.cache, cloudList, querySpec)) {\r\n        cloudList.push(querySpec);\r\n      }\r\n    }\r\n\r\n    // Double-check the incoming string-based queries, too!\r\n    for(let identifier of identifiers) {\r\n      const pList=identifier.split('@');\r\n      let lList=[''];\r\n      if(pList[0].toLowerCase() == 'english') {\r\n        pList[0] = 'us';\r\n      }\r\n\r\n      if(pList.length > 1) {\r\n        lList=pList[1].split(',');\r\n      }\r\n\r\n      for(let j=0; j<lList.length; j++) {\r\n        if(j > 0 && lList[j] == '') { // for j==0 => '', no language was specified.\r\n          continue;\r\n        }\r\n\r\n        const querySpec = toQuerySpecs(pList[0], lList[j], pList[2]);\r\n        if(isUniqueRequest(this.cache, cloudList, querySpec)) {\r\n          cloudList.push(querySpec);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Go ahead and register 'complete' stubs.\r\n    completeStubs.forEach((stub) => this.cache.addStub(stub));\r\n\r\n    // After that, note that we do merge non-fully-formed stubs with returned stubs that match?\r\n    let resultPromise = this.cloudQueryEngine.fetchCloudStubs(cloudList.map((spec) => spec.toString()));\r\n    return resultPromise.then((queryResults) => {\r\n      for(let result of queryResults) {\r\n        if(result instanceof KeyboardStub) {\r\n          // Register the newly-complete stub.\r\n          this.cache.addStub(result);\r\n          completeStubs.push(result);\r\n        } else {\r\n          errorStubs.push(result);\r\n        }\r\n      }\r\n\r\n      return [].concat(errorStubs).concat(completeStubs);\r\n    });\r\n  }\r\n\r\n  async addLanguageKeyboards(languages: string[]): Promise<(ErrorStub | KeyboardStub)[]> {\r\n    // Covers the 'add a keyboard by language name' angle.\r\n    let errorStubs: ErrorStub[] = [];\r\n    let fetchedLanguageList: LanguageAPIPropertySpec[] = [];\r\n\r\n    try {\r\n      fetchedLanguageList = await this.cloudQueryEngine.languageListPromise;\r\n    } catch (error) {\r\n      console.error(error);\r\n      errorStubs.push({error: error});\r\n      return errorStubs;\r\n    }\r\n\r\n    // Defer registering keyboards by language until the language list has been loaded\r\n    const languageList = fetchedLanguageList;\r\n\r\n    // Identify and register each keyboard by language name\r\n    let cmd = '';\r\n    for(let i=0; i<languages.length; i++) {\r\n      let lgName = languages[i].toLowerCase();\r\n      let addAll = (lgName.substr(-1,1) == '$');\r\n      if(addAll) {\r\n        lgName = lgName.substr(0,lgName.length-1);\r\n      }\r\n\r\n      let languageFound: boolean = false;\r\n      for(let j=0; j < languageList.length; j++) {\r\n        if(lgName == languageList[j]['name'].toLowerCase()) {\r\n          if(cmd != '') {\r\n            cmd = cmd + ',';\r\n          }\r\n\r\n          cmd = cmd + '@' + languageList[j]['id'];\r\n          if(addAll) {\r\n            cmd = cmd + '$';\r\n          }\r\n\r\n          languageFound = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!languageFound) {\r\n        // Construct response array of errors (failed-query keyboards)\r\n        // that will be merged with stubs (successfully-queried keyboards)\r\n        let stub: ErrorStub = {language: {name: lgName}, error: new Error(this.alertLanguageUnavailable(lgName))};\r\n        errorStubs.push(stub);\r\n      }\r\n    }\r\n\r\n    if(cmd == '') {\r\n      // No command so return errors\r\n      return Promise.reject(errorStubs);\r\n    }\r\n\r\n    return this.cloudQueryEngine.keymanCloudRequest('&keyboardid='+cmd, false).then(async (result) => {\r\n      const results = await mergeAndResolveStubPromises(result, errorStubs);\r\n\r\n      for(let result of results) {\r\n        // If not an error stub...\r\n        if(typeof result['error'] == 'undefined') {\r\n          this.cache.addStub(result as KeyboardStub);\r\n        }\r\n      }\r\n\r\n      return results;\r\n    }, (err) => {\r\n      console.error(err);\r\n      let stub: ErrorStub = {error: err};\r\n      errorStubs.push(stub);\r\n      return Promise.reject(errorStubs);\r\n    });\r\n  }\r\n\r\n  async fetchCloudCatalog() {\r\n    try {\r\n      const stubs = await this.cloudQueryEngine.keymanCloudRequest('', false);\r\n      stubs.forEach((stub) => this.cache.addStub(stub));\r\n      return stubs;\r\n    } catch(error) {\r\n      return Promise.reject([{error: error}]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display warning if language name unavailable to add keyboard\r\n   * @param {string} languageName\r\n   * @returns string of Error message\r\n   */\r\n  private alertLanguageUnavailable(languageName: string): string {\r\n    let msg = 'No keyboards are available for '+ languageName + '. '\r\n      +'Does it have another language name?';\r\n\r\n    // TODO:  hooks for internal alerts!\r\n    // this.keymanweb.util.internalAlert(msg);\r\n    return msg;\r\n  }\r\n}",
    "import { ModelSpec } from \"@keymanapp/input-processor\";\r\n\r\nexport default class ModelManager {\r\n  // Tracks registered models by ID.\r\n  private registeredModels: {[id: string]: ModelSpec} = {};\r\n\r\n  // Allows for easy model lookup by language code; useful when switching keyboards.\r\n  languageModelMap: {[language:string]: ModelSpec} = {};\r\n\r\n  modelForLanguage(lgCode: string) {\r\n    return this.languageModelMap[lgCode];\r\n  }\r\n\r\n  // Accessible publicly as keyman.modelManager.register(model: ModelSpec)\r\n  register(model: ModelSpec): void {\r\n    // Forcibly lowercase the model ID before proceeding.\r\n    model.id = model.id.toLowerCase();\r\n\r\n    if(JSON.stringify(model) == JSON.stringify(this.registeredModels[model.id])) {\r\n      // We are already registered, let's not go through and re-register\r\n      // because we'll already have the correct model active\r\n      return;\r\n    }\r\n    this.registeredModels[model.id] = model;\r\n\r\n    // Register the model for each targeted language code variant.\r\n    let mm = this;\r\n    model.languages.forEach(function(code: string) {\r\n      // Prevent null / undefined codes; they're invalid.\r\n      if(!code) {\r\n        console.warn(\"Null / undefined language codes are not permitted for registration.\");\r\n        return;\r\n      }\r\n\r\n      mm.languageModelMap[code] = model;\r\n    });\r\n  }\r\n\r\n  unregister(modelId: string): ModelSpec {\r\n    let model: ModelSpec;\r\n\r\n    modelId = modelId.toLowerCase();\r\n\r\n    // Remove the model from the id-lookup associative array.\r\n    if(this.registeredModels[modelId]) {\r\n      model = this.registeredModels[modelId];\r\n      delete this.registeredModels[modelId];\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    // Ensure the model is deregistered for each targeted language code variant.\r\n    let mm = this;\r\n    model.languages.forEach(function(code: string) {\r\n      if(mm.languageModelMap[code].id == modelId) {\r\n        delete mm.languageModelMap[code];\r\n      }\r\n    });\r\n\r\n    return model;\r\n  }\r\n\r\n  isRegistered(model: ModelSpec): boolean {\r\n    return !! this.registeredModels[model.id.toLowerCase()];\r\n  }\r\n}\r\n",
    "/**\r\n * Function     arrayFromNodeList\r\n * Scope        Public\r\n * @param       {Object}    nl a node list, as returned from getElementsBy_____ methods.\r\n * Description  Transforms a node list into an array.   *\r\n * @return      {Array<Element>}\r\n */\r\nexport function arrayFromNodeList(nl: NodeList|HTMLCollectionOf<Element>): HTMLElement[] {\r\n  let res: (HTMLElement)[] = [];\r\n  for(let i=0; i < nl.length; i++) {\r\n    // Typing says we could get Node instances; it's up to use to use this method responsibly.\r\n    res.push(nl[i] as HTMLElement);\r\n  }\r\n  return res;\r\n}",
    "// Found a bit of magic formatting that allows dynamic return typing for a specified element tag!\r\nexport default function createUnselectableElement<E extends \"p\"|\"style\"|\"script\"|\"div\"|\"canvas\"|\"span\">(nodeName:E) {\r\n  const e = document.createElement<E>(nodeName);\r\n\r\n  e.style.userSelect=\"none\";\r\n  e.style.webkitUserSelect=\"none\";\r\n  e.style['MozUserSelect'] = \"none\";\r\n  return e;\r\n}",
    "import { DeviceSpec } from '@keymanapp/web-utils';\r\nimport { type InternalKeyboardFont as KeyboardFont } from '@keymanapp/keyboard-processor';\r\n\r\ntype FontFamilyStyleMap = {[family: string]: HTMLStyleElement};\r\n\r\nexport class StylesheetManager {\r\n  private fontStyleDefinitions: { [os: string]: FontFamilyStyleMap} = {};\r\n  private linkedSheets: HTMLStyleElement[] = [];\r\n  private doCacheBusting: boolean;\r\n\r\n  public readonly linkNode: Node;\r\n\r\n  public constructor(linkNode?: Node, doCacheBusting?: boolean) {\r\n    if(!linkNode) {\r\n      let _ElemHead=document.getElementsByTagName('HEAD');\r\n      if(_ElemHead.length > 0) {\r\n        linkNode = _ElemHead[0];\r\n      } else {\r\n        linkNode = document.body; // Won't work on [old?] Chrome, ah well\r\n      }\r\n    }\r\n    this.linkNode = linkNode;\r\n    this.doCacheBusting = doCacheBusting || false;\r\n  }\r\n\r\n  linkStylesheet(sheet: HTMLStyleElement) {\r\n    this.linkedSheets.push(sheet);\r\n    this.linkNode.appendChild(sheet);\r\n  }\r\n\r\n  /**\r\n   * Build a stylesheet with a font-face CSS descriptor for the embedded font appropriate\r\n   * for the browser being used\r\n   *\r\n   * @param    {Object}  fd            keymanweb font descriptor (internal format; should be preprocessed)\r\n   * @param    {string}  fontPathRoot  Should correspond to `this.keyman.options['fonts']`\r\n   **/\r\n  addStyleSheetForFont(fd: KeyboardFont, fontPathRoot: string, os?: DeviceSpec.OperatingSystem) {\r\n    // Test if a valid font descriptor\r\n    if(!fd) {\r\n      return;\r\n    }\r\n\r\n    if(typeof(fd.files) == 'undefined') {\r\n      return;\r\n    }\r\n\r\n    const fontKey = fd.family;\r\n\r\n    let i, ttf='', woff='', eot='', svg='', fList=[];\r\n\r\n    // TODO: 22 Aug 2014: check that font path passed from cloud is actually used!\r\n\r\n    if(!os) {\r\n      os = DeviceSpec.OperatingSystem.Other; // as a fallback option.\r\n    }\r\n\r\n    // Do not add a new font-face style sheet if already added for this font\r\n    const fontStyleMap = this.fontStyleDefinitions[os] = this.fontStyleDefinitions[os] || {};\r\n\r\n    if(fontStyleMap[fontKey]) {\r\n      const sheet = fontStyleMap[fontKey];\r\n\r\n      if(!sheet.parentNode) {\r\n        this.linkStylesheet(sheet);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if(typeof(fd.files) == 'string') {\r\n      fList[0]=fd.files;\r\n    } else {\r\n      fList=fd.files;\r\n    }\r\n\r\n    for(i=0;i<fList.length;i++) {\r\n      if(fList[i].toLowerCase().indexOf('.otf') > 0) ttf=fList[i];\r\n      if(fList[i].toLowerCase().indexOf('.ttf') > 0) ttf=fList[i];\r\n      if(fList[i].toLowerCase().indexOf('.woff') > 0) woff=fList[i];\r\n      if(fList[i].toLowerCase().indexOf('.eot') > 0) eot=fList[i];\r\n      if(fList[i].toLowerCase().indexOf('.svg') > 0) svg=fList[i];\r\n    }\r\n\r\n    // Font path qualified to support page-relative fonts (build 347)\r\n    if(ttf != '' && (ttf.indexOf('/') < 0))  {\r\n      ttf = fontPathRoot+ttf;\r\n    }\r\n\r\n    if(woff != '' && (woff.indexOf('/') < 0)) {\r\n      woff = fontPathRoot+woff;\r\n    }\r\n\r\n    if(eot != '' && (eot.indexOf('/') < 0)) {\r\n      eot = fontPathRoot+eot;\r\n    }\r\n\r\n    if(svg != '' && (svg.indexOf('/') < 0)) {\r\n      svg = fontPathRoot+svg;\r\n    }\r\n\r\n    // Build the font-face definition according to the browser being used\r\n    var s='@font-face {\\nfont-family:'\r\n      + fd.family + ';\\nfont-style:normal;\\nfont-weight:normal;\\n';\r\n\r\n    // Build the font source string according to the browser,\r\n    // but return without adding the style sheet if the required font type is unavailable\r\n\r\n    // Modern browsers: use WOFF, TTF and fallback finally to SVG. Don't provide EOT\r\n    if(os == DeviceSpec.OperatingSystem.iOS) {\r\n      if(ttf != '') {\r\n        if(this.doCacheBusting) {\r\n          ttf = this.cacheBust(ttf);\r\n        }\r\n        s=s+'src:url(\\''+ttf+'\\') format(\\'truetype\\');';\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      var s0 = [];\r\n\r\n      if(os == DeviceSpec.OperatingSystem.Android) {\r\n        // Android 4.2 and 4.3 have bugs in their rendering for some scripts\r\n        // with embedded ttf or woff.  svg mostly works so is a better initial\r\n        // choice on the Android browser.\r\n        if(svg != '') {\r\n          s0.push(\"url('\"+svg+\"') format('svg')\");\r\n        }\r\n\r\n        if(woff != '') {\r\n          s0.push(\"url('\"+woff+\"') format('woff')\");\r\n        }\r\n\r\n        if(ttf != '') {\r\n          s0.push(\"url('\"+ttf+\"') format('truetype')\");\r\n        }\r\n      } else {\r\n        if(woff != '') {\r\n          s0.push(\"url('\"+woff+\"') format('woff')\");\r\n        }\r\n\r\n        if(ttf != '') {\r\n          s0.push(\"url('\"+ttf+\"') format('truetype')\");\r\n        }\r\n\r\n        if(svg != '') {\r\n          s0.push(\"url('\"+svg+\"') format('svg')\");\r\n        }\r\n      }\r\n\r\n      if(s0.length == 0) {\r\n        return null;\r\n      }\r\n\r\n      s += 'src:'+s0.join(',')+';';\r\n    }\r\n\r\n    s=s+'\\n}\\n';\r\n\r\n    const sheet = createStyleSheet(s);\r\n    fontStyleMap[fontKey] = sheet;\r\n\r\n    this.linkStylesheet(sheet);\r\n\r\n    return sheet;\r\n  }\r\n\r\n  private cacheBust(uri: string) {\r\n    // Our WebView version directly sets the keyboard path, and it may replace the file\r\n    // after KMW has loaded.  We need cache-busting to prevent the new version from\r\n    // being ignored.\r\n    return uri + \"?v=\" + (new Date()).getTime(); /*cache buster*/\r\n  }\r\n\r\n  /**\r\n   * Add a reference to an external stylesheet file\r\n   *\r\n   * @param   {string}  href   path to stylesheet file\r\n   */\r\n  linkExternalSheet(href: string): void {\r\n    try {\r\n      if(document.querySelector(\"link[href=\"+JSON.stringify(href)+\"]\") != null) {\r\n        // We've already linked this stylesheet, don't do it again\r\n        return;\r\n      }\r\n    } catch(e) {\r\n      // We've built an invalid href, somehow?\r\n      return;\r\n    }\r\n\r\n    const linkElement=document.createElement('link');\r\n    linkElement.type='text/css';\r\n    linkElement.rel='stylesheet';\r\n    linkElement.href=href;\r\n\r\n    this.linkStylesheet(linkElement);\r\n  }\r\n\r\n  public unlink(stylesheet: HTMLStyleElement) {\r\n    const index = this.linkedSheets.indexOf(stylesheet);\r\n    if(index > -1) {\r\n      this.linkedSheets.splice(index, 1);\r\n      stylesheet.parentNode.removeChild(stylesheet);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public unlinkAll() {\r\n    for(let sheet of this.linkedSheets) {\r\n      if(sheet.parentNode) {\r\n        sheet.parentNode.removeChild(sheet);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Add a stylesheet to a page programmatically, for use by the OSK, the UI or the page creator\r\n *\r\n * @param       {string}        s             style string\r\n * @return      {Object}                      returns the object reference\r\n **/\r\nexport function createStyleSheet(styleString: string): HTMLStyleElement {\r\n  var _ElemStyle: HTMLStyleElement = <HTMLStyleElement>document.createElement<'style'>('style');\r\n\r\n  _ElemStyle.type = 'text/css';\r\n  _ElemStyle.appendChild(document.createTextNode(styleString));\r\n\r\n  return _ElemStyle;\r\n}",
    "/**\r\n * Get orientation of tablet or phone  display\r\n *\r\n * @return      {boolean}\r\n */\r\nexport default function landscapeView(): boolean\t{ // new for I3363 (Build 301)\r\n  var orientation: number;\r\n\r\n  // Assume portrait mode if orientation undefined\r\n  if(typeof window.orientation != 'undefined') { // Used by iOS Safari\r\n    // Else landscape for +/-90, portrait for 0, +/-180\r\n    orientation = window.orientation as number;\r\n  } else if(typeof window.screen.orientation != 'undefined') { // Used by Firefox, Chrome\r\n    orientation = window.screen.orientation.angle;\r\n  }\r\n\r\n  if(orientation !== undefined) {\r\n    return (Math.abs(orientation/90) == 1);\r\n  } else {\r\n    return false;\r\n  }\r\n}",
    "type DecodedCookieFieldValue = string | number | boolean;\r\n\r\ntype FilteredRecordEncoder = (value: DecodedCookieFieldValue, key: string) => string;\r\ntype FilteredRecordDecoder = (value: string, key: string) => DecodedCookieFieldValue;\r\nconst no_change = (val: string) => val as string;\r\n\r\nexport default class CookieSerializer<Type extends Record<keyof Type, DecodedCookieFieldValue>> {\r\n  readonly name: string;\r\n\r\n  constructor(name: string) {\r\n    this.name = name;\r\n  }\r\n\r\n  load(decoder?: FilteredRecordDecoder): Type {\r\n    return this.loadCookie(this.name, decoder || no_change) as Type;\r\n  }\r\n\r\n  save(cookie: Type, encoder?: FilteredRecordEncoder) {\r\n    this.saveCookie(this.name, cookie, encoder || no_change);\r\n  }\r\n\r\n  /**\r\n   * Document cookie parsing for use by kernel, OSK, UI etc.\r\n   *\r\n   * @return      {Object}                  array of names and strings\r\n   */\r\n  private _loadRawCookies(): Record<string, string> {\r\n    let v: Record<string, string> = {};\r\n    if(typeof(document.cookie) != 'undefined' && document.cookie != '') {\r\n      let c = document.cookie.split(/;\\s*/);\r\n      for(let i = 0; i < c.length; i++) {\r\n        let d = c[i].split('=');\r\n        if(d.length == 2) {\r\n          v[d[0]] = d[1];\r\n        }\r\n      }\r\n    }\r\n\r\n    return v;\r\n  }\r\n\r\n  /**\r\n   * Document cookie parsing for use by kernel, OSK, UI etc.\r\n   *\r\n   * @param       {string}        cookieName        cookie name\r\n   * @return      {Object}                  array of variables and values\r\n   */\r\n  private loadCookie(cookieName: string, decoder: FilteredRecordDecoder): Record<string, DecodedCookieFieldValue> {\r\n    let cookie: Record<string, DecodedCookieFieldValue> = {};\r\n    let allCookies = this._loadRawCookies();\r\n    const encodedCookie = allCookies[cookieName];\r\n\r\n    if(encodedCookie) {\r\n      let rawDecode = decodeURIComponent(encodedCookie).split(';');\r\n      for(let i=0; i<rawDecode.length; i++) {\r\n        // Prevent accidental empty-key entries caused by cookie-final ';'.\r\n        if(i == rawDecode.length - 1 && !rawDecode[i]) {\r\n          break;\r\n        }\r\n\r\n        let record = rawDecode[i].split('=');\r\n        if(record.length > 1) {\r\n          const [key, value] = record;\r\n          // key, value\r\n          cookie[key] = decoder(value, key);\r\n        } else {\r\n          // key, <implied 'true', as boolean flag>\r\n          cookie[record[0]] = '';\r\n        }\r\n      }\r\n    }\r\n    return cookie;\r\n  }\r\n\r\n  /**\r\n   * Standard cookie saving for use by kernel, OSK, UI etc.\r\n   *\r\n   * @param       {string}      cookieName            name of cookie\r\n   * @param       {Object}      cookieValueMap            object with array of named arguments and values\r\n   */\r\n  private saveCookie(cookieName: string, cookieValueMap: Record<string, DecodedCookieFieldValue>, encoder: FilteredRecordEncoder) {\r\n    let serialization='';\r\n    for(let key in cookieValueMap) {\r\n      serialization += key + '=' + encoder(cookieValueMap[key], key) + \";\";\r\n    }\r\n\r\n    let d = new Date(new Date().valueOf() + 1000 * 60 * 60 * 24 * 30).toUTCString();\r\n    let cookieConfig = ' path=/; expires=' + d;  //Fri, 31 Dec 2099 23:59:59 GMT;';\r\n    document.cookie = `${cookieName}=${encodeURIComponent(serialization)}; ${cookieConfig}`;\r\n  }\r\n}",
    "/**\r\n * Function     getAbsoluteX\r\n * Scope        Public\r\n * @param       {Object}    Pobj        HTML element\r\n * @return      {number}\r\n * Description  Returns x-coordinate of Pobj element absolute position with respect to page\r\n */\r\nexport function getAbsoluteX(Pobj: HTMLElement): number { // I1476 - Handle SELECT overlapping END\r\n  var Lobj: HTMLElement\r\n\r\n  if(!Pobj) {\r\n    return 0;\r\n  }\r\n\r\n  var Lcurleft = Pobj.offsetLeft ? Pobj.offsetLeft : 0;\r\n  Lobj = Pobj;   \t// I2404 - Support for IFRAMEs\r\n\r\n  if (Lobj.offsetParent) {\r\n    while (Lobj.offsetParent) {\r\n      Lobj = Lobj.offsetParent as HTMLElement;\r\n      Lcurleft += Lobj.offsetLeft;\r\n    }\r\n\r\n    // On mobile devices, the OSK uses 'fixed' - this requires some extra offset work to handle.\r\n    let Ldoc = Lobj.ownerDocument;\r\n    if(Lobj.style.position == 'fixed' && Ldoc && Ldoc.scrollingElement) {\r\n      Lcurleft += Ldoc.scrollingElement.scrollLeft;\r\n    }\r\n  }\r\n  // Correct position if element is within a frame (but not if the controller is in document within that frame)\r\n  // We used to reference a KMW state variable `this.keyman._MasterDocument`, but it was only ever set to `window.document`.\r\n  if(Lobj && Lobj.ownerDocument && (Pobj.ownerDocument != window.document)) {\r\n    var Ldoc=Lobj.ownerDocument;   // I2404 - Support for IFRAMEs\r\n\r\n    if(Ldoc && Ldoc.defaultView && Ldoc.defaultView.frameElement) {\r\n      return Lcurleft + getAbsoluteX(<HTMLElement>Ldoc.defaultView.frameElement) - Ldoc.documentElement.scrollLeft;\r\n    }\r\n  }\r\n  return Lcurleft;\r\n}\r\n\r\n/**\r\n * Function     getAbsoluteY\r\n * Scope        Public\r\n * @param       {Object}    Pobj        HTML element\r\n * @return      {number}\r\n * Description  Returns y-coordinate of Pobj element absolute position with respect to page\r\n */\r\nexport function getAbsoluteY(Pobj: HTMLElement): number {\r\n  var Lobj: HTMLElement\r\n\r\n  if(!Pobj) {\r\n    return 0;\r\n  }\r\n  var Lcurtop = Pobj.offsetTop ? Pobj.offsetTop : 0;\r\n  Lobj = Pobj;  // I2404 - Support for IFRAMEs\r\n\r\n  if (Lobj.ownerDocument && Lobj instanceof Lobj.ownerDocument.defaultView.HTMLElement) {\r\n    while (Lobj.offsetParent) {\r\n      Lobj = Lobj.offsetParent as HTMLElement;\r\n      Lcurtop += Lobj.offsetTop;\r\n    }\r\n\r\n    // On mobile devices, the OSK uses 'fixed' - this requires some extra offset work to handle.\r\n    let Ldoc = Lobj.ownerDocument;\r\n    if(Lobj.style.position == 'fixed' && Ldoc && Ldoc.scrollingElement) {\r\n      Lcurtop += Ldoc.scrollingElement.scrollTop;\r\n    }\r\n  }\r\n\r\n  // Correct position if element is within a frame (but not if the controller is in document within that frame)\r\n  // We used to reference a KMW state variable `this.keyman._MasterDocument`, but it was only ever set to `window.document`.\r\n  if(Lobj && Lobj.ownerDocument && (Pobj.ownerDocument != window.document)) {\r\n    var Ldoc=Lobj.ownerDocument;   // I2404 - Support for IFRAMEs\r\n\r\n    if(Ldoc && Ldoc.defaultView && Ldoc.defaultView.frameElement) {\r\n      return Lcurtop + getAbsoluteY(<HTMLElement>Ldoc.defaultView.frameElement);\r\n    }\r\n  }\r\n  return Lcurtop;\r\n}",
    "import { VariableStore, VariableStoreSerializer } from \"@keymanapp/keyboard-processor\";\r\nimport { CookieSerializer } from \"keyman/engine/dom-utils\";\r\n\r\n// While there's little reason we couldn't store all of a keyboard's store values within\r\n// the same cookie... that's not what we had implemented in the last pre-es-module version\r\n// of KeymanWeb.  We're keeping this transformation _very_ straightforward.\r\n//\r\n// Also of note:  there's nothing we can do to allow TS to provide type-checking of\r\n// dynamic property names; they'd have to be known at compile time to facilitate\r\n// strict type checking.\r\nclass VarStoreSerializer extends CookieSerializer<VariableStore> {\r\n  constructor(keyboardID: string, storeName: string) {\r\n    super(`KeymanWeb_${keyboardID}_Option_${storeName}`);\r\n  }\r\n\r\n  load() {\r\n    return super.load(decodeURIComponent);\r\n  }\r\n\r\n  save(storeMap: VariableStore) {\r\n    super.save(storeMap, encodeURIComponent);\r\n  }\r\n}\r\n\r\nexport class VariableStoreCookieSerializer implements VariableStoreSerializer {\r\n  loadStore(keyboardID: string, storeName: string): VariableStore {\r\n    const storeCookieSerializer = new VarStoreSerializer(keyboardID, storeName);\r\n    return storeCookieSerializer.load();\r\n  }\r\n\r\n  saveStore(keyboardID: string, storeName: string, storeMap: VariableStore) {\r\n    const storeCookieSerializer = new VarStoreSerializer(keyboardID, storeName);\r\n    storeCookieSerializer.save(storeMap);\r\n  }\r\n}",
    "import {\r\n  KeyboardInterface as KeyboardInterfaceBase,\r\n} from \"@keymanapp/keyboard-processor\";\r\nimport { KeyboardStub, RawKeyboardStub, toUnprefixedKeyboardId as unprefixed } from 'keyman/engine/package-cache';\r\n\r\nimport { ContextManagerBase } from './contextManagerBase.js';\r\nimport { VariableStoreCookieSerializer } from \"./variableStoreCookieSerializer.js\";\r\nimport KeymanEngine from \"./keymanEngine.js\";\r\nimport { EngineConfiguration } from \"./engineConfiguration.js\";\r\n\r\nexport default class KeyboardInterface<ContextManagerType extends ContextManagerBase<any>> extends KeyboardInterfaceBase {\r\n  protected readonly engine: KeymanEngine<EngineConfiguration, ContextManagerType, any>;\r\n  private stubNamespacer?: (stub: RawKeyboardStub) => void;\r\n\r\n  constructor(\r\n    _jsGlobal: any,\r\n    engine: KeymanEngine<any, ContextManagerType, any>,\r\n    stubNamespacer?: (stub: RawKeyboardStub) => void\r\n  ) {\r\n    super(_jsGlobal, engine, new VariableStoreCookieSerializer());\r\n    this.engine = engine;\r\n    this.stubNamespacer = stubNamespacer;\r\n  }\r\n\r\n  // Preserves a keyboard's ID, even if namespaced, via script tag tagging.\r\n  preserveID(Pk: any /** a `Keyboard`'s `scriptObject` entry */) {\r\n    var trueID;\r\n\r\n    // Find the currently-executing script tag; KR is called directly from each keyboard's definition script.\r\n    if(document.currentScript) {\r\n      trueID = document.currentScript.id;\r\n    } else {\r\n      var scripts = document.getElementsByTagName('script');\r\n      var currentScript = scripts[scripts.length-1];\r\n\r\n      trueID = currentScript.id;\r\n    }\r\n\r\n    // Final check that the script tag is valid and appropriate for the loading keyboard.\r\n    if(!trueID) {\r\n      return;\r\n    } else if(trueID.indexOf(unprefixed(Pk['KI'])) != -1) {\r\n      Pk['KI'] = trueID;  // Take the script's version of the ID, which may include package namespacing.\r\n    } else {\r\n      console.error(\"Error when registering keyboard:  current SCRIPT tag's ID does not match!\");\r\n    }\r\n  }\r\n\r\n  registerKeyboard(Pk): void {\r\n    // Among other things, sets Pk as a newly-active Keyboard.\r\n    super.registerKeyboard(Pk);\r\n    const registeredKeyboard = this.loadedKeyboard;\r\n\r\n    this.preserveID(Pk);\r\n\r\n    this.engine.config.deferForInitialization.then(() => {\r\n      if(!this.engine.keyboardRequisitioner.cache.isFetchingKeyboard(registeredKeyboard.id)) {\r\n        // Deliberate keyboard pre-loading via direct script-tag link on the page.\r\n        // Just load the keyboard and reset the harness's keyboard-receiver field.\r\n        this.engine.keyboardRequisitioner.cache.addKeyboard(registeredKeyboard);\r\n        this.loadedKeyboard = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the basic keyboard parameters (keyboard stub) to the array of keyboard stubs\r\n   * If no language code is specified in a keyboard it cannot be registered,\r\n   * and a keyboard stub must be registered before the keyboard is loaded\r\n   * for the keyboard to be usable.\r\n   *\r\n   * @param       {Object}      Pstub     Keyboard stub object\r\n   * @return      {?number}               1 if already registered, else null\r\n   */\r\n  registerStub(Pstub: RawKeyboardStub): number {\r\n    if(this.stubNamespacer) {\r\n      this.stubNamespacer(Pstub);\r\n    }\r\n\r\n    // This is where app-hosted KeymanWeb receives pre-formed stubs.\r\n    // They're specified in the \"internal\" format (KI, KN, KLC...)\r\n    // (SHIFT-CTRL-F @ repo-level for the mobile apps:  `setKeymanLanguage`)\r\n    // Keyman Developer may also use this method directly for its test-host page.\r\n    //\r\n    // It may also be used by documented legacy API:\r\n    // https://help.keyman.com/DEVELOPER/ENGINE/WEB/2.0/guide/examples/manual-control\r\n    // (See: referenced laokeys_load.js)\r\n    //\r\n    // The mobile apps typically have fully-preconfigured paths, but Developer's\r\n    // test-host page does not.\r\n    const pathConfig = this.engine.config.paths;\r\n    const stub = new KeyboardStub(Pstub, pathConfig.keyboards, pathConfig.fonts);\r\n    if(this.engine.keyboardRequisitioner?.cache.findMatchingStub(stub)) {\r\n      return 1;\r\n    }\r\n\r\n    if(!this.engine.config.deferForInitialization.hasFinalized) {\r\n      this.engine.config.deferForInitialization.then(() => this.engine.keyboardRequisitioner.cache.addStub(stub));\r\n    } else {\r\n      this.engine.keyboardRequisitioner.cache.addStub(stub);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  insertText = (Ptext: string, PdeadKey:number): void => {\r\n    this.resetContextCache();\r\n    // As this function isn't provided a handle to an active outputTarget, we rely on\r\n    // the context manager to resolve said issue.\r\n    this.engine.contextManager.insertText(this, Ptext, PdeadKey);\r\n  }\r\n\r\n  // Short-hand name: necessary to do it this way due to assignment style.\r\n  KT = this.insertText;\r\n}\r\n\r\n(function() {\r\n  KeyboardInterface.__publishShorthandAPI();\r\n}());",
    "// Enables DOM types, but just for this one module.\r\n\r\n///<reference lib=\"dom\" />\r\n\r\nimport { Keyboard, KeyboardHarness, KeyboardLoaderBase, KeyboardLoadErrorBuilder, MinimalKeymanGlobal } from '@keymanapp/keyboard-processor';\r\n\r\nimport { ManagedPromise } from '@keymanapp/web-utils';\r\n\r\nexport class DOMKeyboardLoader extends KeyboardLoaderBase {\r\n  public readonly element: HTMLIFrameElement;\r\n  private readonly performCacheBusting: boolean;\r\n\r\n  constructor()\r\n  constructor(harness: KeyboardHarness);\r\n  constructor(harness: KeyboardHarness, cacheBust?: boolean)\r\n  constructor(harness?: KeyboardHarness, cacheBust?: boolean) {\r\n    if(harness && harness._jsGlobal != window) {\r\n      // Copy the String typing over; preserve string extensions!\r\n      harness._jsGlobal['String'] = window['String'];\r\n    }\r\n\r\n    if(!harness) {\r\n      super(new KeyboardHarness(window, MinimalKeymanGlobal));\r\n    } else {\r\n      super(harness);\r\n    }\r\n\r\n    this.performCacheBusting = cacheBust || false;\r\n  }\r\n\r\n  protected loadKeyboardInternal(\r\n    uri: string,\r\n    errorBuilder: KeyboardLoadErrorBuilder,\r\n    id?: string\r\n  ): Promise<Keyboard> {\r\n    const promise = new ManagedPromise<Keyboard>();\r\n\r\n    if(this.performCacheBusting) {\r\n      uri = this.cacheBust(uri);\r\n    }\r\n\r\n    try {\r\n      const document = this.harness._jsGlobal.document;\r\n      const script = document.createElement('script');\r\n      if(id) {\r\n        script.id = id;\r\n      }\r\n      document.head.appendChild(script);\r\n      script.onerror = (err) => {\r\n        promise.reject(errorBuilder.missingError(err));\r\n      }\r\n      script.onload = () => {\r\n        if(this.harness.loadedKeyboard) {\r\n          const keyboard = this.harness.loadedKeyboard;\r\n          this.harness.loadedKeyboard = null;\r\n          promise.resolve(keyboard);\r\n        } else {\r\n          promise.reject(errorBuilder.scriptError());\r\n        }\r\n      }\r\n\r\n      // On the oldest mobile devices we support, Promise.finally may not actually exist.\r\n      // Fortunately... it's not that hard of an issue to work around.\r\n      // Note:  es6-shim doesn't polyfill Promise.finally!\r\n      promise.then(() => {\r\n        // It is safe to remove the script once it has been run (https://stackoverflow.com/a/37393041)\r\n        script.remove();\r\n      }).catch(() => {\r\n        script.remove();\r\n      });\r\n\r\n      // Now that EVERYTHING ELSE is ready, establish the link to the keyboard's script.\r\n      script.src = uri;\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return promise.corePromise;\r\n  }\r\n\r\n  private cacheBust(uri: string) {\r\n    // Our WebView version directly sets the keyboard path, and it may replace the file\r\n    // after KMW has loaded.  We need cache-busting to prevent the new version from\r\n    // being ignored.\r\n    return uri + \"?v=\" + (new Date()).getTime(); /*cache buster*/\r\n  }\r\n}",
    "import { Mock } from \"@keymanapp/keyboard-processor\";\r\n\r\nexport default class ContextWindow implements Context {\r\n  // Used to limit the range of context replicated for use of keyboard rules within\r\n  // the engine, as used for fat-finger prep / `Alternate` generation.\r\n  public static readonly ENGINE_RULE_WINDOW: Configuration = {\r\n    leftContextCodePoints: 64,\r\n    rightContextCodePoints: 32\r\n  };\r\n\r\n  left: string;\r\n  right?: string;\r\n\r\n  startOfBuffer: boolean;\r\n  endOfBuffer: boolean;\r\n\r\n  casingForm?: CasingForm;\r\n\r\n  constructor(mock: Mock, config: Configuration, layerId: string) {\r\n    this.left = mock.getTextBeforeCaret();\r\n    this.startOfBuffer = this.left._kmwLength() <= config.leftContextCodePoints;\r\n    if(!this.startOfBuffer) {\r\n      // Our custom substring version will return the last n characters if param #1 is given -n.\r\n      this.left = this.left._kmwSubstr(-config.leftContextCodePoints);\r\n    }\r\n\r\n    this.right = mock.getTextAfterCaret();\r\n    this.endOfBuffer = this.right._kmwLength() <= config.rightContextCodePoints;\r\n    if(!this.endOfBuffer) {\r\n      this.right = this.right._kmwSubstr(0, config.rightContextCodePoints);\r\n    }\r\n\r\n    this.casingForm =\r\n      layerId == 'shift' ? 'initial' :\r\n      layerId == 'caps' ? 'upper' :\r\n      null;\r\n  }\r\n\r\n  public toMock(): Mock {\r\n    let caretPos = this.left._kmwLength();\r\n\r\n    return new Mock(this.left + (this.right || \"\"), caretPos);\r\n  }\r\n}",
    "import EventEmitter from \"eventemitter3\";\r\nimport { LMLayer } from \"@keymanapp/lexical-model-layer/web\";\r\nimport { OutputTarget, Transcription, Mock } from \"@keymanapp/keyboard-processor\";\r\nimport ContextWindow from \"../contextWindow.js\";\r\nimport ModelSpec from \"./modelSpec.js\"\r\n\r\n/**\r\n * Corresponds to the 'suggestionsready' LanguageProcessor event.\r\n */\r\nexport type ReadySuggestionsHandler = (prediction: ReadySuggestions) => boolean;\r\n\r\nexport type StateChangeEnum = 'active'|'configured'|'inactive';\r\n/**\r\n * Corresponds to the 'statechange' LanguageProcessor event.\r\n */\r\nexport type StateChangeHandler = (state: StateChangeEnum) => any;\r\n\r\n/**\r\n * Covers 'tryaccept' events.\r\n */\r\nexport type TryUIHandler = (source: string) => boolean;\r\n\r\nexport type InvalidateSourceEnum = 'new'|'context';\r\n\r\n/**\r\n * Corresponds to the 'invalidatesuggestions' LanguageProcessor event.\r\n */\r\nexport type InvalidateSuggestionsHandler = (source: InvalidateSourceEnum) => boolean;\r\n\r\nexport class ReadySuggestions {\r\n  suggestions: Suggestion[];\r\n  transcriptionID: number;\r\n\r\n  constructor(suggestions: Suggestion[], id: number) {\r\n    this.suggestions = suggestions;\r\n    this.transcriptionID = id;\r\n  }\r\n}\r\n\r\ninterface LanguageProcessorEventMap {\r\n  'suggestionsready': ReadySuggestionsHandler,\r\n  'invalidatesuggestions': InvalidateSuggestionsHandler,\r\n  'statechange': StateChangeHandler,\r\n  'tryaccept': TryUIHandler,\r\n  'tryrevert': () => void,\r\n\r\n  /**\r\n   * Is called synchronously once suggestion application is successful and the context has been updated.\r\n   *\r\n   * @param outputTarget The `OutputTarget` representation of the context the suggestion was applied to.\r\n   * @returns\r\n   */\r\n  'suggestionapplied': (outputTarget: OutputTarget) => boolean\r\n}\r\n\r\n/* Is more like the model configuration engine */\r\nexport default class LanguageProcessor extends EventEmitter<LanguageProcessorEventMap> {\r\n  private lmEngine: LMLayer;\r\n  private currentModel?: ModelSpec;\r\n  private configuration?: Configuration;\r\n  private currentPromise?: Promise<Suggestion[]>;\r\n\r\n  private recentTranscriptions: Transcription[] = [];\r\n\r\n  private _mayPredict: boolean = true;\r\n  private _mayCorrect: boolean = true;\r\n\r\n  private _state: StateChangeEnum = 'inactive';\r\n\r\n  private static readonly TRANSCRIPTION_BUFFER: 10 = 10;\r\n\r\n  public constructor(predictiveTextWorker: Worker, supportsRightDeletions: boolean = false) {\r\n    super();\r\n\r\n    // Establishes KMW's platform 'capabilities', which limit the range of context a LMLayer\r\n    // model may expect.\r\n    let capabilities: Capabilities = {\r\n      maxLeftContextCodePoints: 64,\r\n      // Since the apps don't yet support right-deletions.\r\n      maxRightContextCodePoints: supportsRightDeletions ? 0 : 64\r\n    }\r\n\r\n    if(!predictiveTextWorker) {\r\n      return;\r\n    }\r\n\r\n    this.lmEngine = new LMLayer(capabilities, predictiveTextWorker);\r\n  }\r\n\r\n  public get activeModel(): ModelSpec {\r\n    return this.currentModel;\r\n  }\r\n\r\n  public get isConfigured(): boolean {\r\n    return !!this.configuration;\r\n  }\r\n\r\n  public get state(): StateChangeEnum {\r\n    return this._state;\r\n  }\r\n\r\n  public unloadModel() {\r\n    this.lmEngine.unloadModel();\r\n    delete this.currentModel;\r\n    delete this.configuration;\r\n\r\n    this._state = 'inactive';\r\n    this.emit('statechange', 'inactive');\r\n  }\r\n\r\n  loadModel(model: ModelSpec): Promise<void> {\r\n    if(!model) {\r\n      throw new Error(\"Null reference not allowed.\");\r\n    }\r\n\r\n    let specType: 'file'|'raw' = model.path ? 'file' : 'raw';\r\n    let source = specType == 'file' ? model.path : model.code;\r\n\r\n    // We pre-emptively emit so that the banner's DOM elements may update synchronously.\r\n    // Prevents an ugly \"flash of unstyled content\" layout issue during keyboard load\r\n    // on our mobile platforms when embedded.\r\n    this.currentModel = model;\r\n    if(this.mayPredict) {\r\n      this._state = 'active';\r\n      this.emit('statechange', 'active');\r\n    }\r\n\r\n    return this.lmEngine.loadModel(source, specType).then((config: Configuration) => {\r\n      this.configuration = config;\r\n      this._state = 'configured';\r\n      this.emit('statechange', 'configured');\r\n    }).catch((error) => {\r\n      // Does this provide enough logging information?\r\n      let message: string;\r\n      if(error instanceof Error) {\r\n        message = error.message;\r\n      } else {\r\n        message = String(error);\r\n      }\r\n      console.error(\"Could not load model '\" + model.id + \"': \" + message);\r\n\r\n      // Since the model couldn't load, immediately deactivate.  Visually, it'll look\r\n      // like the banner crashed shortly after load.\r\n      this.currentModel = null;\r\n      this._state = 'inactive';\r\n      this.emit('statechange', 'inactive');\r\n    });\r\n  }\r\n\r\n  public invalidateContext(outputTarget: OutputTarget, layerId: string): Promise<Suggestion[]> {\r\n    // Signal to any predictive text UI that the context has changed, invalidating recent predictions.\r\n    this.emit('invalidatesuggestions', 'context');\r\n\r\n    // If there's no active model, there can be no predictions.\r\n    // We'll also be missing important data needed to even properly REQUEST the predictions.\r\n    if(!this.currentModel || !this.configuration) {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    // Don't attempt predictions when disabled!\r\n    // invalidateContext otherwise bypasses .predict()'s check against this.\r\n    if(!this.isActive) {\r\n      return Promise.resolve([]);\r\n    } else if(outputTarget) {\r\n      let transcription = outputTarget.buildTranscriptionFrom(outputTarget, null, false);\r\n      return this.predict_internal(transcription, true, layerId);\r\n    }\r\n  }\r\n\r\n  public wordbreak(target: OutputTarget, layerId: string): Promise<string> {\r\n    if(!this.isActive) {\r\n      return null;\r\n    }\r\n\r\n    let context = new ContextWindow(Mock.from(target, false), this.configuration, layerId);\r\n    return this.lmEngine.wordbreak(context);\r\n  }\r\n\r\n  public predict(transcription: Transcription, layerId: string): Promise<Suggestion[]> {\r\n    if(!this.isActive) {\r\n      return null;\r\n    }\r\n\r\n    // If there's no active model, there can be no predictions.\r\n    // We'll also be missing important data needed to even properly REQUEST the predictions.\r\n    if(!this.currentModel || !this.configuration) {\r\n      return null;\r\n    }\r\n\r\n    // We've already invalidated any suggestions resulting from any previously-existing Promise -\r\n    // may as well officially invalidate them via event.\r\n    this.emit(\"invalidatesuggestions\", 'new');\r\n\r\n    return this.predict_internal(transcription, false, layerId);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param suggestion\r\n   * @param outputTarget\r\n   * @param getLayerId      a function that returns the current layerId,\r\n   *                        required because layerid can be changed by PostKeystroke\r\n   * @returns\r\n   */\r\n  public applySuggestion(suggestion: Suggestion, outputTarget: OutputTarget, getLayerId: ()=>string): Promise<Reversion> {\r\n    if(!outputTarget) {\r\n      throw \"Accepting suggestions requires a destination OutputTarget instance.\"\r\n    }\r\n\r\n    // Find the state of the context at the time the suggestion was generated.\r\n    // This may refer to the context before an input keystroke or before application\r\n    // of a predictive suggestion.\r\n    let original = this.getPredictionState(suggestion.transformId);\r\n    if(!original) {\r\n      console.warn(\"Could not apply the Suggestion!\");\r\n      return null;\r\n    } else {\r\n      // Apply the Suggestion!\r\n\r\n      // Step 1:  determine the final output text\r\n      let final = Mock.from(original.preInput, false);\r\n      final.apply(suggestion.transform);\r\n\r\n      // Step 2:  build a final, master Transform that will produce the desired results from the CURRENT state.\r\n      // In embedded mode, both Android and iOS are best served by calculating this transform and applying its\r\n      // values as needed for use with their IME interfaces.\r\n      let transform = final.buildTransformFrom(outputTarget);\r\n      outputTarget.apply(transform);\r\n\r\n      // Tell the banner that a suggestion was applied, so it can call the\r\n      // keyboard's PostKeystroke entry point as needed\r\n      this.emit('suggestionapplied', outputTarget);\r\n\r\n      // Build a 'reversion' Transcription that can be used to undo this apply() if needed,\r\n      // replacing the suggestion transform with the original input text.\r\n      let preApply = Mock.from(original.preInput, false);\r\n      preApply.apply(original.transform);\r\n\r\n      // Builds the reversion option according to the loaded lexical model's known\r\n      // syntactic properties.\r\n      let suggestionContext = new ContextWindow(original.preInput, this.configuration, getLayerId());\r\n\r\n      // We must accept the Suggestion from its original context, which was before\r\n      // `original.transform` was applied.\r\n      let reversionPromise: Promise<Reversion> = this.lmEngine.acceptSuggestion(suggestion, suggestionContext, original.transform);\r\n\r\n      // Also, request new prediction set based on the resulting context.\r\n      reversionPromise = reversionPromise.then((reversion) => {\r\n        let mappedReversion: Reversion = {\r\n          // By mapping back to the original Transcription that generated the Suggestion,\r\n          // the input will be automatically rewound to the preInput state.\r\n          transform: original.transform,\r\n          // The ID part is critical; the reversion can't be applied without it.\r\n          transformId: -original.token, // reversions use the additive inverse.\r\n          displayAs: reversion.displayAs,  // The real reason we needed to call the LMLayer.\r\n          id: reversion.id,\r\n          tag: reversion.tag\r\n        }\r\n        // // If using the version from lm-layer:\r\n        // let mappedReversion = reversion;\r\n        // mappedReversion.transformId = reversionTranscription.token;\r\n        this.predictFromTarget(outputTarget, getLayerId());\r\n        return mappedReversion;\r\n      });\r\n\r\n      return reversionPromise;\r\n    }\r\n  }\r\n\r\n  public applyReversion(reversion: Reversion, outputTarget: OutputTarget) {\r\n    if(!outputTarget) {\r\n      throw \"Accepting suggestions requires a destination OutputTarget instance.\"\r\n    }\r\n\r\n    // Find the state of the context at the time the suggestion was generated.\r\n    // This may refer to the context before an input keystroke or before application\r\n    // of a predictive suggestion.\r\n    //\r\n    // Reversions use the additive inverse of the id token of the Transcription being\r\n    // reverted to.\r\n    let original = this.getPredictionState(-reversion.transformId);\r\n    if(!original) {\r\n      console.warn(\"Could not apply the Suggestion!\");\r\n      return;\r\n    }\r\n\r\n    // Apply the Reversion!\r\n\r\n    // Step 1:  determine the final output text\r\n    let final = Mock.from(original.preInput, false);\r\n    final.apply(reversion.transform); // Should match original.transform, actually. (See applySuggestion)\r\n\r\n    // Step 2:  build a final, master Transform that will produce the desired results from the CURRENT state.\r\n    // In embedded mode, both Android and iOS are best served by calculating this transform and applying its\r\n    // values as needed for use with their IME interfaces.\r\n    let transform = final.buildTransformFrom(outputTarget);\r\n    outputTarget.apply(transform);\r\n\r\n    // The reason we need to preserve the additive-inverse 'transformId' property on Reversions.\r\n    let promise = this.lmEngine.revertSuggestion(reversion, new ContextWindow(original.preInput, this.configuration, null))\r\n\r\n    return promise.then((suggestions: Suggestion[]) => {\r\n      let result = new ReadySuggestions(suggestions, transform.id);\r\n      this.emit(\"suggestionsready\", result);\r\n      this.currentPromise = null;\r\n\r\n      return suggestions;\r\n    });\r\n  }\r\n\r\n  public predictFromTarget(outputTarget: OutputTarget, layerId: string): Promise<Suggestion[]> {\r\n    if(!outputTarget) {\r\n      return null;\r\n    }\r\n\r\n    let transcription = outputTarget.buildTranscriptionFrom(outputTarget, null, false);\r\n    return this.predict(transcription, layerId);\r\n  }\r\n\r\n  /**\r\n   * Called internally to do actual predictions after any relevant \"invalidatesuggestions\" events\r\n   * have been raised.\r\n   * @param transcription The triggering transcription (if it exists)\r\n   */\r\n  private predict_internal(transcription: Transcription, resetContext: boolean, layerId: string): Promise<Suggestion[]> {\r\n    if(!transcription) {\r\n      return null;\r\n    }\r\n\r\n    let context = new ContextWindow(transcription.preInput, this.configuration, layerId);\r\n    this.recordTranscription(transcription);\r\n\r\n    if(resetContext) {\r\n      this.lmEngine.resetContext(context);\r\n    }\r\n\r\n    let alternates = transcription.alternates;\r\n    if(!alternates || alternates.length == 0) {\r\n      alternates = [{\r\n        sample: transcription.transform,\r\n        p: 1.0\r\n      }];\r\n    }\r\n\r\n    let transform = transcription.transform;\r\n    var promise = this.currentPromise = this.lmEngine.predict(alternates, context);\r\n\r\n    return promise.then((suggestions: Suggestion[]) => {\r\n      if(promise == this.currentPromise) {\r\n        let result = new ReadySuggestions(suggestions, transform.id);\r\n        this.emit(\"suggestionsready\", result);\r\n        this.currentPromise = null;\r\n      }\r\n\r\n      return suggestions;\r\n    });\r\n  }\r\n\r\n  private recordTranscription(transcription: Transcription) {\r\n    this.recentTranscriptions.push(transcription);\r\n\r\n    if(this.recentTranscriptions.length > LanguageProcessor.TRANSCRIPTION_BUFFER) {\r\n      this.recentTranscriptions.splice(0, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the context and output state of KMW immediately before the prediction with\r\n   * token `id` was generated.  Must correspond to a 'recent' one, as only so many are stored\r\n   * in `ModelManager`'s history buffer.\r\n   * @param id A unique identifier corresponding to a recent `Transcription`.\r\n   * @returns The matching `Transcription`, or `null` none is found.\r\n   */\r\n  public getPredictionState(id: number): Transcription {\r\n    let match = this.recentTranscriptions.filter((t: Transcription) => {\r\n      return t.token == id;\r\n    })\r\n\r\n    return match.length == 0 ? null : match[0];\r\n  }\r\n\r\n  public shutdown() {\r\n    this.lmEngine.shutdown();\r\n  }\r\n\r\n  public get isActive(): boolean {\r\n    if(!this.canEnable()) {\r\n      this._mayPredict = false;\r\n      return false;\r\n    }\r\n    return (this.activeModel || false) && this._mayPredict;\r\n  }\r\n\r\n  canEnable(): boolean {\r\n    // Is not initialized if there is no worker.\r\n    return !!this.lmEngine;\r\n  }\r\n\r\n  public get mayPredict() {\r\n    return this._mayPredict;\r\n  }\r\n\r\n  public set mayPredict(flag: boolean) {\r\n    if(!this.canEnable()) {\r\n      return;\r\n    }\r\n\r\n    let oldVal = this._mayPredict;\r\n    this._mayPredict = flag;\r\n\r\n    if(oldVal != flag) {\r\n      // If there's no model to be activated and we've reached this point,\r\n      // the banner should remain inactive, as it already was.\r\n      // If it there was one and we've reached this point, we're globally\r\n      // deactivating, so we're fine.\r\n      if(this.activeModel) {\r\n        // If someone toggles predictions on and off without changing the model, it is possible\r\n        // that the model is already configured!\r\n        let state: StateChangeEnum = flag ? 'active' : 'inactive';\r\n\r\n        // We always signal the 'active' state here, even if 'configured', b/c of an\r\n        // anti-banner-flicker optimization in the Android app.\r\n        this._state = state;\r\n        this.emit('statechange', state);\r\n\r\n        if(this.isConfigured) {\r\n          this._state = 'configured';\r\n          this.emit('statechange', 'configured');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public get mayCorrect() {\r\n    return this._mayCorrect;\r\n  }\r\n\r\n  public set mayCorrect(flag: boolean) {\r\n    this._mayCorrect = flag;\r\n  }\r\n\r\n  public get wordbreaksAfterSuggestions() {\r\n    return this.configuration.wordbreaksAfterSuggestions;\r\n  }\r\n\r\n  public tryAcceptSuggestion(source: string): boolean {\r\n    // If and when we do auto-correct, the suggestion is to pass this object to the event and\r\n    // denote any mutations to the contained value.\r\n    //let returnObj = {shouldSwallow: false};\r\n    this.emit('tryaccept', source);\r\n\r\n    return false;\r\n  }\r\n\r\n  public tryRevertSuggestion(): boolean {\r\n    // If and when we do auto-revert, the suggestion is to pass this object to the event and\r\n    // denote any mutations to the contained value.\r\n    //let returnObj = {shouldSwallow: false};\r\n    this.emit('tryrevert');\r\n\r\n    return false;\r\n  }\r\n}",
    "/*\r\n * Copyright (c) 2018 National Research Council Canada (author: Eddie A. Santos)\r\n * Copyright (c) 2018 SIL International\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n * this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to\r\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\n * the Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/// <reference types=\"@keymanapp/lm-message-types\" />\r\n\r\ntype Resolve<T> = (value?: T | PromiseLike<T>) => void;\r\ntype Reject = (reason?: any) => void;\r\ninterface PromiseCallbacks<T> {\r\n  resolve: Resolve<T>;\r\n  reject: Reject;\r\n}\r\n\r\n\r\n/**\r\n * Associate tokens with promises.\r\n *\r\n * First, .make() a promise -- associate a token with resolve/reject callbacks.\r\n *\r\n * You can either .keep() a promise -- resolve() and forget it;\r\n * Or you may also .break() a promise -- reject() and forget it.\r\n *\r\n * <T> is the type of resolved value (value yielded successfully by promise).\r\n */\r\nexport default class PromiseStore<T> {\r\n  // IE11 offers partial support for new Map().\r\n  // Assume only .get(), .set(), .has(), .delete(), and .size work.\r\n  // See: http://kangax.github.io/compat-table/es6/#test-Map\r\n  private _promises: Map<Token, PromiseCallbacks<T>>;\r\n  constructor() {\r\n    this._promises = new Map();\r\n  }\r\n  /**\r\n   * How many promises are currently being tracked?\r\n   */\r\n  get length(): number {\r\n    return this._promises.size;\r\n  }\r\n  /**\r\n   * Associate a token with its respective resolve and reject callbacks.\r\n   */\r\n  make(token: Token, resolve: Resolve<T>, reject: Reject): void {\r\n    if (this._promises.has(token)) {\r\n      return reject(`Existing request with token ${token}`);\r\n    }\r\n    this._promises.set(token, { reject, resolve });\r\n  }\r\n  /**\r\n   * Resolve the promise associated with a token (with a value!).\r\n   * Once the promise is resolved, the token is removed..\r\n   */\r\n  keep(token: Token, value: T) {\r\n    let callbacks = this._promises.get(token);\r\n    if (!callbacks) {\r\n      throw new Error(`No promise associated with token: ${token}`);\r\n    }\r\n    let accept = callbacks.resolve;\r\n    this._promises.delete(token);\r\n    return accept(value);\r\n  }\r\n  /**\r\n   * Instantly reject and forget a promise associated with the token.\r\n   */\r\n  break(token: Token, reason?: any): void {\r\n    let callbacks = this._promises.get(token);\r\n    if (!callbacks) {\r\n      throw new Error(`No promise associated with token: ${token}`);\r\n    }\r\n    this._promises.delete(token);\r\n    callbacks.reject(reason);\r\n  }\r\n}",
    "/*\r\n * Copyright (c) 2018 National Research Council Canada (author: Eddie A. Santos)\r\n * Copyright (c) 2018 SIL International\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n * this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to\r\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\n * the Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nimport PromiseStore from \"./promise-store.js\";\r\n\r\n/// <reference types=\"@keymanapp/lm-message-types\" />\r\n/// <reference types=\"worker-interface.d.ts\" />\r\n\r\n/**\r\n * Top-level interface to the Language Modelling layer, or \"LMLayer\" for short.\r\n *\r\n * The Language Modelling layer provides a way for keyboards to offer prediction and\r\n * correction functionalities. The LMLayer proper runs within a Web Worker, however,\r\n * this class is intended to run in the main thread, and automatically spawn a Web\r\n * Worker, capable of offering predictions.\r\n *\r\n * Since the Worker runs in a different thread, the public methods of this class are\r\n * asynchronous. Methods of note include:\r\n *\r\n *  - #loadModel() -- loads a specified model file\r\n *  - #predict() -- ask the LMLayer to offer suggestions (predictions or corrections) for\r\n *                  the input event\r\n *  - #unloadModel() -- unloads the LMLayer's currently loaded model, preparing it to\r\n *                          receive (load) a new model\r\n *\r\n * The top-level LMLayer will automatically starts up its own Web Worker.\r\n */\r\n\r\nexport default class LMLayer {\r\n  /**\r\n   * The underlying worker instance. By default, this is the LMLayerWorker.\r\n   */\r\n  private _worker: Worker;\r\n  /** Call this when the LMLayer has sent us the 'ready' message! */\r\n  private _declareLMLayerReady: (conf: Configuration) => void;\r\n  private _predictPromises: PromiseStore<Suggestion[]>;\r\n  private _wordbreakPromises: PromiseStore<USVString>;\r\n  private _acceptPromises: PromiseStore<Reversion>;\r\n  private _revertPromises: PromiseStore<Suggestion[]>;\r\n  private _nextToken: number;\r\n  private capabilities: Capabilities;\r\n\r\n  /**\r\n   * Construct the top-level LMLayer interface. This also starts the underlying Worker.\r\n   *\r\n   * @param uri URI of the underlying LMLayer worker code. This will usually be a blob:\r\n   *            or file: URI. If uri is not provided, this will start the default Worker.\r\n   */\r\n  constructor(capabilities: Capabilities, worker: Worker, testMode?: boolean) {\r\n    // Either use the given worker, or instantiate the default worker.\r\n    this._worker = worker;\r\n    this._worker.onmessage = this.onMessage.bind(this)\r\n    this._declareLMLayerReady = null;\r\n    this._predictPromises = new PromiseStore();\r\n    this._wordbreakPromises = new PromiseStore();\r\n    this._acceptPromises = new PromiseStore();\r\n    this._revertPromises = new PromiseStore();\r\n    this._nextToken = Number.MIN_SAFE_INTEGER;\r\n\r\n    this.sendConfig(capabilities, !!testMode);\r\n  }\r\n\r\n  /**\r\n   * Initializes the LMLayer worker with the host platform's capability set.\r\n   *\r\n   * @param capabilities The host platform's capability spec - a model cannot assume access to more context\r\n   *                     than specified by this parameter.\r\n   */\r\n  private sendConfig(capabilities: Capabilities, testMode: boolean) {\r\n    this._worker.postMessage({\r\n      message: 'config',\r\n      capabilities: capabilities,\r\n      testMode: testMode\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes the LMLayer worker with a path to the desired model file.\r\n   */\r\n  loadModel(modelSource: string, loadType: 'file' | 'raw' = 'file'): Promise<Configuration> {\r\n    return new Promise((resolve, _reject) => {\r\n      // Sets up so the promise is resolved in the onMessage() callback, when it receives\r\n      // the 'ready' message.\r\n      this._declareLMLayerReady = resolve;\r\n\r\n      let modelSourceSpec: any = {\r\n        type: loadType\r\n      };\r\n\r\n      if(loadType == 'file') {\r\n        modelSourceSpec.file = modelSource;\r\n      } else {\r\n        modelSourceSpec.code = modelSource;\r\n      }\r\n\r\n      this._worker.postMessage({\r\n        message: 'load',\r\n        source: modelSourceSpec\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unloads the previously-active model from memory, resetting the LMLayer to prep\r\n   * for transition to use of a new model.\r\n   */\r\n  public unloadModel() {\r\n    this._worker.postMessage({\r\n      message: 'unload'\r\n    });\r\n  }\r\n\r\n  predict(transform: Transform | Distribution<Transform>, context: Context): Promise<Suggestion[]> {\r\n    let token = this._nextToken++;\r\n    return new Promise((resolve, reject) => {\r\n      this._predictPromises.make(token, resolve, reject);\r\n      this._worker.postMessage({\r\n        message: 'predict',\r\n        token: token,\r\n        transform: transform,\r\n        context: context,\r\n      });\r\n    });\r\n  }\r\n\r\n  wordbreak(context: Context): Promise<USVString> {\r\n    let token = this._nextToken++;\r\n    return new Promise((resolve, reject) => {\r\n      this._wordbreakPromises.make(token, resolve, reject);\r\n      this._worker.postMessage({\r\n        message: 'wordbreak',\r\n        token: token,\r\n        context: context\r\n      })\r\n    });\r\n  }\r\n\r\n  acceptSuggestion(suggestion: Suggestion, context: Context, postTransform: Transform): Promise<Reversion> {\r\n    let token = this._nextToken++;\r\n    return new Promise((resolve, reject) => {\r\n      this._acceptPromises.make(token, resolve, reject);\r\n      this._worker.postMessage({\r\n        message: 'accept',\r\n        token: token,\r\n        suggestion: suggestion,\r\n        context: context,\r\n        postTransform: postTransform\r\n      });\r\n    });\r\n  }\r\n\r\n  revertSuggestion(reversion: Reversion, context: Context): Promise<Suggestion[]> {\r\n    let token = this._nextToken++;\r\n    return new Promise((resolve, reject) => {\r\n      this._revertPromises.make(token, resolve, reject);\r\n      this._worker.postMessage({\r\n        message: 'revert',\r\n        token: token,\r\n        reversion: reversion,\r\n        context: context\r\n      })\r\n    });\r\n  }\r\n\r\n  resetContext(context: Context) {\r\n    this._worker.postMessage({\r\n      message: 'reset-context',\r\n      context: context\r\n    });\r\n  }\r\n\r\n  // TODO: asynchronous close() method.\r\n  //       Worker code must recognize message and call self.close().\r\n\r\n  private onMessage(event: MessageEvent): void {\r\n    let payload: OutgoingMessage = event.data;\r\n    if (payload.message === 'error') {\r\n      console.error(payload.log);\r\n      if(payload.error) {\r\n        console.error(payload.error);\r\n      }\r\n    }\r\n    else if (payload.message === 'ready') {\r\n      this._declareLMLayerReady(event.data.configuration);\r\n    } else if (payload.message === 'suggestions') {\r\n      this._predictPromises.keep(payload.token, payload.suggestions);\r\n    } else if (payload.message === 'currentword') {\r\n      this._wordbreakPromises.keep(payload.token, payload.word);\r\n    } else if (payload.message === 'postaccept') {\r\n      this._acceptPromises.keep(payload.token, payload.reversion);\r\n    } else if (payload.message === 'postrevert') {\r\n      this._revertPromises.keep(payload.token, payload.suggestions);\r\n    } else {\r\n      // This branch should never execute, but just in case...\r\n      //@ts-ignore\r\n      throw new Error(`Message not implemented: ${payload.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears out any computational resources in use by the LMLayer, including shutting\r\n   * down any internal WebWorkers.\r\n   */\r\n  public shutdown() {\r\n    this._worker.terminate();\r\n  }\r\n}\r\n",
    "/**\r\n * Given a function, this utility returns the source code within it, as a string.\r\n * This is intended to unwrap the \"wrapped\" source code created in the LMLayerWorker\r\n * build process.\r\n *\r\n * @param fn The function whose body will be returned.\r\n */\r\nexport default function unwrap(encodedSrc: string): string {\r\n  // There used to be more to this, but now it's a pretty simple passthrough!\r\n  return encodedSrc;\r\n}",
    "\n// Autogenerated code.  Do not modify!\n// --START:LMLayerWorkerCode--\n\nexport var LMLayerWorkerCode = \"\\\"use strict\\\";var ae=Object.defineProperty;var v=function(r,e){return ae(r,\\\"name\\\",{value:e,configurable:!0})};/*! https://mths.be/codepointat v0.2.0 by @mathias */String.prototype.codePointAt||function(){\\\"use strict\\\";var r=function(){try{var t={},n=Object.defineProperty,i=n(t,t,t)&&n}catch(a){}return i}(),e=v(function(t){if(this==null)throw TypeError();var n=String(this),i=n.length,a=t?Number(t):0;if(a!=a&&(a=0),!(a<0||a>=i)){var u=n.charCodeAt(a),o;return u>=55296&&u<=56319&&i>a+1&&(o=n.charCodeAt(a+1),o>=56320&&o<=57343)?(u-55296)*1024+o-56320+65536:u}},\\\"codePointAt\\\");r?r(String.prototype,\\\"codePointAt\\\",{value:e,configurable:!0,writable:!0}):String.prototype.codePointAt=e}(),Array.prototype.fill||Object.defineProperty(Array.prototype,\\\"fill\\\",{value:function(r){if(this==null)throw new TypeError(\\\"this is null or not defined\\\");for(var e=Object(this),t=e.length>>>0,n=arguments[1],i=n>>0,a=i<0?Math.max(t+i,0):Math.min(i,t),u=arguments[2],o=u===void 0?t:u>>0,l=o<0?Math.max(t+o,0):Math.min(o,t);a<l;)e[a]=r,a++;return e}});/**\\n* Array.prototype.findIndex() polyfill\\n* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\\n* @license MIT\\n*/Array.prototype.findIndex||Object.defineProperty(Array.prototype,\\\"findIndex\\\",{value:function(r){if(this==null)throw new TypeError('\\\"this\\\" is null or not defined');var e=Object(this),t=e.length>>>0;if(typeof r!=\\\"function\\\")throw new TypeError(\\\"predicate must be a function\\\");for(var n=arguments[1],i=0;i<t;){var a=e[i];if(r.call(n,a,i,e))return i;i++}return-1},configurable:!0,writable:!0}),Array.from||(Array.from=function(){var r=Object.prototype.toString,e=v(function(a){return typeof a==\\\"function\\\"||r.call(a)===\\\"[object Function]\\\"},\\\"isCallable\\\"),t=v(function(a){var u=Number(a);return isNaN(u)?0:u===0||!isFinite(u)?u:(u>0?1:-1)*Math.floor(Math.abs(u))},\\\"toInteger\\\"),n=Math.pow(2,53)-1,i=v(function(a){var u=t(a);return Math.min(Math.max(u,0),n)},\\\"toLength\\\");return v(function(u){var o=this,l=Object(u);if(u==null)throw new TypeError(\\\"Array.from requires an array-like object - not null or undefined\\\");var s=arguments.length>1?arguments[1]:void 0,f;if(typeof s!=\\\"undefined\\\"){if(!e(s))throw new TypeError(\\\"Array.from: when provided, the second argument must be a function\\\");arguments.length>2&&(f=arguments[2])}for(var c=i(l.length),d=e(o)?Object(new o(c)):new Array(c),p=0,g;p<c;)g=l[p],s?d[p]=typeof f==\\\"undefined\\\"?s(g,p):s.call(f,g,p):d[p]=g,p+=1;return d.length=c,d},\\\"from\\\")}()),Array.prototype.includes||(Array.prototype.includes=function(r){return!!~this.indexOf(r)}),Object.keys||(Object.keys=function(){\\\"use strict\\\";var r=Object.prototype.hasOwnProperty,e=!{toString:null}.propertyIsEnumerable(\\\"toString\\\"),t=[\\\"toString\\\",\\\"toLocaleString\\\",\\\"valueOf\\\",\\\"hasOwnProperty\\\",\\\"isPrototypeOf\\\",\\\"propertyIsEnumerable\\\",\\\"constructor\\\"],n=t.length;return function(i){if(typeof i!=\\\"function\\\"&&(typeof i!=\\\"object\\\"||i===null))throw new TypeError(\\\"Object.keys called on non-object\\\");var a=[],u,o;for(u in i)r.call(i,u)&&a.push(u);if(e)for(o=0;o<n;o++)r.call(i,t[o])&&a.push(t[o]);return a}}());var reduce=Function.bind.call(Function.call,Array.prototype.reduce),isEnumerable=Function.bind.call(Function.call,Object.prototype.propertyIsEnumerable),concat=Function.bind.call(Function.call,Array.prototype.concat),keys=Object.keys;Object.values||(Object.values=v(function(e){return reduce(keys(e),function(t,n){return concat(t,typeof n==\\\"string\\\"&&isEnumerable(e,n)?[e[n]]:[])},[])},\\\"values\\\")),Object.entries||(Object.entries=v(function(e){return reduce(keys(e),function(t,n){return concat(t,typeof n==\\\"string\\\"&&isEnumerable(e,n)?[[n,e[n]]]:[])},[])},\\\"entries\\\")),function(r,e){\\\"use strict\\\";typeof module==\\\"object\\\"&&typeof module.exports==\\\"object\\\"?module.exports=e(r):e(r)}(typeof window!=\\\"undefined\\\"?window:self||global,function(r){\\\"use strict\\\";var e=Object.defineProperty,t=Object.defineProperties,n=0,i=[],a=Array.prototype.slice,u=typeof r.ES6==\\\"object\\\"?r.ES6:r.ES6={},o=Array.isArray,l=Object.prototype.toString,s=Array.prototype.push,f=v(function(){},\\\"emptyFunction\\\"),c=v(function(h){return h},\\\"simpleFunction\\\"),d=v(function(h){return typeof h==\\\"function\\\"},\\\"isCallable\\\"),p=v(function(){},\\\"Iterator\\\"),g=v(function(h,m){this._array=h,this._flag=m,this._nextIndex=0},\\\"ArrayIterator\\\"),w=v(function(h,m){this._string=h,this._flag=m,this._nextIndex=0},\\\"StringIterator\\\"),b=v(function(h){return h!==null&&(typeof h==\\\"object\\\"||typeof h==\\\"function\\\")},\\\"isObject\\\"),T=v(function(h,m){return t(h,{_description:{value:m},_isSymbol:{value:!0},_id:{value:n++}}),h},\\\"setupSymbolInternals\\\"),S=v(function(h,m){if(typeof h.length==\\\"number\\\"&&h.length>=0&&typeof m.length==\\\"number\\\"&&m.length>=0){var O=Math.floor(h.length),k=Math.floor(m.length),A=0;for(h.length=O+k;A<k;++A)m.hasOwnProperty(A)&&(h[O+A]=m[A])}},\\\"appendArray\\\"),_=v(function(h,m){if(typeof h!=\\\"function\\\"||typeof m!=\\\"function\\\")throw new TypeError(\\\"Child and Parent must be function type\\\");h.prototype=Object.create(m.prototype),h.prototype.constructor=h},\\\"simpleInheritance\\\"),y=v(function h(m){if(m=m===void 0?\\\"\\\":String(m),this instanceof h)throw new TypeError(\\\"Symbol is not a constructor\\\");return T(Object.create(h.prototype),m)},\\\"Symbol\\\");t(y,{for:{value:function(h){h=String(h);for(var m,O=i.length,k=0;k<O;++k)if((m=i[k]).key===h)return m.symbol;return m={key:h,symbol:y(h)},i.push(m),m.symbol},writable:!0,configurable:!0},keyFor:{value:function(h){if(!u.isSymbol(h))throw new TypeError(String(h)+\\\" is not a symbol\\\");for(var m,O=i.length,k=0;k<O;++k)if((m=i[k]).symbol===h)return m.key},writable:!0,configurable:!0},hasInstance:{value:y(\\\"Symbol.hasInstance\\\")},isConcatSpreadable:{value:y(\\\"Symbol.isConcatSpreadable\\\")},iterator:{value:y(\\\"Symbol.iterator\\\")},toStringTag:{value:y(\\\"Symbol.toStringTag\\\")}}),y.prototype.toString=function(){return\\\"@@_____\\\"+this._id+\\\"_____\\\"},y.prototype.valueOf=function(){return this},e(p.prototype,y.iterator.toString(),{value:function(){return this},writable:!0,configurable:!0}),_(g,p),_(w,p),e(g.prototype,y.toStringTag.toString(),{value:\\\"Array Iterator\\\",configurable:!0}),e(w.prototype,y.toStringTag.toString(),{value:\\\"String Iterator\\\",configurable:!0}),g.prototype.next=function(){if(!(this instanceof g))throw new TypeError(\\\"Method Array Iterator.prototype.next called on incompatible receiver \\\"+String(this));var h;return this._nextIndex===-1?{done:!0,value:void 0}:typeof this._array.length==\\\"number\\\"&&this._array.length>=0&&this._nextIndex<Math.floor(this._array.length)?(this._flag===1?h=[this._nextIndex,this._array[this._nextIndex]]:this._flag===2?h=this._array[this._nextIndex]:this._flag===3&&(h=this._nextIndex),this._nextIndex++,{done:!1,value:h}):(this._nextIndex=-1,{done:!0,value:void 0})},w.prototype.next=function(){if(!(this instanceof w))throw new TypeError(\\\"Method String Iterator.prototype.next called on incompatible receiver \\\"+String(this));var h,m=new String(this._string);return this._nextIndex===-1?{done:!0,value:void 0}:this._nextIndex<m.length?(h=m[this._nextIndex],this._nextIndex++,{done:!1,value:h}):(this._nextIndex=-1,{done:!0,value:void 0})};var C=v(function(h,m){this._target=h,this._values=[],this._thisArg=m},\\\"SpreadOperatorImpl\\\");return C.prototype.spread=function(){var h=this;return a.call(arguments).forEach(function(m){u.forOf(m,function(O){h._values.push(O)})}),h},C.prototype.add=function(){var h=this;return a.call(arguments).forEach(function(m){h._values.push(m)}),h},C.prototype.call=function(h){if(typeof this._target!=\\\"function\\\")throw new TypeError(\\\"Target is not a function\\\");return h=arguments.length<=0?this._thisArg:h,this._target.apply(h,this._values)},C.prototype.new=function(){if(typeof this._target!=\\\"function\\\")throw new TypeError(\\\"Target is not a constructor\\\");var h,m;return h=Object.create(this._target.prototype),m=this._target.apply(h,this._values),b(m)?m:h},C.prototype.array=function(){if(!o(this._target))throw new TypeError(\\\"Target is not a array\\\");return s.apply(this._target,this._values),this._target},t(u,{isSymbol:{value:function(h){return h instanceof y&&function(m){return m._isSymbol===!0&&typeof m._id==\\\"number\\\"&&typeof m._description==\\\"string\\\"}(h)},writable:!0,configurable:!0},instanceOf:{value:function(h,m){if(!b(m))throw new TypeError(\\\"Right-hand side of 'instanceof' is not an object\\\");var O=m[y.hasInstance];if(O===void 0)return h instanceof m;if(typeof O!=\\\"function\\\")throw new TypeError(typeof O+\\\" is not a function\\\");return O.call(m,h)},writable:!0,configurable:!0},forOf:{value:function(h,m,O){if(m=typeof m!=\\\"function\\\"?f:m,typeof h[y.iterator]!=\\\"function\\\")throw new TypeError(\\\"Iterable[Symbol.iterator] is not a function\\\");var k,A=h[y.iterator]();if(typeof A.next!=\\\"function\\\")throw new TypeError(\\\".iterator.next is not a function\\\");for(;;){if(k=A.next(),!b(k))throw new TypeError(\\\"Iterator result \\\"+k+\\\" is not an object\\\");if(k.done)break;m.call(O,k.value)}},writable:!0,configurable:!0},spreadOperator:{value:function(h,m){if(typeof h!=\\\"function\\\"&&!o(h))throw new TypeError(\\\"Spread operator only supports on array and function objects at this moment\\\");return new C(h,m)},writable:!0,configurable:!0}}),e(r,\\\"Symbol\\\",{value:y,writable:!0,configurable:!0}),e(Function.prototype,y.hasInstance.toString(),{value:function(h){return typeof this==\\\"function\\\"&&h instanceof this}}),e(Array.prototype,\\\"concat\\\",{value:function(){if(this===void 0||this===null)throw new TypeError(\\\"Array.prototype.concat called on null or undefined\\\");var h=Object(this),m=a.call(arguments),O=[];return m.unshift(h),m.forEach(function(k){b(k)?k[y.isConcatSpreadable]!==void 0?k[y.isConcatSpreadable]?S(O,k):O.push(k):o(k)?S(O,k):O.push(k):O.push(k)}),O},writable:!0,configurable:!0}),e(Object.prototype,\\\"toString\\\",{value:function(){return this===void 0||this===null?l.call(this):typeof this[y.toStringTag]==\\\"string\\\"?\\\"[object \\\"+this[y.toStringTag]+\\\"]\\\":l.call(this)},writable:!0,configurable:!0}),e(Array.prototype,y.iterator.toString(),{value:function(){if(this===void 0||this===null)throw new TypeError(\\\"Cannot convert undefined or null to object\\\");var h=Object(this);return new g(h,2)},writable:!0,configurable:!0}),e(Array,\\\"from\\\",{value:function(h,m,O){var k,A,I,E=0;if(k=d(this)?this:Array,h==null)throw new TypeError(\\\"Cannot convert undefined or null to object\\\");if(h=Object(h),m===void 0)m=c;else if(!d(m))throw new TypeError(m+\\\" is not a function\\\");if(h[y.iterator]===void 0){if(!(typeof h.length==\\\"number\\\"&&h.length>=0))return(I=new k(0)).length=0,I;for(A=Math.floor(h.length),(I=new k(A)).length=A;E<A;++E)I[E]=m.call(O,h[E])}else(I=new k).length=0,u.forOf(h,function(D){I.length++,I[I.length-1]=m.call(O,D)});return I},writable:!0,configurable:!0}),e(Array.prototype,\\\"entries\\\",{value:function(){if(this===void 0||this===null)throw new TypeError(\\\"Cannot convert undefined or null to object\\\");var h=Object(this);return new g(h,1)},writable:!0,configurable:!0}),e(Array.prototype,\\\"keys\\\",{value:function(){if(this===void 0||this===null)throw new TypeError(\\\"Cannot convert undefined or null to object\\\");var h=Object(this);return new g(h,3)},writable:!0,configurable:!0}),e(String.prototype,y.iterator.toString(),{value:function(){if(this===void 0||this===null)throw new TypeError(\\\"String.prototype[Symbol.iterator] called on null or undefined\\\");return new w(String(this),0)},writable:!0,configurable:!0}),u});var __create=Object.create,__defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__getProtoOf=Object.getPrototypeOf,__hasOwnProp=Object.prototype.hasOwnProperty,__commonJS=v(function(r,e){return v(function(){return e||(0,r[__getOwnPropNames(r)[0]])((e={exports:{}}).exports,e),e.exports},\\\"__require\\\")},\\\"__commonJS\\\"),__export=v(function(r,e){for(var t in e)__defProp(r,t,{get:e[t],enumerable:!0})},\\\"__export\\\"),__copyProps=v(function(r,e,t,n){if(e&&typeof e==\\\"object\\\"||typeof e==\\\"function\\\")for(var i=__getOwnPropNames(e),a=0,u=i.length,o;a<u;a++)o=i[a],!__hasOwnProp.call(r,o)&&o!==t&&__defProp(r,o,{get:function(l){return e[l]}.bind(null,o),enumerable:!(n=__getOwnPropDesc(e,o))||n.enumerable});return r},\\\"__copyProps\\\"),__reExport=v(function(r,e,t){return __copyProps(r,e,\\\"default\\\"),t&&__copyProps(t,e,\\\"default\\\")},\\\"__reExport\\\"),__toESM=v(function(r,e,t){return t=r!=null?__create(__getProtoOf(r)):{},__copyProps(e||!r||!r.__esModule?__defProp(t,\\\"default\\\",{value:r,enumerable:!0}):t,r)},\\\"__toESM\\\"),require_tslib=__commonJS({\\\"../../../node_modules/tslib/tslib.js\\\":function(r,e){var t,n,i,a,u;(function(o){var l=typeof global==\\\"object\\\"?global:typeof self==\\\"object\\\"?self:typeof this==\\\"object\\\"?this:{};typeof define==\\\"function\\\"&&define.amd?define(\\\"tslib\\\",[\\\"exports\\\"],function(f){o(s(l,s(f)))}):typeof e==\\\"object\\\"&&typeof e.exports==\\\"object\\\"?o(s(l,s(e.exports))):o(s(l));function s(f,c){return f!==l&&(typeof Object.create==\\\"function\\\"?Object.defineProperty(f,\\\"__esModule\\\",{value:!0}):f.__esModule=!0),function(d,p){return f[d]=c?c(d,p):p}}v(s,\\\"createExporter\\\")})(function(o){var l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(s,f){s.__proto__=f}||function(s,f){for(var c in f)Object.prototype.hasOwnProperty.call(f,c)&&(s[c]=f[c])};t=v(function(s,f){if(typeof f!=\\\"function\\\"&&f!==null)throw new TypeError(\\\"Class extends value \\\"+String(f)+\\\" is not a constructor or null\\\");l(s,f);function c(){this.constructor=s}v(c,\\\"__\\\"),s.prototype=f===null?Object.create(f):(c.prototype=f.prototype,new c)},\\\"__extends2\\\"),n=Object.assign||function(s){for(var f,c=1,d=arguments.length;c<d;c++){f=arguments[c];for(var p in f)Object.prototype.hasOwnProperty.call(f,p)&&(s[p]=f[p])}return s},i=v(function(s,f){var c={label:0,sent:function(){if(g[0]&1)throw g[1];return g[1]},trys:[],ops:[]},d,p,g,w;return w={next:b(0),throw:b(1),return:b(2)},typeof Symbol==\\\"function\\\"&&(w[Symbol.iterator]=function(){return this}),w;function b(S){return function(_){return T([S,_])}}function T(S){if(d)throw new TypeError(\\\"Generator is already executing.\\\");for(;w&&(w=0,S[0]&&(c=0)),c;)try{if(d=1,p&&(g=S[0]&2?p.return:S[0]?p.throw||((g=p.return)&&g.call(p),0):p.next)&&!(g=g.call(p,S[1])).done)return g;switch(p=0,g&&(S=[S[0]&2,g.value]),S[0]){case 0:case 1:g=S;break;case 4:return c.label++,{value:S[1],done:!1};case 5:c.label++,p=S[1],S=[0];continue;case 7:S=c.ops.pop(),c.trys.pop();continue;default:if(g=c.trys,!(g=g.length>0&&g[g.length-1])&&(S[0]===6||S[0]===2)){c=0;continue}if(S[0]===3&&(!g||S[1]>g[0]&&S[1]<g[3])){c.label=S[1];break}if(S[0]===6&&c.label<g[1]){c.label=g[1],g=S;break}if(g&&c.label<g[2]){c.label=g[2],c.ops.push(S);break}g[2]&&c.ops.pop(),c.trys.pop();continue}S=f.call(s,c)}catch(_){S=[6,_],p=0}finally{d=g=0}if(S[0]&5)throw S[1];return{value:S[0]?S[1]:void 0,done:!0}}},\\\"__generator3\\\"),a=v(function(s){var f=typeof Symbol==\\\"function\\\"&&Symbol.iterator,c=f&&s[f],d=0;if(c)return c.call(s);if(s&&typeof s.length==\\\"number\\\")return{next:function(){return s&&d>=s.length&&(s=void 0),{value:s&&s[d++],done:!s}}};throw new TypeError(f?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},\\\"__values7\\\"),u=v(function(s,f){var c=typeof Symbol==\\\"function\\\"&&s[Symbol.iterator];if(!c)return s;var d=c.call(s),p,g=[],w;try{for(;(f===void 0||f-- >0)&&!(p=d.next()).done;)g.push(p.value)}catch(b){w={error:b}}finally{try{p&&!p.done&&(c=d.return)&&c.call(d)}finally{if(w)throw w.error}}return g},\\\"__read3\\\"),o(\\\"__extends\\\",t),o(\\\"__assign\\\",n),o(\\\"__generator\\\",i),o(\\\"__values\\\",a),o(\\\"__read\\\",u)})}}),build_exports={};__export(build_exports,{tslib:function(){return tslib_1}}),__reExport(build_exports,__toESM(require_tslib(),1));var tslib_1=__toESM(require_tslib(),1),DeviceSpec=function(){function r(e,t,n,i){switch(e.toLowerCase()){case r.Browser.Chrome:case r.Browser.Edge:case r.Browser.Firefox:case r.Browser.Native:case r.Browser.Opera:case r.Browser.Safari:this.browser=e.toLowerCase();break;default:this.browser=r.Browser.Other}switch(t.toLowerCase()){case r.FormFactor.Desktop:case r.FormFactor.Phone:case r.FormFactor.Tablet:this.formFactor=t.toLowerCase();break;default:throw\\\"Invalid form factor specified for device: \\\"+t}switch(n.toLowerCase()){case r.OperatingSystem.Windows.toLowerCase():case r.OperatingSystem.macOS.toLowerCase():case r.OperatingSystem.Linux.toLowerCase():case r.OperatingSystem.Android.toLowerCase():case r.OperatingSystem.iOS.toLowerCase():this.OS=n.toLowerCase();break;default:this.OS=r.OperatingSystem.Other}this.touchable=i}return v(r,\\\"DeviceSpec2\\\"),r}();(function(r){var e;(function(i){i.Chrome=\\\"chrome\\\",i.Edge=\\\"edge\\\",i.Firefox=\\\"firefox\\\",i.Native=\\\"native\\\",i.Opera=\\\"opera\\\",i.Safari=\\\"safari\\\",i.Other=\\\"other\\\"})(e=r.Browser||(r.Browser={}));var t;(function(i){i.Windows=\\\"windows\\\",i.macOS=\\\"macosx\\\",i.Linux=\\\"linux\\\",i.Android=\\\"android\\\",i.iOS=\\\"ios\\\",i.Other=\\\"other\\\"})(t=r.OperatingSystem||(r.OperatingSystem={}));var n;(function(i){i.Desktop=\\\"desktop\\\",i.Phone=\\\"phone\\\",i.Tablet=\\\"tablet\\\"})(n=r.FormFactor||(r.FormFactor={}))})(DeviceSpec||(DeviceSpec={}));function extendString(){String.kmwFromCharCode=function(r){var e=[],t;for(t=0;t<arguments.length;t++){var n=Number(arguments[t]);if(!isFinite(n)||n<0||n>1114111||Math.floor(n)!==n)throw new RangeError(\\\"Invalid code point \\\"+n);n<65536?e.push(n):(n-=65536,e.push((n>>10)+55296),e.push(n%1024+56320))}return String.fromCharCode.apply(void 0,e)},String.prototype.kmwCharCodeAt=function(r){var e=String(this),t=0;if(r<0||r>=e.length)return NaN;for(var n=0;n<r;n++)if(t=e.kmwNextChar(t),t===null)return NaN;var i=e.charCodeAt(t);if(i>=55296&&i<=56319&&e.length>t+1){var a=e.charCodeAt(t+1);if(a>=56320&&a<=57343)return(i-55296<<10)+(a-56320)+65536}return i},String.prototype.kmwIndexOf=function(r,e){var t=String(this),n=t.indexOf(r,e);if(n<0)return n;for(var i=0,a=0;a!==null&&a<n;a=t.kmwNextChar(a))i++;return i},String.prototype.kmwLastIndexOf=function(r,e){var t=String(this),n=t.lastIndexOf(r,e);if(n<0)return n;for(var i=0,a=0;a!==null&&a<n;a=t.kmwNextChar(a))i++;return i},String.prototype.kmwLength=function(){var r=String(this);if(r.length==0)return 0;for(var e=0,t=0;t!==null;e++)t=r.kmwNextChar(t);return e},String.prototype.kmwSlice=function(r,e){var t=String(this),n=t.kmwCodePointToCodeUnit(r),i=t.kmwCodePointToCodeUnit(e);return n===null||i===null?\\\"\\\":t.slice(n,i)},String.prototype.kmwSubstr=function(r,e){var t=String(this);r<0&&(r=t.kmwLength()+r),r<0&&(r=0);var n=t.kmwCodePointToCodeUnit(r),i=n;if(n===null)return\\\"\\\";if(arguments.length<2)i=t.length;else for(var a=0;a<e;a++)i=t.kmwNextChar(i);return i===null?t.substring(n):t.substring(n,i)},String.prototype.kmwSubstring=function(r,e){var t=String(this),n,i;if(typeof e==\\\"undefined\\\")n=t.kmwCodePointToCodeUnit(r),i=t.length;else{if(r>e){var a=r;r=e,e=a}n=t.kmwCodePointToCodeUnit(r),i=t.kmwCodePointToCodeUnit(e)}return(isNaN(n)||n===null)&&(n=0),(isNaN(i)||i===null)&&(i=t.length),t.substring(n,i)},String.prototype.kmwNextChar=function(r){var e=String(this);if(r===null||r<0||r>=e.length-1)return null;var t=e.charCodeAt(r);if(t>=55296&&t<=56319&&e.length>r+1){var n=e.charCodeAt(r+1);if(n>=56320&&n<=57343)return r==e.length-2?null:r+2}return r+1},String.prototype.kmwPrevChar=function(r){var e=String(this);if(r==null||r<=0||r>e.length)return null;var t=e.charCodeAt(r-1);if(t>=56320&&t<=57343&&r>1){var n=e.charCodeAt(r-2);if(n>=55296&&n<=56319)return r-2}return r-1},String.prototype.kmwCodePointToCodeUnit=function(r){if(r===null)return null;var e=String(this),t=0;if(r<0){t=e.length;for(var n=0;n>r;n--)t=e.kmwPrevChar(t);return t}if(r==e.kmwLength())return e.length;for(var n=0;n<r;n++)t=e.kmwNextChar(t);return t},String.prototype.kmwCodeUnitToCodePoint=function(r){var e=String(this);return r===null?null:r==0?0:r<0?e.substr(r).kmwLength():e.substr(0,r).kmwLength()},String.prototype.kmwCharAt=function(r){var e=String(this);return r>=0?e.kmwSubstr(r,1):\\\"\\\"},String.prototype.kmwBMPNextChar=function(r){var e=String(this);return r<0||r>=e.length-1?null:r+1},String.prototype.kmwBMPPrevChar=function(r){var e=String(this);return r<=0||r>e.length?null:r-1},String.prototype.kmwBMPCodePointToCodeUnit=function(r){return r},String.prototype.kmwBMPCodeUnitToCodePoint=function(r){return r},String.prototype.kmwBMPLength=function(){var r=String(this);return r.length},String.prototype.kmwBMPSubstr=function(r,e){var t=String(this);return r>-1?t.substr(r,e):t.substr(t.length+r,-r)},String.kmwEnableSupplementaryPlane=function(r){var e=String.prototype;String._kmwFromCharCode=r?String.kmwFromCharCode:String.fromCharCode,e._kmwCharAt=r?e.kmwCharAt:e.charAt,e._kmwCharCodeAt=r?e.kmwCharCodeAt:e.charCodeAt,e._kmwIndexOf=r?e.kmwIndexOf:e.indexOf,e._kmwLastIndexOf=r?e.kmwLastIndexOf:e.lastIndexOf,e._kmwSlice=r?e.kmwSlice:e.slice,e._kmwSubstring=r?e.kmwSubstring:e.substring,e._kmwSubstr=r?e.kmwSubstr:e.kmwBMPSubstr,e._kmwLength=r?e.kmwLength:e.kmwBMPLength,e._kmwNextChar=r?e.kmwNextChar:e.kmwBMPNextChar,e._kmwPrevChar=r?e.kmwPrevChar:e.kmwBMPPrevChar,e._kmwCodePointToCodeUnit=r?e.kmwCodePointToCodeUnit:e.kmwBMPCodePointToCodeUnit,e._kmwCodeUnitToCodePoint=r?e.kmwCodeUnitToCodePoint:e.kmwBMPCodeUnitToCodePoint},String._kmwFromCharCode||String.kmwEnableSupplementaryPlane(!1)}v(extendString,\\\"extendString\\\"),extendString();var models_exports={};__export(models_exports,{DummyModel:function(){return dummy_model_default},PriorityQueue:function(){return priority_queue_default},QuoteBehavior:function(){return quote_behavior_default},SENTINEL_CODE_UNIT:function(){return SENTINEL_CODE_UNIT},TrieModel:function(){return trie_model_default},applyTransform:function(){return applyTransform},buildMergedTransform:function(){return buildMergedTransform},defaultApplyCasing:function(){return defaultApplyCasing},getLastPreCaretToken:function(){return getLastPreCaretToken},isHighSurrogate:function(){return isHighSurrogate},isLowSurrogate:function(){return isLowSurrogate},isSentinel:function(){return isSentinel},tokenize:function(){return tokenize},transformToSuggestion:function(){return transformToSuggestion},wordbreak:function(){return wordbreak}}),extendString();var SENTINEL_CODE_UNIT=\\\"\\\\uFDD0\\\";function applyTransform(r,e){var t,n,i=e.left||\\\"\\\",a=i.kmwLength(),u=a<r.deleteLeft?a:r.deleteLeft,o=i.kmwSubstr(0,a-u)+(r.insert||\\\"\\\"),l=e.right||\\\"\\\",s=l.kmwLength(),f=s<((t=r.deleteRight)!==null&&t!==void 0?t:0)?s:(n=r.deleteRight)!==null&&n!==void 0?n:0,c=l.kmwSubstr(f);return{left:o,right:c,startOfBuffer:e.startOfBuffer,endOfBuffer:e.endOfBuffer,casingForm:e.casingForm}}v(applyTransform,\\\"applyTransform\\\");function buildMergedTransform(r,e){var t=r.insert,n=e.deleteLeft;if(e.deleteLeft){var i=r.insert.kmwLength();i<=e.deleteLeft?(t=\\\"\\\",n=e.deleteLeft-i):(t=r.insert.kmwSubstr(0,i-e.deleteLeft),n=0)}return{insert:t+e.insert,deleteLeft:r.deleteLeft+n,deleteRight:(r.deleteRight||0)+(e.deleteRight||0)}}v(buildMergedTransform,\\\"buildMergedTransform\\\");function isHighSurrogate(r){return typeof r==\\\"string\\\"&&(r=r.charCodeAt(0)),r>=55296&&r<=56319}v(isHighSurrogate,\\\"isHighSurrogate\\\");function isLowSurrogate(r){return typeof r==\\\"string\\\"&&(r=r.charCodeAt(0)),r>=56320&&r<=57343}v(isLowSurrogate,\\\"isLowSurrogate\\\");function isSentinel(r){return r==SENTINEL_CODE_UNIT}v(isSentinel,\\\"isSentinel\\\");function transformToSuggestion(r,e){var t={transform:r,transformId:r.id,displayAs:r.insert};return(e===0||e)&&(t.p=e),t}v(transformToSuggestion,\\\"transformToSuggestion\\\");function defaultApplyCasing(r,e){switch(r){case\\\"lower\\\":return e.toLowerCase();case\\\"upper\\\":return e.toUpperCase();case\\\"initial\\\":var t=1;return e.length>1&&isHighSurrogate(e.charAt(0))&&isLowSurrogate(e.charCodeAt(1))&&(t=2),e.substring(0,t).toUpperCase().concat(e.substring(t))}}v(defaultApplyCasing,\\\"defaultApplyCasing\\\");var PriorityQueue=function(){function r(e,t){t===void 0&&(t=[]),this.comparator=e,this.heap=Array.from(t),this.heapify()}return v(r,\\\"PriorityQueue2\\\"),r.leftChildIndex=function(e){return e*2+1},r.rightChildIndex=function(e){return e*2+2},r.parentIndex=function(e){return Math.floor((e-1)/2)},r.prototype.heapify=function(e,t){if(e==null||t==null){this.heapify(0,this.count-1);return}for(var n=[],i=-1,a=t;a>=e;a--){var u=r.parentIndex(a);this.siftDown(a)&&u<e&&i!=u&&(n.push(u),i=u)}for(i=-1;n.length>0;){var o=n.shift(),u=r.parentIndex(o);this.siftDown(o)&&u>=0&&i!=u&&(n.push(u),i=u)}},Object.defineProperty(r.prototype,\\\"count\\\",{get:function(){return this.heap.length},enumerable:!1,configurable:!0}),r.prototype.peek=function(){return this.heap[0]},r.prototype.enqueue=function(e){var t=this.heap.length;this.heap.push(e);for(var n=r.parentIndex,i=n(t);t!==0&&this.comparator(this.heap[t],this.heap[i])<0;){var a=this.heap[t];this.heap[t]=this.heap[i],this.heap[i]=a,t=i,i=n(t)}},r.prototype.enqueueAll=function(e){if(e.length!=0){var t=this.count;this.heap=this.heap.concat(e);var n=r.parentIndex(t);this.heapify(n>=0?n:0,r.parentIndex(this.count-1))}},r.prototype.dequeue=function(){if(this.count!=0){var e=this.heap[0],t=this.heap.pop();return this.heap.length>0&&(this.heap[0]=t,this.siftDown(0)),e}},r.prototype.siftDown=function(e){var t=r.leftChildIndex(e),n=r.rightChildIndex(e),i=e;if(t<this.heap.length&&this.comparator(this.heap[t],this.heap[i])<0&&(i=t),n<this.heap.length&&this.comparator(this.heap[n],this.heap[i])<0&&(i=n),i!=e){var a=this.heap[e];return this.heap[e]=this.heap[i],this.heap[i]=a,this.siftDown(i),!0}else return!1},r.prototype.toArray=function(){return Array.from(this.heap)},r}(),priority_queue_default=PriorityQueue,QuoteBehavior;(function(r){r.noQuotes=\\\"no-quotes\\\",r.useQuotes=\\\"use-quotes\\\",r.default=\\\"default-quotes\\\"})(QuoteBehavior||(QuoteBehavior={})),function(r){function e(t,n,i,a){if(a==r.default||!a)throw\\\"Specified quote behavior may be ambiguous - default behavior not specified (may not be .default)\\\";switch(t==r.default&&(t=a),t){case r.noQuotes:return n;case r.useQuotes:var u=i.quotesForKeepSuggestion,o=u.open,l=u.close;return o+n+l;default:throw\\\"Unsupported quote behavior state detected; implementation missing!\\\"}}v(e,\\\"apply\\\"),r.apply=e}(QuoteBehavior||(QuoteBehavior={}));var quote_behavior_default=QuoteBehavior;function tokenize(r,e){e=e||{left:void 0,startOfBuffer:void 0,endOfBuffer:void 0};var t=r(e.left||\\\"\\\")||[],n=r(e.right||\\\"\\\")||[],i;if(t.length>0&&(i=t[t.length-1]),t.length>1){var a=t[t.length-2];if(a.end==i.start&&i.text==\\\"'\\\"){var u={text:a.text+i.text,start:a.start,end:i.end,length:a.length+i.length};t.pop(),t.pop(),t.push(u),i=u}}var o={left:t.map(function(c){return c.text}),right:n.map(function(c){return c.text}),caretSplitsToken:!1};if(t.length>0&&n.length>0){var l=n[0],s=i.end!=e.left.length,f=l.start!=0;if(s||f)return o;r(i.text+l.text).length==1&&(o.caretSplitsToken=!0)}return o}v(tokenize,\\\"tokenize\\\");function getLastPreCaretToken(r,e){var t=tokenize(r,e);return t.left.length>0?t.left.pop():\\\"\\\"}v(getLastPreCaretToken,\\\"getLastPreCaretToken\\\");function wordbreak(r,e){return getLastPreCaretToken(r,e)}v(wordbreak,\\\"wordbreak\\\");var obj_exports={};__export(obj_exports,{ascii:function(){return ascii},default:function(){return default_},defaultWordbreaker:function(){return default_},placeholder:function(){return placeholder}});function placeholder(r){var e=0;return r.split(/\\\\s+/).map(function(t){var n={start:e,end:e+t.length,text:t,length:t.length};return e=n.end,n})}v(placeholder,\\\"placeholder\\\");function ascii(r){for(var e=/[A-Za-z0-9']+/g,t=[],n;(n=e.exec(r))!==null;)t.push(new RegExpDerivedSpan(n[0],n.index));return t}v(ascii,\\\"ascii\\\");var RegExpDerivedSpan=function(){function r(e,t){this.text=e,this.start=t}return v(r,\\\"RegExpDerivedSpan2\\\"),Object.defineProperty(r.prototype,\\\"length\\\",{get:function(){return this.text.length},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"end\\\",{get:function(){return this.start+this.text.length},enumerable:!1,configurable:!0}),r}(),propertyMap=[\\\"Other\\\",\\\"LF\\\",\\\"Newline\\\",\\\"CR\\\",\\\"WSegSpace\\\",\\\"Double_Quote\\\",\\\"Single_Quote\\\",\\\"MidNum\\\",\\\"MidNumLet\\\",\\\"Numeric\\\",\\\"MidLetter\\\",\\\"ALetter\\\",\\\"ExtendNumLet\\\",\\\"Format\\\",\\\"Extend\\\",\\\"Hebrew_Letter\\\",\\\"ZWJ\\\",\\\"Katakana\\\",\\\"Regional_Indicator\\\",\\\"sot\\\",\\\"eot\\\"],WORD_BREAK_PROPERTY=[[0,0],[10,1],[11,2],[13,3],[14,0],[32,4],[33,0],[34,5],[35,0],[39,6],[40,0],[44,7],[45,0],[46,8],[47,0],[48,9],[58,10],[59,7],[60,0],[65,11],[91,0],[95,12],[96,0],[97,11],[123,0],[133,2],[134,0],[170,11],[171,0],[173,13],[174,0],[181,11],[182,0],[183,10],[184,0],[186,11],[187,0],[192,11],[215,0],[216,11],[247,0],[248,11],[728,0],[734,11],[768,14],[880,11],[885,0],[886,11],[888,0],[890,11],[894,7],[895,11],[896,0],[902,11],[903,10],[904,11],[907,0],[908,11],[909,0],[910,11],[930,0],[931,11],[1014,0],[1015,11],[1154,0],[1155,14],[1162,11],[1328,0],[1329,11],[1367,0],[1369,11],[1373,0],[1374,11],[1375,10],[1376,11],[1417,7],[1418,11],[1419,0],[1425,14],[1470,0],[1471,14],[1472,0],[1473,14],[1475,0],[1476,14],[1478,0],[1479,14],[1480,0],[1488,15],[1515,0],[1519,15],[1523,11],[1524,10],[1525,0],[1536,13],[1542,0],[1548,7],[1550,0],[1552,14],[1563,0],[1564,13],[1565,0],[1568,11],[1611,14],[1632,9],[1642,0],[1643,9],[1644,7],[1645,0],[1646,11],[1648,14],[1649,11],[1748,0],[1749,11],[1750,14],[1757,13],[1758,0],[1759,14],[1765,11],[1767,14],[1769,0],[1770,14],[1774,11],[1776,9],[1786,11],[1789,0],[1791,11],[1792,0],[1807,13],[1808,11],[1809,14],[1810,11],[1840,14],[1867,0],[1869,11],[1958,14],[1969,11],[1970,0],[1984,9],[1994,11],[2027,14],[2036,11],[2038,0],[2040,7],[2041,0],[2042,11],[2043,0],[2045,14],[2046,0],[2048,11],[2070,14],[2074,11],[2075,14],[2084,11],[2085,14],[2088,11],[2089,14],[2094,0],[2112,11],[2137,14],[2140,0],[2144,11],[2155,0],[2208,11],[2229,0],[2230,11],[2248,0],[2259,14],[2274,13],[2275,14],[2308,11],[2362,14],[2365,11],[2366,14],[2384,11],[2385,14],[2392,11],[2402,14],[2404,0],[2406,9],[2416,0],[2417,11],[2433,14],[2436,0],[2437,11],[2445,0],[2447,11],[2449,0],[2451,11],[2473,0],[2474,11],[2481,0],[2482,11],[2483,0],[2486,11],[2490,0],[2492,14],[2493,11],[2494,14],[2501,0],[2503,14],[2505,0],[2507,14],[2510,11],[2511,0],[2519,14],[2520,0],[2524,11],[2526,0],[2527,11],[2530,14],[2532,0],[2534,9],[2544,11],[2546,0],[2556,11],[2557,0],[2558,14],[2559,0],[2561,14],[2564,0],[2565,11],[2571,0],[2575,11],[2577,0],[2579,11],[2601,0],[2602,11],[2609,0],[2610,11],[2612,0],[2613,11],[2615,0],[2616,11],[2618,0],[2620,14],[2621,0],[2622,14],[2627,0],[2631,14],[2633,0],[2635,14],[2638,0],[2641,14],[2642,0],[2649,11],[2653,0],[2654,11],[2655,0],[2662,9],[2672,14],[2674,11],[2677,14],[2678,0],[2689,14],[2692,0],[2693,11],[2702,0],[2703,11],[2706,0],[2707,11],[2729,0],[2730,11],[2737,0],[2738,11],[2740,0],[2741,11],[2746,0],[2748,14],[2749,11],[2750,14],[2758,0],[2759,14],[2762,0],[2763,14],[2766,0],[2768,11],[2769,0],[2784,11],[2786,14],[2788,0],[2790,9],[2800,0],[2809,11],[2810,14],[2816,0],[2817,14],[2820,0],[2821,11],[2829,0],[2831,11],[2833,0],[2835,11],[2857,0],[2858,11],[2865,0],[2866,11],[2868,0],[2869,11],[2874,0],[2876,14],[2877,11],[2878,14],[2885,0],[2887,14],[2889,0],[2891,14],[2894,0],[2901,14],[2904,0],[2908,11],[2910,0],[2911,11],[2914,14],[2916,0],[2918,9],[2928,0],[2929,11],[2930,0],[2946,14],[2947,11],[2948,0],[2949,11],[2955,0],[2958,11],[2961,0],[2962,11],[2966,0],[2969,11],[2971,0],[2972,11],[2973,0],[2974,11],[2976,0],[2979,11],[2981,0],[2984,11],[2987,0],[2990,11],[3002,0],[3006,14],[3011,0],[3014,14],[3017,0],[3018,14],[3022,0],[3024,11],[3025,0],[3031,14],[3032,0],[3046,9],[3056,0],[3072,14],[3077,11],[3085,0],[3086,11],[3089,0],[3090,11],[3113,0],[3114,11],[3130,0],[3133,11],[3134,14],[3141,0],[3142,14],[3145,0],[3146,14],[3150,0],[3157,14],[3159,0],[3160,11],[3163,0],[3168,11],[3170,14],[3172,0],[3174,9],[3184,0],[3200,11],[3201,14],[3204,0],[3205,11],[3213,0],[3214,11],[3217,0],[3218,11],[3241,0],[3242,11],[3252,0],[3253,11],[3258,0],[3260,14],[3261,11],[3262,14],[3269,0],[3270,14],[3273,0],[3274,14],[3278,0],[3285,14],[3287,0],[3294,11],[3295,0],[3296,11],[3298,14],[3300,0],[3302,9],[3312,0],[3313,11],[3315,0],[3328,14],[3332,11],[3341,0],[3342,11],[3345,0],[3346,11],[3387,14],[3389,11],[3390,14],[3397,0],[3398,14],[3401,0],[3402,14],[3406,11],[3407,0],[3412,11],[3415,14],[3416,0],[3423,11],[3426,14],[3428,0],[3430,9],[3440,0],[3450,11],[3456,0],[3457,14],[3460,0],[3461,11],[3479,0],[3482,11],[3506,0],[3507,11],[3516,0],[3517,11],[3518,0],[3520,11],[3527,0],[3530,14],[3531,0],[3535,14],[3541,0],[3542,14],[3543,0],[3544,14],[3552,0],[3558,9],[3568,0],[3570,14],[3572,0],[3633,14],[3634,0],[3636,14],[3643,0],[3655,14],[3663,0],[3664,9],[3674,0],[3761,14],[3762,0],[3764,14],[3773,0],[3784,14],[3790,0],[3792,9],[3802,0],[3840,11],[3841,0],[3864,14],[3866,0],[3872,9],[3882,0],[3893,14],[3894,0],[3895,14],[3896,0],[3897,14],[3898,0],[3902,14],[3904,11],[3912,0],[3913,11],[3949,0],[3953,14],[3973,0],[3974,14],[3976,11],[3981,14],[3992,0],[3993,14],[4029,0],[4038,14],[4039,0],[4139,14],[4159,0],[4160,9],[4170,0],[4182,14],[4186,0],[4190,14],[4193,0],[4194,14],[4197,0],[4199,14],[4206,0],[4209,14],[4213,0],[4226,14],[4238,0],[4239,14],[4240,9],[4250,14],[4254,0],[4256,11],[4294,0],[4295,11],[4296,0],[4301,11],[4302,0],[4304,11],[4347,0],[4348,11],[4681,0],[4682,11],[4686,0],[4688,11],[4695,0],[4696,11],[4697,0],[4698,11],[4702,0],[4704,11],[4745,0],[4746,11],[4750,0],[4752,11],[4785,0],[4786,11],[4790,0],[4792,11],[4799,0],[4800,11],[4801,0],[4802,11],[4806,0],[4808,11],[4823,0],[4824,11],[4881,0],[4882,11],[4886,0],[4888,11],[4955,0],[4957,14],[4960,0],[4992,11],[5008,0],[5024,11],[5110,0],[5112,11],[5118,0],[5121,11],[5741,0],[5743,11],[5760,4],[5761,11],[5787,0],[5792,11],[5867,0],[5870,11],[5881,0],[5888,11],[5901,0],[5902,11],[5906,14],[5909,0],[5920,11],[5938,14],[5941,0],[5952,11],[5970,14],[5972,0],[5984,11],[5997,0],[5998,11],[6001,0],[6002,14],[6004,0],[6068,14],[6100,0],[6109,14],[6110,0],[6112,9],[6122,0],[6155,14],[6158,13],[6159,0],[6160,9],[6170,0],[6176,11],[6265,0],[6272,11],[6277,14],[6279,11],[6313,14],[6314,11],[6315,0],[6320,11],[6390,0],[6400,11],[6431,0],[6432,14],[6444,0],[6448,14],[6460,0],[6470,9],[6480,0],[6608,9],[6618,0],[6656,11],[6679,14],[6684,0],[6741,14],[6751,0],[6752,14],[6781,0],[6783,14],[6784,9],[6794,0],[6800,9],[6810,0],[6832,14],[6849,0],[6912,14],[6917,11],[6964,14],[6981,11],[6988,0],[6992,9],[7002,0],[7019,14],[7028,0],[7040,14],[7043,11],[7073,14],[7086,11],[7088,9],[7098,11],[7142,14],[7156,0],[7168,11],[7204,14],[7224,0],[7232,9],[7242,0],[7245,11],[7248,9],[7258,11],[7294,0],[7296,11],[7305,0],[7312,11],[7355,0],[7357,11],[7360,0],[7376,14],[7379,0],[7380,14],[7401,11],[7405,14],[7406,11],[7412,14],[7413,11],[7415,14],[7418,11],[7419,0],[7424,11],[7616,14],[7674,0],[7675,14],[7680,11],[7958,0],[7960,11],[7966,0],[7968,11],[8006,0],[8008,11],[8014,0],[8016,11],[8024,0],[8025,11],[8026,0],[8027,11],[8028,0],[8029,11],[8030,0],[8031,11],[8062,0],[8064,11],[8117,0],[8118,11],[8125,0],[8126,11],[8127,0],[8130,11],[8133,0],[8134,11],[8141,0],[8144,11],[8148,0],[8150,11],[8156,0],[8160,11],[8173,0],[8178,11],[8181,0],[8182,11],[8189,0],[8192,4],[8199,0],[8200,4],[8203,0],[8204,14],[8205,16],[8206,13],[8208,0],[8216,8],[8218,0],[8228,8],[8229,0],[8231,10],[8232,2],[8234,13],[8239,12],[8240,0],[8255,12],[8257,0],[8260,7],[8261,0],[8276,12],[8277,0],[8287,4],[8288,13],[8293,0],[8294,13],[8304,0],[8305,11],[8306,0],[8319,11],[8320,0],[8336,11],[8349,0],[8400,14],[8433,0],[8450,11],[8451,0],[8455,11],[8456,0],[8458,11],[8468,0],[8469,11],[8470,0],[8473,11],[8478,0],[8484,11],[8485,0],[8486,11],[8487,0],[8488,11],[8489,0],[8490,11],[8494,0],[8495,11],[8506,0],[8508,11],[8512,0],[8517,11],[8522,0],[8526,11],[8527,0],[8544,11],[8585,0],[9398,11],[9450,0],[11264,11],[11311,0],[11312,11],[11359,0],[11360,11],[11493,0],[11499,11],[11503,14],[11506,11],[11508,0],[11520,11],[11558,0],[11559,11],[11560,0],[11565,11],[11566,0],[11568,11],[11624,0],[11631,11],[11632,0],[11647,14],[11648,11],[11671,0],[11680,11],[11687,0],[11688,11],[11695,0],[11696,11],[11703,0],[11704,11],[11711,0],[11712,11],[11719,0],[11720,11],[11727,0],[11728,11],[11735,0],[11736,11],[11743,0],[11744,14],[11776,0],[11823,11],[11824,0],[12288,4],[12289,0],[12293,11],[12294,0],[12330,14],[12336,0],[12337,17],[12342,0],[12347,11],[12349,0],[12441,14],[12443,17],[12445,0],[12448,17],[12539,0],[12540,17],[12544,0],[12549,11],[12592,0],[12593,11],[12687,0],[12704,11],[12736,0],[12784,17],[12800,0],[13008,17],[13055,0],[13056,17],[13144,0],[40960,11],[42125,0],[42192,11],[42238,0],[42240,11],[42509,0],[42512,11],[42528,9],[42538,11],[42540,0],[42560,11],[42607,14],[42611,0],[42612,14],[42622,0],[42623,11],[42654,14],[42656,11],[42736,14],[42738,0],[42760,11],[42944,0],[42946,11],[42955,0],[42997,11],[43010,14],[43011,11],[43014,14],[43015,11],[43019,14],[43020,11],[43043,14],[43048,0],[43052,14],[43053,0],[43072,11],[43124,0],[43136,14],[43138,11],[43188,14],[43206,0],[43216,9],[43226,0],[43232,14],[43250,11],[43256,0],[43259,11],[43260,0],[43261,11],[43263,14],[43264,9],[43274,11],[43302,14],[43310,0],[43312,11],[43335,14],[43348,0],[43360,11],[43389,0],[43392,14],[43396,11],[43443,14],[43457,0],[43471,11],[43472,9],[43482,0],[43493,14],[43494,0],[43504,9],[43514,0],[43520,11],[43561,14],[43575,0],[43584,11],[43587,14],[43588,11],[43596,14],[43598,0],[43600,9],[43610,0],[43643,14],[43646,0],[43696,14],[43697,0],[43698,14],[43701,0],[43703,14],[43705,0],[43710,14],[43712,0],[43713,14],[43714,0],[43744,11],[43755,14],[43760,0],[43762,11],[43765,14],[43767,0],[43777,11],[43783,0],[43785,11],[43791,0],[43793,11],[43799,0],[43808,11],[43815,0],[43816,11],[43823,0],[43824,11],[43882,0],[43888,11],[44003,14],[44011,0],[44012,14],[44014,0],[44016,9],[44026,0],[44032,11],[55204,0],[55216,11],[55239,0],[55243,11],[55292,0],[64256,11],[64263,0],[64275,11],[64280,0],[64285,15],[64286,14],[64287,15],[64297,0],[64298,15],[64311,0],[64312,15],[64317,0],[64318,15],[64319,0],[64320,15],[64322,0],[64323,15],[64325,0],[64326,15],[64336,11],[64434,0],[64467,11],[64830,0],[64848,11],[64912,0],[64914,11],[64968,0],[65008,11],[65020,0],[65024,14],[65040,7],[65041,0],[65043,10],[65044,7],[65045,0],[65056,14],[65072,0],[65075,12],[65077,0],[65101,12],[65104,7],[65105,0],[65106,8],[65107,0],[65108,7],[65109,10],[65110,0],[65136,11],[65141,0],[65142,11],[65277,0],[65279,13],[65280,0],[65287,8],[65288,0],[65292,7],[65293,0],[65294,8],[65295,0],[65296,9],[65306,10],[65307,7],[65308,0],[65313,11],[65339,0],[65343,12],[65344,0],[65345,11],[65371,0],[65382,17],[65438,14],[65440,11],[65471,0],[65474,11],[65480,0],[65482,11],[65488,0],[65490,11],[65496,0],[65498,11],[65501,0],[65529,13],[65532,0],[65536,11],[65548,0],[65549,11],[65575,0],[65576,11],[65595,0],[65596,11],[65598,0],[65599,11],[65614,0],[65616,11],[65630,0],[65664,11],[65787,0],[65856,11],[65909,0],[66045,14],[66046,0],[66176,11],[66205,0],[66208,11],[66257,0],[66272,14],[66273,0],[66304,11],[66336,0],[66349,11],[66379,0],[66384,11],[66422,14],[66427,0],[66432,11],[66462,0],[66464,11],[66500,0],[66504,11],[66512,0],[66513,11],[66518,0],[66560,11],[66718,0],[66720,9],[66730,0],[66736,11],[66772,0],[66776,11],[66812,0],[66816,11],[66856,0],[66864,11],[66916,0],[67072,11],[67383,0],[67392,11],[67414,0],[67424,11],[67432,0],[67584,11],[67590,0],[67592,11],[67593,0],[67594,11],[67638,0],[67639,11],[67641,0],[67644,11],[67645,0],[67647,11],[67670,0],[67680,11],[67703,0],[67712,11],[67743,0],[67808,11],[67827,0],[67828,11],[67830,0],[67840,11],[67862,0],[67872,11],[67898,0],[67968,11],[68024,0],[68030,11],[68032,0],[68096,11],[68097,14],[68100,0],[68101,14],[68103,0],[68108,14],[68112,11],[68116,0],[68117,11],[68120,0],[68121,11],[68150,0],[68152,14],[68155,0],[68159,14],[68160,0],[68192,11],[68221,0],[68224,11],[68253,0],[68288,11],[68296,0],[68297,11],[68325,14],[68327,0],[68352,11],[68406,0],[68416,11],[68438,0],[68448,11],[68467,0],[68480,11],[68498,0],[68608,11],[68681,0],[68736,11],[68787,0],[68800,11],[68851,0],[68864,11],[68900,14],[68904,0],[68912,9],[68922,0],[69248,11],[69290,0],[69291,14],[69293,0],[69296,11],[69298,0],[69376,11],[69405,0],[69415,11],[69416,0],[69424,11],[69446,14],[69457,0],[69552,11],[69573,0],[69600,11],[69623,0],[69632,14],[69635,11],[69688,14],[69703,0],[69734,9],[69744,0],[69759,14],[69763,11],[69808,14],[69819,0],[69821,13],[69822,0],[69837,13],[69838,0],[69840,11],[69865,0],[69872,9],[69882,0],[69888,14],[69891,11],[69927,14],[69941,0],[69942,9],[69952,0],[69956,11],[69957,14],[69959,11],[69960,0],[69968,11],[70003,14],[70004,0],[70006,11],[70007,0],[70016,14],[70019,11],[70067,14],[70081,11],[70085,0],[70089,14],[70093,0],[70094,14],[70096,9],[70106,11],[70107,0],[70108,11],[70109,0],[70144,11],[70162,0],[70163,11],[70188,14],[70200,0],[70206,14],[70207,0],[70272,11],[70279,0],[70280,11],[70281,0],[70282,11],[70286,0],[70287,11],[70302,0],[70303,11],[70313,0],[70320,11],[70367,14],[70379,0],[70384,9],[70394,0],[70400,14],[70404,0],[70405,11],[70413,0],[70415,11],[70417,0],[70419,11],[70441,0],[70442,11],[70449,0],[70450,11],[70452,0],[70453,11],[70458,0],[70459,14],[70461,11],[70462,14],[70469,0],[70471,14],[70473,0],[70475,14],[70478,0],[70480,11],[70481,0],[70487,14],[70488,0],[70493,11],[70498,14],[70500,0],[70502,14],[70509,0],[70512,14],[70517,0],[70656,11],[70709,14],[70727,11],[70731,0],[70736,9],[70746,0],[70750,14],[70751,11],[70754,0],[70784,11],[70832,14],[70852,11],[70854,0],[70855,11],[70856,0],[70864,9],[70874,0],[71040,11],[71087,14],[71094,0],[71096,14],[71105,0],[71128,11],[71132,14],[71134,0],[71168,11],[71216,14],[71233,0],[71236,11],[71237,0],[71248,9],[71258,0],[71296,11],[71339,14],[71352,11],[71353,0],[71360,9],[71370,0],[71453,14],[71468,0],[71472,9],[71482,0],[71680,11],[71724,14],[71739,0],[71840,11],[71904,9],[71914,0],[71935,11],[71943,0],[71945,11],[71946,0],[71948,11],[71956,0],[71957,11],[71959,0],[71960,11],[71984,14],[71990,0],[71991,14],[71993,0],[71995,14],[71999,11],[72e3,14],[72001,11],[72002,14],[72004,0],[72016,9],[72026,0],[72096,11],[72104,0],[72106,11],[72145,14],[72152,0],[72154,14],[72161,11],[72162,0],[72163,11],[72164,14],[72165,0],[72192,11],[72193,14],[72203,11],[72243,14],[72250,11],[72251,14],[72255,0],[72263,14],[72264,0],[72272,11],[72273,14],[72284,11],[72330,14],[72346,0],[72349,11],[72350,0],[72384,11],[72441,0],[72704,11],[72713,0],[72714,11],[72751,14],[72759,0],[72760,14],[72768,11],[72769,0],[72784,9],[72794,0],[72818,11],[72848,0],[72850,14],[72872,0],[72873,14],[72887,0],[72960,11],[72967,0],[72968,11],[72970,0],[72971,11],[73009,14],[73015,0],[73018,14],[73019,0],[73020,14],[73022,0],[73023,14],[73030,11],[73031,14],[73032,0],[73040,9],[73050,0],[73056,11],[73062,0],[73063,11],[73065,0],[73066,11],[73098,14],[73103,0],[73104,14],[73106,0],[73107,14],[73112,11],[73113,0],[73120,9],[73130,0],[73440,11],[73459,14],[73463,0],[73648,11],[73649,0],[73728,11],[74650,0],[74752,11],[74863,0],[74880,11],[75076,0],[77824,11],[78895,0],[78896,13],[78905,0],[82944,11],[83527,0],[92160,11],[92729,0],[92736,11],[92767,0],[92768,9],[92778,0],[92880,11],[92910,0],[92912,14],[92917,0],[92928,11],[92976,14],[92983,0],[92992,11],[92996,0],[93008,9],[93018,0],[93027,11],[93048,0],[93053,11],[93072,0],[93760,11],[93824,0],[93952,11],[94027,0],[94031,14],[94032,11],[94033,14],[94088,0],[94095,14],[94099,11],[94112,0],[94176,11],[94178,0],[94179,11],[94180,14],[94181,0],[94192,14],[94194,0],[110592,17],[110593,0],[110948,17],[110952,0],[113664,11],[113771,0],[113776,11],[113789,0],[113792,11],[113801,0],[113808,11],[113818,0],[113821,14],[113823,0],[113824,13],[113828,0],[119141,14],[119146,0],[119149,14],[119155,13],[119163,14],[119171,0],[119173,14],[119180,0],[119210,14],[119214,0],[119362,14],[119365,0],[119808,11],[119893,0],[119894,11],[119965,0],[119966,11],[119968,0],[119970,11],[119971,0],[119973,11],[119975,0],[119977,11],[119981,0],[119982,11],[119994,0],[119995,11],[119996,0],[119997,11],[120004,0],[120005,11],[120070,0],[120071,11],[120075,0],[120077,11],[120085,0],[120086,11],[120093,0],[120094,11],[120122,0],[120123,11],[120127,0],[120128,11],[120133,0],[120134,11],[120135,0],[120138,11],[120145,0],[120146,11],[120486,0],[120488,11],[120513,0],[120514,11],[120539,0],[120540,11],[120571,0],[120572,11],[120597,0],[120598,11],[120629,0],[120630,11],[120655,0],[120656,11],[120687,0],[120688,11],[120713,0],[120714,11],[120745,0],[120746,11],[120771,0],[120772,11],[120780,0],[120782,9],[120832,0],[121344,14],[121399,0],[121403,14],[121453,0],[121461,14],[121462,0],[121476,14],[121477,0],[121499,14],[121504,0],[121505,14],[121520,0],[122880,14],[122887,0],[122888,14],[122905,0],[122907,14],[122914,0],[122915,14],[122917,0],[122918,14],[122923,0],[123136,11],[123181,0],[123184,14],[123191,11],[123198,0],[123200,9],[123210,0],[123214,11],[123215,0],[123584,11],[123628,14],[123632,9],[123642,0],[124928,11],[125125,0],[125136,14],[125143,0],[125184,11],[125252,14],[125259,11],[125260,0],[125264,9],[125274,0],[126464,11],[126468,0],[126469,11],[126496,0],[126497,11],[126499,0],[126500,11],[126501,0],[126503,11],[126504,0],[126505,11],[126515,0],[126516,11],[126520,0],[126521,11],[126522,0],[126523,11],[126524,0],[126530,11],[126531,0],[126535,11],[126536,0],[126537,11],[126538,0],[126539,11],[126540,0],[126541,11],[126544,0],[126545,11],[126547,0],[126548,11],[126549,0],[126551,11],[126552,0],[126553,11],[126554,0],[126555,11],[126556,0],[126557,11],[126558,0],[126559,11],[126560,0],[126561,11],[126563,0],[126564,11],[126565,0],[126567,11],[126571,0],[126572,11],[126579,0],[126580,11],[126584,0],[126585,11],[126589,0],[126590,11],[126591,0],[126592,11],[126602,0],[126603,11],[126620,0],[126625,11],[126628,0],[126629,11],[126634,0],[126635,11],[126652,0],[127280,11],[127306,0],[127312,11],[127338,0],[127344,11],[127370,0],[127462,18],[127488,0],[127995,14],[128e3,0],[130032,9],[130042,0],[917505,13],[917506,0],[917536,14],[917632,0],[917760,14],[918e3,0]];function default_(r,e){var t=findBoundaries(r,e);if(t.length==0)return[];for(var n=[],i=0;i<t.length-1;i++){var a=t[i],u=t[i+1],o=new LazySpan(r,a,u);isNonSpace(o.text,e)?n.push(o):i==t.length-2&&(o=new LazySpan(r,u,u),n.push(o))}return n}v(default_,\\\"default_\\\");var LazySpan=function(){function r(e,t,n){this._source=e,this.start=t,this.end=n}return v(r,\\\"LazySpan2\\\"),Object.defineProperty(r.prototype,\\\"text\\\",{get:function(){return this._source.substring(this.start,this.end)},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"length\\\",{get:function(){return this.end-this.start},enumerable:!1,configurable:!0}),r}(),BreakerContext=function(){function r(e,t,n,i,a,u){this.lookbehind=19,this.left=19,this.right=19,this.text=e,this.options=t,arguments.length==3?this.lookahead=this.wordbreakPropertyAt(n):(this.lookbehind=n,this.left=i,this.right=a,this.lookahead=u)}return v(r,\\\"BreakerContext2\\\"),r.prototype.next=function(e){var t=this.wordbreakPropertyAt(e);return new r(this.text,this.options,this.left,this.right,this.lookahead,t)},r.prototype.ignoringRight=function(e){var t=this.wordbreakPropertyAt(e);return new r(this.text,this.options,this.lookbehind,this.left,this.lookahead,t)},r.prototype.ignoringLookahead=function(e){var t=this.wordbreakPropertyAt(e);return new r(this.text,this.options,this.lookbehind,this.left,this.right,t)},r.prototype.wordbreakPropertyAt=function(e){return e<0?19:e>=this.text.length?20:isStartOfSurrogatePair(this.text[e])?property(this.text[e]+this.text[e+1]):property(this.text[e],this.options)},r.prototype.match=function(e,t,n,i){var a,u,o,l,s=(a=e==null?void 0:e.includes(this.lookbehind))!==null&&a!==void 0?a:!0;return s=s&&((u=t==null?void 0:t.includes(this.left))!==null&&u!==void 0?u:!0),s=s&&((o=n==null?void 0:n.includes(this.right))!==null&&o!==void 0?o:!0),s&&((l=i==null?void 0:i.includes(this.lookahead))!==null&&l!==void 0?l:!0)},r.prototype.propertyMatch=function(e,t,n,i){var a=this,u=v(function(o){return propertyVal(o,a.options)},\\\"propMapper\\\");return this.match(e==null?void 0:e.map(u),t==null?void 0:t.map(u),n==null?void 0:n.map(u),i==null?void 0:i.map(u))},r}();function isNonSpace(r,e){return!Array.from(r).map(function(t){return property(t,e)}).every(function(t){return t===3||t===1||t===2||t===4})}v(isNonSpace,\\\"isNonSpace\\\");function findBoundaries(r,e){var t,n,i;if(r.length===0)return[];e&&!e.rules&&(e.rules=[]);var a=[],u,o=0,l=new BreakerContext(r,e,o),s=0;do{if(u=o,o=C(o),l=l.next(o),l.match(null,[19],null,null)){a.push(u);continue}if(l.match(null,null,[20],null)){a.push(u);break}if(!l.match(null,[3],[1],null)){var f=[2,3,1];if(l.match(null,f,null,null)){a.push(u);continue}if(l.match(null,null,f,null)){a.push(u);continue}if(!l.match(null,[4],[4],null)){for(var c=[13,14,16];l.match(null,null,c,null);)t=(0,build_exports.__read)([o,C(o)],2),u=t[0],o=t[1],l=l.ignoringRight(o);if(l.right===20){a.push(u);break}for(;l.match(null,null,null,c);)o=C(o),l=l.ignoringLookahead(o);var d=[11,15],p=[8,6];if(e!=null&&e.rules){var g=!1;try{for(var w=(n=void 0,(0,build_exports.__values)(e.rules)),b=w.next();!b.done;b=w.next()){var T=b.value;if(g=T.match(l),g){T.breakIfMatch&&a.push(u);break}}}catch(h){n={error:h}}finally{try{b&&!b.done&&(i=w.return)&&i.call(w)}finally{if(n)throw n.error}}if(g)continue}if(!l.match(null,d,d,null)){var S=[10].concat(p);if(!l.match(null,d,S,d)&&!l.match(d,S,d,null)&&!l.match(null,[15],[6],null)&&!l.match(null,[15],[5],[15])&&!l.match([15],[5],[15],null)&&!l.match(null,[9],[9],null)&&!l.match(null,d,[9],null)&&!l.match(null,[9],d,null)){var _=[7].concat(p);if(!l.match([9],_,[9],null)&&!l.match(null,[9],_,[9])&&!l.match(null,[17],[17],null)){var y=[17,9].concat(d);if(!l.match(null,y,[12],null)&&!l.match(null,[12],[12],null)&&!l.match(null,[12],y,null)){if(l.right===18){if(s+=1,s%2==1)continue}else s=0;a.push(u)}}}}}}}while(u<r.length);return a;function C(h){return h>=r.length?r.length:isStartOfSurrogatePair(r[h])?h+2:h+1}}v(findBoundaries,\\\"findBoundaries\\\");function isStartOfSurrogatePair(r){var e=r.charCodeAt(0);return e>=55296&&e<=56319}v(isStartOfSurrogatePair,\\\"isStartOfSurrogatePair\\\");function property(r,e){if(e!=null&&e.propertyMapping){var t=e.propertyMapping(r);if(t)return propertyVal(t,e)}var n=r.codePointAt(0);return searchForProperty(n,0,WORD_BREAK_PROPERTY.length-1)}v(property,\\\"property\\\");function propertyVal(r,e){var t,n,i=v(function(u){return u.toLowerCase()==r.toLowerCase()},\\\"matcher\\\"),a=(n=(t=e==null?void 0:e.customProperties)===null||t===void 0?void 0:t.findIndex(i))!==null&&n!==void 0?n:-1;return a!=-1?-a-1:propertyMap.findIndex(i)}v(propertyVal,\\\"propertyVal\\\");function searchForProperty(r,e,t){if(t<e)return 0;var n=e+~~((t-e)/2),i=WORD_BREAK_PROPERTY[n],a=WORD_BREAK_PROPERTY[n+1],u=a?a[0]:1/0;return r<i[0]?searchForProperty(r,e,n-1):r>=u?searchForProperty(r,n+1,t):i[1]}v(searchForProperty,\\\"searchForProperty\\\");var MAX_SUGGESTIONS=12,TrieModel=function(){function r(e,t){t===void 0&&(t={}),this.languageUsesCasing=t.languageUsesCasing,this.applyCasing=t.applyCasing,this._trie=new Trie(e.root,e.totalWeight,t.searchTermToKey||defaultSearchTermToKey),this.breakWords=t.wordBreaker||default_,this.punctuation=t.punctuation}return v(r,\\\"TrieModel2\\\"),r.prototype.configure=function(e){var t;return this.configuration={leftContextCodePoints:e.maxLeftContextCodePoints,rightContextCodePoints:(t=e.maxRightContextCodePoints)!==null&&t!==void 0?t:0}},r.prototype.toKey=function(e){return this._trie.toKey(e)},r.prototype.predict=function(e,t){if(!e.insert&&!t.left&&!t.right&&t.startOfBuffer&&t.endOfBuffer)return u(this._trie.firstN(MAX_SUGGESTIONS).map(function(o){var l=o.text,s=o.p;return{transform:{insert:l,deleteLeft:0},displayAs:l,p:s}}));var n=applyTransform(e,t),i=e.deleteLeft-e.insert.kmwLength(),a=getLastPreCaretToken(this.breakWords,n);return u(this._trie.lookup(a).map(function(o){var l=o.text,s=o.p;return transformToSuggestion({insert:l,deleteLeft:i+a.kmwLength()},s)}));function u(o){var l,s,f=[];try{for(var c=(0,build_exports.__values)(o),d=c.next();!d.done;d=c.next()){var p=d.value;f.push({sample:p,p:p.p})}}catch(g){l={error:g}}finally{try{d&&!d.done&&(s=c.return)&&s.call(c)}finally{if(l)throw l.error}}return f}},Object.defineProperty(r.prototype,\\\"wordbreaker\\\",{get:function(){return this.breakWords},enumerable:!1,configurable:!0}),r.prototype.traverseFromRoot=function(){return new r.Traversal(this._trie.root,\\\"\\\")},r.Traversal=function(){function e(t,n){this.root=t,this.prefix=n}return v(e,\\\"class_1\\\"),e.prototype.children=function(){var t,n,i,a,u,o,l,s,f,c,d,p,g,w,b,T,S,_;return(0,build_exports.__generator)(this,function(y){switch(y.label){case 0:if(t=this.root,t.type!=\\\"internal\\\")return[3,9];n=v(function(C){var h,m,O,k,A,I,E,D,F,q,R,U;return(0,build_exports.__generator)(this,function(M){switch(M.label){case 0:if(h=t.children[C],!isHighSurrogate(C))return[3,12];if(h.type!=\\\"internal\\\")return[3,9];m=h,O=v(function(N){var j;return(0,build_exports.__generator)(this,function(V){switch(V.label){case 0:return j=i.prefix+C+N,[4,{char:C+N,traversal:function(){return new r.Traversal(m.children[N],j)}}];case 1:return V.sent(),[2]}})},\\\"_loop_3\\\"),M.label=1;case 1:M.trys.push([1,6,7,8]),k=(R=void 0,(0,build_exports.__values)(m.values)),A=k.next(),M.label=2;case 2:return A.done?[3,5]:(I=A.value,[5,O(I)]);case 3:M.sent(),M.label=4;case 4:return A=k.next(),[3,2];case 5:return[3,8];case 6:return E=M.sent(),R={error:E},[3,8];case 7:try{A&&!A.done&&(U=k.return)&&U.call(k)}finally{if(R)throw R.error}return[7];case 8:return[3,11];case 9:return D=h.entries[0].key,C=C+D[i.prefix.length+1],F=i.prefix+C,[4,{char:C,traversal:function(){return new r.Traversal(h,F)}}];case 10:M.sent(),M.label=11;case 11:return[3,16];case 12:return isSentinel(C)?[2,\\\"continue\\\"]:[3,13];case 13:return C?[3,14]:[2,\\\"continue\\\"];case 14:return q=i.prefix+C,[4,{char:C,traversal:function(){return new r.Traversal(h,q)}}];case 15:M.sent(),M.label=16;case 16:return[2]}})},\\\"_loop_1\\\"),i=this,y.label=1;case 1:y.trys.push([1,6,7,8]),a=(0,build_exports.__values)(t.values),u=a.next(),y.label=2;case 2:return u.done?[3,5]:(o=u.value,[5,n(o)]);case 3:y.sent(),y.label=4;case 4:return u=a.next(),[3,2];case 5:return[3,8];case 6:return l=y.sent(),b={error:l},[3,8];case 7:try{u&&!u.done&&(T=a.return)&&T.call(a)}finally{if(b)throw b.error}return[7];case 8:return[2];case 9:s=this.prefix,f=t.entries.filter(function(C){return C.key!=s&&s.length<C.key.length}),c=v(function(C){var h;return(0,build_exports.__generator)(this,function(m){switch(m.label){case 0:return h=C[s.length],isHighSurrogate(h)&&(h=h+C[s.length+1]),[4,{char:h,traversal:function(){return new r.Traversal(t,s+h)}}];case 1:return m.sent(),[2]}})},\\\"_loop_2\\\"),y.label=10;case 10:y.trys.push([10,15,16,17]),d=(0,build_exports.__values)(f),p=d.next(),y.label=11;case 11:return p.done?[3,14]:(g=p.value.key,[5,c(g)]);case 12:y.sent(),y.label=13;case 13:return p=d.next(),[3,11];case 14:return[3,17];case 15:return w=y.sent(),S={error:w},[3,17];case 16:try{p&&!p.done&&(_=d.return)&&_.call(d)}finally{if(S)throw S.error}return[7];case 17:return[2]}})},Object.defineProperty(e.prototype,\\\"entries\\\",{get:function(){if(this.root.type==\\\"leaf\\\"){var t=this.prefix,n=this.root.entries.filter(function(a){return a.key==t});return n.map(function(a){return a.content})}else{var i=this.root.children[SENTINEL_CODE_UNIT];return i&&i.type==\\\"leaf\\\"?i.entries.map(function(a){return a.content}):[]}},enumerable:!1,configurable:!0}),e}(),r}(),trie_model_default=TrieModel,Trie=function(){function r(e,t,n){this.root=e,this.toKey=n,this.totalWeight=t}return v(r,\\\"Trie2\\\"),r.prototype.lookup=function(e){var t=this.toKey(e),n=findPrefix(this.root,t);return n===null?[]:getSortedResults(n,t,this.totalWeight)},r.prototype.firstN=function(e){return getSortedResults(this.root,\\\"\\\",this.totalWeight,e)},r}();function findPrefix(r,e,t){if(t===void 0&&(t=0),r.type===\\\"leaf\\\"||t===e.length)return r;var n=e[t];return r.children[n]?findPrefix(r.children[n],e,t+1):null}v(findPrefix,\\\"findPrefix\\\");function getSortedResults(r,e,t,n){var i,a;n===void 0&&(n=MAX_SUGGESTIONS);var u=new priority_queue_default(function(b,T){return(T?T.weight:0)-(b?b.weight:0)}),o=[];if(r.type===\\\"leaf\\\")try{for(var l=(0,build_exports.__values)(r.entries),s=l.next();!s.done;s=l.next()){var f=s.value;if(f.key.indexOf(e)==0){var c=f.content,d=f.weight;if(o.push({text:c,p:d/t}),o.length>=n)return o}}}catch(b){i={error:b}}finally{try{s&&!s.done&&(a=l.return)&&a.call(l)}finally{if(i)throw i.error}}else{u.enqueue(r);for(var p=void 0,g=v(function(){if(isNode(p))if(p.type===\\\"leaf\\\")u.enqueueAll(p.entries);else{var b=p;u.enqueueAll(p.values.map(function(T){return b.children[T]}))}else if(o.push({text:p.content,p:p.weight/t}),o.length>=n)return{value:o}},\\\"_loop_4\\\");p=u.dequeue();){var w=g();if(typeof w==\\\"object\\\")return w.value}}return o}v(getSortedResults,\\\"getSortedResults\\\");function isNode(r){return\\\"type\\\"in r}v(isNode,\\\"isNode\\\");function defaultSearchTermToKey(r){return r.normalize(\\\"NFD\\\").replace(/[\\\\u0300-\\\\u036f]/g,\\\"\\\").toLowerCase()}v(defaultSearchTermToKey,\\\"defaultSearchTermToKey\\\"),extendString();var DummyModel=function(){function r(e){e=e||{},this._futureSuggestions=e.futureSuggestions?e.futureSuggestions.slice():[],e.punctuation&&(this.punctuation=e.punctuation)}return v(r,\\\"DummyModel2\\\"),r.prototype.configure=function(e){return this.configuration={leftContextCodePoints:e.maxLeftContextCodePoints,rightContextCodePoints:e.maxRightContextCodePoints},this.configuration},r.prototype.predict=function(e,t,n){var i=v(function(u){var o,l,s=[],f=u.length;try{for(var c=(0,build_exports.__values)(u),d=c.next();!d.done;d=c.next()){var p=d.value;s.push({sample:p,p:1})}}catch(g){o={error:g}}finally{try{d&&!d.done&&(l=c.return)&&l.call(c)}finally{if(o)throw o.error}}return s},\\\"makeUniformDistribution\\\");if(n)return i(n);var a=this._futureSuggestions.shift();return a?i(a):[]},r}(),dummy_model_default=DummyModel,correction_exports={};__export(correction_exports,{ClassicalDistanceCalculation:function(){return ClassicalDistanceCalculation},ContextTracker:function(){return ContextTracker},QUEUE_NODE_COMPARATOR:function(){return QUEUE_NODE_COMPARATOR},SearchNode:function(){return SearchNode},SearchResult:function(){return SearchResult},SearchSpace:function(){return SearchSpace},TrackedContextState:function(){return TrackedContextState},TrackedContextSuggestion:function(){return TrackedContextSuggestion},TrackedContextToken:function(){return TrackedContextToken}});var ClassicalDistanceCalculation=function(){function r(e){if(this.diagonalWidth=2,this.inputSequence=[],this.matchSequence=[],e){var t=e.resolvedDistances.length;this.resolvedDistances=Array(t);for(var n=0;n<t;n++)this.resolvedDistances[n]=Array.from(e.resolvedDistances[n]);this.inputSequence=Array.from(e.inputSequence),this.matchSequence=Array.from(e.matchSequence),this.diagonalWidth=e.diagonalWidth}else this.resolvedDistances=[]}return v(r,\\\"ClassicalDistanceCalculation2\\\"),r.prototype.getTrueIndex=function(e,t,n){var i={row:e,col:t-e+n,sparse:!1};return(i.col<0||i.col>2*n)&&(i.sparse=!0),i},r.prototype.getCostAt=function(e,t,n){if(n===void 0&&(n=this.diagonalWidth),e<0||t<0)return e==-1&&t>=-1?t+1:t==-1&&e>=-1?e+1:Number.MAX_VALUE;var i=this.getTrueIndex(e,t,n);return i.sparse?Number.MAX_VALUE:this.resolvedDistances[i.row][i.col]},r.prototype.getFinalCost=function(){for(var e=this,t=e.getHeuristicFinalCost();t>e.diagonalWidth;)e=e.increaseMaxDistance(),t=e.getHeuristicFinalCost();return t},r.prototype.getHeuristicFinalCost=function(){return this.getCostAt(this.inputSequence.length-1,this.matchSequence.length-1)},r.prototype.hasFinalCostWithin=function(e){var t=this,n=t.getHeuristicFinalCost(),i=this.diagonalWidth;do{if(n<=e)return!0;if(i<e)t=t.increaseMaxDistance(),i++,n=t.getHeuristicFinalCost();else break}while(!0);return!1},r.prototype.editPath=function(e,t){e===void 0&&(e=this.inputSequence.length-1),t===void 0&&(t=this.matchSequence.length-1);var n=this.getCostAt(e,t),i=null,a=null,u=this.getCostAt(e,t-1),o=this.getCostAt(e-1,t),l=this.getCostAt(e-1,t-1),s=(0,build_exports.__read)(r.getTransposeParent(this,e,t),2),f=s[0],c=s[1];if(f>=0&&c>=0){var d=1;if(i=[\\\"transpose-start\\\"],f!=e-1){var p=e-f-1;i=i.concat(Array(p).fill(\\\"transpose-delete\\\")),d+=p}else{var p=t-c-1;i=i.concat(Array(p).fill(\\\"transpose-insert\\\")),d+=p}i.push(\\\"transpose-end\\\"),this.getCostAt(f-1,c-1)!=n-d&&(i=null),a=[f-1,c-1]}return i||(l==n-1?(i=[\\\"substitute\\\"],a=[e-1,t-1]):u==n-1?(i=[\\\"insert\\\"],a=[e,t-1]):o==n-1?(i=[\\\"delete\\\"],a=[e-1,t]):(i=[\\\"match\\\"],a=[e-1,t-1])),a[0]>=0&&a[1]>=0?this.editPath(a[0],a[1]).concat(i):a[0]>-1?Array(a[0]+1).fill(\\\"delete\\\").concat(i):a[1]>-1?Array(a[1]+1).fill(\\\"insert\\\").concat(i):i},r.getTransposeParent=function(e,t,n){if(t<0||n<0||e.inputSequence[t].key==e.matchSequence[n].key)return[-1,-1];for(var i=-1,a=t-1;a>=0;a--)if(e.inputSequence[a].key==e.matchSequence[n].key){i=a;break}for(var u=-1,a=n-1;a>=0;a--)if(e.matchSequence[a].key==e.inputSequence[t].key){u=a;break}return[i,u]},r.initialCostAt=function(e,t,n,i,a){var u=e.inputSequence[t].key==e.matchSequence[n].key?0:1,o=e.getCostAt(t-1,n-1)+u,l=i||e.getCostAt(t,n-1)+1,s=a||e.getCostAt(t-1,n)+1,f=Number.MAX_VALUE;if(t>0&&n>0){var c=(0,build_exports.__read)(r.getTransposeParent(e,t,n),2),d=c[0],p=c[1];f=e.getCostAt(d-1,p-1)+(t-d-1)+1+(n-p-1)}return Math.min(o,s,l,f)},r.prototype.getSubset=function(e,t){var n=new r(this);if(e>this.inputSequence.length||t>this.matchSequence.length)throw\\\"Invalid dimensions specified for trim operation\\\";n.inputSequence.splice(e),n.matchSequence.splice(t),n.resolvedDistances.splice(e);for(var i=this.getTrueIndex(e-1,t-1,this.diagonalWidth),a=i.col;a<=2*this.diagonalWidth;a++){var u=i.row-(a-i.col);if(u<0)break;if(a<0)n.resolvedDistances[u]=Array(2*n.diagonalWidth+1).fill(Number.MAX_VALUE);else{var o=2*this.diagonalWidth-a,l=n.resolvedDistances[u].splice(0,a+1),s=Array(o).fill(Number.MAX_VALUE);n.resolvedDistances[u]=l.concat(s)}}return n},r.forDiagonalOfAxis=function(e,t,n,i){for(var a=n-t<e?n-t+e:2*e,u=t-e,o=u<0?0:u,l=o-u;l<=a;l++)i(u+l,l)},r.prototype.addInputChar=function(e){var t=new r(this),n=t.inputSequence.length;t.inputSequence.push(e);var i=Array(2*t.diagonalWidth+1).fill(Number.MAX_VALUE);return t.resolvedDistances[n]=i,t.matchSequence.length==0||r.forDiagonalOfAxis(t.diagonalWidth,n,t.matchSequence.length-1,function(a,u){i[u]=r.initialCostAt(t,n,a)}),t},r.prototype.addMatchChar=function(e){var t=new r(this),n=t.matchSequence.length;return t.matchSequence.push(e),t.inputSequence.length==0||r.forDiagonalOfAxis(t.diagonalWidth,n,t.inputSequence.length-1,function(i,a){var u=t.resolvedDistances[i];u[2*t.diagonalWidth-a]=r.initialCostAt(t,i,n)}),t},r.prototype.increaseMaxDistance=function(){var e=new r(this);if(e.diagonalWidth++,e.inputSequence.length<1||e.matchSequence.length<1)return e;function t(o,l,s,f){var c=2*(e.diagonalWidth-1),d=s.length-1;c=c<d-o?c:d-o;for(var p=0;p<=c;p++)l==s[o+p].key&&f(o+p,p)}v(t,\\\"forPossibleTranspositionsInDiagonal\\\");for(var n=v(function(o){var l=Number.MAX_VALUE,s=o-e.diagonalWidth;if(s>=0){var f=s==0?o+2:Number.MAX_VALUE;l=r.initialCostAt(e,o,s,f,void 0);var c=l;if(s<e.matchSequence.length-1){r.propagateUpdateFrom(e,o,s+1,c+1,0);var d=o+2;if(o+2<i.inputSequence.length){var p=e.inputSequence[o+1].key;t(s+3,p,e.matchSequence,function(_,y){r.propagateUpdateFrom(e,d,_,c+y+2,y)})}}}var g=Number.MAX_VALUE;if(s=o+e.diagonalWidth,s<e.matchSequence.length){var w=o==0?s+2:Number.MAX_VALUE;a=e.getCostAt(o,s-1,i.diagonalWidth)+1,g=r.initialCostAt(e,o,s,a,w);var b=g;if(o<e.inputSequence.length-1){r.propagateUpdateFrom(e,o+1,s,b+1,2*i.diagonalWidth);var T=s+2;if(s+2<i.matchSequence.length){var S=e.matchSequence[o+1].key;t(o+3,S,e.inputSequence,function(_,y){var C=2*(e.diagonalWidth-1)-y;r.propagateUpdateFrom(e,_,T,b+y+2,C)})}}}e.resolvedDistances[o]=[l].concat(e.resolvedDistances[o],g)},\\\"_loop_1\\\"),i=this,a,u=0;u<e.inputSequence.length;u++)n(u);return e},r.propagateUpdateFrom=function(e,t,n,i,a){if(i<e.resolvedDistances[t][a])e.resolvedDistances[t][a]=i;else return;var u=t<e.inputSequence.length-1,o=n<e.matchSequence.length-1;if(a<2*(e.diagonalWidth-1)&&o){var l=i+1;this.propagateUpdateFrom(e,t,n+1,l,a+1)}if(a>0&&u){var l=i+1;this.propagateUpdateFrom(e,t+1,n,l,a-1)}if(u&&o){var l=i+(e.inputSequence[t+1].key==e.matchSequence[n+1].key?0:1);this.propagateUpdateFrom(e,t+1,n+1,l,a);for(var s=-1,f=t+2;f<e.inputSequence.length;f++)if(e.inputSequence[f].key==e.matchSequence[n+1].key){s=f;break}for(var c=-1,f=n+2;f<e.matchSequence.length;f++)if(e.matchSequence[f].key==e.inputSequence[t+1].key){c=f;break}if(s>0&&c>0){var d=i+(s-t-2)+1+(c-n-2);this.propagateUpdateFrom(e,s,c,d,e.diagonalWidth-1+c-s)}}},Object.defineProperty(r.prototype,\\\"mapKey\\\",{get:function(){var e=this.inputSequence.map(function(n){return n.key}).join(\\\"\\\"),t=this.matchSequence.map(function(n){return n.key}).join(\\\"\\\");return e+SENTINEL_CODE_UNIT+t+SENTINEL_CODE_UNIT+this.diagonalWidth},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"lastInputEntry\\\",{get:function(){return this.inputSequence[this.inputSequence.length-1]},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"lastMatchEntry\\\",{get:function(){return this.matchSequence[this.matchSequence.length-1]},enumerable:!1,configurable:!0}),r.computeDistance=function(e,t,n){n===void 0&&(n=1);var i=new r;n=n||1,i.diagonalWidth=n;for(var a=0;a<e.length;a++)i=i.addInputChar(e[a]);for(var u=0;u<t.length;u++)i=i.addMatchChar(t[u]);return i},r}(),QUEUE_NODE_COMPARATOR=v(function(r,e){return r.currentCost-e.currentCost},\\\"QUEUE_NODE_COMPARATOR\\\"),SearchNode=function(){function r(e,t){if(this.toKey=function(i){return i},t=t||function(i){return i},e instanceof r){var n=e;this.calculation=n.calculation,this.currentTraversal=n.currentTraversal,this.priorInput=n.priorInput,this.toKey=n.toKey}else this.calculation=new ClassicalDistanceCalculation,this.currentTraversal=e,this.priorInput=[],this.toKey=t}return v(r,\\\"SearchNode2\\\"),Object.defineProperty(r.prototype,\\\"knownCost\\\",{get:function(){return this.calculation.getHeuristicFinalCost()},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"inputSamplingCost\\\",{get:function(){if(this._inputCost!==void 0)return this._inputCost;var e=SearchSpace.MIN_KEYSTROKE_PROBABILITY;return this._inputCost=this.priorInput.map(function(t){return t.p>e?t.p:e}).reduce(function(t,n){return t-Math.log(n)},0),this._inputCost},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"currentCost\\\",{get:function(){return SearchSpace.EDIT_DISTANCE_COST_SCALE*this.knownCost+this.inputSamplingCost},enumerable:!1,configurable:!0}),r.prototype.buildInsertionEdges=function(){var e,t,n=[];try{for(var i=(0,build_exports.__values)(this.currentTraversal.children()),a=i.next();!a.done;a=i.next()){var u=a.value,o=u.traversal(),l={key:u.char,traversal:o},s=this.calculation.addMatchChar(l),f=new r(this);f.calculation=s,f.priorInput=this.priorInput,f.currentTraversal=o,n.push(f)}}catch(c){e={error:c}}finally{try{a&&!a.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}return n},r.prototype.buildDeletionEdges=function(e){var t,n,i=[];try{for(var a=(0,build_exports.__values)(e),u=a.next();!u.done;u=a.next()){var o=u.value;if(o.p<e[0].p*Math.exp(-SearchSpace.EDIT_DISTANCE_COST_SCALE))break;var l=this.calculation,s=o.sample;s.deleteLeft&&(l=l.getSubset(l.inputSequence.length-s.deleteLeft,l.matchSequence.length));var f=Array.from(this.priorInput);f.push(o);for(var c=0;c<s.insert.length;c++){var d=s.insert[c];isHighSurrogate(d)&&(c++,d=d+s.insert[c]);var p=this.toKey(d);p&&(l=l.addInputChar({key:p}))}var g=new r(this);g.calculation=l,g.priorInput=f,i.push(g)}}catch(w){t={error:w}}finally{try{u&&!u.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return i},r.prototype.buildSubstitutionEdges=function(e){var t,n,i,a,u=this.buildDeletionEdges(e),o=[];try{for(var l=(0,build_exports.__values)(this.currentTraversal.children()),s=l.next();!s.done;s=l.next()){var f=s.value;try{for(var c=(i=void 0,(0,build_exports.__values)(u)),d=c.next();!d.done;d=c.next()){var p=d.value,g=f.traversal(),w={key:f.char,traversal:g},b=p.calculation.addMatchChar(w),T=new r(this);T.calculation=b,T.priorInput=p.priorInput,T.currentTraversal=g,o.push(T)}}catch(S){i={error:S}}finally{try{d&&!d.done&&(a=c.return)&&a.call(c)}finally{if(i)throw i.error}}}}catch(S){t={error:S}}finally{try{s&&!s.done&&(n=l.return)&&n.call(l)}finally{if(t)throw t.error}}return o},Object.defineProperty(r.prototype,\\\"mapKey\\\",{get:function(){var e=this.priorInput.map(function(n){return\\\"+\\\"+n.sample.insert+\\\"-\\\"+n.sample.deleteLeft}).join(\\\"\\\"),t=this.calculation.matchSequence.map(function(n){return n.key}).join(\\\"\\\");return e+SENTINEL_CODE_UNIT+t},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"isFullReplacement\\\",{get:function(){return this.knownCost&&this.knownCost==this.priorInput.length},enumerable:!1,configurable:!0}),r}(),SearchSpaceTier=function(){function r(e,t){this.processed=[],this.index=e,this.correctionQueue=new priority_queue_default(QUEUE_NODE_COMPARATOR,t)}return v(r,\\\"SearchSpaceTier2\\\"),r.prototype.increaseMaxEditDistance=function(){var e=this.correctionQueue.toArray();e.forEach(function(t){t.calculation=t.calculation.increaseMaxDistance()}),this.correctionQueue=new priority_queue_default(QUEUE_NODE_COMPARATOR,e)},r}(),SearchResult=function(){function r(e){this.resultNode=e}return v(r,\\\"SearchResult2\\\"),Object.defineProperty(r.prototype,\\\"inputSequence\\\",{get:function(){return this.resultNode.priorInput},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"matchSequence\\\",{get:function(){return this.resultNode.calculation.matchSequence},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"matchString\\\",{get:function(){return this.matchSequence.map(function(e){return e.key}).join(\\\"\\\")},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"knownCost\\\",{get:function(){return this.resultNode.knownCost},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"inputSamplingCost\\\",{get:function(){return this.resultNode.inputSamplingCost},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"totalCost\\\",{get:function(){return this.resultNode.currentCost},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"finalTraversal\\\",{get:function(){return this.resultNode.currentTraversal},enumerable:!1,configurable:!0}),r}(),SearchSpace=function(){function r(e){if(this.tierOrdering=[],this.inputSequence=[],this.minInputCost=[],this.returnedValues={},this.processedEdgeSet={},e){if(!e.traverseFromRoot)throw\\\"The provided model does not implement the `traverseFromRoot` function, which is needed to support robust correction searching.\\\"}else throw\\\"The LexicalModel parameter must not be null / undefined.\\\";this.buildQueueSpaceComparator(),this.selectionQueue=new priority_queue_default(this.QUEUE_SPACE_COMPARATOR),this.rootNode=new SearchNode(e.traverseFromRoot(),e.toKey?e.toKey.bind(e):null),this.completedPaths=[this.rootNode];var t=new SearchSpaceTier(0,[this.rootNode]);this.tierOrdering.push(t),this.selectionQueue.enqueue(t)}return v(r,\\\"SearchSpace2\\\"),r.prototype.buildQueueSpaceComparator=function(){var e=this;this.QUEUE_SPACE_COMPARATOR=function(t,n){var i=t.correctionQueue.peek(),a=n.correctionQueue.peek(),u=t.index,o=n.index,l=0,s=1;if(o<u){var f=o;o=u,u=f,s=-1}for(var c=u;c<o;c++)l=l+e.minInputCost[c];return i&&a?i.currentCost-a.currentCost+s*l:a?1:-1}},r.prototype.increaseMaxEditDistance=function(){this.tierOrdering.forEach(function(e){e.increaseMaxEditDistance()})},r.prototype.addInput=function(e){this.inputSequence.push(e),this.minInputCost.push(-Math.log(e[0].p));var t=[],n=this.completedPaths.map(function(a){var u=a.buildDeletionEdges(e),o=a.buildSubstitutionEdges(e);return u.concat(o)});this.completedPaths=[],this.returnedValues={},n.forEach(function(a){t=t.concat(a)});var i=new SearchSpaceTier(this.tierOrdering.length,t);this.tierOrdering.push(i),this.selectionQueue.enqueue(i)},r.prototype.removeLastInput=function(){},r.prototype.hasNextMatchEntry=function(){var e=this.selectionQueue.peek();return e?e.correctionQueue.count>0:!1},r.prototype.handleNextNode=function(){if(!this.hasNextMatchEntry())return{type:\\\"none\\\"};var e=this.selectionQueue.dequeue(),t=e.correctionQueue.dequeue(),n={type:\\\"intermediate\\\",cost:t.currentCost};if(this.processedEdgeSet[t.mapKey])return this.selectionQueue.enqueue(e),n;this.processedEdgeSet[t.mapKey]=!0;var i=!1;if(t.knownCost>2)return n;t.knownCost==2&&(i=!0);for(var a=0,u=0;u<=e.index;u++)a+=this.minInputCost[u];if(t.currentCost>a+2.5*r.EDIT_DISTANCE_COST_SCALE)return n;if(!i){var o=t.buildInsertionEdges();e.correctionQueue.enqueueAll(o)}if(e.index==this.tierOrdering.length-1)return this.completedPaths.push(t),this.selectionQueue.enqueue(e),{type:\\\"complete\\\",cost:t.currentCost,finalNode:t};var l=this.tierOrdering[e.index+1],s=l.index,f=[];i||(f=t.buildDeletionEdges(this.inputSequence[s-1]));var c=t.buildSubstitutionEdges(this.inputSequence[s-1]);return l.correctionQueue.enqueueAll(f.concat(c)),this.selectionQueue=new priority_queue_default(this.QUEUE_SPACE_COMPARATOR,this.tierOrdering),n},r.prototype.getBestMatches=function(e){var t,n,i,a,u,o,l,s,f,c,d,p,g,w,b,T;return(0,build_exports.__generator)(this,function(S){switch(S.label){case 0:if(t=this,n={},e==0?i=1/0:e==null||Number.isNaN(e)?i=r.DEFAULT_ALLOTTED_CORRECTION_TIME_INTERVAL:i=e,a=function(){function _(y,C){this.largestIntervals=[0],this.loopStart=this.start=Date.now(),this.maxExecutionTime=y,this.maxTrueTime=C}return v(_,\\\"ExecutionTimer2\\\"),_.prototype.startLoop=function(){this.loopStart=Date.now()},_.prototype.markIteration=function(){var y=Date.now(),C=y-this.loopStart;this.executionTime+=C,C&&(this.largestIntervals.length>2&&C>this.largestIntervals[0]?this.largestIntervals[0]=C:this.largestIntervals.push(C),this.largestIntervals.sort(),this.updateOutliers())},_.prototype.updateOutliers=function(){this.largestIntervals.length>2&&this.largestIntervals[2]>=2*(this.largestIntervals[0]+this.largestIntervals[1])&&(this.executionTime-=this.largestIntervals[2],this.largestIntervals.pop())},_.prototype.shouldTimeout=function(){var y=Date.now();return y-this.start>this.maxTrueTime?!0:this.executionTime>this.maxExecutionTime},_.prototype.resetOutlierCheck=function(){this.largestIntervals=[]},_}(),u=function(){function _(){this.currentCost=Number.MIN_SAFE_INTEGER,this.entries=[]}return v(_,\\\"BatchingAssistant2\\\"),_.prototype.checkAndAdd=function(y){var C=null;y.currentCost>this.currentCost&&(C=this.tryFinalize(),this.currentCost=y.currentCost);var h=y.calculation.matchSequence.map(function(m){return m.key}).join(\\\"\\\");return t.returnedValues[h]||(t.returnedValues[h]=y),n[h]||(this.entries.push(new SearchResult(y)),n[h]=y),C},_.prototype.tryFinalize=function(){var y=null;return this.entries.length>0&&(y=this.entries,this.entries=[]),y},_}(),o=new u,l=new a(i*1.5,i),s=Object.values(this.returnedValues),!(s.length>0))return[3,6];f=new priority_queue_default(QUEUE_NODE_COMPARATOR,s),l.startLoop(),S.label=1;case 1:return f.count>0?(c=f.dequeue(),c.isFullReplacement?[3,1]:(d=o.checkAndAdd(c),l.markIteration(),d?[4,d]:[3,3])):[3,4];case 2:S.sent(),S.label=3;case 3:return[3,1];case 4:return p=o.tryFinalize(),p?[4,p]:[3,6];case 5:S.sent(),S.label=6;case 6:l.resetOutlierCheck(),l.startLoop(),g=!1,S.label=7;case 7:w=void 0;do w=this.handleNextNode(),l.markIteration(),l.shouldTimeout()&&(g=!0);while(!g&&w.type==\\\"intermediate\\\");if(b=void 0,w.type==\\\"none\\\")return[3,10];if(w.type==\\\"complete\\\"){if(w.finalNode.isFullReplacement)return[3,10];b=o.checkAndAdd(w.finalNode)}return b?[4,b]:[3,9];case 8:S.sent(),S.label=9;case 9:if(!g&&this.hasNextMatchEntry())return[3,7];S.label=10;case 10:return T=o.tryFinalize(),T?[4,T]:[3,12];case 11:S.sent(),S.label=12;case 12:return[2,null]}})},r.EDIT_DISTANCE_COST_SCALE=5,r.MIN_KEYSTROKE_PROBABILITY=1e-4,r.DEFAULT_ALLOTTED_CORRECTION_TIME_INTERVAL=33,r}(),TransformUtils=function(){function r(){}return v(r,\\\"TransformUtils2\\\"),r.isWhitespace=function(e){var t=/^[\\\\u0009\\\\u000A\\\\u000D\\\\u0020\\\\u00a0\\\\u1680\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u200b\\\\u2028\\\\u2029\\\\u202f\\\\u205f\\\\u3000]+$/i;return e.insert.match(t)!=null},r.isBackspace=function(e){return e.insert==\\\"\\\"&&e.deleteLeft>0&&!e.deleteRight},r.isEmpty=function(e){return e.insert==\\\"\\\"&&e.deleteLeft==0&&!e.deleteRight},r}(),transformUtils_default=TransformUtils;function textToCharTransforms(r,e){for(var t=[],n=0;n<r.kmwLength();n++){var i=r.kmwCharAt(n),a={insert:i,deleteLeft:0,id:e};t.push(a)}return t}v(textToCharTransforms,\\\"textToCharTransforms\\\");var TrackedContextSuggestion=function(){function r(){}return v(r,\\\"TrackedContextSuggestion2\\\"),r}(),TrackedContextToken=function(){function r(){this.transformDistributions=[],this.activeReplacementId=-1}return v(r,\\\"TrackedContextToken2\\\"),Object.defineProperty(r.prototype,\\\"currentText\\\",{get:function(){return this.replacementText===void 0||this.replacementText===null?this.raw:this.replacementText},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"replacement\\\",{get:function(){var e=this.activeReplacementId;return this.replacements.find(function(t){return t.suggestion.id==e})},enumerable:!1,configurable:!0}),r.prototype.revert=function(){delete this.activeReplacementId},r}(),TrackedContextState=function(){function r(e){if(this.searchSpace=[],e instanceof r){var t=e;this.tokens=t.tokens.map(function(i){var a=new TrackedContextToken;return a.raw=i.raw,a.replacements=i.replacements,a.activeReplacementId=i.activeReplacementId,a.transformDistributions=i.transformDistributions,i.replacementText&&(a.replacementText=i.replacementText),a}),this.searchSpace=e.searchSpace,this.indexOffset=0,this.model=e.model}else{var n=e;this.tokens=[],this.indexOffset=Number.MIN_SAFE_INTEGER,this.model=n,n&&n.traverseFromRoot&&(this.searchSpace=[new SearchSpace(n)])}}return v(r,\\\"TrackedContextState2\\\"),Object.defineProperty(r.prototype,\\\"head\\\",{get:function(){return this.tokens[0]},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"tail\\\",{get:function(){return this.tokens[this.tokens.length-1]},enumerable:!1,configurable:!0}),r.prototype.popHead=function(){this.tokens.splice(0,2),this.indexOffset-=1},r.prototype.pushTail=function(e){this.model&&this.model.traverseFromRoot?this.searchSpace=[new SearchSpace(this.model)]:this.searchSpace=[],this.tokens.push(e);var t=this;t.searchSpace.length>0&&e.transformDistributions.forEach(function(n){return t.searchSpace[0].addInput(n)})},r.prototype.pushWhitespaceToTail=function(e){e===void 0&&(e=null);var t=new TrackedContextToken;t.transformDistributions=e?[e]:[],t.raw=null,this.tokens.push(t)},r.prototype.replaceTailForBackspace=function(e,t){this.tokens.pop();var n=textToCharTransforms(e,t).map(function(a){return[{sample:a,p:1}]}),i=new TrackedContextToken;i.raw=e,i.transformDistributions=n,this.pushTail(i)},r.prototype.updateTail=function(e,t){var n=this.tail;t=t||(t===\\\"\\\"?\\\"\\\":n.raw),e&&e.length>0&&(n.transformDistributions.push(e),this.searchSpace&&this.searchSpace.forEach(function(i){return i.addInput(e)})),n.raw=t},r.prototype.toRawTokenization=function(){var e,t,n=[];try{for(var i=(0,build_exports.__values)(this.tokens),a=i.next();!a.done;a=i.next()){var u=a.value;u.currentText!==null&&n.push(u.currentText)}}catch(o){e={error:o}}finally{try{a&&!a.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}return n},r}(),CircularArray=function(){function r(e){e===void 0&&(e=r.DEFAULT_ARRAY_SIZE),this.currentHead=0,this.currentTail=0,this.circle=Array(e)}return v(r,\\\"CircularArray2\\\"),Object.defineProperty(r.prototype,\\\"count\\\",{get:function(){var e=this.currentHead-this.currentTail;return e<0&&(e=e+this.circle.length),e},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"maxCount\\\",{get:function(){return this.circle.length},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"oldest\\\",{get:function(){if(this.count!=0)return this.item(0)},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,\\\"newest\\\",{get:function(){if(this.count!=0)return this.item(this.count-1)},enumerable:!1,configurable:!0}),r.prototype.enqueue=function(e){var t=null,n=(this.currentHead+1)%this.maxCount;return n==this.currentTail&&(t=this.circle[this.currentTail],this.currentTail=(this.currentTail+1)%this.maxCount),this.circle[this.currentHead]=e,this.currentHead=n,t},r.prototype.dequeue=function(){if(this.currentTail==this.currentHead)return null;var e=this.circle[this.currentTail];return this.currentTail=(this.currentTail+1)%this.maxCount,e},r.prototype.popNewest=function(){if(this.currentTail==this.currentHead)return null;var e=this.circle[this.currentHead];return this.currentHead=(this.currentHead-1+this.maxCount)%this.maxCount,e},r.prototype.item=function(e){if(e>=this.count)throw\\\"Invalid array index\\\";var t=(this.currentTail+e)%this.maxCount;return this.circle[t]},r.DEFAULT_ARRAY_SIZE=5,r}(),ContextTracker=function(r){(0,build_exports.__extends)(e,r);function e(){return r!==null&&r.apply(this,arguments)||this}return v(e,\\\"ContextTracker2\\\"),e.attemptMatchContext=function(t,n,i){var a=n.toRawTokenization(),u=ClassicalDistanceCalculation.computeDistance(a.map(function(h){return{key:h}}),t.map(function(h){return{key:h}}),1),o=u.editPath(),l=!1,s=!1;if(o.length>1){if(o[0]==\\\"insert\\\"&&!(o[1]==\\\"substitute\\\"&&o.length==2)||o[0].indexOf(\\\"transpose\\\")>=0)return null;o[0]==\\\"delete\\\"&&(l=!0)}var f=o.length-1,c=!1;if(o[f]==\\\"delete\\\"||o[0].indexOf(\\\"transpose\\\")>=0||(o[f]==\\\"insert\\\"?s=!0:f>0&&o[f-1]==\\\"insert\\\"&&o[f]==\\\"substitute\\\"&&(s=!0,c=!0),f>0&&o[f-1]==\\\"delete\\\"&&o[f]==\\\"substitute\\\"))return null;for(var d=1;d<o.length-(c?2:1);d++)if(o[d]!=\\\"match\\\")return null;var p;s?(c&&(n.tail.replacementText=t[t.length-2]),p=new TrackedContextState(n)):p=n;var g=i&&Array.isArray(i),w=g?i[0].sample:null;w&&w.insert==\\\"\\\"&&w.deleteLeft==0&&!w.deleteRight&&(w=null);var b=w&&transformUtils_default.isWhitespace(w),T=w&&transformUtils_default.isBackspace(w),S=t[t.length-1];if(o.length>1)if(l&&p.popHead(),s){var _=t[t.length-1],y=new TrackedContextToken;y.raw=_,b||!w?(p.pushWhitespaceToTail(i!=null?i:[]),y.transformDistributions=[]):(p.pushWhitespaceToTail(),y.transformDistributions=i?[i]:[]),p.pushTail(y)}else T?p.replaceTailForBackspace(S,w.id):p.updateTail(w?i:null,S);else if(o[f]==\\\"insert\\\"){var C=new TrackedContextToken;C.raw=t[0],C.transformDistributions=[i],p.pushTail(C)}else T?p.replaceTailForBackspace(S,w.id):p.updateTail(w?i:null,S);return p},e.modelContextState=function(t,n,i){var a=t.map(function(l){var s=new TrackedContextToken;return s.raw=l,s.raw?s.transformDistributions=textToCharTransforms(s.raw).map(function(f){return[{sample:f,p:1}]}):s.transformDistributions=[],s}),u=new TrackedContextState(i);for(a.length>0&&u.pushTail(a.splice(0,1)[0]);a.length>0;)u.pushWhitespaceToTail(),u.pushTail(a.splice(0,1)[0]);if(u.tokens.length==0){var o=new TrackedContextToken;o.raw=\\\"\\\",u.pushTail(o)}return u},e.prototype.analyzeState=function(t,n,i){if(!t.traverseFromRoot)throw\\\"This lexical model does not provide adequate data for correction algorithms and context reuse\\\";var a=tokenize(t.wordbreaker||default_,n);if(a.left.length>0)for(var u=this.count-1;u>=0;u--){var o=e.attemptMatchContext(a.left,this.item(u),i);if(o)return o.taggedContext=n,o!=this.item(u)&&this.enqueue(o),o}var l=e.modelContextState(a.left,i,t);return l.taggedContext=n,this.enqueue(l),l},e}(CircularArray),ModelCompositor=function(){function r(e,t){this.SUGGESTION_ID_SEED=0,this.testMode=!1,this.lexicalModel=e,e.traverseFromRoot&&(this.contextTracker=new ContextTracker),this.punctuation=r.determinePunctuationFromModel(e),this.testMode=!!t}return v(r,\\\"ModelCompositor2\\\"),r.prototype.predictFromCorrections=function(e,t){var n,i,a=[],u=v(function(c){var d=o.lexicalModel.predict(c.sample,t),p=d.map(function(g){var w=c.sample,b=c.p;w.id!==void 0&&(g.sample.transformId=w.id);var T={sample:g.sample,p:g.p*b};return T},o);a=a.concat(p)},\\\"_loop_1\\\"),o=this;try{for(var l=(0,build_exports.__values)(e),s=l.next();!s.done;s=l.next()){var f=s.value;u(f)}}catch(c){n={error:c}}finally{try{s&&!s.done&&(i=l.return)&&i.call(l)}finally{if(n)throw n.error}}return a},r.prototype.predict=function(e,t){var n,i,a,u,o=[],l=this.lexicalModel,s=this.punctuation;e instanceof Array?e.length==0&&e.push({sample:{insert:\\\"\\\",deleteLeft:0},p:1}):e=[{sample:e,p:1}];var f=e.sort(function(x,P){return P.p-x.p})[0].sample,c=transformUtils_default.isWhitespace(f),d=transformUtils_default.isBackspace(f),p=applyTransform(f,t),g=this.wordbreak(p),w=null,b=[],T,S=null;if(this.contextTracker){var y=this.contextTracker.analyzeState(this.lexicalModel,t,null);S=this.contextTracker.analyzeState(this.lexicalModel,p,transformUtils_default.isEmpty(f)?null:e);var C=S.searchSpace[0],h=0,m=S.tokens,O=m.length,k=m.length-y.tokens.length;O==0||k>0?(h=0,transformUtils_default.isWhitespace(f)&&(T=f,t=p,y=S)):k<0?h=this.wordbreak(p).kmwLength()+f.deleteLeft:h=this.wordbreak(t).kmwLength();var A=m[m.length-1],I=A.transformDistributions.length<=1,E=void 0,D=this.testMode?0:SearchSpace.DEFAULT_ALLOTTED_CORRECTION_TIME_INTERVAL;try{for(var F=(0,build_exports.__values)(C.getBestMatches(D)),q=F.next();!q.done;q=F.next()){var R=q.value,_=R.map(function(P){var W=P.matchString,H;P.inputSequence.length>0?H=P.inputSequence[P.inputSequence.length-1].sample:H=f;var ie={insert:W,deleteLeft:h,id:f.id},ee=P.totalCost;return I&&(ee*=r.SINGLE_CHAR_KEY_PROB_EXPONENT),{sample:ie,p:Math.exp(-ee)}},this),U=this.predictFromCorrections(_,t);U.length>0&&E===void 0&&(E=-Math.log(_[0].p)),b=b.concat(U);var M=R[0].totalCost;if(M>=E+8)break;if(b.length>=r.MAX_SUGGESTIONS){if(M>=E+4)break;if(b.sort(function(P,W){return W.p-P.p}),b[r.MAX_SUGGESTIONS-1].p>Math.exp(-M))break}}}catch(x){n={error:x}}finally{try{q&&!q.done&&(i=F.return)&&i.call(F)}finally{if(n)throw n.error}}}else{var _=void 0;c?(_=[{sample:f,p:1}],T=f):_=e.map(function(x){var P=x.sample;return transformUtils_default.isWhitespace(P)&&!c||transformUtils_default.isBackspace(P)&&!d?null:x}),_=_.filter(function(x){return!!x}),b=this.predictFromCorrections(_,t)}var N={},j=null;l.languageUsesCasing&&(j=this.detectCurrentCasing(p));var V=this.wordbreak(t);try{for(var G=(0,build_exports.__values)(b),B=G.next();!B.done;B=G.next()){var L=B.value,Q=L.sample.displayAs,X=Q==g;if(this.lexicalModel.languageUsesCasing&&(X=X||Q==this.lexicalModel.applyCasing(\\\"lower\\\",g)),X)if(w)w.p&&L.p&&(w.p+=L.p);else{var z=L.sample.transform,Y={insert:g,deleteLeft:z.deleteLeft,deleteRight:z.deleteRight,id:z.id},te=transformToSuggestion(Y,L.p);w=this.toAnnotatedSuggestion(te,\\\"keep\\\",quote_behavior_default.noQuotes),w.matchesModel=!0,w.transformId=L.sample.transformId}else{j&&j!=\\\"lower\\\"&&(this.applySuggestionCasing(L.sample,V,j),Q=L.sample.displayAs);var J=N[Q];J?J.p+=L.p:N[Q]=L}}}catch(x){a={error:x}}finally{try{B&&!B.done&&(u=G.return)&&u.call(G)}finally{if(a)throw a.error}}if(!w&&g!=\\\"\\\"){var Y=(0,build_exports.__assign)({},f),$=transformToSuggestion(Y,1);$.displayAs=g,w=this.toAnnotatedSuggestion($,\\\"keep\\\"),w.matchesModel=!1}for(var re in N){var ne=N[re];o.push(ne)}o=o.sort(function(x,P){return P.p-x.p});var K=o.splice(0,r.MAX_SUGGESTIONS).map(function(x){return x.sample.p&&(x.sample[\\\"lexical-p\\\"]=x.sample.p,x.sample[\\\"correction-p\\\"]=x.p/x.sample.p,x.sample.p=x.p),x.sample});w&&(K=[w].concat(K));var Z=this;return K.forEach(function(x){if(!t.right)x.transform.insert+=s.insertAfterWord;else{var P=Z.tokenize(t);P&&P.caretSplitsToken&&(x.transform.insert+=s.insertAfterWord)}if(T){var W=buildMergedTransform(T,x.transform);W.id=x.transformId;var H=x;H.transform=W}x.id=Z.SUGGESTION_ID_SEED,Z.SUGGESTION_ID_SEED++}),S&&(S.tail.replacements=K.map(function(x){return{suggestion:x,tokenWidth:1}})),K},r.prototype.applySuggestionCasing=function(e,t,n){var i=t.kmwLength()-e.transform.deleteLeft;i>0&&(e.transform.deleteLeft+=i,e.transform.insert=t.kmwSubstr(0,i)+e.transform.insert),e.transform.insert=this.lexicalModel.applyCasing(n,e.transform.insert),e.displayAs=this.lexicalModel.applyCasing(n,e.displayAs)},r.prototype.toAnnotatedSuggestion=function(e,t,n){n===void 0&&(n=quote_behavior_default.default);var i=quote_behavior_default,a=i.noQuotes;return(t==\\\"keep\\\"||t==\\\"revert\\\")&&(a=i.useQuotes),{transform:e.transform,transformId:e.transformId,displayAs:i.apply(n,e.displayAs,this.punctuation,a),tag:t,p:e.p}},r.determinePunctuationFromModel=function(e){var t=DEFAULT_PUNCTUATION;if(!e.punctuation)return t;var n=e.punctuation,i=n.insertAfterWord;i!==\\\"\\\"&&!i&&(i=t.insertAfterWord);var a=n.quotesForKeepSuggestion;a||(a=t.quotesForKeepSuggestion);var u=n.isRTL;return{insertAfterWord:i,quotesForKeepSuggestion:a,isRTL:u}},r.prototype.acceptSuggestion=function(e,t,n){var i=e.transform,a=t.left.kmwSubstr(-i.deleteLeft,i.deleteLeft),u=i.insert.kmwLength(),o={insert:a,deleteLeft:u},l=t;n&&(o=buildMergedTransform(o,n),l=applyTransform(n,l));var s,f=this.tokenize(l);f?(f.left.length>0?s=f.left[f.left.length-1]:s=\\\"\\\",s+=f.caretSplitsToken?f.right[0]:\\\"\\\"):s=this.wordbreak(l);var c=transformToSuggestion(o);c.displayAs=s;var d=this.toAnnotatedSuggestion(c,\\\"revert\\\");if(e.transformId!=null&&(d.transformId=-e.transformId),e.id!=null?d.id=-e.id:(d.id=-this.SUGGESTION_ID_SEED,this.SUGGESTION_ID_SEED++),this.contextTracker){var p=this.contextTracker.newest;p||(p=this.contextTracker.analyzeState(this.lexicalModel,t)),p.tail.activeReplacementId=e.id;var g=applyTransform(e.transform,t);this.contextTracker.analyzeState(this.lexicalModel,g)}return d},r.prototype.applyReversion=function(e,t){var n=this,i=v(function(){var s=applyTransform(e.transform,t),f=n.predict({insert:\\\"\\\",deleteLeft:0},s);return f.forEach(function(c){c.transformId=-e.transformId}),f},\\\"fallbackSuggestions\\\");if(!this.contextTracker)return i();for(var a=!1,u=this.contextTracker.count-1;u>=0;u--){var o=this.contextTracker.item(u);if(o.tail.activeReplacementId==-e.id){a=!0;break}}if(!a)return i();for(;this.contextTracker.newest.tail.activeReplacementId!=-e.id;)this.contextTracker.popNewest();this.contextTracker.newest.tail.revert();var l=this.contextTracker.newest.tail.replacements.map(function(s){return s.suggestion});return l.forEach(function(s){s.transformId=-e.transformId}),l},r.prototype.wordbreak=function(e){var t=this.lexicalModel;if(t.wordbreaker||!t.wordbreak){var n=t.wordbreaker||default_;return wordbreak(n,e)}else return t.wordbreak(e)},r.prototype.tokenize=function(e){var t=this.lexicalModel;return t.wordbreaker?tokenize(t.wordbreaker,e):null},r.prototype.resetContext=function(e){if(this.contextTracker){var t=tokenize(this.lexicalModel.wordbreaker||default_,e),n=ContextTracker.modelContextState(t.left,null,this.lexicalModel);this.contextTracker.enqueue(n)}},r.prototype.detectCurrentCasing=function(e){var t,n=this.lexicalModel,i=this.wordbreak(e);if(!n.languageUsesCasing)throw\\\"Invalid attempt to detect casing: languageUsesCasing is set to false\\\";if(!n.applyCasing)throw\\\"Invalid LMLayer state:  languageUsesCasing is set to true, but no applyCasing function exists\\\";return e.casingForm==\\\"upper\\\"||e.casingForm==\\\"initial\\\"?e.casingForm:n.applyCasing(\\\"lower\\\",i)==i?\\\"lower\\\":n.applyCasing(\\\"upper\\\",i)==i?i.kmwLength()>1?\\\"upper\\\":\\\"initial\\\":n.applyCasing(\\\"initial\\\",i)==i?\\\"initial\\\":(t=e.casingForm)!==null&&t!==void 0?t:null},r.MAX_SUGGESTIONS=12,r.SINGLE_CHAR_KEY_PROB_EXPONENT=16,r}(),model_compositor_default=ModelCompositor,DEFAULT_PUNCTUATION={quotesForKeepSuggestion:{open:\\\"\\\\u201C\\\",close:\\\"\\\\u201D\\\"},insertAfterWord:\\\" \\\"};extendString();var LMLayerWorker=function(){function r(e){e===void 0&&(e={importScripts:null,postMessage:null}),this._testMode=!1,this._postMessage=e.postMessage||postMessage,this._importScripts=e.importScripts||importScripts,this.setupConfigState()}return v(r,\\\"LMLayerWorker2\\\"),r.prototype.error=function(e,t){this.cast(\\\"error\\\",{log:e,error:t&&t.stack?t.stack:void 0})},r.prototype.onMessage=function(e){var t=e.data.message;if(!t)throw new Error(\\\"Missing required 'message' property: \\\".concat(e.data));var n=e.data;if(n.message==\\\"load\\\"){var i=n,a=!1;if(this._currentModelSource&&i.source.type==this._currentModelSource.type&&(i.source.type==\\\"file\\\"&&i.source.file==this._currentModelSource.file||i.source.type==\\\"raw\\\"&&i.source.code==this._currentModelSource.code)&&(a=!0),a){typeof console!=\\\"undefined\\\"&&console.warn(\\\"Duplicate model load message detected - squashing!\\\");return}else this._currentModelSource=i.source}else n.message==\\\"unload\\\"&&(this._currentModelSource=null);this.state.handleMessage(n)},r.prototype.cast=function(e,t){var n=this._postMessage;n((0,build_exports.__assign)({message:e},t))},r.prototype.loadModel=function(e){try{var t=e.configure(this._platformCapabilities);t.leftContextCodePoints||(t.leftContextCodePoints=t.leftContextCodeUnits),t.rightContextCodePoints||(t.rightContextCodePoints=t.rightContextCodeUnits),t.leftContextCodePoints||(t.leftContextCodePoints=this._platformCapabilities.maxLeftContextCodePoints),t.rightContextCodePoints||(t.rightContextCodePoints=this._platformCapabilities.maxRightContextCodePoints||0),e.languageUsesCasing&&!e.applyCasing&&(e.applyCasing=defaultApplyCasing);var n=this.transitionToReadyState(e);t.wordbreaksAfterSuggestions===void 0&&(t.wordbreaksAfterSuggestions=n.punctuation.insertAfterWord!=\\\"\\\"),this.cast(\\\"ready\\\",{configuration:t})}catch(i){this.error(\\\"loadModel failed!\\\",i)}},r.prototype.loadModelFile=function(e){try{this._importScripts(e)}catch(t){this.error(\\\"Error occurred when attempting to load dictionary\\\",t)}},r.prototype.unloadModel=function(){this.transitionToLoadingState()},r.prototype.setupConfigState=function(){var e=this;this.state={name:\\\"unconfigured\\\",handleMessage:function(t){if(t.message!==\\\"config\\\")throw new Error(\\\"invalid message; expected 'config' but got \\\".concat(t.message));e._platformCapabilities=t.capabilities,e._testMode=!!t.testMode,e.transitionToLoadingState()}}},r.prototype.transitionToLoadingState=function(){var e=this;this.state={name:\\\"modelless\\\",handleMessage:function(t){if(t.message!==\\\"load\\\")throw new Error(\\\"invalid message; expected 'load' but got \\\".concat(t.message));if(t.source.type==\\\"file\\\")e.loadModelFile(t.source.file);else{var n=t.source.code,i=new Function(\\\"LMLayerWorker\\\",\\\"models\\\",\\\"correction\\\",\\\"wordBreakers\\\",n);i(e,models_exports,correction_exports,obj_exports)}}}},r.prototype.transitionToReadyState=function(e){var t=this,n=new model_compositor_default(e,this._testMode);return this.state={name:\\\"ready\\\",handleMessage:function(i){switch(i.message){case\\\"predict\\\":var a=i.transform,c=i.context,f=n.predict(a,c);t.cast(\\\"suggestions\\\",{token:i.token,suggestions:f});break;case\\\"wordbreak\\\":var u=wordbreak(e.wordbreaker||default_,i.context);t.cast(\\\"currentword\\\",{token:i.token,word:u});break;case\\\"unload\\\":t.unloadModel();break;case\\\"accept\\\":var o=i.suggestion,c=i.context,l=i.postTransform,s=n.acceptSuggestion(o,c,l);t.cast(\\\"postaccept\\\",{token:i.token,reversion:s});break;case\\\"revert\\\":var s=i.reversion,c=i.context,f=n.applyReversion(s,c);t.cast(\\\"postrevert\\\",{token:i.token,suggestions:f});break;case\\\"reset-context\\\":var c=i.context;n.resetContext(c);break;default:throw new Error(\\\"invalid message; expected one of {'predict', 'wordbreak', 'accept', 'revert', 'reset-context', 'unload'} but got \\\".concat(i.message))}},compositor:n},n},r.install=function(e){var t=new r({postMessage:e.postMessage,importScripts:e.importScripts.bind(e)});return e.onmessage=t.onMessage.bind(t),t.self=e,e.LMLayerWorker=t,e.models=models_exports,e.correction=correction_exports,e.wordBreakers=obj_exports,t},r}(),obj_default=LMLayerWorker;typeof self!=\\\"undefined\\\"&&\\\"postMessage\\\"in self&&\\\"importScripts\\\"in self?obj_default.install(self):window.LMLayerWorker=obj_default;\\n\";\n\n// Sourcemaps have been omitted for this release build.\nexport var LMLayerWorkerSourcemapComment = \"\";\n\n// --END:LMLayerWorkerCode\n",
    "import unwrap from '../unwrap.js';\r\nimport { LMLayerWorkerCode, LMLayerWorkerSourcemapComment } from \"@keymanapp/lm-worker/worker-main.wrapped.min.js\";\r\n\r\nexport default class DefaultWorker {\r\n  static constructInstance(): Worker {\r\n    return new Worker(this.asBlobURI(LMLayerWorkerCode));\r\n  }\r\n\r\n  /**\r\n   * Converts the INSIDE of a function into a blob URI that can\r\n   * be passed as a valid URI for a Worker.\r\n   * @param fn Function whose body will be referenced by a URI.\r\n   *\r\n   * This function makes the following possible:\r\n   *\r\n   *    let worker = new Worker(LMLayer.asBlobURI(function myWorkerCode () {\r\n   *      postMessage('inside Web Worker')\r\n   *      function onmessage(event) {\r\n   *        // handle message inside Web Worker.\r\n   *      }\r\n   *    }));\r\n   */\r\n  static asBlobURI(encodedSrc: string): string {\r\n    let code = unwrap(encodedSrc);\r\n\r\n    // If this is definitively set to either true or false, tree-shaking can take effect.\r\n    // An imported const variable doesn't seem to do it, though.\r\n    // if(false) {\r\n      code += '\\n' + LMLayerWorkerSourcemapComment;\r\n    // }\r\n    let blob = new Blob([code], { type: 'text/javascript' });\r\n    return URL.createObjectURL(blob);\r\n  }\r\n}",
    "// Defines a 'polyfill' of sorts for NPM's events module\r\n\r\n/// <reference types=\"@keymanapp/models-types\" />\r\n\r\nimport ContextWindow from \"./contextWindow.js\";\r\nimport LanguageProcessor from \"./prediction/languageProcessor.js\";\r\nimport type ModelSpec from \"./prediction/modelSpec.js\";\r\nimport { globalObject, DeviceSpec } from \"@keymanapp/web-utils\";\r\n\r\nimport {\r\n  type Alternate,\r\n  Codes,\r\n  isEmptyTransform,\r\n  type Keyboard,\r\n  KeyboardInterface,\r\n  KeyboardProcessor,\r\n  type KeyEvent,\r\n  Mock,\r\n  type OutputTarget,\r\n  type ProcessorInitOptions,\r\n  RuleBehavior,\r\n  SystemStoreIDs,\r\n  type TextTransform\r\n} from \"@keymanapp/keyboard-processor\";\r\n\r\nexport default class InputProcessor {\r\n  public static readonly DEFAULT_OPTIONS: ProcessorInitOptions = {\r\n    baseLayout: 'us'\r\n  }\r\n\r\n  /**\r\n   * Indicates the device (platform) to be used for non-keystroke events,\r\n   * such as those sent to `begin postkeystroke` and `begin newcontext`\r\n   * entry points.\r\n   */\r\n  private contextDevice: DeviceSpec;\r\n  private kbdProcessor: KeyboardProcessor;\r\n  private lngProcessor: LanguageProcessor;\r\n\r\n  constructor(device: DeviceSpec, predictiveTextWorker: Worker, options?: ProcessorInitOptions) {\r\n    if(!device) {\r\n      throw new Error('device must be defined');\r\n    }\r\n\r\n    if(!options) {\r\n      options = InputProcessor.DEFAULT_OPTIONS;\r\n    }\r\n\r\n    this.contextDevice = device;\r\n    this.kbdProcessor = new KeyboardProcessor(device, options);\r\n    this.lngProcessor = new LanguageProcessor(predictiveTextWorker);\r\n  }\r\n\r\n  public get languageProcessor(): LanguageProcessor {\r\n    return this.lngProcessor;\r\n  }\r\n\r\n  public get keyboardProcessor(): KeyboardProcessor {\r\n    return this.kbdProcessor;\r\n  }\r\n\r\n  public get keyboardInterface(): KeyboardInterface {\r\n    return this.keyboardProcessor.keyboardInterface;\r\n  }\r\n\r\n  public get activeKeyboard(): Keyboard {\r\n    return this.keyboardInterface.activeKeyboard;\r\n  }\r\n\r\n  public set activeKeyboard(keyboard: Keyboard) {\r\n    this.keyboardInterface.activeKeyboard = keyboard;\r\n\r\n    // All old deadkeys and keyboard-specific cache should immediately be invalidated\r\n    // on a keyboard change.\r\n    this.resetContext();\r\n  }\r\n\r\n  public get activeModel(): ModelSpec {\r\n    return this.languageProcessor.activeModel;\r\n  }\r\n\r\n  /**\r\n   * Simulate a keystroke according to the touched keyboard button element\r\n   *\r\n   * Handles default output and keyboard processing for both OSK and physical keystrokes.\r\n   *\r\n   * @param       {Object}      keyEvent      The abstracted KeyEvent to use for keystroke processing\r\n   * @param       {Object}      outputTarget  The OutputTarget receiving the KeyEvent\r\n   * @returns     {Object}                    A RuleBehavior object describing the cumulative effects of\r\n   *                                          all matched keyboard rules.\r\n   */\r\n  processKeyEvent(keyEvent: KeyEvent, outputTarget: OutputTarget): RuleBehavior {\r\n    const kbdMismatch = keyEvent.srcKeyboard && this.activeKeyboard != keyEvent.srcKeyboard;\r\n    const trueActiveKeyboard = this.activeKeyboard;\r\n\r\n    try {\r\n      if(kbdMismatch) {\r\n        // Avoid force-reset of context per our setter above.\r\n        this.keyboardInterface.activeKeyboard = keyEvent.srcKeyboard;\r\n      }\r\n\r\n      return this._processKeyEvent(keyEvent, outputTarget);\r\n    } finally {\r\n      if(kbdMismatch) {\r\n        // Restore our \"current\" activeKeyboard to its setting before the mismatching KeyEvent.\r\n        this.keyboardInterface.activeKeyboard = trueActiveKeyboard;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Acts as the core of `processKeyEvent` once we're comfortable asserting that the incoming\r\n   * keystroke matches the current `activeKeyboard`.\r\n   * @param keyEvent\r\n   * @param outputTarget\r\n   * @returns\r\n   */\r\n  private _processKeyEvent(keyEvent: KeyEvent, outputTarget: OutputTarget): RuleBehavior {\r\n    let formFactor = keyEvent.device.formFactor;\r\n    let fromOSK = keyEvent.isSynthetic;\r\n\r\n    // The default OSK layout for desktop devices does not include nextlayer info, relying on modifier detection here.\r\n    // It's the OSK equivalent to doModifierPress on 'desktop' form factors.\r\n    if((formFactor == DeviceSpec.FormFactor.Desktop || !this.activeKeyboard || this.activeKeyboard.usesDesktopLayoutOnDevice(keyEvent.device)) && fromOSK) {\r\n      // If it's a desktop OSK style and this triggers a layer change,\r\n      // a modifier key was clicked.  No output expected, so it's safe to instantly exit.\r\n      if(this.keyboardProcessor.selectLayer(keyEvent)) {\r\n        return new RuleBehavior();\r\n      }\r\n    }\r\n\r\n    // Will handle keystroke-based non-layer change modifier & state keys, mapping them through the physical keyboard's version\r\n    // of state management.  `doModifierPress` must always run.\r\n    if(this.keyboardProcessor.doModifierPress(keyEvent, outputTarget, !fromOSK)) {\r\n      // If run on a desktop platform, we know that modifier & state key presses may not\r\n      // produce output, so we may make an immediate return safely.\r\n      if(!fromOSK) {\r\n        return new RuleBehavior();\r\n      }\r\n    }\r\n\r\n    // If suggestions exist AND space is pressed, accept the suggestion and do not process the keystroke.\r\n    // If a suggestion was just accepted AND backspace is pressed, revert the change and do not process the backspace.\r\n    // We check the first condition here, while the prediction UI handles the second through the try__() methods below.\r\n    if(this.languageProcessor.isActive) {\r\n      // The following code relies on JS's logical operator \"short-circuit\" properties to prevent unwanted triggering of the second condition.\r\n\r\n      // Can the suggestion UI revert a recent suggestion?  If so, do that and swallow the backspace.\r\n      if((keyEvent.kName == \"K_BKSP\" || keyEvent.Lcode == Codes.keyCodes[\"K_BKSP\"]) && this.languageProcessor.tryRevertSuggestion()) {\r\n        return new RuleBehavior();\r\n        // Can the suggestion UI accept an existing suggestion?  If so, do that and swallow the space character.\r\n      } else if((keyEvent.kName == \"K_SPACE\" || keyEvent.Lcode == Codes.keyCodes[\"K_SPACE\"]) && this.languageProcessor.tryAcceptSuggestion('space')) {\r\n        return new RuleBehavior();\r\n      }\r\n    }\r\n\r\n    // // ...end I3363 (Build 301)\r\n\r\n    // Create a \"mock\" backup of the current outputTarget in its pre-input state.\r\n    // Current, long-existing assumption - it's DOM-backed.\r\n    let preInputMock = Mock.from(outputTarget, true);\r\n\r\n    const startingLayerId = this.keyboardProcessor.layerId;\r\n\r\n    // We presently need the true keystroke to run on the FULL context.  That index is still\r\n    // needed for some indexing operations when comparing two different output targets.\r\n    let ruleBehavior = this.keyboardProcessor.processKeystroke(keyEvent, outputTarget);\r\n\r\n    // Swap layer as appropriate.\r\n    if(keyEvent.kNextLayer) {\r\n      this.keyboardProcessor.selectLayer(keyEvent);\r\n    }\r\n\r\n    // If it's a key that we 'optimize out' of our fat-finger correction algorithm,\r\n    // we MUST NOT trigger it for this keystroke.\r\n    let isOnlyLayerSwitchKey = Codes.isKnownOSKModifierKey(keyEvent.kName);\r\n\r\n    // Best-guess stopgap for possible custom modifier keys.\r\n    // If a key (1) does not affect the context and (2) shifts the active layer,\r\n    // we assume it's a modifier key.  (Touch keyboards may define custom modifier keys.)\r\n    //\r\n    // Note:  this will mean we won't generate alternates in the niche scenario where:\r\n    // 1.  Keypress does not alter the actual context\r\n    // 2.  It DOES emit a deadkey with an earlier processing rule.\r\n    // 3.  The FINAL processing rule does not match.\r\n    // 4.  The key ALSO signals a layer shift.\r\n    // If any of the four above conditions aren't met - no problem!\r\n    // So it's a pretty niche scenario.\r\n\r\n    if(isEmptyTransform(ruleBehavior?.transcription?.transform) && keyEvent.kNextLayer) {\r\n      isOnlyLayerSwitchKey = true;\r\n    }\r\n\r\n    const keepRuleBehavior = ruleBehavior != null;\r\n    // Should we swallow any further processing of keystroke events for this keydown-keypress sequence?\r\n    if(keepRuleBehavior) {\r\n      // alternates are our fat-finger alternate outputs. We don't build these for keys we detect as\r\n      // layer switch keys\r\n      let alternates = isOnlyLayerSwitchKey ? null : this.buildAlternates(ruleBehavior, keyEvent, preInputMock);\r\n\r\n      // Now that we've done all the keystroke processing needed, ensure any extra effects triggered\r\n      // by the actual keystroke occur.\r\n      ruleBehavior.finalize(this.keyboardProcessor, outputTarget, false);\r\n\r\n      // -- All keystroke (and 'alternate') processing is now complete.  Time to finalize everything! --\r\n\r\n      // Notify the ModelManager of new input - it's predictive text time!\r\n      if(alternates && alternates.length > 0) {\r\n        ruleBehavior.transcription.alternates = alternates;\r\n      }\r\n    } else {\r\n      // We need a dummy RuleBehavior for keys which have no output (e.g. Shift)\r\n      ruleBehavior = new RuleBehavior();\r\n      ruleBehavior.transcription = outputTarget.buildTranscriptionFrom(outputTarget, null, false);\r\n      ruleBehavior.triggersDefaultCommand = true;\r\n    }\r\n\r\n    // The keyboard may want to take an action after all other keystroke processing is\r\n    // finished, for example to switch layers. This action may not have any output\r\n    // but may change system store or variable store values. Given this, we don't need to\r\n    // save anything about the post behavior, after finalizing it\r\n\r\n    // We need to tell the keyboard if the layer has been changed, either by a keyboard rule itself,\r\n    // or by the touch layout 'nextlayer' control.\r\n    const hasLayerChanged = ruleBehavior.setStore[SystemStoreIDs.TSS_LAYER] || keyEvent.kNextLayer;\r\n    this.keyboardProcessor.newLayerStore.set(hasLayerChanged ? this.keyboardProcessor.layerId : '');\r\n    this.keyboardProcessor.oldLayerStore.set(hasLayerChanged ? startingLayerId : '');\r\n\r\n    let postRuleBehavior = this.keyboardProcessor.processPostKeystroke(this.contextDevice, outputTarget);\r\n    if(postRuleBehavior) {\r\n      postRuleBehavior.finalize(this.keyboardProcessor, outputTarget, true);\r\n    }\r\n\r\n    // Yes, even for ruleBehavior.triggersDefaultCommand.  Those tend to change the context.\r\n    ruleBehavior.predictionPromise = this.languageProcessor.predict(ruleBehavior.transcription, this.keyboardProcessor.layerId);\r\n\r\n    // Text did not change (thus, no text \"input\") if we tabbed or merely moved the caret.\r\n    if(!ruleBehavior.triggersDefaultCommand) {\r\n      // For DOM-aware targets, this will trigger a DOM event page designers may listen for.\r\n      outputTarget.doInputEvent();\r\n    }\r\n\r\n    return keepRuleBehavior ? ruleBehavior : null;\r\n  }\r\n\r\n  private buildAlternates(ruleBehavior: RuleBehavior, keyEvent: KeyEvent, preInputMock: Mock): Alternate[] {\r\n    let alternates: Alternate[];\r\n\r\n    // If we're performing a 'default command', it's not a standard 'typing' event - don't do fat-finger stuff.\r\n    // Also, don't do fat-finger stuff if predictive text isn't enabled.\r\n    if(this.languageProcessor.isActive && !ruleBehavior.triggersDefaultCommand) {\r\n      let keyDistribution = keyEvent.keyDistribution;\r\n\r\n      // We don't need to track absolute indexing during alternate-generation;\r\n      // only position-relative, so it's better to use a sliding window for context\r\n      // when making alternates.  (Slightly worse for short text, matters greatly\r\n      // for long text.)\r\n      let contextWindow = new ContextWindow(preInputMock, ContextWindow.ENGINE_RULE_WINDOW, this.keyboardProcessor.layerId);\r\n      let windowedMock = contextWindow.toMock();\r\n\r\n      // Note - we don't yet do fat-fingering with longpress keys.\r\n      if(this.languageProcessor.isActive && keyDistribution && keyEvent.kbdLayer) {\r\n        // Tracks a 'deadline' for fat-finger ops, just in case both context is long enough\r\n        // and device is slow enough that the calculation takes too long.\r\n        //\r\n        // Consider use of https://developer.mozilla.org/en-US/docs/Web/API/Performance/now instead?\r\n        // Would allow finer-tuned control.\r\n        let TIMEOUT_THRESHOLD: number = Number.MAX_VALUE;\r\n        let _globalThis = globalObject();\r\n        let timer: () => number;\r\n\r\n        // Available by default on `window` in browsers, but _not_ on `global` in Node,\r\n        // surprisingly.  Since we can't use code dependent on `require` statements\r\n        // at present, we have to condition upon it actually existing.\r\n        if(_globalThis['performance'] && _globalThis['performance']['now']) {\r\n          timer = function() {\r\n            return _globalThis['performance']['now']();\r\n          };\r\n\r\n          TIMEOUT_THRESHOLD = timer() + 16; // + 16ms.\r\n        } // else {\r\n          // We _could_ just use Date.now() as a backup... but that (probably) only matters\r\n          // when unit testing.  So... we actually don't _need_ time thresholding when in\r\n          // a Node environment.\r\n        // }\r\n\r\n        // Tracks a minimum probability for keystroke probability.  Anything less will not be\r\n        // included in alternate calculations.\r\n        //\r\n        // Seek to match SearchSpace.EDIT_DISTANCE_COST_SCALE from the predictive-text engine.\r\n        // Reasoning for the selected value may be seen there.  Short version - keystrokes\r\n        // that _appear_ very precise may otherwise not even consider directly-neighboring keys.\r\n        let KEYSTROKE_EPSILON = Math.exp(-5);\r\n\r\n        // Sort the distribution into probability-descending order.\r\n        keyDistribution.sort((a, b) => b.p - a.p);\r\n\r\n        let activeLayout = this.activeKeyboard.layout(keyEvent.device.formFactor);\r\n        alternates = [];\r\n\r\n        let totalMass = 0; // Tracks sum of non-error probabilities.\r\n        for(let pair of keyDistribution) {\r\n          if(pair.p < KEYSTROKE_EPSILON) {\r\n            totalMass += pair.p;\r\n            break;\r\n          } else if(timer && timer() >= TIMEOUT_THRESHOLD) {\r\n            // Note:  it's always possible that the thread _executing_ our JS\r\n            // got paused by the OS, even if JS itself is single-threaded.\r\n            //\r\n            // The case where `alternates` is initialized (line 167) but empty\r\n            // (because of net-zero loop iterations) MUST be handled.\r\n            break;\r\n          }\r\n\r\n          let mock = Mock.from(windowedMock, false);\r\n\r\n          let altKey = activeLayout.getLayer(keyEvent.kbdLayer).getKey(pair.keyId);\r\n          if(!altKey) {\r\n            console.warn(\"Potential fat-finger key could not be found in layer!\");\r\n            continue;\r\n          }\r\n\r\n          let altEvent = this.keyboardProcessor.activeKeyboard.constructKeyEvent(altKey, keyEvent.device, this.keyboardProcessor.stateKeys);\r\n          let alternateBehavior = this.keyboardProcessor.processKeystroke(altEvent, mock);\r\n\r\n          // If alternateBehavior.beep == true, ignore it.  It's a disallowed key sequence,\r\n          // so we expect users to never intend their use.\r\n          //\r\n          // Also possible that this set of conditions fail for all evaluated alternates.\r\n          if(alternateBehavior && !alternateBehavior.beep && pair.p > 0) {\r\n            let transform: Transform = alternateBehavior.transcription.transform;\r\n\r\n            // Ensure that the alternate's token id matches that of the current keystroke, as we only\r\n            // record the matched rule's context (since they match)\r\n            transform.id = ruleBehavior.transcription.token;\r\n            alternates.push({sample: transform, 'p': pair.p});\r\n            totalMass += pair.p;\r\n          }\r\n        }\r\n\r\n        // Renormalizes the distribution, as any error (beep) results\r\n        // will result in a distribution that doesn't sum to 1 otherwise.\r\n        // All `.p` values are strictly positive, so totalMass is\r\n        // guaranteed to be > 0 if the array has entries.\r\n        alternates.forEach(function(alt) {\r\n          alt.p /= totalMass;\r\n        });\r\n      }\r\n    }\r\n    return alternates;\r\n  }\r\n\r\n  public resetContext(outputTarget?: OutputTarget) {\r\n    // Also handles new-context events, which may modify the layer\r\n    this.keyboardProcessor.resetContext(outputTarget);\r\n    // With the layer now set, we trigger new predictions.\r\n    this.languageProcessor.invalidateContext(outputTarget, this.keyboardProcessor.layerId);\r\n  }\r\n}",
    "import EventEmitter from \"eventemitter3\";\r\nimport type LanguageProcessor from \"./languageProcessor.js\";\r\nimport { type ReadySuggestions, type InvalidateSourceEnum, StateChangeEnum, StateChangeHandler } from './languageProcessor.js';\r\nimport { type KeyboardProcessor, type OutputTarget } from \"@keymanapp/keyboard-processor\";\r\n\r\ninterface PredictionContextEventMap {\r\n  update: (suggestions: Suggestion[]) => void;\r\n}\r\n\r\n/**\r\n * Maintains predictive-text state information corresponding to the current context.\r\n */\r\nexport default class PredictionContext extends EventEmitter<PredictionContextEventMap> {\r\n  // Historical note:  before 17.0, this code was intertwined with /web/source/osk/banner.ts's\r\n  // SuggestionBanner class.  This class serves as the main implementation of the banner's core logic.\r\n\r\n  // Designed for use with auto-correct behavior\r\n  private selected: Suggestion;\r\n\r\n  private initNewContext: boolean = true;\r\n\r\n  private _currentSuggestions: Suggestion[] = [];\r\n  private keepSuggestion: Keep;\r\n  private revertSuggestion: Reversion;\r\n\r\n  private recentAccept: boolean = false;\r\n  private revertAcceptancePromise: Promise<Reversion>;\r\n\r\n  private swallowPrediction: boolean = false;\r\n\r\n  private doRevert: boolean = false;\r\n  private recentRevert: boolean = false;\r\n\r\n  private langProcessor: LanguageProcessor;\r\n  private kbdProcessor: KeyboardProcessor;\r\n\r\n  /**\r\n   * Represents the active context used when requesting and applying predictive-text operations.\r\n   */\r\n  private _currentTarget: OutputTarget;\r\n\r\n  public get currentTarget(): OutputTarget {\r\n    return this._currentTarget;\r\n  }\r\n\r\n  public setCurrentTarget(target: OutputTarget): Promise<Suggestion[]> {\r\n    const originalTarget = this._currentTarget;\r\n    this._currentTarget = target;\r\n\r\n    if(originalTarget != target) {\r\n      // Note:  should be triggered after the corresponding new-context event rule has been processed,\r\n      // as that may affect the value of layerId here.\r\n      return this.resetContext();\r\n    } else {\r\n      return Promise.resolve([]);\r\n    }\r\n  }\r\n\r\n  private readonly suggestionApplier: (suggestion: Suggestion) => Promise<Reversion>;\r\n  private readonly suggestionReverter: (reversion: Reversion) => void;\r\n\r\n  /**\r\n   * Handler for post-processing once a suggestion has been applied: calls\r\n   * into the active keyboard's `begin postKeystroke` entry point.\r\n   *\r\n   * Called after the suggestion is applied but _before_ new predictions are\r\n   * requested based on the resulting context.\r\n   */\r\n  private readonly postApplicationHandler: () => void;\r\n\r\n  public constructor(langProcessor: LanguageProcessor, kbdProcessor: KeyboardProcessor) {\r\n    super();\r\n\r\n    this.langProcessor = langProcessor;\r\n    this.kbdProcessor = kbdProcessor;\r\n\r\n    const validSuggestionState: () => boolean = () =>\r\n      this.currentTarget && langProcessor.state == 'configured';\r\n\r\n    this.suggestionApplier = (suggestion) => {\r\n      if(validSuggestionState()) {\r\n        return langProcessor.applySuggestion(suggestion, this.currentTarget, () => kbdProcessor.layerId);\r\n      }\r\n    }\r\n\r\n    this.suggestionReverter = (reversion) => {\r\n      if(validSuggestionState()) {\r\n        langProcessor.applyReversion(reversion, this.currentTarget);\r\n      }\r\n    }\r\n\r\n    // As it's called synchronously via event-callback during `this.suggestionApplier`,\r\n    // `this.currentTarget` is guaranteed to remain unchanged.\r\n    this.postApplicationHandler = () => {\r\n      // Tell the keyboard that the current layer has not changed\r\n      kbdProcessor.newLayerStore.set('');\r\n      kbdProcessor.oldLayerStore.set('');\r\n      // Call the keyboard's entry point.\r\n      kbdProcessor.processPostKeystroke(kbdProcessor.contextDevice, this.currentTarget)\r\n        // If we have a RuleBehavior as a result, run it on the target. This should\r\n        // only change system store and variable store values.\r\n        ?.finalize(kbdProcessor, this.currentTarget, true);\r\n    };\r\n\r\n    this.connect();\r\n  }\r\n\r\n  private connect() {\r\n    this.langProcessor.addListener('invalidatesuggestions', this.invalidateSuggestions);\r\n    this.langProcessor.addListener('suggestionsready', this.updateSuggestions);\r\n    this.langProcessor.addListener('tryaccept', this.doTryAccept);\r\n    this.langProcessor.addListener('tryrevert', this.doTryRevert);\r\n    this.langProcessor.addListener('statechange', this.onModelStateChange);\r\n\r\n    this.langProcessor.addListener('suggestionapplied', this.postApplicationHandler);\r\n  }\r\n\r\n  public disconnect() {\r\n    this.langProcessor.removeListener('invalidatesuggestions', this.invalidateSuggestions);\r\n    this.langProcessor.removeListener('suggestionsready', this.updateSuggestions);\r\n    this.langProcessor.removeListener('tryaccept', this.doTryAccept);\r\n    this.langProcessor.removeListener('tryrevert', this.doTryRevert);\r\n    this.langProcessor.removeListener('statechange', this.onModelStateChange);\r\n\r\n    this.langProcessor.removeListener('suggestionapplied', this.postApplicationHandler);\r\n    this.clearSuggestions();\r\n  }\r\n\r\n  public get currentSuggestions(): Suggestion[] {\r\n    let suggestions = [];\r\n    // Insert 'current text' if/when valid as the leading option.\r\n    // Since we don't yet do auto-corrections, we only show 'keep' whenever it's\r\n    // a valid word (according to the model).\r\n\r\n    if(this.activateKeep() && this.keepSuggestion && this.keepSuggestion.matchesModel) {\r\n      suggestions.push(this.keepSuggestion);\r\n    } else if(this.doRevert) {\r\n      suggestions.push(this.revertSuggestion);\r\n    }\r\n\r\n    return suggestions.concat(this._currentSuggestions);\r\n  }\r\n\r\n  /**\r\n   * Function apply\r\n   * Description  Applies the predictive `Suggestion` represented by this `BannerSuggestion`.\r\n   */\r\n  private acceptInternal(suggestion: Suggestion): Promise<Reversion> {\r\n    if(!suggestion) {\r\n      return null;\r\n    }\r\n\r\n    // Should be safe to convert into an event handled externally.\r\n    // layerID can be obtained by whoever/whatever holds the InputProcessor instance.\r\n    if(suggestion.tag == 'revert') {\r\n      this.suggestionReverter(suggestion as Reversion);\r\n      return null;\r\n    } else {\r\n      return this.suggestionApplier(suggestion);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies predictive-text suggestions and post-acceptance reversions to the current\r\n   * prediction context.\r\n   *\r\n   * Note that both cases will additionally trigger a new asynchronous `predict` operation,\r\n   * though no corresponding Promise is returned by this function.  As such, the current\r\n   * suggestions should be considered outdated after calling this method, pending replacement\r\n   * upon the completed async `predict`.\r\n   *\r\n   * @param suggestion Either a `Suggestion` or `Reversion`.\r\n   * @returns if `suggestion` is a `Suggestion`, will return a `Promise<Reversion>`; else, `null`.\r\n   */\r\n  public accept(suggestion: Suggestion): Promise<Reversion> | null {\r\n    let _this = this;\r\n\r\n    // Selecting a suggestion or a reversion should both clear selection\r\n    // and clear the reversion-displaying state of the banner.\r\n    this.selected = null;\r\n    this.doRevert = false;\r\n\r\n    this.revertAcceptancePromise = this.acceptInternal(suggestion);\r\n    if(!this.revertAcceptancePromise) {\r\n      // We get here either if suggestion acceptance fails or if it was a reversion.\r\n      if(suggestion && suggestion.tag == 'revert') {\r\n        // Reversion state management\r\n        this.recentAccept = false;\r\n        this.recentRevert = true;\r\n      }\r\n      return null;\r\n    }\r\n\r\n    this.revertAcceptancePromise.then(function(suggestion) {\r\n      // Always null-check!\r\n      if(suggestion) {\r\n        _this.revertSuggestion = suggestion;\r\n      }\r\n    });\r\n\r\n    this.recentAccept = true;\r\n    this.recentRevert = false;\r\n\r\n    this.swallowPrediction = true;\r\n\r\n    return this.revertAcceptancePromise;\r\n  }\r\n\r\n  private showRevert() {\r\n    // Construct a 'revert suggestion' to facilitate a reversion UI component.\r\n    this.doRevert = true;\r\n    this.sendUpdateEvent();\r\n  }\r\n\r\n  /**\r\n   * Receives messages from the keyboard that the 'accept' keystroke has been entered.\r\n   * Should return 'false' if the current state allows accepting a suggestion and act accordingly.\r\n   * Otherwise, return true.\r\n   */\r\n  private doTryAccept = (source: string /*, returnObj: {shouldSwallow: boolean}*/): void => {\r\n    //let keyman = com.keyman.singleton;\r\n\r\n    if(!this.recentAccept && this.selected) {\r\n      this.accept(this.selected);\r\n      // returnObj.shouldSwallow = true;\r\n    } else if(this.recentAccept && source == 'space') {\r\n      this.recentAccept = false;\r\n      // // If the model doesn't insert wordbreaks, don't swallow the space.  If it does,\r\n      // // we consider that insertion to be the results of the first post-accept space.\r\n      // returnObj.shouldSwallow = !!keyman.core.languageProcessor.wordbreaksAfterSuggestions; // can be handed outside\r\n    } else {\r\n      // returnObj.shouldSwallow = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Receives messages from the keyboard that the 'revert' keystroke has been entered.\r\n   * Should return 'false' if the current state allows reverting a recently-applied suggestion and act accordingly.\r\n   * Otherwise, return true.\r\n   */\r\n  private doTryRevert = (/*returnObj: {shouldSwallow: boolean}*/): boolean => {\r\n    // Has the revert keystroke (BKSP) already been sent once since the last accept?\r\n    if(this.doRevert) {\r\n      // If so, clear the 'revert' option and start doing normal predictions again.\r\n      this.doRevert = false;\r\n      this.recentAccept = false;\r\n      // Otherwise, did we just accept something before the revert signal was received?\r\n    } else if(this.recentAccept) {\r\n      this.showRevert();\r\n      this.swallowPrediction = true;\r\n    }\r\n\r\n    // // We don't yet actually do key-based reversions.\r\n    // returnObj.shouldSwallow = false;\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Function invalidateSuggestions\r\n   * Scope        Public\r\n   * Description  Clears the suggestions in the suggestion banner\r\n   */\r\n  private invalidateSuggestions = (source: InvalidateSourceEnum): void => {\r\n    // By default, we assume that the context is the same until we notice otherwise.\r\n    this.initNewContext = false;\r\n\r\n    if(!this.swallowPrediction || source == 'context') {\r\n      this.recentAccept = false;\r\n      this.doRevert = false;\r\n      this.recentRevert = false;\r\n\r\n      if(source == 'context') {\r\n        this.swallowPrediction = false;\r\n        this.initNewContext = true;\r\n      }\r\n    }\r\n\r\n    // Not checking this can result in a perceptible 'flash' of sorts due to the suggestion-update delay.\r\n    if(source != 'new') {\r\n      this.clearSuggestions();\r\n      // this.options.forEach((option: BannerSuggestion) => {\r\n      //   option.update(null);\r\n      // });\r\n    }\r\n  }\r\n\r\n  private clearSuggestions() {\r\n    this.updateSuggestions({\r\n      suggestions: [],\r\n      transcriptionID: 0\r\n    });\r\n  }\r\n\r\n  private activateKeep(): boolean {\r\n    return !this.recentAccept && !this.recentRevert && !this.initNewContext;\r\n  }\r\n\r\n  /**\r\n   * Function updateSuggestions\r\n   * Scope       Public\r\n   * @param {Suggestion[]}  suggestions   Array of suggestions from the lexical model.\r\n   * Description    Update the displayed suggestions in the SuggestionBanner\r\n   */\r\n  private updateSuggestions = (prediction: ReadySuggestions): void => {\r\n    let suggestions = prediction.suggestions;\r\n\r\n    this._currentSuggestions = suggestions;\r\n\r\n    // Do we have a keep suggestion?  If so, remove it from the list so that we can control its display position\r\n    // and prevent it from being hidden after reversion operations.\r\n    this.keepSuggestion = null;\r\n    for(let s of suggestions) {\r\n      if(s.tag == 'keep') {\r\n        this.keepSuggestion = s as Keep;\r\n      }\r\n    }\r\n\r\n    if(this.keepSuggestion) {\r\n      this._currentSuggestions.splice(this._currentSuggestions.indexOf(this.keepSuggestion), 1);\r\n    }\r\n\r\n    // If we've gotten an update request like this, it's almost always user-triggered and means the context has shifted.\r\n    if(!this.swallowPrediction) {\r\n      this.recentAccept = false;\r\n      this.doRevert = false;\r\n      this.recentRevert = false;\r\n    } else { // This prediction was triggered by a recent 'accept.'  Now that it's fulfilled, we clear the flag.\r\n      this.swallowPrediction = false;\r\n    }\r\n\r\n    // The rest is the same, whether from input or from \"self-updating\" after a reversion to provide new suggestions.\r\n    this.sendUpdateEvent();\r\n  }\r\n\r\n  public sendUpdateEvent() {\r\n    this.emit('update', this.currentSuggestions);\r\n  }\r\n\r\n  public resetContext(): Promise<Suggestion[]> {\r\n    const target = this.currentTarget;\r\n\r\n    if(target) {\r\n      // Note:  should be triggered after the corresponding new-context event rule has been processed,\r\n      // as that may affect the value of layerId here.\r\n      return this.langProcessor.invalidateContext(target, this.kbdProcessor.layerId);\r\n    } else {\r\n      return Promise.resolve([]);\r\n    }\r\n  }\r\n\r\n  private onModelStateChange: StateChangeHandler = (state) => {\r\n    // Either way, the model has changed; either state marks the completion of such a transition.\r\n    // The 'active' state displays the banner while a model loads... but its predictions are\r\n    // only possible once fully 'configured'.  They may appear to 'blink on' after a small delay\r\n    // as a result.\r\n    if(state == 'configured' || state == 'inactive') {\r\n      this.resetContext();\r\n    }\r\n  }\r\n}",
    "class DomEventTracking {\r\n  Pelem: EventTarget;\r\n  Peventname: string;\r\n  Phandler: (Object) => boolean;\r\n  PuseCapture?: boolean\r\n\r\n  constructor(Pelem: EventTarget, Peventname: string, Phandler: (Object) => boolean, PuseCapture?: boolean) {\r\n    this.Pelem = Pelem;\r\n    this.Peventname = Peventname.toLowerCase();\r\n    this.Phandler = Phandler;\r\n    this.PuseCapture = PuseCapture;\r\n  }\r\n\r\n  equals(other: DomEventTracking): boolean {\r\n    return this.Pelem == other.Pelem && this.Peventname == other.Peventname &&\r\n      this.Phandler == other.Phandler && this.PuseCapture == other.PuseCapture;\r\n  }\r\n};\r\n\r\n/**\r\n * Facilitates adding and removing event listeners to and from DOM elements in a manner\r\n * that allows widespread removal/cleanup of the listeners at a future time if and when needed.\r\n *\r\n * Said \"widespread removal\" helps to prevent separate instances of KeymanWeb from stomping on\r\n * each other during unit tests.\r\n */\r\nexport class DomEventTracker {\r\n  private domEvents: DomEventTracking[] = [];\r\n\r\n  /**\r\n   * Function     attachDOMEvent: Note for most browsers, adds an event to a chain, doesn't stop existing events\r\n   * Scope        Public\r\n   * @param       {Object}    Pelem       Element (or IFrame-internal Document) to which event is being attached\r\n   * @param       {string}    Peventname  Name of event without 'on' prefix\r\n   * @param       {function(Object)}  Phandler    Event handler for event\r\n   * @param       {boolean=}  PuseCapture True only if event to be handled on way to target element\r\n   * Description  Attaches event handler to element DOM event\r\n   */\r\n  attachDOMEvent<K extends keyof WindowEventMap>(\r\n    Pelem: Window,\r\n    Peventname: K,\r\n    Phandler: (ev: WindowEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  attachDOMEvent<K extends keyof DocumentEventMap>(\r\n    Pelem: Document,\r\n    Peventname: K,\r\n    Phandler: (ev: DocumentEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  attachDOMEvent<K extends keyof HTMLElementEventMap>(\r\n    Pelem: HTMLElement,\r\n    Peventname: K,\r\n    Phandler: (ev: HTMLElementEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  attachDOMEvent(Pelem: EventTarget, Peventname: string, Phandler: (Object) => boolean, PuseCapture?: boolean): void {\r\n    // @ts-ignore // Since the trickery unfortunately don't also clear things up for anything we call within.\r\n    // It's possible to fix, but that gets way more complex to spec out completely.\r\n    this.detachDOMEvent(Pelem, Peventname, Phandler, PuseCapture);\r\n    Pelem.addEventListener(Peventname, Phandler, PuseCapture ? true : false);\r\n\r\n    // Since we're attaching to the DOM, these events should be tracked for detachment during shutdown.\r\n    var event = new DomEventTracking(Pelem, Peventname, Phandler, PuseCapture);\r\n    this.domEvents.push(event);\r\n  }\r\n\r\n  /**\r\n   * Function     detachDOMEvent\r\n   * Scope        Public\r\n   * @param       {Object}    Pelem       Element from which event is being detached\r\n   * @param       {string}    Peventname  Name of event without 'on' prefix\r\n   * @param       {function(Object)}  Phandler    Event handler for event\r\n   * @param       {boolean=}  PuseCapture True if event was being handled on way to target element\r\n   * Description Detaches event handler from element [to prevent memory leaks]\r\n   */\r\n  detachDOMEvent<K extends keyof WindowEventMap>(\r\n    Pelem: Window,\r\n    Peventname: K,\r\n    Phandler: (ev: WindowEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  detachDOMEvent<K extends keyof DocumentEventMap>(\r\n    Pelem: Document,\r\n    Peventname: K,\r\n    Phandler: (ev: DocumentEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  detachDOMEvent<K extends keyof HTMLElementEventMap>(\r\n    Pelem: HTMLElement,\r\n    Peventname: K,\r\n    Phandler: (ev: HTMLElementEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  detachDOMEvent(Pelem: EventTarget, Peventname: string, Phandler: (Object) => boolean, PuseCapture?: boolean): void {\r\n    Pelem.removeEventListener(Peventname, Phandler, PuseCapture);\r\n\r\n    // Since we're detaching, we should drop the tracking data from the old event.\r\n    var event = new DomEventTracking(Pelem, Peventname, Phandler, PuseCapture);\r\n    for(var i = 0; i < this.domEvents.length; i++) {\r\n      if(this.domEvents[i].equals(event)) {\r\n        this.domEvents.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  shutdown() {\r\n    // Remove all events linking to elements of the original, unaltered page.\r\n    // This should sever any still-existing page ties to this instance of KMW,\r\n    // allowing browser GC to do its thing.\r\n    for(let event of this.domEvents) {\r\n      // @ts-ignore // since it's simpler this way and doesn't earn us much to re-check types.\r\n      this.detachDOMEvent(event.Pelem, event.Peventname, event.Phandler, event.PuseCapture);\r\n    }\r\n  }\r\n}",
    "import EventEmitter, { EventNames, EventListener } from \"eventemitter3\";\r\nimport { LegacyEventEmitter } from \"./legacyEventEmitter.js\";\r\n\r\ninterface EventMap<BaseEventMap extends Object> {\r\n  // Provides IntelliSense suggestions in conditionals based on the parameters!\r\n\r\n  /**\r\n   * Indicates that a listener for the named event has been registered for the\r\n   * EventEmitter being spied upon.\r\n   * @param eventName\r\n   */\r\n  listeneradded(eventName: EventNames<BaseEventMap>);\r\n\r\n  /**\r\n   * Indicates that a listener for the named event has been unregistered from the\r\n   * EventEmitter being spied upon.\r\n   * @param eventName\r\n   */\r\n  listenerremoved(eventName: EventNames<BaseEventMap>);\r\n}\r\n\r\ntype Emitter<BaseEventMap extends Object> = EventEmitter<BaseEventMap> | LegacyEventEmitter<BaseEventMap>;\r\n\r\n/**\r\n * A spy-object that wraps event-emitters in order to listen in on listener addition methods and\r\n * raise events when new listeners are attached.\r\n */\r\nexport class EmitterListenerSpy<BaseEventMap extends Object> extends EventEmitter<EventMap<BaseEventMap>> {\r\n  constructor(emitter: Emitter<BaseEventMap>) {\r\n    super();\r\n\r\n    if(emitter instanceof EventEmitter) {\r\n      emitter.on = this.listenerRegistrationSpy('listeneradded', emitter, emitter.on);\r\n      emitter.addListener = this.listenerRegistrationSpy('listeneradded', emitter, emitter.addListener);\r\n      emitter.off = this.listenerRegistrationSpy('listenerremoved', emitter, emitter.off);\r\n      emitter.removeListener = this.listenerRegistrationSpy('listenerremoved', emitter, emitter.off);\r\n    } else {\r\n      // TS gets really fussy about how the legacy event typing is a bit more\r\n      // restrictive (due to less-restricted event name types in EventEmitter)\r\n      // It's not worth the effort to make this 100% perfect at the moment.\r\n      //\r\n      // @ts-ignore\r\n      emitter.addEventListener = this.listenerRegistrationSpy('listeneradded', emitter, emitter.addEventListener);\r\n      // @ts-ignore\r\n      emitter.removeEventListener = this.listenerRegistrationSpy('listenerremoved', emitter, emitter.removeEventListener);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given an event emitter and one of its methods used to register or unregister associated events,\r\n   * this method will construct a replacement method that calls the original AND raises the specified\r\n   * corresponding listener event provided by this class afterward.  The replacement method\r\n   * should be assigned to the emitter afterward, overwriting the original version.\r\n   *\r\n   * Refer to https://stackoverflow.com/a/10057969.\r\n   */\r\n  private listenerRegistrationSpy(\r\n    spyEventName: EventNames<EventMap<BaseEventMap>>,\r\n    emitter: Emitter<BaseEventMap>,\r\n    method: (\r\n      eventName: EventNames<BaseEventMap>,\r\n      listener: EventListener<BaseEventMap, EventNames<BaseEventMap>>,\r\n    ) => any\r\n  ): ( // returns a method of the same signature as the original implementation.\r\n    eventName: EventNames<BaseEventMap>,\r\n    listener: EventListener<BaseEventMap, EventNames<BaseEventMap>>,\r\n  ) => any {\r\n    return (eventName, listener) => {\r\n      const retVal = method.apply(emitter, [eventName, listener]);\r\n      this.emit(spyEventName, eventName);\r\n      return retVal;\r\n    }\r\n  }\r\n}\r\n\r\n/**** A code block for verifying that typing, etc checks out: ****/\r\n\r\n// interface TestMap {\r\n//   'a': (str: string) => void;\r\n//   'b': (num: number, str: string) => void;\r\n// }\r\n\r\n// const emitter = new LegacyEventEmitter<TestMap>;  // or `new EventEmitter<TestMap>`.\r\n// const emitterSpy = new EmitterListenerSpy<TestMap>(emitter);\r\n// emitterSpy.on('listeneradded', (eventName) => {\r\n//   // eventName = 'c'; // will error; there is no event 'c' in the event map.\r\n//   if(eventName == 'a') {\r\n//     // stuff\r\n//   }\r\n// })",
    "// Most of the typing below is derived from that of EventEmitter, but customized for\r\n// modeling legacy KMW events.  Including the heavy typing gets us event Intellisense\r\n// and compile-time errors if and when types don't match expectations.\r\n\r\n/**\r\n * Can define the set of events as follows:\r\n * ```\r\n * interface Test extends EventMap {\r\n *   'event': (param: {'prop': any}) => boolean;\r\n * }\r\n * ```\r\n *\r\n * Each event may have either no parameters or a single parameter of type object.\r\n * The type definition of the parameter will be utilized by TS's type-inference engine\r\n * for type checking on handlers and for raising the event.\r\n *\r\n * Note: the `extends EventMap` part is actually important for TS type inference here.\r\n */\r\nexport type LegacyEventMap = object;\r\n\r\n/**\r\n * Matches the name of any single event defined within the specified event-map definition.\r\n */\r\nexport type EventNames<T extends LegacyEventMap> = Exclude<keyof T, number | symbol>;\r\n\r\n/**\r\n * Builds a type-array of the arguments for each named event, indexed by that name.\r\n */\r\ntype ArgumentMap<T extends LegacyEventMap> = {\r\n  [K in Exclude<keyof T, number | symbol>]: T[K] extends (arg: any) => boolean\r\n    ? Parameters<T[K]>[0]\r\n    : (\r\n      T[K] extends Function\r\n      ? never\r\n      : T[K]\r\n    );\r\n};\r\n\r\n/**\r\n * Provides the type signature of event listeners able to handle defined events.\r\n */\r\nexport type EventListener<\r\n    T extends LegacyEventMap,\r\n    K extends EventNames<T>\r\n  > = (       // argumentMap[eventName] - retrieves the specific parameter typing for the event.\r\n        args: ArgumentMap<T>[Extract<K, keyof T>]\r\n      ) => any;\r\n\r\n/**\r\n * Provides fairly strong typing for all legacy KMW events.  Note that all events\r\n * assume a handler receiving up to one object, though that object's properties will\r\n * vary from event to event.\r\n *\r\n * Note that the behavior differs from EventEmitter events on a few points:\r\n * 1. Event functions are expected to return a boolean value - generally, `true`.\r\n *    If 'false' or `undefined` is returned, no further listeners will receive the event.\r\n * 2. These events receive up to one parameter, always of an object type.\r\n * 3. These events proactively prevent accidental event-handler recursion.  Should an event's\r\n *    handler retrigger the event, the newly-triggered event will be prevented entirely.\r\n */\r\nexport class LegacyEventEmitter<EventTypes extends LegacyEventMap> {\r\n  // An object mapping event names to individual event lists.  Maps strings to arrays.\r\n  private events: { [name: string]: ((Object) => boolean)[];} = {};\r\n  private currentEvents: string[] = [];  // The event messaging call stack.\r\n\r\n  /**\r\n   * Function    addEventListener\r\n   * Scope       Private\r\n   * @param      {string}     event     name of event prefixed by module, e.g. osk.touchmove\r\n   * @param      {function(Object)}   func      event handler\r\n   * @return     {boolean}\r\n   * Description Add (or replace) an event listener for this component\r\n   */\r\n  addEventListener<T extends EventNames<EventTypes>> (\r\n    event: T,\r\n    func: EventListener<EventTypes, T>\r\n  ): boolean {\r\n    this._removeEventListener(event, func);\r\n    this.events[event].push(func);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Function    removeEventListener\r\n   * Scope       Private\r\n   * @param      {string}     event     name of event prefixed by module, e.g. osk.touchmove\r\n   * @param      {function(Object)}   func      event handler\r\n   * @return     {boolean}\r\n   * Description Remove the specified function from the listeners for this event\r\n   */\r\n  public removeEventListener<T extends EventNames<EventTypes>> (\r\n    event: T,\r\n    func: EventListener<EventTypes, T>\r\n  ): boolean {\r\n    return this._removeEventListener(event, func);\r\n  }\r\n\r\n  // Separate, in order to prevent `addEventListener` from sending 'listenerremoved' events with\r\n  // EmitterListenerSpy.\r\n  private _removeEventListener<T extends EventNames<EventTypes>> (\r\n    event: T,\r\n    func: EventListener<EventTypes, T>\r\n  ): boolean {\r\n    if(typeof this.events[event] == 'undefined') {\r\n      this.events[event] = [];\r\n    }\r\n\r\n    for(var i=0; i<this.events[event].length; i++) {\r\n      if(this.events[event][i] == func) {\r\n        this.events[event].splice(i, 1);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Function    callEvent\r\n   * Scope       Private\r\n   * @param      {string}     event     name of event prefixed by module, e.g. osk.touchmove\r\n   * @param      {Array}      params    parameter array for function\r\n   * @return     {boolean}    `true` only if all handlers return `true`, permitting further execution.\r\n   * Description Invoke an event using any function\r\n   */\r\n  callEvent<T extends EventNames<EventTypes>> (\r\n    event: T,\r\n    params: ArgumentMap<EventTypes>[T]\r\n  ): boolean {\r\n    if(typeof this.events[event] == 'undefined') {\r\n      return true;\r\n    }\r\n\r\n    if(this.currentEvents.indexOf(event) != -1) {\r\n      return false;  // Avoid event messaging recursion!\r\n    }\r\n\r\n    this.currentEvents.push(event);\r\n\r\n    for(var i=0; i<this.events[event].length; i++) {\r\n      var func=this.events[event][i] as EventListener<EventTypes, T>, result=false;\r\n      try {\r\n        result=func(params as any);\r\n      } catch(strExcept) {\r\n        console.error(strExcept);\r\n        result=false;\r\n      } //don't know whether to use true or false here\r\n      if(result === false) {\r\n        this.currentEvents.pop();\r\n        return false;\r\n      }\r\n    }\r\n    this.currentEvents.pop();\r\n    return true;\r\n  }\r\n\r\n  listenerCount<T extends EventNames<EventTypes>>(event: T) {\r\n    const listeners = this.events[event];\r\n    return listeners ? listeners.length : 0;\r\n  }\r\n\r\n  shutdown() {\r\n    // Remove all event-handler references rooted in KMW events.\r\n    this.events = {};\r\n  }\r\n}\r\n",
    "import { ManagedPromise } from '@keymanapp/keyboard-processor';\r\nimport CloudRequesterInterface from './cloud/requesterInterface.js';\r\nimport { CLOUD_MALFORMED_OBJECT_ERR, CLOUD_TIMEOUT_ERR, CLOUD_STUB_REGISTRATION_ERR } from './cloud/queryEngine.js';\r\n\r\nexport default class DOMCloudRequester implements CloudRequesterInterface {\r\n  private readonly fileLocal: boolean;\r\n\r\n  constructor(fileLocal: boolean = false) {\r\n    this.fileLocal = fileLocal;\r\n  }\r\n\r\n  request<T>(query: string) {\r\n    let promise = new ManagedPromise<T>();\r\n\r\n    // Set callback timer\r\n    const timeoutID = window.setTimeout(() => {\r\n      promise.reject(new Error(CLOUD_TIMEOUT_ERR));\r\n    }, 10000);\r\n\r\n    const tFlag='&timerid='+ timeoutID;\r\n    const fullRef = query + tFlag;\r\n\r\n    const Lscript: HTMLScriptElement = document.createElement('script');\r\n    Lscript.onload = (event: Event) => {\r\n      window.clearTimeout(timeoutID);\r\n\r\n      // This case should only happen if a returned, otherwise-valid keyboard\r\n      // script does not ever call `register`.  Also provides default handling\r\n      // should `register` fail to report results/failure correctly.\r\n      if(!promise.hasFinalized) {\r\n        promise.reject(new Error(CLOUD_STUB_REGISTRATION_ERR));\r\n      }\r\n    };\r\n\r\n    // Note:  at this time (24 May 2021), this is also happens for \"successful\"\r\n    //        API calls where there is no matching keyboard ID.\r\n    //\r\n    //        The returned 'error' JSON object is sent with an HTML error code (404)\r\n    //        and does not call `keyman.register`.  Even if it did the latter, the\r\n    //        404 code would likely prevent the returned script's call.\r\n    Lscript.onerror = (event: string | Event, source?: string,\r\n                        lineno?: number, colno?: number, error?: Error) => {\r\n      window.clearTimeout(timeoutID);\r\n\r\n      let msg = CLOUD_MALFORMED_OBJECT_ERR;\r\n      if(error) {\r\n        msg = msg + \": \" + error.message;\r\n      }\r\n\r\n      promise.reject(new Error(msg));\r\n    }\r\n\r\n    if(this.fileLocal) {\r\n      Lscript.src = query;\r\n    } else {\r\n      Lscript.src = fullRef;\r\n    }\r\n\r\n    try {\r\n      document.body.appendChild(Lscript);\r\n    } catch(ex) {\r\n      document.getElementsByTagName('head')[0].appendChild(Lscript);\r\n    }\r\n\r\n    promise.finally(() => {\r\n      clearTimeout(timeoutID);\r\n    });\r\n\r\n    return {\r\n      promise: promise,\r\n      queryId: timeoutID\r\n    };\r\n  }\r\n}",
    "import { type Keyboard, KeyboardKeymanGlobal, ProcessorInitOptions } from \"@keymanapp/keyboard-processor\";\r\nimport { DOMKeyboardLoader as KeyboardLoader } from \"@keymanapp/keyboard-processor/dom-keyboard-loader\";\r\nimport { InputProcessor, PredictionContext } from \"@keymanapp/input-processor\";\r\nimport { OSKView } from \"keyman/engine/osk\";\r\nimport { KeyboardRequisitioner, ModelCache, ModelSpec, toUnprefixedKeyboardId as unprefixed } from \"keyman/engine/package-cache\";\r\n\r\nimport { EngineConfiguration, InitOptionSpec } from \"./engineConfiguration.js\";\r\nimport KeyboardInterface from \"./keyboardInterface.js\";\r\nimport { ContextManagerBase } from \"./contextManagerBase.js\";\r\nimport { KeyEventHandler } from './keyEventSource.interface.js';\r\nimport HardKeyboardBase from \"./hardKeyboard.js\";\r\nimport { LegacyAPIEvents } from \"./legacyAPIEvents.js\";\r\nimport { EventNames, EventListener, LegacyEventEmitter } from \"keyman/engine/events\";\r\nimport DOMCloudRequester from \"keyman/engine/package-cache/dom-requester\";\r\nimport KEYMAN_VERSION from \"@keymanapp/keyman-version\";\r\n\r\n// From https://stackoverflow.com/a/69328045\r\ntype WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };\r\n// Sets two parts non-optional at this level, while they were at lower levels.\r\ntype ProcessorConfiguration = WithRequired<WithRequired<ProcessorInitOptions, 'keyboardInterface'>, 'defaultOutputRules'>;\r\n\r\nfunction determineBaseLayout(): string {\r\n  if(typeof(window['KeymanWeb_BaseLayout']) !== 'undefined') {\r\n    return window['KeymanWeb_BaseLayout'];\r\n  } else {\r\n    return 'us';\r\n  }\r\n}\r\n\r\nexport default class KeymanEngine<\r\n  Configuration extends EngineConfiguration,\r\n  ContextManager extends ContextManagerBase<any>,\r\n  HardKeyboard extends HardKeyboardBase\r\n> implements KeyboardKeymanGlobal {\r\n  readonly config: Configuration;\r\n  contextManager: ContextManager;\r\n  interface: KeyboardInterface<ContextManager>;\r\n  readonly core: InputProcessor;\r\n  keyboardRequisitioner: KeyboardRequisitioner;\r\n  modelCache: ModelCache;\r\n\r\n  protected legacyAPIEvents = new LegacyEventEmitter<LegacyAPIEvents>();\r\n  private _hardKeyboard: HardKeyboard;\r\n  private _osk: OSKView;\r\n\r\n  protected keyEventRefocus?: () => void;\r\n\r\n  private keyEventListener: KeyEventHandler = (event, callback) => {\r\n    const outputTarget = this.contextManager.activeTarget;\r\n\r\n    if(!this.contextManager.activeKeyboard || !outputTarget) {\r\n      if(callback) {\r\n        callback(null, null);\r\n      }\r\n    }\r\n\r\n    //... probably only applies for physical keystrokes.\r\n    if(!event.isSynthetic) {\r\n      if(this.osk?.vkbd?.keyPending) {\r\n        this.osk.vkbd.keyPending = null;\r\n      }\r\n    } else if(this.keyEventRefocus) { // && event.isSynthetic // as in, is from the OSK.\r\n      // Do anything needed to guarantee that the outputTarget stays active (`app/browser`: maintains focus).\r\n      // (Interaction with the OSK may have de-focused the element providing active context;\r\n      // we want to restore it in case the user swaps back to the hardware keyboard afterward.)\r\n      this.keyEventRefocus();\r\n    }\r\n\r\n    // Clear any cached codepoint data; we can rebuild it if it's unchanged.\r\n    outputTarget.invalidateSelection();\r\n    // Deadkey matching continues to be troublesome.\r\n    // Deleting matched deadkeys here seems to correct some of the issues.   (JD 6/6/14)\r\n    outputTarget.deadkeys().deleteMatched();      // Delete any matched deadkeys before continuing\r\n\r\n    const result = this.core.processKeyEvent(event, outputTarget);\r\n\r\n    if(result && result.transcription?.transform) {\r\n      this.config.onRuleFinalization(result, this.contextManager.activeTarget);\r\n    }\r\n\r\n    if(callback) {\r\n      callback(result, null);\r\n    }\r\n\r\n    // No try-catch here because we don't want to mask any errors that occur during keystroke\r\n    // processing - silent failures are far harder to diagnose.\r\n  };\r\n\r\n  /**\r\n   * @param worker  A configured WebWorker to serve as the predictive-text engine's main thread.\r\n   *                Available in the following variants:\r\n   *                - sourcemapped, unminified (debug)\r\n   *                - non-sourcemapped + minified (release)\r\n   * @param config\r\n   * @param contextManager\r\n   * @param processorConfigInitializer A one-time use closure used to initialize certain critical components reliant\r\n   *                                   upon the class instance, configured by the derived class, but needed during\r\n   *                                   the superclass constructor.\r\n   */\r\n  constructor(\r\n    worker: Worker,\r\n    config: Configuration,\r\n    contextManager: ContextManager,\r\n    processorConfigInitializer: (engine: KeymanEngine<Configuration, ContextManager, HardKeyboard>) => ProcessorConfiguration\r\n  ) {\r\n    this.config = config;\r\n    this.contextManager = contextManager;\r\n\r\n    const processorConfiguration = processorConfigInitializer(this);\r\n    processorConfiguration.baseLayout = determineBaseLayout();\r\n    this.interface = processorConfiguration.keyboardInterface as KeyboardInterface<ContextManager>;\r\n    this.core = new InputProcessor(config.hostDevice, worker, processorConfiguration);\r\n\r\n    this.core.languageProcessor.on('statechange', (state) => {\r\n      // The banner controller cannot directly trigger a layout-refresh at this time,\r\n      // so we handle that here.\r\n      this.osk?.bannerController.selectBanner(state);\r\n      this.osk?.refreshLayout();\r\n    });\r\n\r\n    // The OSK does not possess a direct connection to the KeyboardProcessor's state-key\r\n    // management object; this event + handler allow us to keep the OSK's related states\r\n    // in sync.\r\n    this.core.keyboardProcessor.on('statekeychange', (stateKeys) => {\r\n      this.osk?.vkbd?.updateStateKeys(stateKeys);\r\n    })\r\n\r\n    this.contextManager.on('beforekeyboardchange', (metadata) => {\r\n      this.legacyAPIEvents.callEvent('beforekeyboardchange', {\r\n        internalName: metadata?.id,\r\n        languageCode: metadata?.langId\r\n      });\r\n    });\r\n\r\n    this.contextManager.on('keyboardchange', (kbd) => {\r\n      this.refreshModel();\r\n      this.core.activeKeyboard = kbd?.keyboard;\r\n\r\n      this.legacyAPIEvents.callEvent('keyboardchange', {\r\n        internalName: kbd?.metadata.id ?? '',\r\n        languageCode: kbd?.metadata.langId ?? ''\r\n      });\r\n\r\n      // Hide OSK and do not update keyboard list if using internal keyboard (desktops).\r\n      // Condition will not be met for touch form-factors; they force selection of a\r\n      // default keyboard.\r\n      if(!kbd) {\r\n        this.osk.startHide(false);\r\n      }\r\n\r\n      if(this.osk) {\r\n        this.osk.setNeedsLayout();\r\n        this.osk.activeKeyboard = kbd;\r\n        this.osk.present();\r\n      }\r\n    });\r\n\r\n    this.contextManager.on('keyboardasyncload', (metadata) => {\r\n      /* Original implementation pre-modularization:\r\n        *\r\n        * > Force OSK display for CJK keyboards (keyboards using a pick list)\r\n        *\r\n        * A matching subcondition in the block below will ensure that the OSK activates pre-load\r\n        * for CJK keyboards.  Yes, even before a CJK picker could ever show.  We should be fine\r\n        * without the CJK check so long as a picker keyboard's OSK is kept activated post-load,\r\n        * when the picker actually needs to be kept persistently-active.\r\n        * `metadata` would be relevant a the CJK-check, which was based on language codes.\r\n        *\r\n        * Of course, as mobile devices don't have guaranteed physical keyboards... we need to\r\n        * keep the OSK visible for them, hence the actual block below.\r\n        */\r\n      if(this.config.hostDevice.touchable && this.osk?.activationModel) {\r\n        this.osk.activationModel.enabled = true;\r\n        // Also note:  the OSKView.mayDisable method returns false when hostDevice.touchable = false.\r\n        // The .startHide() call below will check that method before actually starting an OSK hide.\r\n      }\r\n\r\n      // Always (temporarily) hide the OSK when loading a new keyboard, to ensure\r\n      // that a failure to load doesn't leave the current OSK displayed\r\n      this.osk?.startHide(false);\r\n    });\r\n  }\r\n\r\n  public async init(optionSpec: Required<InitOptionSpec>){\r\n    // There may be some valid mutations possible even on repeated calls?\r\n    // The original seems to allow it.\r\n\r\n    const config = this.config;\r\n    if(config.deferForInitialization.hasFinalized) {\r\n      // abort!  Maybe throw an error, too.\r\n      return Promise.resolve();\r\n    }\r\n\r\n    config.initialize(optionSpec);\r\n\r\n    // Since we're not sandboxing keyboard loads yet, we just use `window` as the jsGlobal object.\r\n    // All components initialized below require a properly-configured `config.paths` or similar.\r\n    const keyboardLoader = new KeyboardLoader(this.interface, config.applyCacheBusting);\r\n    this.keyboardRequisitioner = new KeyboardRequisitioner(keyboardLoader, new DOMCloudRequester(), this.config.paths);\r\n    this.modelCache = new ModelCache();\r\n    const kbdCache = this.keyboardRequisitioner.cache;\r\n\r\n    this.contextManager.configure({\r\n      resetContext: (target) => {\r\n        this.core.resetContext(target);\r\n      },\r\n      predictionContext: new PredictionContext(this.core.languageProcessor, this.core.keyboardProcessor),\r\n      keyboardCache: this.keyboardRequisitioner.cache\r\n    });\r\n\r\n    // #region Event handler wiring\r\n    this.config.on('spacebartext', () => {\r\n      // On change of spacebar-text mode, we currently need a layout refresh to update the\r\n      // spacebar's text.\r\n      this.osk?.refreshLayout();\r\n    });\r\n\r\n    kbdCache.on('stubadded', (stub) => {\r\n      let eventRaiser = () => {\r\n        // The corresponding event is needed in order to update UI modules as new keyboard stubs \"come online\".\r\n        this.legacyAPIEvents.callEvent('keyboardregistered', {\r\n          internalName: stub.KI,\r\n          language: stub.KL,\r\n          keyboardName: stub.KN,\r\n          languageCode: stub.KLC,\r\n          package: stub.KP\r\n        });\r\n\r\n        // If this is the first stub loaded, set it as active.\r\n        if(this.config.activateFirstKeyboard && this.keyboardRequisitioner.cache.defaultStub == stub) {\r\n          // Note:  leaving this out is super-useful for debugging issues that occur when no keyboard is active.\r\n          this.contextManager.activateKeyboard(stub.id, stub.langId, true);\r\n        }\r\n      }\r\n\r\n      if(this.config.deferForInitialization.hasFinalized) {\r\n        eventRaiser();\r\n      } else {\r\n        this.config.deferForInitialization.then(eventRaiser);\r\n      }\r\n    });\r\n\r\n    kbdCache.on('keyboardadded', (keyboard) => {\r\n      let eventRaiser = () => {\r\n        // Execute any external (UI) code needed after loading keyboard\r\n        this.legacyAPIEvents.callEvent('keyboardloaded', {\r\n          keyboardName: keyboard.id\r\n        });\r\n      }\r\n\r\n      if(this.config.deferForInitialization.hasFinalized) {\r\n        eventRaiser();\r\n      } else {\r\n        this.config.deferForInitialization.then(eventRaiser);\r\n      }\r\n    });\r\n\r\n    this.keyboardRequisitioner.cache.on('keyboardadded', (keyboard) => {\r\n      this.legacyAPIEvents.callEvent('keyboardloaded', { keyboardName: keyboard.id });\r\n    });\r\n    //\r\n    // #endregion\r\n  }\r\n\r\n  /**\r\n   * Public API:  Denotes the 'patch' component of the version of the current engine.\r\n   *\r\n   * https://help.keyman.com/developer/engine/web/current-version/reference/core/build\r\n   */\r\n  public get build(): number {\r\n    return Number.parseInt(KEYMAN_VERSION.VERSION_PATCH, 10);\r\n  }\r\n\r\n  /**\r\n   * Public API:  Denotes the major & minor components of the version of the current engine.\r\n   *\r\n   * https://help.keyman.com/developer/engine/web/current-version/reference/core/version\r\n   */\r\n  public get version(): string {\r\n    return KEYMAN_VERSION.VERSION_RELEASE;\r\n  }\r\n\r\n  public get hardKeyboard(): HardKeyboard {\r\n    return this._hardKeyboard;\r\n  }\r\n\r\n  protected set hardKeyboard(keyboard: HardKeyboard) {\r\n    if(this._hardKeyboard) {\r\n      this._hardKeyboard.off('keyevent', this.keyEventListener);\r\n    }\r\n    this._hardKeyboard = keyboard;\r\n    keyboard.on('keyevent', this.keyEventListener);\r\n  }\r\n\r\n  public get osk(): OSKView {\r\n    return this._osk;\r\n  }\r\n\r\n  public set osk(value: OSKView) {\r\n    if(this._osk) {\r\n      this._osk.off('keyevent', this.keyEventListener);\r\n      this.core.keyboardProcessor.layerStore.handler = this.osk.layerChangeHandler;\r\n    }\r\n    this._osk = value;\r\n    if(value) {\r\n      value.activeKeyboard = this.contextManager.activeKeyboard;\r\n      value.on('keyevent', this.keyEventListener);\r\n      this.core.keyboardProcessor.layerStore.handler = value.layerChangeHandler;\r\n    }\r\n  }\r\n\r\n  public getDebugInfo(): Record<string, any> {\r\n    const activeKbd = this.contextManager?.activeKeyboard;\r\n\r\n    const report = {\r\n      configReport: this.config?.debugReport(),\r\n      keyboard: {\r\n        id: unprefixed(activeKbd?.metadata?.id ?? ''),\r\n        langId: activeKbd?.metadata?.langId || '',\r\n        version: activeKbd?.keyboard?.version ?? ''\r\n      },\r\n      model: {\r\n        id: this.core?.activeModel?.id || ''\r\n      },\r\n      osk: {\r\n        banner: this.osk?.bannerController?.activeType ?? '',\r\n        layer: this.osk?.vkbd?.layerId || ''\r\n      }\r\n    };\r\n\r\n    return report;\r\n  }\r\n\r\n  // Returned Promise:  gives the model-spec object.  Only resolves when any model loading or unloading\r\n  // is fully complete.\r\n  private refreshModel(): Promise<ModelSpec> {\r\n    const kbd = this.contextManager.activeKeyboard;\r\n    const model = this.modelCache.modelForLanguage(kbd?.metadata.langId);\r\n\r\n    if(this.core.activeModel != model) {\r\n      if(this.core.activeModel) {\r\n        this.core.languageProcessor.unloadModel();\r\n      }\r\n\r\n      // Semi-hacky management of banner display state.\r\n      if(model) {\r\n        return this.core.languageProcessor.loadModel(model).then(() => {\r\n          return model;\r\n        });\r\n      }\r\n    }\r\n\r\n    return Promise.resolve(model);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to Keyman Engine events documented at\r\n   * https://help.keyman.com/developer/engine/web/current-version/reference/events.  Note that any OSK-related\r\n   * events should instead register on `keyman.osk.addEventListener`, not on this method.\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/addEventListener\r\n   */\r\n  public addEventListener<Name extends EventNames<LegacyAPIEvents>>(event: Name, listener: EventListener<LegacyAPIEvents, Name>) {\r\n    this.legacyAPIEvents.addEventListener(event, listener);\r\n  }\r\n\r\n  /**\r\n   * Public API: Unsubscribe from Keyman Engine events documented at\r\n   * https://help.keyman.com/developer/engine/web/current-version/reference/events.\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/removeEventListener\r\n   */\r\n  public removeEventListener<Name extends EventNames<LegacyAPIEvents>>(event: Name, listener: EventListener<LegacyAPIEvents, Name>) {\r\n    this.legacyAPIEvents.removeEventListener(event, listener);\r\n  }\r\n\r\n  shutdown() {\r\n    this.legacyAPIEvents.shutdown();\r\n    this.osk?.shutdown();\r\n  }\r\n\r\n  // API methods\r\n\r\n  // 17.0: new!  Only used by apps utilizing app/webview and one app/browser test page.\r\n  // Is not part of our 'published' API.\r\n\r\n  /**\r\n   * Registers the specified lexical model within Keyman Engine.  If a keyboard with a\r\n   * matching language code is currently activated, it will also activate the model.\r\n   *\r\n   * @param model  An object defining model ID, associated language IDs, and either the\r\n   *               model's definition or a path to a file containing it.\r\n   */\r\n  addModel(model: ModelSpec): Promise<void> {\r\n    this.modelCache.register(model);\r\n\r\n    const activeStub = this.contextManager.activeKeyboard?.metadata;\r\n    if(activeStub && model.languages.indexOf(activeStub.langId) != -1) {\r\n      return this.refreshModel().then(() => { return; });\r\n    } else {\r\n      return Promise.resolve();\r\n    }\r\n  }\r\n\r\n  // 17.0: new!  Only used by apps utilizing app/webview and one app/browser test page.\r\n\r\n  /**\r\n   * Unregisters any previously-registered lexical model with a matching ID from Keyman Engine.\r\n   * If a keyboard with a matching language code is currently activated, it will also\r\n   * deactivate the model.\r\n   *\r\n   * @param modelId  The ID for the model to be deregistered and forgotten by Keyman Engine.\r\n   */\r\n  removeModel(modelId: string) {\r\n    this.modelCache.unregister(modelId);\r\n\r\n    // Is it the active model?\r\n    if(this.core.activeModel && this.core.activeModel.id == modelId) {\r\n      this.core.languageProcessor.unloadModel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allow to change active keyboard by (internal) keyboard name\r\n   *\r\n   * @param       {string}    PInternalName   Internal name\r\n   * @param       {string}    PLgCode         Language code\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/setActiveKeyboard\r\n   */\r\n  public async setActiveKeyboard(keyboardId: string, languageCode?: string): Promise<boolean> {\r\n    return this.contextManager.activateKeyboard(keyboardId, languageCode, true);\r\n  }\r\n\r\n  /**\r\n   * Function     getActiveKeyboard\r\n   * Scope        Public\r\n   * @return      {string}      Name of active keyboard\r\n   * Description  Return internal name of currently active keyboard\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/getActiveKeyboard\r\n   */\r\n  public getActiveKeyboard(): string {\r\n    return this.contextManager.activeKeyboard?.metadata.id ?? '';\r\n  }\r\n\r\n  /**\r\n   * Function    getActiveLanguage\r\n   * Scope       Public\r\n   * @param      {boolean=}        true to retrieve full language name, false/undefined to retrieve code.\r\n   * @return     {string}         language code\r\n   * Description Return language code for currently selected language\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/getActiveLanguage\r\n   */\r\n  public getActiveLanguage(fullName?: boolean): string {\r\n    // In short... the activeStub.\r\n    const metadata = this.contextManager.activeKeyboard?.metadata;\r\n\r\n    if(!fullName) {\r\n      return metadata?.langId ?? '';\r\n    } else {\r\n      return metadata?.langName ?? '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     isChiral\r\n   * Scope        Public\r\n   * @param       {string|Object=}   k0\r\n   * @return      {boolean}\r\n   * Description  Tests if the active keyboard (or optional argument) uses chiral modifiers.\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/isChiral\r\n   */\r\n  public isChiral(k0?: string | Keyboard) {\r\n    let kbd: Keyboard;\r\n    if(k0) {\r\n      if(typeof k0 == 'string') {\r\n        const kbdObj = this.keyboardRequisitioner.cache.getKeyboard(k0);\r\n        if(!kbdObj) {\r\n          throw new Error(`Keyboard '${k0}' has not been loaded.`);\r\n        } else {\r\n          k0 = kbdObj;\r\n        }\r\n      }\r\n\r\n      kbd = k0;\r\n    } else {\r\n      kbd = this.core.activeKeyboard;\r\n    }\r\n    return kbd.isChiral;\r\n  }\r\n\r\n  /**\r\n   * Function     resetContext\r\n   * Scope        Public\r\n   * Description  Reverts the OSK to the default layer, clears any processing caches and modifier states,\r\n   *              and clears deadkeys and prediction-processing states on the active element (if it exists)\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/resetContext\r\n   */\r\n  public resetContext() {\r\n    this.contextManager.resetContext();\r\n  };\r\n\r\n  /**\r\n   * Function     setNumericLayer\r\n   * Scope        Public\r\n   * Description  Set OSK to numeric layer if it exists\r\n   */\r\n  setNumericLayer() {\r\n    this.core.keyboardProcessor.setNumericLayer(this.config.softDevice);\r\n  };\r\n}\r\n\r\n// Intent:  define common behaviors for both primary app types; each then subclasses & extends where needed.",
    "import EventEmitter from 'eventemitter3';\r\n\r\nimport BannerView, { BannerController } from '../banner/bannerView.js';\r\nimport OSKViewComponent from '../components/oskViewComponent.interface.js';\r\nimport EmptyView from '../components/emptyView.js';\r\nimport HelpPageView from '../components/helpPageView.js';\r\nimport KeyboardView from '../components/keyboardView.interface.js';\r\nimport VisualKeyboard from '../visualKeyboard.js';\r\nimport { LengthStyle, ParsedLengthStyle } from '../lengthStyle.js';\r\nimport { type KeyElement } from '../keyElement.js';\r\n\r\nimport {\r\n  Codes,\r\n  DeviceSpec,\r\n  Keyboard,\r\n  KeyEvent,\r\n  KeyboardProperties,\r\n  ManagedPromise,\r\n  type MinimalCodesInterface,\r\n  type MutableSystemStore,\r\n  type SystemStoreMutationHandler\r\n} from '@keymanapp/keyboard-processor';\r\nimport { createUnselectableElement, getAbsoluteX, getAbsoluteY, StylesheetManager } from 'keyman/engine/dom-utils';\r\nimport { EventListener, EventNames, LegacyEventEmitter } from 'keyman/engine/events';\r\n\r\nimport Configuration from '../config/viewConfiguration.js';\r\nimport Activator, { StaticActivator } from './activator.js';\r\nimport TouchEventPromiseMap from './touchEventPromiseMap.js';\r\n\r\n// These will likely be eliminated from THIS file at some point.\\\r\n\r\nexport type OSKPos = {'left'?: number, 'top'?: number};\r\n\r\nexport type OSKRect = {\r\n  'left'?: number,\r\n  'top'?: number,\r\n  'width'?: number,\r\n  'height'?: number,\r\n  'nosize'?: boolean,\r\n  'nomove'?: boolean\r\n};\r\n\r\n/**\r\n * Definition for OSK events documented at\r\n * https://help.keyman.com/DEVELOPER/ENGINE/WEB/16.0/reference/events/.\r\n */\r\nexport interface LegacyOSKEventMap {\r\n  'configclick'(obj: {});\r\n  'helpclick'(obj: {});\r\n  'resizemove'(obj: {});\r\n  'show'(obj: {});\r\n  'hide'(obj: {\r\n    HiddenByUser: boolean\r\n  });\r\n}\r\n\r\n/**\r\n * For now, these will serve as undocumented, internal events.  We need a proper\r\n * design round and discussion before we consider promoting them to long-term,\r\n * documented official API events.\r\n */\r\nexport interface EventMap {\r\n  /**\r\n   * Designed to pass key events off to any consuming modules/libraries.\r\n   *\r\n   * Note:  the following code block was originally used to integrate with the keyboard & input\r\n   * processors, but it requires entanglement with components external to this OSK module.\r\n   */\r\n  'keyevent': (event: KeyEvent) => void,\r\n\r\n  /**\r\n   * Indicates that the globe key has either been pressed (`on` == `true`)\r\n   * or released (`on` == `false`).\r\n   */\r\n  globekey: (e: KeyElement, on: boolean) => void;\r\n\r\n  /**\r\n   * A virtual keystroke corresponding to a \"hide\" command has been received.\r\n   */\r\n  hiderequested: (key: KeyElement) => void;\r\n\r\n  /**\r\n   * Signals the special command to display the engine's version + build number.\r\n   */\r\n  showbuild: () => void;\r\n\r\n  // While the next two are near-duplicates of the legacy event `resizemove`, these\r\n  // have the advantage of providing a Promise for the end of the ongoing user\r\n  // interaction.  We need that Promise for focus-management.\r\n\r\n  /**\r\n   * Signals that the OSK is being moved by the user via a drag operation.\r\n   *\r\n   * The provided Promise will resolve once the drag operation is complete.\r\n   *\r\n   * Note that position-restoration (unpinning the OSK) is treated as a drag-move\r\n   * event.  It resolves near-instantly.\r\n   */\r\n  dragmove: (promise: Promise<void>) => void;\r\n\r\n  /**\r\n   * Signals that the OSK is being resized via a drag operation (on a resize 'handle').\r\n   *\r\n   * The provided Promise will resolve once the resize operation is complete.\r\n   */\r\n  resizemove: (promise: Promise<void>) => void;\r\n\r\n  /**\r\n   * Signals that either the mouse or an active touchpoint is interacting with the OSK.\r\n   *\r\n   * The provided `Promise` will resolve once the corresponding interaction is complete.\r\n   * Note that for touch events, more than one touchpoint may coexist, each with its own\r\n   * corresponding call of this event and corresponding `Promise`.\r\n   */\r\n  pointerinteraction: (promise: Promise<void>) => void;\r\n}\r\n\r\nexport default abstract class OSKView extends EventEmitter<EventMap> implements MinimalCodesInterface {\r\n  _Box: HTMLDivElement;\r\n  readonly legacyEvents = new LegacyEventEmitter<LegacyOSKEventMap>();\r\n\r\n  // #region Key code definition aliases for legacy keyboards (that expect window['keyman']['osk'].___)\r\n  get keyCodes() {\r\n    return Codes.keyCodes;\r\n  }\r\n\r\n  get modifierCodes() {\r\n    return Codes.modifierCodes;\r\n  }\r\n\r\n  get modifierBitmasks() {\r\n    return Codes.modifierBitmasks;\r\n  }\r\n\r\n  get stateBitmasks() {\r\n    return Codes.stateBitmasks;\r\n  }\r\n  // #endregion\r\n\r\n  headerView:   OSKViewComponent;\r\n  bannerView:   BannerView; // Which implements OSKViewComponent\r\n  keyboardView: KeyboardView;  // Which implements OSKViewComponent\r\n  footerView:   OSKViewComponent;\r\n\r\n  private _bannerController: BannerController;\r\n\r\n  private kbdStyleSheetManager: StylesheetManager;\r\n  private uiStyleSheetManager: StylesheetManager;\r\n\r\n  private config: Configuration;\r\n\r\n  private _boxBaseMouseDown:        (e: MouseEvent) => boolean;\r\n  private _boxBaseTouchStart:       (e: TouchEvent) => boolean;\r\n  private _boxBaseTouchEventCancel: (e: TouchEvent) => boolean;\r\n\r\n  private keyboardData: {\r\n    keyboard: Keyboard,\r\n    metadata: KeyboardProperties\r\n  };\r\n\r\n  /**\r\n   * The configured width for this OSKManager.  May be `undefined` or `null`\r\n   * to allow automatic width scaling.\r\n   */\r\n  private _width: ParsedLengthStyle;\r\n\r\n  /**\r\n   * The configured height for this OSKManager.  May be `undefined` or `null`\r\n   * to allow automatic height scaling.\r\n   */\r\n  private _height: ParsedLengthStyle;\r\n\r\n  /**\r\n   * The computed width for this OSKManager.  May be null if auto sizing\r\n   * is allowed and the OSKManager is not currently in the DOM hierarchy.\r\n   */\r\n  private _computedWidth: number;\r\n\r\n  /**\r\n  * The computed height for this OSKManager.  May be null if auto sizing\r\n  * is allowed and the OSKManager is not currently in the DOM hierarchy.\r\n  */\r\n  private _computedHeight: number;\r\n\r\n  /**\r\n   * The base font size to use for hosted `Banner`s and `VisualKeyboard`\r\n   * instances.\r\n   */\r\n  private _baseFontSize: ParsedLengthStyle;\r\n\r\n  private needsLayout: boolean = true;\r\n\r\n  private _animatedHideTimeout: number;\r\n\r\n  private mouseEnterPromise?: ManagedPromise<void>;\r\n  private touchEventPromiseManager = new TouchEventPromiseMap();\r\n\r\n  private static readonly STYLESHEET_FILES = ['kmwosk.css', 'globe-hint.css'];\r\n\r\n  constructor(configuration: Configuration) {\r\n    super();\r\n\r\n    // Clone the config; do not allow object references to be altered later.\r\n    this.config = configuration = {...configuration};\r\n\r\n    // `undefined` is falsy, but we want a `true` default behavior for this config property.\r\n    if(this.config.allowHideAnimations === undefined) {\r\n      this.config.allowHideAnimations = true;\r\n    }\r\n\r\n    this.config.device = configuration.device || configuration.hostDevice;\r\n\r\n    this.config.isEmbedded = configuration.isEmbedded || false;\r\n    this.config.embeddedGestureConfig = configuration.embeddedGestureConfig || {};\r\n    this.config.activator.on('activate', this.activationListener);\r\n\r\n    // OSK initialization - create DIV and set default styles\r\n    this._Box = createUnselectableElement('div');   // Container for OSK (Help DIV, displayed when user clicks Help icon)\r\n    this.kbdStyleSheetManager = new StylesheetManager(this._Box, this.config.doCacheBusting || false);\r\n    this.uiStyleSheetManager = new StylesheetManager(this._Box);\r\n\r\n    // Initializes the two constant OSKComponentView fields.\r\n    this.bannerView   = new BannerView();\r\n    this.bannerView.events.on('bannerchange', () => this.refreshLayout());\r\n\r\n    this._bannerController = new BannerController(this.bannerView, this.hostDevice, this.config.predictionContextManager);\r\n\r\n    this.keyboardView = null;\r\n\r\n    this.setBaseMouseEventListeners();\r\n    if(this.hostDevice.touchable) {\r\n      this.setBaseTouchEventListeners();\r\n    }\r\n  }\r\n\r\n  protected get configuration(): Configuration {\r\n    return this.config;\r\n  }\r\n\r\n  public get bannerController(): BannerController {\r\n    return this._bannerController;\r\n  }\r\n\r\n  public get hostDevice(): DeviceSpec {\r\n    return this.config.hostDevice;\r\n  }\r\n\r\n  public get fontRootPath(): string {\r\n    return this.config.pathConfig.fonts;\r\n  }\r\n\r\n  public get isEmbedded(): boolean {\r\n    return this.config.isEmbedded;\r\n  }\r\n\r\n  /**\r\n   * Function     _VKbdMouseEnter\r\n   * Scope        Private\r\n   * @param       {Object}      e      event\r\n   * Description  Activate the KMW UI when mouse enters the OSK element hierarchy\r\n   */\r\n  private _VKbdMouseEnter: (e: MouseEvent) => void;\r\n\r\n  /**\r\n   * Function     _VKbdMouseLeave\r\n   * Scope        Private\r\n   * @param       {Object}      e      event\r\n   * Description  Cancel activation of KMW UI when mouse leaves the OSK element hierarchy\r\n   */\r\n  private _VKbdMouseLeave: (e: MouseEvent) => void;\r\n\r\n  private setBaseMouseEventListeners() {\r\n    this._Box.onmouseenter = this._VKbdMouseEnter = (e) => {\r\n      if(this.mouseEnterPromise) {\r\n        // The chain was somehow interrupted, with the mouseleave never occurring!\r\n        this.mouseEnterPromise.resolve();\r\n      }\r\n\r\n      this.mouseEnterPromise = new ManagedPromise<void>();\r\n      this.emit('pointerinteraction', this.mouseEnterPromise.corePromise);\r\n    };\r\n\r\n    this._Box.onmouseleave = this._VKbdMouseLeave = (e) => {\r\n      this.mouseEnterPromise.resolve();\r\n      this.mouseEnterPromise = null;\r\n      // focusAssistant.setMaintainingFocus(false);\r\n    };\r\n  }\r\n\r\n  private removeBaseMouseEventListeners() {\r\n    this._Box.onmouseenter = null;\r\n    this._Box.onmouseleave = null;\r\n  }\r\n\r\n  private setBaseTouchEventListeners() {\r\n    // To prevent touch event default behaviour on mobile devices\r\n    let commonPrevention = function(e: TouchEvent) {\r\n      if(e.cancelable) {\r\n        e.preventDefault();\r\n      }\r\n      e.stopPropagation();\r\n      return false;\r\n    }\r\n\r\n    this._boxBaseTouchEventCancel = (e) => {\r\n      this.touchEventPromiseManager.maintainTouches(e.touches);\r\n      return commonPrevention(e);\r\n    };\r\n\r\n    this._boxBaseTouchStart = (e) => {\r\n      for(let i = 0; i < e.changedTouches.length; i++) {\r\n        let promise = this.touchEventPromiseManager.promiseForTouchpoint(e.changedTouches[i].identifier);\r\n        this.emit('pointerinteraction', promise.corePromise);\r\n      }\r\n\r\n      this.touchEventPromiseManager.maintainTouches(e.touches);\r\n      return commonPrevention(e);\r\n    }\r\n\r\n    this._Box.addEventListener('touchstart', this._boxBaseTouchStart, false);\r\n    this._Box.addEventListener('touchmove',  this._boxBaseTouchEventCancel, false);\r\n    this._Box.addEventListener('touchend',  this._boxBaseTouchEventCancel, false);\r\n    this._Box.addEventListener('touchcancel',  this._boxBaseTouchEventCancel, false);\r\n  }\r\n\r\n  private removeBaseTouchEventListeners() {\r\n    if(!this._boxBaseTouchEventCancel) {\r\n      return;\r\n    }\r\n\r\n    this._Box.removeEventListener('touchstart', this._boxBaseTouchStart, false);\r\n    this._Box.removeEventListener('touchmove',  this._boxBaseTouchEventCancel, false);\r\n    this._Box.removeEventListener('touchend',  this._boxBaseTouchEventCancel, false);\r\n    this._Box.removeEventListener('touchcancel',  this._boxBaseTouchEventCancel, false);\r\n\r\n    this._boxBaseTouchEventCancel = null;\r\n    this._boxBaseTouchStart = null;\r\n  }\r\n\r\n  // TODO:  activeTarget has been 'moved' to activationModel.activationCondition (for TwoStateActivation instances).\r\n  //        Loosely speaking, anyway.\r\n\r\n\r\n\r\n  public get targetDevice(): DeviceSpec {\r\n    return this.config.device;\r\n  }\r\n\r\n  public set targetDevice(spec: DeviceSpec) {\r\n    if(this.allowsDeviceChange(spec)) {\r\n      this.config.device = spec;\r\n      this.loadActiveKeyboard();\r\n    } else {\r\n      console.error(\"May not change target device for this OSKView type.\");\r\n    }\r\n  }\r\n\r\n  protected allowsDeviceChange(newSpec: DeviceSpec): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gets and sets the activation state model used to control presentation of the OSK.\r\n   */\r\n  get activationModel(): Activator {\r\n    return this.config.activator;\r\n  }\r\n\r\n  set activationModel(model: Activator) {\r\n    if(!model) {\r\n      throw new Error(\"The activation model may not be set to null or undefined!\");\r\n    }\r\n\r\n    this.config.activator.off('activate', this.activationListener);\r\n    model.on('activate', this.activationListener);\r\n\r\n    this.config.activator = model;\r\n\r\n    this.commonCheckAndDisplay();\r\n  }\r\n\r\n  public get mayDisable(): boolean {\r\n    if(this.hostDevice.touchable) {\r\n      return false;\r\n    }\r\n\r\n    if(this.activeKeyboard?.keyboard.isCJK) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private readonly activationListener = (flag: boolean) => {\r\n    // CJK override:  may not be disabled, as the CJK elements are required.\r\n    if(!this.mayDisable && !this.activationModel.enabled) {\r\n      this.activationModel.off('activate', this.activationListener);\r\n      try {\r\n        this.activationModel.enabled = true;\r\n      } finally {\r\n        this.activationModel.on('activate', this.activationListener);\r\n      }\r\n    }\r\n    this.commonCheckAndDisplay();\r\n  };\r\n\r\n  /**\r\n   * A property denoting whether or not the OSK will be presented when it meets all\r\n   * other activation conditions.\r\n   *\r\n   * Is equivalent to `.activationModel.enabled`.\r\n   */\r\n  get displayIfActive(): boolean {\r\n    return this.activationModel.enabled;\r\n  }\r\n\r\n  /**\r\n   * Used by the activation model's event listenerss and properties as a common helper;\r\n   * they rely on this function to manage presentation (showing / hiding) of the OSK.\r\n   */\r\n  private commonCheckAndDisplay() {\r\n    if(this.activationModel.activate && this.activeKeyboard) {\r\n      this.present();\r\n    } else {\r\n      this.startHide(false);\r\n    }\r\n  }\r\n\r\n  public get vkbd(): VisualKeyboard {\r\n    if(this.keyboardView instanceof VisualKeyboard) {\r\n      return this.keyboardView;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public get banner(): BannerView {  // Maintains old reference point used by embedding apps.\r\n    return this.bannerView;\r\n  }\r\n\r\n  /**\r\n   * The configured width for this VisualKeyboard.  May be `undefined` or `null`\r\n   * to allow automatic width scaling.\r\n   */\r\n  get width(): ParsedLengthStyle {\r\n    return this._width;\r\n  }\r\n\r\n  /**\r\n   * The configured height for this VisualKeyboard.  May be `undefined` or `null`\r\n   * to allow automatic height scaling.\r\n   */\r\n  get height(): ParsedLengthStyle {\r\n    return this._height;\r\n  }\r\n\r\n  /**\r\n   * The computed width for this VisualKeyboard.  May be null if auto sizing\r\n   * is allowed and the VisualKeyboard is not currently in the DOM hierarchy.\r\n   */\r\n  get computedWidth(): number {\r\n    // Computed during layout operations; allows caching instead of continuous recomputation.\r\n    if(this.needsLayout) {\r\n      this.refreshLayout();\r\n    }\r\n    return this._computedWidth;\r\n  }\r\n\r\n  /**\r\n   * The computed height for this VisualKeyboard.  May be null if auto sizing\r\n   * is allowed and the VisualKeyboard is not currently in the DOM hierarchy.\r\n   */\r\n  get computedHeight(): number {\r\n    // Computed during layout operations; allows caching instead of continuous recomputation.\r\n    if(this.needsLayout) {\r\n      this.refreshLayout();\r\n    }\r\n    return this._computedHeight;\r\n  }\r\n\r\n  /**\r\n   * The top-level style string for the font size used by the predictive banner\r\n   * and the primary keyboard visualization elements.\r\n   */\r\n  get baseFontSize(): string {\r\n    return this.parsedBaseFontSize?.styleString || '';\r\n  }\r\n\r\n  protected get parsedBaseFontSize(): ParsedLengthStyle {\r\n    if(!this._baseFontSize) {\r\n      this._baseFontSize = OSKView.defaultFontSize(this.targetDevice, this.computedHeight, this.isEmbedded);\r\n    }\r\n\r\n    return this._baseFontSize;\r\n  }\r\n\r\n  public static defaultFontSize(device: DeviceSpec, computedHeight: number, isEmbedded: boolean): ParsedLengthStyle {\r\n    if(device.touchable) {\r\n      const fontScale = device.formFactor == 'phone'\r\n        ? 1.6 * (isEmbedded ? 0.65 : 0.6) * 1.2  // Combines original scaling factor with one previously applied to the layer group.\r\n        : 2; // iPad or Android tablet\r\n      return ParsedLengthStyle.special(fontScale, 'em');\r\n    } else {\r\n      return computedHeight ? ParsedLengthStyle.inPixels(computedHeight / 8) : undefined;\r\n    }\r\n  }\r\n\r\n  public get activeKeyboard(): {\r\n    keyboard: Keyboard,\r\n    metadata: KeyboardProperties\r\n  } {\r\n    return this.keyboardData;\r\n  }\r\n\r\n  public set activeKeyboard(keyboardData: {\r\n    keyboard: Keyboard,\r\n    metadata: KeyboardProperties\r\n  }) {\r\n    this.keyboardData = keyboardData;\r\n    this.loadActiveKeyboard();\r\n\r\n    if(this.keyboardData?.keyboard.isCJK) {\r\n      this.activationModel.enabled = true;\r\n    }\r\n  }\r\n\r\n  private computeFrameHeight(): number {\r\n    return (this.headerView?.layoutHeight.val || 0) + (this.footerView?.layoutHeight.val || 0);\r\n  }\r\n\r\n  setSize(width?: number | LengthStyle, height?: number | LengthStyle, pending?: boolean) {\r\n    let mutatedFlag = false;\r\n\r\n    let parsedWidth: ParsedLengthStyle;\r\n    let parsedHeight: ParsedLengthStyle;\r\n\r\n    if(!width && width !== 0) {\r\n      return;\r\n    }\r\n\r\n    if(!height && height !== 0) {\r\n      return;\r\n    }\r\n\r\n    if(Number.isFinite(width as number)) {\r\n      parsedWidth = ParsedLengthStyle.inPixels(width as number);\r\n    } else {\r\n      parsedWidth = new ParsedLengthStyle(width as LengthStyle);\r\n    }\r\n\r\n    if(Number.isFinite(height as number)) {\r\n      parsedHeight = ParsedLengthStyle.inPixels(height as number);\r\n    } else {\r\n      parsedHeight = new ParsedLengthStyle(height as LengthStyle);\r\n    }\r\n\r\n    if(width && height) {\r\n      mutatedFlag = !this._width || !this._height;\r\n\r\n      mutatedFlag = mutatedFlag || parsedWidth.styleString  != this._width.styleString;\r\n      mutatedFlag = mutatedFlag || parsedHeight.styleString != this._height.styleString;\r\n\r\n      this._width = parsedWidth;\r\n      this._height = parsedHeight;\r\n    }\r\n\r\n    this.needsLayout = this.needsLayout || mutatedFlag;\r\n    this.refreshLayoutIfNeeded(pending);\r\n  }\r\n\r\n  public setNeedsLayout() {\r\n    this.needsLayout = true;\r\n  }\r\n\r\n  public refreshLayout(pending?: boolean): void {\r\n    if(!this.keyboardView) {\r\n      return;\r\n    }\r\n\r\n    // Step 1:  have the necessary conditions been met?\r\n    const hasDimensions = this.width && this.height;\r\n\r\n    if(!hasDimensions) {\r\n      // If dimensions haven't been set yet, we have no basis for layout calculations.\r\n      // We do not emit a warning here; if we did, at the time of writing this, we'd\r\n      // consistently get Sentry events from the Keyman mobile apps.\r\n      //\r\n      // See #9206 & https://github.com/keymanapp/keyman/pull/9206#issuecomment-1627917615\r\n      // for context and history.\r\n      return;\r\n    }\r\n\r\n    const fixedSize = this.width.absolute && this.height.absolute;\r\n    const computedStyle = getComputedStyle(this._Box);\r\n    const isInDOM = computedStyle.height != '' && computedStyle.height != 'auto';\r\n\r\n    // Step 2:  determine basic layout geometry\r\n    if(fixedSize) {\r\n      this._computedWidth  = this.width.val;\r\n      this._computedHeight = this.height.val;\r\n    } else if(isInDOM) {\r\n      // Note:  %-based auto-detect for dimensions currently has some issues; the stylesheets load\r\n      // asynchronously, causing the format to be VERY off before the stylesheets fully load.\r\n      //\r\n      // Depending on initial effects, changes to the OSK size could cause changes to the _parent_ size,\r\n      // too... so this potential bit likely needs something of a redesign.\r\n      const parent = this._Box.parentElement as HTMLElement;\r\n      this._computedWidth  = this.width.val  * (this.width.absolute  ? 1 : parent.offsetWidth);\r\n      this._computedHeight = this.height.val * (this.height.absolute ? 1 : parent.offsetHeight);\r\n    } else {\r\n      console.warn(\"Unable to properly perform layout - specification uses a relative spec, thus relies upon insertion into the DOM for layout.\");\r\n      return;\r\n    }\r\n\r\n    // Must be set before any references to the .computedWidth and .computedHeight properties!\r\n    this.needsLayout = false;\r\n\r\n    // Step 3:  perform layout operations.\r\n    this.banner.element.style.fontSize = this.baseFontSize;\r\n    if(this.vkbd) {\r\n      this.vkbd.fontSize = this.parsedBaseFontSize;\r\n    }\r\n\r\n    if(!pending) {\r\n      this.headerView?.refreshLayout();\r\n      this.bannerView.refreshLayout();\r\n      this.footerView?.refreshLayout();\r\n    }\r\n\r\n    if(this.vkbd) {\r\n      let availableHeight = this.computedHeight - this.computeFrameHeight();\r\n\r\n      // +5:  from kmw-banner-bar's 'top' attribute when active\r\n      if(this.bannerView.height > 0) {\r\n        availableHeight -= this.bannerView.height + 5;\r\n      }\r\n      this.vkbd.setSize(this.computedWidth, availableHeight, pending);\r\n\r\n      const bs = this._Box.style;\r\n      // OSK size settings can only be reliably applied to standard VisualKeyboard\r\n      // visualizations, not to help text or empty views.\r\n      bs.width  = bs.maxWidth  = this.computedWidth + 'px';\r\n      bs.height = bs.maxHeight = this.computedHeight + 'px';\r\n\r\n      // Ensure that the layer's spacebar is properly captioned.\r\n      this.vkbd.showLanguage();\r\n    } else {\r\n      const bs = this._Box.style;\r\n      bs.width  = 'auto';\r\n      bs.height = 'auto';\r\n      bs.maxWidth = bs.maxHeight = '';\r\n    }\r\n  }\r\n\r\n  public refreshLayoutIfNeeded(pending?: boolean) {\r\n    if(this.needsLayout) {\r\n      this.refreshLayout(pending);\r\n    }\r\n  }\r\n\r\n  public abstract getDefaultWidth(): number;\r\n  public abstract getDefaultKeyboardHeight(): number;\r\n\r\n  // /**\r\n  //  * Function     _Load\r\n  //  * Scope        Private\r\n  //  * Description  OSK initialization when keyboard selected\r\n  //  */\r\n  // _Load() { // Load Help - maintained only temporarily.\r\n  //   let keymanweb = com.keyman.singleton;\r\n  //   this.activeKeyboard = keymanweb.core.activeKeyboard;\r\n  // }\r\n\r\n  public postKeyboardLoad() {\r\n    this._Visible = false;  // I3363 (Build 301)\r\n\r\n    // Perform any needed restructuring and/or layout tweaks (depending on the OSKView type).\r\n    this.postKeyboardAdjustments();\r\n\r\n    if(this.displayIfActive) {\r\n      this.present();\r\n    }\r\n  }\r\n\r\n  protected abstract postKeyboardAdjustments(): void;\r\n\r\n  protected abstract setBoxStyling(): void;\r\n\r\n  private loadActiveKeyboard() {\r\n    this.setBoxStyling();\r\n\r\n    if(this.vkbd) {\r\n      this.vkbd.shutdown();\r\n    }\r\n    this.keyboardView = null;\r\n    this.needsLayout = true;\r\n\r\n    // Instantly resets the OSK container, erasing / delinking the previously-loaded keyboard.\r\n    this._Box.innerHTML = '';\r\n\r\n    // Temp-hack:  embedded products prefer their stylesheet, etc linkages without the /osk path component.\r\n    let subpath = 'osk/';\r\n    if(this.config.isEmbedded) {\r\n      subpath = '';\r\n    }\r\n\r\n    // Install the default OSK stylesheet - but don't have it managed by the keyboard-specific stylesheet manager.\r\n    // We wish to maintain kmwosk.css whenever keyboard-specific styles are reset/removed.\r\n    for(let sheetFile of OSKView.STYLESHEET_FILES) {\r\n      const sheetHref = `${this.config.pathConfig.resources}/${subpath}${sheetFile}`;\r\n      this.uiStyleSheetManager.linkExternalSheet(sheetHref);\r\n    }\r\n\r\n    // Any event-cancelers would go here, after the innerHTML reset.\r\n\r\n    // Add header element to OSK only for desktop browsers\r\n    if(this.headerView) {\r\n      this._Box.appendChild(this.headerView.element);\r\n    }\r\n\r\n    // Add suggestion banner bar to OSK\r\n    this._Box.appendChild(this.banner.element);\r\n\r\n    if(this.bannerView.banner) {\r\n      this.banner.banner.configureForKeyboard(this.keyboardData?.keyboard, this.keyboardData?.metadata);\r\n    }\r\n\r\n    let kbdView: KeyboardView = this.keyboardView = this._GenerateKeyboardView(this.keyboardData?.keyboard, this.keyboardData?.metadata);\r\n    this._Box.appendChild(kbdView.element);\r\n    kbdView.postInsert();\r\n\r\n    // Add footer element to OSK only for desktop browsers\r\n    if(this.footerView) {\r\n      this._Box.appendChild(this.footerView.element);\r\n    }\r\n    // END:  construction of the actual internal layout for the overall OSK\r\n\r\n    this.banner.appendStyles();\r\n\r\n    if(this.vkbd) {\r\n      // Create the key preview (for phones)\r\n      this.vkbd.createKeyTip();\r\n\r\n      // Create the globe hint (for embedded contexts; has a stub for other contexts)\r\n      const globeHint = this.vkbd.createGlobeHint();\r\n      if(globeHint) {\r\n        this._Box.appendChild(globeHint.element);\r\n      }\r\n\r\n      // Append a stylesheet for this keyboard for keyboard specific styles\r\n      // or if needed to specify an embedded font\r\n      this.vkbd.appendStyleSheet();\r\n    }\r\n\r\n    this.postKeyboardLoad();\r\n  }\r\n\r\n  private _GenerateKeyboardView(keyboard: Keyboard, keyboardMetadata: KeyboardProperties): KeyboardView {\r\n    let device = this.targetDevice;\r\n\r\n    if(this.vkbd) {\r\n      this.vkbd.shutdown();\r\n    }\r\n\r\n    this._Box.className = \"\";\r\n\r\n    // Case 1:  since we hide the system keyboard on touch devices, we need\r\n    //          to display SOMETHING that can accept input.\r\n    if(keyboard == null && !device.touchable) {\r\n      // We do not (currently) allow selecting the default system keyboard on\r\n      // touch form-factors.  Likely b/c mnemonic difficulties.\r\n      return new EmptyView();\r\n    } else {\r\n      // Generate a visual keyboard from the layout (or layout default)\r\n      // Condition is false if no key definitions exist, formFactor == desktop, AND help text exists.  All three.\r\n      if(keyboard && keyboard.layout(device.formFactor as DeviceSpec.FormFactor)) {\r\n        return this._GenerateVisualKeyboard(keyboard, keyboardMetadata);\r\n      } else if(!keyboard /* && device.touchable (implied) */ || !keyboardMetadata) {\r\n        // Show a basic, \"hollow\" OSK that at least allows input, since we're\r\n        // on a touch device and hiding the system keyboard\r\n        return this._GenerateVisualKeyboard(null, null);\r\n      } else {\r\n        // A keyboard help-page or help-text is still a visualization, even not a standard OSK.\r\n        return new HelpPageView(keyboard);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     _GenerateVisualKeyboard\r\n   * Scope        Private\r\n   * @param       {Object}      keyboard    The keyboard to visualize\r\n   * Description  Generates the visual keyboard element and attaches it to KMW\r\n   */\r\n  private _GenerateVisualKeyboard(keyboard: Keyboard, keyboardMetadata: KeyboardProperties): VisualKeyboard {\r\n    let device = this.targetDevice;\r\n\r\n    // Root element sets its own classes, one of which is 'kmw-osk-inner-frame'.\r\n    let vkbd = new VisualKeyboard({\r\n      keyboard: keyboard,\r\n      keyboardMetadata: keyboardMetadata,\r\n      device: device,\r\n      hostDevice: this.hostDevice,\r\n      topContainer: this._Box,\r\n      styleSheetManager: this.kbdStyleSheetManager,\r\n      pathConfig: this.config.pathConfig,\r\n      embeddedGestureConfig: this.config.embeddedGestureConfig,\r\n      isEmbedded: this.config.isEmbedded\r\n    });\r\n\r\n    vkbd.on('keyevent', (keyEvent) => this.emit('keyevent', keyEvent));\r\n    vkbd.on('globekey', (keyElement, on) => this.emit('globekey', keyElement, on));\r\n    vkbd.on('hiderequested', (keyElement) => {\r\n      this.doHide(true);\r\n      this.emit('hiderequested', keyElement);\r\n    });\r\n\r\n    // Set box class - OS and keyboard added for Build 360\r\n    this._Box.className=device.formFactor+' '+ device.OS.toLowerCase() + ' kmw-osk-frame';\r\n\r\n    // Add primary keyboard element to OSK\r\n    return vkbd;\r\n  }\r\n\r\n  /**\r\n   * This function may be provided to event sources to trigger changes in keyboard layer.\r\n   * It is pre-bound to its OSKView instance.\r\n   *\r\n  ```\r\n    {\r\n      let core = com.keyman.singleton.core;\r\n      core.keyboardProcessor.layerStore.handler = this.layerChangeHandler;\r\n    }\r\n  ```\r\n   *\r\n   * @param source\r\n   * @param newValue\r\n   * @returns\r\n   */\r\n  public layerChangeHandler: SystemStoreMutationHandler = (source: MutableSystemStore,\r\n    newValue: string) => {\r\n    // This handler is also triggered on state-key state changes (K_CAPS) that\r\n    // may not actually change the layer.\r\n    if(this.vkbd) {\r\n      this.vkbd._UpdateVKShiftStyle(newValue);\r\n    }\r\n\r\n    if((this.vkbd && this.vkbd.layerId != newValue) || source.value != newValue) {\r\n      // Prevents console errors when a keyboard only displays help.\r\n      // Can occur when using SHIFT with sil_euro_latin on a desktop form-factor.\r\n      //\r\n      // Also, only change the layer ID itself if there is an actual corresponding layer\r\n      // in the OSK.\r\n      if(this.vkbd?.layerGroup.layers[newValue]) {\r\n        this.vkbd.layerId = newValue;\r\n        // Ensure that the layer's spacebar is properly captioned.\r\n        this.vkbd.showLanguage();\r\n      }\r\n\r\n      // Ensure the keyboard view is modeling the correct state.  (Correct layer, etc.)\r\n      this.keyboardView.updateState(); // will also need the stateKeys.\r\n      // We need to recalc the font size here because the layer did not have\r\n      // calculated dimensions available before it was visible\r\n      this.refreshLayout();\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * The main function for presenting the OSKView.\r\n   *\r\n   * This includes:\r\n   * - refreshing its layout\r\n   * - displaying it\r\n   * - positioning it\r\n   */\r\n  public present(): void {\r\n    // Do not try to display OSK if no active element\r\n    if(!this.mayShow()) {\r\n      return;\r\n    }\r\n\r\n    // Ensure the keyboard view is modeling the correct state.  (Correct layer, etc.)\r\n    this.keyboardView.updateState(); // get current state keys!\r\n\r\n    this._Box.style.display='block'; // Is 'none' when hidden.\r\n\r\n    // First thing after it's made visible.\r\n    this.refreshLayoutIfNeeded();\r\n\r\n    if(this.keyboardView instanceof VisualKeyboard) {\r\n      this.keyboardView.showLanguage();\r\n    }\r\n\r\n    this._Visible=true;\r\n\r\n    /* In case it's still '0' from a hide() operation.\r\n      *\r\n      * (Opacity is only modified when device.touchable = true,\r\n      * though a couple of extra conditions may apply.)\r\n      */\r\n    this._Box.style.opacity = '1';\r\n\r\n    // If OSK still hidden, make visible only after all calculation finished\r\n    if(this._Box.style.visibility == 'hidden') {\r\n      let _this = this;\r\n      window.setTimeout(function() {\r\n        _this._Box.style.visibility = 'visible';\r\n      }, 0);\r\n    }\r\n\r\n    this.setDisplayPositioning();\r\n\r\n    // Each subclass is responsible for raising the 'show' event on its own, since\r\n    // certain ones supply extra information in their event param object.\r\n  }\r\n\r\n  /**\r\n   * Method usable by subclasses of OSKView to control that OSKView type's\r\n   * positioning behavior when needed by the present() method.\r\n   */\r\n  protected abstract setDisplayPositioning();\r\n\r\n  /**\r\n   * Method used to start a potentially-asynchronous hide of the OSK.\r\n   * @param hiddenByUser `true` if this hide operation was directly requested by the user.\r\n   */\r\n  public startHide(hiddenByUser: boolean): void {\r\n    if(!this.mayHide(hiddenByUser)) {\r\n      return;\r\n    }\r\n\r\n    if(hiddenByUser) {\r\n      // The one location outside of the `displayIfActive` property that bypasses the setter.\r\n      // Avoids needless recursion that could be triggered by it, as we're already in the\r\n      // process of hiding the OSK anyway.\r\n      this.activationModel.enabled = ((this.keyboardData.keyboard.isCJK || this.hostDevice.touchable) ? true : false); // I3363 (Build 301)\r\n    }\r\n\r\n    let promise: Promise<boolean> = null;\r\n    if(this._Box && this.hostDevice.touchable && !(this.keyboardView instanceof EmptyView) && this.config.allowHideAnimations) {\r\n      /**\r\n       * Note:  this refactored code appears to reflect a currently-dead code path.  14.0's\r\n       * equivalent is either extremely niche or is actually inaccessible.\r\n       */\r\n      promise = this.useHideAnimation();\r\n    } else {\r\n      promise = Promise.resolve(true);\r\n    }\r\n\r\n    const _this = this;\r\n    promise.then(function(shouldHide: boolean) {\r\n      if(shouldHide) {\r\n        _this.finalizeHide();\r\n      }\r\n    });\r\n\r\n    // Allow UI to execute code when hiding the OSK\r\n    this.doHide(hiddenByUser);\r\n  }\r\n\r\n  /**\r\n   * Performs the _actual_ logic and functionality involved in hiding the OSK.\r\n   */\r\n  protected finalizeHide() {\r\n    if (document.body.className.indexOf('osk-always-visible') >= 0) {\r\n      if (this.hostDevice.formFactor == 'desktop') {\r\n        return;\r\n      }\r\n    }\r\n\r\n    if(this._Box) {\r\n      let bs=this._Box.style;\r\n      bs.display = 'none';\r\n      bs.transition = '';\r\n      bs.opacity = '1';\r\n      this._Visible=false;\r\n    }\r\n\r\n    if(this.vkbd) {\r\n      this.vkbd.onHide();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns `false` if the OSK is in an invalid state for being presented to the user.\r\n   */\r\n  protected mayShow(): boolean {\r\n    if(!this.activationModel.conditionsMet) {\r\n      return false;\r\n    }\r\n\r\n    // Never display the OSK for desktop browsers unless KMW element is focused, and a keyboard selected\r\n    if(!this.keyboardView || this.keyboardView instanceof EmptyView || !this.activationModel.enabled) {\r\n      return false;\r\n    }\r\n\r\n    if(!this._Box) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param hiddenByUser\r\n   * @returns `false` if the OSK is in an invalid state for being hidden from the user.\r\n   */\r\n  protected mayHide(hiddenByUser: boolean): boolean {\r\n    if(this.activationModel.conditionsMet && !this.mayDisable) {\r\n      return false;\r\n    }\r\n\r\n    if(this.activationModel instanceof StaticActivator) {\r\n      return false;\r\n    }\r\n\r\n    if(!hiddenByUser && this.hostDevice.formFactor == 'desktop') {\r\n      //Allow desktop OSK to remain visible on blur if body class set\r\n      if(document.body.className.indexOf('osk-always-visible') >= 0) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Applies CSS styling and handling needed to perform a fade animation when\r\n   * hiding the OSK.\r\n   *\r\n   * Note:  currently reflects an effectively-dead code path, though this is\r\n   * likely not intentional.  Other parts of the KMW engine seem to call hideNow()\r\n   * synchronously after each and every part of the engine that calls this function,\r\n   * cancelling the Promise.\r\n   *\r\n   * @returns A Promise denoting either cancellation of the hide (`false`) or\r\n   * completion of the hide & its animation (`true`)\r\n   */\r\n\r\n  protected useHideAnimation(): Promise<boolean> {\r\n    const os = this._Box.style;\r\n    const _this = this;\r\n\r\n    return new Promise<boolean>(function(resolve) {\r\n      const cleanup = function() {\r\n        // TODO(lowpri): attach event listeners on create and leave them there\r\n        _this._Box.removeEventListener('transitionend', cleanup, false);\r\n        _this._Box.removeEventListener('webkitTransitionEnd', cleanup, false);\r\n        _this._Box.removeEventListener('transitioncancel', cleanup, false);\r\n        _this._Box.removeEventListener('webkitTransitionCancel', cleanup, false);\r\n        if(_this._animatedHideTimeout != 0) {\r\n          window.clearTimeout(_this._animatedHideTimeout);\r\n        }\r\n        _this._animatedHideTimeout = 0;\r\n\r\n        if(_this._Visible && _this.activationModel.conditionsMet) {\r\n          // Leave opacity alone and clear transition if another element activated\r\n          os.transition='';\r\n          os.opacity='1';\r\n          resolve(false);\r\n          return false;\r\n        } else {\r\n          resolve(true);\r\n          return true;\r\n        }\r\n      }, startup = function() {\r\n        _this._Box.removeEventListener('transitionrun', startup, false);\r\n        _this._Box.removeEventListener('webkitTransitionRun', startup, false);\r\n        _this._Box.addEventListener('transitionend', cleanup, false);\r\n        _this._Box.addEventListener('webkitTransitionEnd', cleanup, false);\r\n        _this._Box.addEventListener('transitioncancel', cleanup, false);\r\n        _this._Box.addEventListener('webkitTransitionCancel', cleanup, false);\r\n      };\r\n\r\n      _this._Box.addEventListener('transitionrun', startup, false);\r\n      _this._Box.addEventListener('webkitTransitionRun', startup, false);\r\n\r\n      os.transition='opacity 0.5s linear 0';\r\n      os.opacity='0';\r\n\r\n      // Cannot hide the OSK smoothly using a transitioned drop, since for\r\n      // position:fixed elements transitioning is incompatible with translate3d(),\r\n      // and also does not work with top, bottom or height styles.\r\n      // Opacity can be transitioned and is probably the simplest alternative.\r\n      // We must condition on osk._Visible in case focus has since been moved to another\r\n      // input (in which case osk._Visible will be non-zero)\r\n      _this._animatedHideTimeout = window.setTimeout(cleanup,\r\n        200); // Wait a bit before starting, to allow for moving to another element\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Used to synchronously hide the OSK, cancelling any async hide animations that have\r\n   * not started and immediately completing the hide of any hide ops pending completion\r\n   * of their animation.\r\n   */\r\n  public hideNow() {\r\n    if(!this.mayHide(false) || !this._Box) {\r\n      return;\r\n    }\r\n\r\n    // Two possible uses for _animatedHideResolver:\r\n    // - _animatedHideTimeout is set:   animation is waiting to start\r\n    // - _animatedHideTimeout is null:  animation has already started.\r\n\r\n    // Was an animated hide waiting to start?  Just cancel it.\r\n    if(this._animatedHideTimeout) {\r\n      window.clearTimeout(this._animatedHideTimeout);\r\n      this._animatedHideTimeout = 0;\r\n    }\r\n\r\n    // Was an animated hide already in progress?  If so, just trigger it early.\r\n    const os = this._Box.style;\r\n    os.transition='';\r\n    os.opacity='0';\r\n    this.finalizeHide();\r\n  }\r\n\r\n  ['shutdown']() {\r\n    // Disable the OSK's event handlers.\r\n    this.removeBaseMouseEventListeners();\r\n    this.removeBaseTouchEventListeners();\r\n\r\n    // Remove the OSK's elements from the document, allowing them to be properly cleaned up.\r\n    // Necessary for clean engine testing.\r\n    var _box = this._Box;\r\n    if(_box.parentElement) {\r\n      _box.parentElement.removeChild(_box);\r\n    }\r\n\r\n    this.kbdStyleSheetManager.unlinkAll();\r\n    this.uiStyleSheetManager.unlinkAll();\r\n  }\r\n\r\n  /**\r\n   * Function     getRect\r\n   * Scope        Public\r\n   * @return      {Object.<string,number>}   Array object with position and size of OSK container\r\n   * Description  Get rectangle containing KMW Virtual Keyboard\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/getRect\r\n   */\r\n  public getRect(): OSKRect {\t\t// I2405\r\n    var p: OSKRect = {};\r\n\r\n    // Always return these based upon _Box; using this.vkbd will fail to account for banner and/or\r\n    // the desktop OSK border.\r\n    p['left'] = p.left = getAbsoluteX(this._Box);\r\n    p['top']  = p.top  = getAbsoluteY(this._Box);\r\n\r\n    p['width'] = this.computedWidth;\r\n    p['height'] = this.computedHeight;\r\n    return p;\r\n  }\r\n\r\n  /* ---- Legacy interfacing methods and fields ----\r\n    *\r\n    * The endgoal is to eliminate the need for these entirely, but extra work and care\r\n    * will be necessary to achieve said endgoal for these methods.\r\n    *\r\n    * The simplest way forward is to maintain them, then resolve them independently,\r\n    * one at a time.\r\n    */\r\n\r\n  // OSK state fields & events\r\n  //\r\n  // These are relatively stable and may be preserved as they are.\r\n  _Visible: boolean = false;\r\n\r\n  /**\r\n   * Function     enabled\r\n   * Scope        Public\r\n   * @return      {boolean|number}    True if KMW OSK enabled\r\n   * Description  Test if KMW OSK is enabled\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/isEnabled\r\n   */\r\n  public isEnabled(): boolean {\r\n    return this.displayIfActive;\r\n  }\r\n\r\n  /**\r\n   * Function     isVisible\r\n   * Scope        Public\r\n   * @return      {boolean|number}    True if KMW OSK visible\r\n   * Description  Test if KMW OSK is actually visible\r\n   * Note that this will usually return false after any UI event that results in (temporary) loss of input focus\r\n   *\r\n   * https://help.keyman.com/developer/engine/web/current-version/reference/osk/isVisible\r\n   */\r\n  public isVisible(): boolean {\r\n    return this._Visible;\r\n  }\r\n\r\n  /**\r\n   * Function     hide\r\n   * Scope        Public\r\n   * Description  Prevent display of OSK window on focus\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/hide\r\n   */\r\n  public hide() {\r\n    this.activationModel.enabled = false;\r\n    this.startHide(true);\r\n  }\r\n\r\n  /**\r\n   * Description  Display KMW OSK (at position set in callback to UI)\r\n   * Function     show\r\n   * Scope        Public\r\n   * @param       {(boolean|number)=}      bShow     True to display, False to hide, omitted to toggle\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/show\r\n   */\r\n  public show(bShow?: boolean) {\r\n    if(arguments.length > 0) {\r\n      this.activationModel.enabled = bShow;\r\n    } else {\r\n      if(this.activationModel.conditionsMet) {\r\n        this.activationModel.enabled = !this.activationModel.enabled;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allow UI to respond to OSK being shown (passing position and properties)\r\n   *\r\n   * @param       {Object=}       p     object with coordinates and userdefined flag\r\n   * @return      {boolean}\r\n   *\r\n   */\r\n  doShow(p) {\r\n    // Newer style 'doShow' emitted from .present by default.\r\n    this.legacyEvents.callEvent('show', p);\r\n  }\r\n\r\n  /**\r\n   * Allow UI to update respond to OSK being hidden\r\n   *\r\n   * @param       {boolean}       p     object with coordinates and userdefined flag\r\n   * @return      {void}\r\n   *\r\n   */\r\n  doHide(hiddenByUser: boolean) {\r\n    const p={\r\n      HiddenByUser: hiddenByUser\r\n    };\r\n    this.legacyEvents.callEvent('hide', p);\r\n  }\r\n\r\n  /**\r\n   * Function     addEventListener\r\n   * Scope        Public\r\n   * @param       {string}            event     event name\r\n   * @param       {function(Object)}  func      event handler\r\n   * Description  Wrapper function to add and identify OSK-specific event handlers\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/addEventListener\r\n   */\r\n  public addEventListener<T extends keyof LegacyOSKEventMap>(\r\n    event: T,\r\n    fn: EventListener<LegacyOSKEventMap, T>\r\n  ): void {\r\n    this.legacyEvents.addEventListener(event, fn);\r\n  }\r\n\r\n  /**\r\n   * Function     removeEventListener\r\n   * Scope        Public\r\n   * @param       {string}            event     event name\r\n   * @param       {function(Object)}  func      event handler\r\n   * Description  Wrapper function to remove previously-added OSK-specific event handlers\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/removeEventListener\r\n   */\r\n  public removeEventListener<T extends keyof LegacyOSKEventMap>(\r\n    event: T,\r\n    fn: EventListener<LegacyOSKEventMap, T>\r\n  ): void {\r\n    this.legacyEvents.removeEventListener(event, fn);\r\n  }\r\n}",
    "import EventEmitter from 'eventemitter3';\r\n\r\nimport { Banner, BlankBanner, ImageBanner, SuggestionBanner } from './banner.js';\r\nimport OSKViewComponent from '../components/oskViewComponent.interface.js';\r\nimport { ParsedLengthStyle } from '../lengthStyle.js';\r\n\r\nimport { DeviceSpec } from '@keymanapp/web-utils';\r\nimport type { PredictionContext, StateChangeEnum } from '@keymanapp/input-processor';\r\nimport { createUnselectableElement } from 'keyman/engine/dom-utils';\r\n\r\n/**\r\n * This object is used to specify options by both `BannerManager.getOptions`\r\n * and `BannerManager.setOptions`.  Refer to the latter for specification of\r\n * each field.\r\n */\r\nexport interface BannerOptions {\r\n  alwaysShow?: boolean;\r\n  imagePath?: string;\r\n}\r\n\r\nexport type BannerType = \"blank\" | \"image\" | \"suggestion\";\r\n\r\ninterface BannerViewEventMap {\r\n  'bannerchange': () => void;\r\n}\r\n\r\n/**\r\n * The `BannerManager` module is designed to serve as a manager for the\r\n * different `Banner` types.\r\n * To facilitate this, it will provide a root element property that serves\r\n * as a container for any active `Banner`, helping KMW to avoid needless\r\n * DOM element shuffling.\r\n *\r\n * Goals for the `BannerManager`:\r\n *\r\n * * It will be exposed as `keyman.osk.banner` and will provide the following API:\r\n *   * `getOptions`, `setOptions` - refer to the `BannerOptions` class for details.\r\n *   * This provides a persistent point that the web page designers and our\r\n *     model apps can utilize and can communicate with.\r\n *   * These API functions are designed for live use and will allow\r\n *     _hot-swapping_ the `Banner` instance; they're not initialization-only.\r\n * * Disabling the `Banner` (even for suggestions) outright with\r\n *   `enablePredictions == false` will auto-unload any loaded predictive model\r\n *   from `ModelManager` and setting it to `true` will revert this.\r\n *   * This should help to avoid wasting computational resources.\r\n * * It will listen to ModelManager events and automatically swap Banner\r\n *   instances as appropriate:\r\n *   * The option `persistentBanner == true` is designed to replicate current\r\n *     iOS system keyboard behavior.\r\n *     * When true, an `ImageBanner` will be displayed.\r\n *     * If false, it will be replaced with a `BlankBanner` of zero height,\r\n *       corresponding to our current default lack of banner.\r\n *   * It will not automatically set `persistentBanner == true`;\r\n *     this must be set by the iOS app, and only under the following conditions:\r\n *     * `keyman.isEmbedded == true`\r\n *     * `device.OS == 'ios'`\r\n *     * Keyman is being used as the system keyboard within an app that\r\n *       needs to reserve this space (i.e: Keyman for iOS),\r\n *       rather than as its standalone app.\r\n */\r\nexport default class BannerView implements OSKViewComponent {\r\n  private bannerContainer: HTMLDivElement;\r\n  private activeBanner: Banner;\r\n  private _activeBannerHeight: number = Banner.DEFAULT_HEIGHT;\r\n\r\n  public readonly events = new EventEmitter<BannerViewEventMap>();\r\n\r\n  constructor() {\r\n    // Step 1 - establish the container element.  Must come before this.setOptions.\r\n    this.constructContainer();\r\n  }\r\n\r\n  /**\r\n   * Constructs the <div> element used to contain hot-swapped `Banner` instances.\r\n   */\r\n  private constructContainer(): HTMLDivElement {\r\n    let d = createUnselectableElement('div');\r\n    d.id = \"keymanweb_banner_container\";\r\n    d.className = \"kmw-banner-container\";\r\n    return this.bannerContainer = d;\r\n  }\r\n\r\n  /**\r\n   * Returns the `Banner`-containing div element used to facilitate hot-swapping.\r\n   */\r\n  public get element(): HTMLDivElement {\r\n    return this.bannerContainer;\r\n  }\r\n\r\n  /**\r\n   * Applies any stylesheets needed by specific `Banner` instances.\r\n   */\r\n  public appendStyles() {\r\n    if(this.activeBanner) {\r\n      this.activeBanner.appendStyleSheet();\r\n    }\r\n  }\r\n\r\n  public get banner(): Banner {\r\n    return this.activeBanner;\r\n  }\r\n\r\n  /**\r\n   * Sets the active `Banner` to the specified type, regardless of\r\n   * existing management logic settings.\r\n   *\r\n   * @param banner The `Banner` instance to set as active.\r\n   */\r\n  public set banner(banner: Banner) {\r\n    if(this.activeBanner) {\r\n      if(banner == this.activeBanner) {\r\n        return;\r\n      } else {\r\n        let prevBanner = this.activeBanner;\r\n        this.activeBanner = banner;\r\n        this.bannerContainer.replaceChild(banner.getDiv(), prevBanner.getDiv());\r\n      }\r\n    } else {\r\n      this.activeBanner = banner;\r\n      if(banner) {\r\n        this.bannerContainer.appendChild(banner.getDiv());\r\n      }\r\n    }\r\n\r\n    if(!(banner instanceof BlankBanner)) {\r\n      banner.height = this.activeBannerHeight;\r\n    }\r\n\r\n    this.events.emit('bannerchange');\r\n  }\r\n\r\n  /**\r\n   * Gets the height (in pixels) of the active `Banner` instance.\r\n   */\r\n  public get height(): number {\r\n    if(this.activeBanner) {\r\n      return this.activeBanner.height;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  public get activeBannerHeight(): number {\r\n    return this._activeBannerHeight;\r\n  }\r\n\r\n  /**\r\n   * Sets the height (in pixels) of the active 'Banner' instance.\r\n   */\r\n  public set activeBannerHeight(h: number) {\r\n    this._activeBannerHeight = h;\r\n\r\n    if (this.activeBanner && !(this.activeBanner instanceof BlankBanner)) {\r\n      this.activeBanner.height = h;\r\n    }\r\n  }\r\n\r\n  public get layoutHeight(): ParsedLengthStyle {\r\n    return ParsedLengthStyle.inPixels(this.height);\r\n  }\r\n\r\n  public refreshLayout() {};\r\n}\r\n\r\nexport class BannerController {\r\n  private _activeType: BannerType;\r\n  private _options: BannerOptions = {};\r\n  private container: BannerView;\r\n  private alwaysShow: boolean;\r\n  private imagePath?: string = \"\";\r\n\r\n  private predictionContext?: PredictionContext;\r\n\r\n  private readonly hostDevice: DeviceSpec;\r\n\r\n  public static readonly DEFAULT_OPTIONS: BannerOptions = {\r\n    alwaysShow: false,\r\n    imagePath: \"\"\r\n  }\r\n\r\n  constructor(bannerView: BannerView, hostDevice: DeviceSpec, predictionContext?: PredictionContext) {\r\n    // Step 1 - establish the container element.  Must come before this.setOptions.\r\n    this.hostDevice = hostDevice;\r\n    this.container = bannerView;\r\n    this.predictionContext = predictionContext;\r\n\r\n    // Initialize with the default options - any 'manually set' options come post-construction.\r\n    // This will also automatically set the default banner in place.\r\n    this.setOptions(BannerController.DEFAULT_OPTIONS);\r\n  }\r\n\r\n  /**\r\n   * This function corresponds to `keyman.osk.banner.getOptions`.\r\n   *\r\n   * Gets the current control settings in use by `BannerManager`.\r\n   */\r\n  public getOptions(): BannerOptions {\r\n    let retObj = {};\r\n\r\n    for(let key in this._options) {\r\n      retObj[key] = this._options[key];\r\n    }\r\n\r\n    return retObj;\r\n  }\r\n\r\n  /**\r\n   * This function corresponds to `keyman.osk.banner.setOptions`.\r\n   *\r\n   * Sets options used to tweak the automatic `Banner`\r\n   * control logic used by `BannerManager`.\r\n   * @param optionSpec An object specifying one or more of the following options:\r\n   * * `persistentBanner` (boolean) When `true`, ensures that a `Banner`\r\n   *   is always displayed, even when no predictive model exists\r\n   *   for the active language.\r\n   *\r\n   *   Default: `false`\r\n   * * `imagePath` (URL string) Specifies the file path to use for an\r\n   *   `ImageBanner` when `persistentBanner` is `true` and no predictive model exists.\r\n   *\r\n   *   Default: `''`.\r\n   * * `enablePredictions` (boolean) Turns KMW predictions\r\n   *   on (when `true`) and off (when `false`).\r\n   *\r\n   *   Default:  `true`.\r\n   */\r\n  public setOptions(optionSpec: BannerOptions) {\r\n    for(let key in optionSpec) {\r\n      switch(key) {\r\n        // Each defined option may require specialized handling.\r\n        case 'alwaysShow':\r\n          // Determines the banner type to activate.\r\n          this.alwaysShow = optionSpec[key];\r\n          break;\r\n        case 'imagePath':\r\n          // Determines the image file to use for ImageBanners.\r\n          this.imagePath = optionSpec[key];\r\n          break;\r\n        default:\r\n          // Invalid option specified!\r\n      }\r\n      this._options[key] = optionSpec[key];\r\n\r\n      // If no banner instance exists yet, go with a safe, blank initialization.\r\n      if(!this.container.banner) {\r\n        this.selectBanner('inactive');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the active `Banner` to the specified type, regardless of\r\n   * existing management logic settings.\r\n   *\r\n   * @param type `'blank' | 'image' | 'suggestion'` - A plain-text string\r\n   *        representing the type of `Banner` to set active.\r\n   * @param height - Optional banner height in pixels.\r\n   */\r\n  public setBanner(type: BannerType) {\r\n    var banner: Banner;\r\n\r\n    let oldBanner = this.container.banner;\r\n    if(oldBanner instanceof SuggestionBanner) {\r\n      this.predictionContext.off('update', oldBanner.onSuggestionUpdate);\r\n    }\r\n\r\n    switch(type) {\r\n      case 'blank':\r\n        banner = new BlankBanner();\r\n        break;\r\n      case 'image':\r\n        banner = new ImageBanner(this.imagePath, this.container.activeBannerHeight);\r\n        break;\r\n      case 'suggestion':\r\n        let suggestBanner = banner = new SuggestionBanner(this.hostDevice, this.container.activeBannerHeight);\r\n        suggestBanner.predictionContext = this.predictionContext;\r\n        suggestBanner.events.on('apply', (selection) => this.predictionContext.accept(selection.suggestion));\r\n\r\n        this.predictionContext.on('update', suggestBanner.onSuggestionUpdate);\r\n        break;\r\n      default:\r\n        throw new Error(\"Invalid type specified for the banner!\");\r\n    }\r\n\r\n    this._activeType = type;\r\n\r\n    if(banner) {\r\n      this.container.banner = banner;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles `LanguageProcessor`'s `'statechange'` events,\r\n   * allowing logic to automatically hot-swap `Banner`s as needed.\r\n   * @param state\r\n   */\r\n  selectBanner(state: StateChangeEnum) {\r\n    // Only display a SuggestionBanner when LanguageProcessor states it is active.\r\n    if(state == 'active' || state == 'configured') {\r\n      this.setBanner('suggestion');\r\n    } else if(state == 'inactive') {\r\n      if(this.alwaysShow) {\r\n        this.setBanner('image');\r\n      } else {\r\n        this.setBanner('blank');\r\n      }\r\n    }\r\n  }\r\n\r\n  public get activeType(): BannerType {\r\n    return this._activeType;\r\n  }\r\n}",
    "import EventEmitter from 'eventemitter3';\r\n\r\nimport { DeviceSpec } from '@keymanapp/web-utils';\r\nimport { Keyboard, KeyboardProperties } from '@keymanapp/keyboard-processor';\r\nimport { type PredictionContext } from '@keymanapp/input-processor';\r\nimport InputEventEngine, { InputEventEngineConfig } from '../input/event-interpreter/inputEventEngine.js';\r\nimport MouseEventEngine from '../input/event-interpreter/mouseEventEngine.js';\r\nimport TouchEventEngine from '../input/event-interpreter/touchEventEngine.js';\r\nimport UITouchHandlerBase from '../input/event-interpreter/uiTouchHandlerBase.js';\r\n\r\nimport { createUnselectableElement } from 'keyman/engine/dom-utils';\r\n\r\n// Base class for a banner above the keyboard in the OSK\r\n\r\nexport abstract class Banner {\r\n  private _height: number; // pixels\r\n  private div: HTMLDivElement;\r\n\r\n  public static DEFAULT_HEIGHT: number = 37; // pixels; embedded apps can modify\r\n\r\n  public static readonly BANNER_CLASS: string = 'kmw-banner-bar';\r\n  public static readonly BANNER_ID: string = 'kmw-banner-bar';\r\n\r\n  /**\r\n   * Function     height\r\n   * Scope        Public\r\n   * @returns     {number} height in pixels\r\n   * Description  Returns the height of the banner in pixels\r\n   */\r\n  public get height(): number {\r\n    return this._height;\r\n  }\r\n\r\n  /**\r\n   * Function     height\r\n   * Scope        Public\r\n   * @param       {number} height   the height in pixels\r\n   * Description  Sets the height of the banner in pixels. If a negative\r\n   *              height is given, set height to 0 pixels.\r\n   *              Also updates the banner styling.\r\n   */\r\n  public set height(height: number) {\r\n    this._height = (height > 0) ?  height : 0;\r\n    this.update();\r\n  }\r\n\r\n  /**\r\n   * Function      update\r\n   * @return       {boolean}   true if the banner styling changed\r\n   * Description   Update the height and display styling of the banner\r\n   */\r\n  private update() : boolean {\r\n    let ds = this.div.style;\r\n    let currentHeightStyle = ds.height;\r\n    let currentDisplayStyle = ds.display;\r\n\r\n    if (this._height > 0) {\r\n      ds.height = this._height + 'px';\r\n      ds.display = 'block';\r\n    } else {\r\n      ds.height = '0px';\r\n      ds.display = 'none';\r\n    }\r\n\r\n    return (!(currentHeightStyle === ds.height) ||\r\n      !(currentDisplayStyle === ds.display));\r\n  }\r\n\r\n  public constructor(height?: number) {\r\n    let d = createUnselectableElement('div');\r\n    d.id = Banner.BANNER_ID;\r\n    d.className = Banner.BANNER_CLASS;\r\n    this.div = d;\r\n\r\n    this.height = height;\r\n    this.update();\r\n  }\r\n\r\n  public appendStyleSheet() {\r\n    // TODO: add stylesheets\r\n    // See VisualKeyboard's method + 'addFontStyle' for current handling.\r\n  }\r\n\r\n  /**\r\n   * Function     getDiv\r\n   * Scope        Public\r\n   * @returns     {HTMLElement} Base element of the banner\r\n   * Description  Returns the HTMLElelemnt of the banner\r\n   */\r\n  public getDiv(): HTMLElement {\r\n    return this.div;\r\n  }\r\n\r\n  /**\r\n   * Allows banners to adapt based on the active keyboard and related properties, such as\r\n   * associated fonts.\r\n   * @param keyboard\r\n   * @param keyboardProperties\r\n   */\r\n  public configureForKeyboard(keyboard: Keyboard, keyboardProperties: KeyboardProperties) { }\r\n}\r\n\r\n/**\r\n * Function       BlankBanner\r\n * Description    A banner of height 0 that should not be shown\r\n */\r\nexport class BlankBanner extends Banner {\r\n\r\n  constructor() {\r\n    super(0);\r\n  }\r\n}\r\n\r\n/**\r\n * Function       ImageBanner\r\n * @param         {string}        imagePath   Path of image to display in the banner\r\n * @param         {number}        height      If provided, the height of the banner in pixels\r\n * Description    Display an image in the banner\r\n */\r\nexport class ImageBanner extends Banner {\r\n  private img: HTMLElement;\r\n\r\n  constructor(imagePath: string, height?: number) {\r\n    if (imagePath.length > 0) {\r\n      super();\r\n      if (height) {\r\n        this.height = height;\r\n      }\r\n    } else {\r\n      super(0);\r\n    }\r\n\r\n    if(imagePath.indexOf('base64') >=0) {\r\n      console.log(\"Loading img from base64 data\");\r\n    } else {\r\n      console.log(\"Loading img with src '\" + imagePath + \"'\");\r\n    }\r\n    this.img = document.createElement('img');\r\n    this.img.setAttribute('src', imagePath);\r\n    let ds = this.img.style;\r\n    ds.width = '100%';\r\n    ds.height = '100%';\r\n    this.getDiv().appendChild(this.img);\r\n    console.log(\"Image loaded.\");\r\n  }\r\n\r\n  /**\r\n   * Function     setImagePath\r\n   * Scope        Public\r\n   * @param       {string}     imagePath   Path of image to display in the banner\r\n   * Description  Update the image in the banner\r\n   */\r\n  public setImagePath(imagePath: string) {\r\n    if (this.img) {\r\n      this.img.setAttribute('src', imagePath);\r\n    }\r\n  }\r\n}\r\n\r\nexport class BannerSuggestion {\r\n  div: HTMLDivElement;\r\n  private display: HTMLSpanElement;\r\n  private fontFamily?: string;\r\n  private rtl: boolean = false;\r\n\r\n  private _suggestion: Suggestion;\r\n\r\n  private index: number;\r\n\r\n  static readonly BASE_ID = 'kmw-suggestion-';\r\n\r\n  constructor(index: number, isRTL: boolean) {\r\n    this.index = index;\r\n    this.rtl = isRTL;\r\n\r\n    this.constructRoot();\r\n\r\n    // Provides an empty, base SPAN for text display.  We'll swap these out regularly;\r\n    // `Suggestion`s will have varying length and may need different styling.\r\n    let display = this.display = createUnselectableElement('span');\r\n    this.div.appendChild(display);\r\n  }\r\n\r\n  private constructRoot() {\r\n    // Add OSK suggestion labels\r\n    let div = this.div = createUnselectableElement('div'), ds=div.style;\r\n    div.className = \"kmw-suggest-option\";\r\n    div.id = BannerSuggestion.BASE_ID + this.index;\r\n\r\n    // Ensures that a reasonable width % is set.\r\n    let usableWidth = 100 - SuggestionBanner.MARGIN * (SuggestionBanner.SUGGESTION_LIMIT - 1);\r\n    let widthpc = usableWidth / SuggestionBanner.SUGGESTION_LIMIT;\r\n\r\n    ds.width = widthpc + '%';\r\n\r\n    this.div['suggestion'] = this;\r\n  }\r\n\r\n  public matchKeyboardProperties(keyboardProperties: KeyboardProperties) {\r\n    const div = this.div;\r\n\r\n    if(keyboardProperties) {\r\n      if (keyboardProperties['KLC']) {\r\n        div.lang = keyboardProperties['KLC'];\r\n      }\r\n\r\n      // Establish base font settings\r\n      let font = keyboardProperties['KFont'];\r\n      if(font && font.family && font.family != '') {\r\n        div.style.fontFamily = this.fontFamily = font.family;\r\n      }\r\n    }\r\n  }\r\n\r\n  get suggestion(): Suggestion {\r\n    return this._suggestion;\r\n  }\r\n\r\n  /**\r\n   * Function update\r\n   * @param {string}     id           Element ID for the suggestion span\r\n   * @param {Suggestion} suggestion   Suggestion from the lexical model\r\n   * Description  Update the ID and text of the BannerSuggestionSpec\r\n   */\r\n  public update(suggestion: Suggestion) {\r\n    this._suggestion = suggestion;\r\n    this.updateText();\r\n  }\r\n\r\n  private updateText() {\r\n    let display = this.generateSuggestionText(this.rtl);\r\n    this.div.replaceChild(display, this.display);\r\n    this.display = display;\r\n  }\r\n\r\n  public isEmpty(): boolean {\r\n    return !this._suggestion;\r\n  }\r\n\r\n  /**\r\n   * Function generateSuggestionText\r\n   * @return {HTMLSpanElement}  Span element of the suggestion\r\n   * Description   Produces a HTMLSpanElement with the key's actual text.\r\n   */\r\n  //\r\n  public generateSuggestionText(rtl: boolean): HTMLSpanElement {\r\n    let suggestion = this._suggestion;\r\n    var suggestionText: string;\r\n\r\n    var s=createUnselectableElement('span');\r\n    s.className = 'kmw-suggestion-text';\r\n\r\n    if(suggestion == null) {\r\n      return s;\r\n    }\r\n\r\n    if(suggestion.displayAs == null || suggestion.displayAs == '') {\r\n      suggestionText = '\\xa0';  // default:  nbsp.\r\n    } else {\r\n      // Default the LTR ordering to match that of the active keyboard.\r\n      let orderCode = rtl ? 0x202e /* RTL */ : 0x202d /* LTR */;\r\n      suggestionText = String.fromCharCode(orderCode) + suggestion.displayAs;\r\n    }\r\n\r\n    // TODO:  Dynamic suggestion text resizing.  (Refer to OSKKey.getTextWidth in visualKeyboard.ts.)\r\n\r\n    // Finalize the suggestion text\r\n    s.innerHTML = suggestionText;\r\n    return s;\r\n  }\r\n}\r\n\r\n/**\r\n * Function     SuggestionBanner\r\n * Scope        Public\r\n * @param {number} height - If provided, the height of the banner in pixels\r\n * Description  Display lexical model suggestions in the banner\r\n */\r\nexport class SuggestionBanner extends Banner {\r\n  public static readonly SUGGESTION_LIMIT: number = 3;\r\n  public static readonly MARGIN = 1;\r\n\r\n  public readonly events: EventEmitter<SuggestionInputEventMap>;\r\n\r\n  private currentSuggestions: Suggestion[] = [];\r\n\r\n  private options : BannerSuggestion[] = [];\r\n  private hostDevice: DeviceSpec;\r\n\r\n  private manager: SuggestionInputManager;\r\n\r\n  private _predictionContext: PredictionContext;\r\n\r\n  static readonly TOUCHED_CLASS: string = 'kmw-suggest-touched';\r\n  static readonly BANNER_CLASS: string = 'kmw-suggest-banner';\r\n\r\n  constructor(hostDevice: DeviceSpec, height?: number) {\r\n    super(height || Banner.DEFAULT_HEIGHT);\r\n    this.hostDevice = hostDevice;\r\n\r\n    this.getDiv().className = this.getDiv().className + ' ' + SuggestionBanner.BANNER_CLASS;\r\n\r\n    this.buildInternals(false);\r\n\r\n    this.manager = new SuggestionInputManager(this.getDiv());\r\n    this.events = this.manager.events;\r\n\r\n    this.setupInputHandling();\r\n  }\r\n\r\n  buildInternals(rtl: boolean) {\r\n    if(this.options.length > 0) {\r\n      this.options.splice(0, this.options.length); // Clear the array.\r\n    }\r\n    for (var i=0; i<SuggestionBanner.SUGGESTION_LIMIT; i++) {\r\n      let d = new BannerSuggestion(i, rtl);\r\n      this.options[i] = d;\r\n    }\r\n\r\n    /* LTR behavior:  the default (index 0) suggestion should be at the left\r\n      * RTL behavior:  the default (index 0) suggestion should be at the right\r\n      *\r\n      * The cleanest way to make it work - simply invert the order in which\r\n      * the elements are inserted for RTL.  This allows the banner to be RTL\r\n      * for visuals/UI while still being internally LTR.\r\n      */\r\n    for (var i=0; i<SuggestionBanner.SUGGESTION_LIMIT; i++) {\r\n      let indexToInsert = rtl ? SuggestionBanner.SUGGESTION_LIMIT - i -1 : i;\r\n      this.getDiv().appendChild(this.options[indexToInsert].div);\r\n\r\n      if(i != SuggestionBanner.SUGGESTION_LIMIT) {\r\n        // Adds a 'separator' div element for UI purposes.\r\n        let separatorDiv = createUnselectableElement('div');\r\n        separatorDiv.className = 'kmw-banner-separator';\r\n\r\n        let ds = separatorDiv.style;\r\n        ds.marginLeft = (SuggestionBanner.MARGIN / 2) + '%';\r\n        ds.marginRight = (SuggestionBanner.MARGIN / 2) + '%';\r\n\r\n        this.getDiv().appendChild(separatorDiv);\r\n      }\r\n    }\r\n  }\r\n\r\n  private setupInputHandling() {\r\n    let inputEngine: InputEventEngine;\r\n    if(this.hostDevice.touchable) { //  /*&& ('ontouchstart' in window)*/ // Except Chrome emulation doesn't set this.\r\n      // Not to mention, it's rather redundant.\r\n      inputEngine = this.touchEventConfig;\r\n    } else {\r\n      inputEngine = this.mouseEventConfig;\r\n    }\r\n\r\n    inputEngine.registerEventHandlers();\r\n\r\n    this.manager.events.on('highlight', (suggestion, on) => {\r\n      const elem = suggestion.div;\r\n      let classes = elem.className;\r\n      let cs = ' ' + SuggestionBanner.TOUCHED_CLASS;\r\n\r\n      if(on && classes.indexOf(cs) < 0) {\r\n        elem.className=classes+cs;\r\n      } else {\r\n        elem.className=classes.replace(cs,'');\r\n      }\r\n    });\r\n\r\n    this.manager.events.on('apply', (option) => {\r\n      if(this.predictionContext) {\r\n        this.predictionContext.accept(option.suggestion);\r\n      }\r\n    });\r\n  }\r\n\r\n  public configureForKeyboard(keyboard: Keyboard, keyboardProperties: KeyboardProperties) {\r\n    const rtl = keyboard.isRTL;\r\n\r\n    // Removes all previous children.  (.replaceChildren requires Chrome for Android 86.)\r\n    // Instantly replaces all children with an empty text node, bypassing the need to actually\r\n    // parse incoming HTML.\r\n    //\r\n    // Just in case, alternative approaches: https://stackoverflow.com/a/3955238\r\n    this.getDiv().textContent = '';\r\n\r\n    // Builds new children to match needed RTL properties.\r\n    this.buildInternals(rtl);\r\n\r\n    this.options.forEach((option) => option.matchKeyboardProperties(keyboardProperties));\r\n    this.onSuggestionUpdate(this.currentSuggestions); // restore suggestions\r\n  }\r\n\r\n  private get mouseEventConfig() {\r\n    const config: InputEventEngineConfig = {\r\n      targetRoot: this.getDiv(),\r\n      // document.body is the event root b/c we need to track the mouse if it leaves\r\n      // the VisualKeyboard's hierarchy.\r\n      eventRoot: document.body,\r\n      inputStartHandler: this.manager.touchStart.bind(this.manager),\r\n      inputMoveHandler:  this.manager.touchMove.bind(this.manager),\r\n      inputEndHandler:   this.manager.touchEnd.bind(this.manager),\r\n      coordConstrainedWithinInteractiveBounds: function() { return true; }\r\n    };\r\n\r\n    return new MouseEventEngine(config);\r\n  }\r\n\r\n  private get touchEventConfig() {\r\n    const config: InputEventEngineConfig = {\r\n      targetRoot: this.getDiv(),\r\n      // document.body is the event root b/c we need to track the mouse if it leaves\r\n      // the VisualKeyboard's hierarchy.\r\n      eventRoot: this.getDiv(),\r\n      inputStartHandler: this.manager.touchStart.bind(this.manager),\r\n      inputMoveHandler:  this.manager.touchMove.bind(this.manager),\r\n      inputEndHandler:   this.manager.touchEnd.bind(this.manager),\r\n      coordConstrainedWithinInteractiveBounds: function() { return true; }\r\n    };\r\n\r\n    return new TouchEventEngine(config);\r\n  }\r\n\r\n  public get predictionContext(): PredictionContext {\r\n    return this._predictionContext;\r\n  }\r\n\r\n  public set predictionContext(context: PredictionContext) {\r\n    if(this._predictionContext) {\r\n      // disconnect the old one!\r\n      this._predictionContext.off('update', this.onSuggestionUpdate);\r\n    }\r\n\r\n    // connect the new one!\r\n    this._predictionContext = context;\r\n    if(context) {\r\n      context.on('update', this.onSuggestionUpdate);\r\n      this.onSuggestionUpdate(context.currentSuggestions);\r\n    }\r\n  }\r\n\r\n  public onSuggestionUpdate = (suggestions: Suggestion[]): void => {\r\n    this.currentSuggestions = suggestions;\r\n\r\n    this.options.forEach((option: BannerSuggestion, i: number) => {\r\n      if(i < suggestions.length) {\r\n        option.update(suggestions[i]);\r\n      } else {\r\n        option.update(null);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\ninterface SuggestionInputEventMap {\r\n  highlight: (bannerSuggestion: BannerSuggestion, state: boolean) => void,\r\n  apply: (bannerSuggestion: BannerSuggestion) => void;\r\n  hold: (bannerSuggestion: BannerSuggestion) => void;\r\n}\r\n\r\nclass SuggestionInputManager extends UITouchHandlerBase<HTMLDivElement> {\r\n  public readonly events = new EventEmitter<SuggestionInputEventMap>();\r\n\r\n  private eventDisablePromise: Promise<any>;\r\n\r\n  platformHold: (suggestion: BannerSuggestion, isCustom: boolean) => void;\r\n\r\n  //#region Touch handling implementation\r\n  findTargetFrom(e: HTMLElement): HTMLDivElement {\r\n    try {\r\n      if(e) {\r\n        if(e.classList.contains('kmw-suggest-option')) {\r\n          return e as HTMLDivElement;\r\n        }\r\n        if(e.parentElement && e.parentElement.classList.contains('kmw-suggest-option')) {\r\n          return e.parentElement as HTMLDivElement;\r\n        }\r\n        // if(e.firstChild && util.hasClass(<HTMLElement> e.firstChild,'kmw-suggest-option')) {\r\n        //   return e.firstChild as HTMLDivElement;\r\n        // }\r\n      }\r\n    } catch(ex) {}\r\n    return null;\r\n  }\r\n\r\n  protected highlight(t: HTMLDivElement, on: boolean): void {\r\n    let suggestion = t['suggestion'] as BannerSuggestion;\r\n\r\n    // Never highlight an empty suggestion button.\r\n    if(suggestion.isEmpty()) {\r\n      on = false;\r\n    }\r\n\r\n    this.events.emit('highlight', suggestion, on);\r\n  }\r\n\r\n  protected select(t: HTMLDivElement): void {\r\n    this.events.emit('apply', t['suggestion'] as BannerSuggestion);\r\n  }\r\n\r\n  //#region Long-press support\r\n  protected hold(t: HTMLDivElement): void {\r\n    // let suggestionObj = t['suggestion'] as BannerSuggestion;\r\n    //\r\n    // // Is this the <keep> suggestion?  It's never in this.currentSuggestions, so check against that.\r\n    // let isCustom = this.currentSuggestions.indexOf(suggestionObj.suggestion) == -1;\r\n\r\n    this.events.emit('hold', t['suggestion'] as BannerSuggestion);\r\n  }\r\n  protected clearHolds(): void {\r\n    // Temp, pending implementation of suggestion longpress submenus\r\n    // - nothing to clear without them -\r\n\r\n    // only really used in native-KMW\r\n  }\r\n\r\n  protected hasModalPopup(): boolean {\r\n    return this.eventsBlocked;\r\n  }\r\n\r\n  protected dealiasSubTarget(target: HTMLDivElement): HTMLDivElement {\r\n    return target;\r\n  }\r\n\r\n  protected hasSubmenu(t: HTMLDivElement): boolean {\r\n    // Temp, pending implementation of suggestion longpress submenus\r\n\r\n    // Only really used by native-KMW - see kmwnative's highlightSubKeys func.\r\n    return false;\r\n  }\r\n\r\n  protected isSubmenuActive(): boolean {\r\n    // Temp, pending implementation of suggestion longpress submenus\r\n\r\n    // Utilized only by native-KMW - it parallels hasModalPopup() in purpose.\r\n    return false;\r\n  }\r\n\r\n  protected displaySubmenuFor(target: HTMLDivElement) {\r\n    // Utilized only by native-KMW to show submenus.\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n  //#endregion\r\n  //#endregion\r\n\r\n  public get eventsBlocked(): boolean {\r\n    return !!this.eventDisablePromise;\r\n  }\r\n\r\n  /**\r\n   * Intended for use by the mobile apps, which sometimes 'takes over' touch handling.\r\n   * For such cases, input should be blocked within KMW when the apps are managing an\r\n   * ongoing touch-hold for any other interaction.\r\n   *\r\n   * Formerly:\r\n  ```\r\n  let keyman = com.keyman.singleton;\r\n  return keyman['osk'].vkbd.subkeyGesture && keyman.isEmbedded;\r\n  ```\r\n   */\r\n  public temporarilyBlockEvents(promise: Promise<void>) { // TODO:  ensure connection for embedded mode!\r\n    this.eventDisablePromise = promise;                   // Will require routing; this class is not exported!\r\n    promise.finally(() => {\r\n      this.eventDisablePromise = null;\r\n    })\r\n  }\r\n\r\n  constructor(div: HTMLElement) {\r\n    // TODO:  Determine appropriate CSS styling names, etc.\r\n    super(div, Banner.BANNER_CLASS, SuggestionBanner.TOUCHED_CLASS);\r\n  }\r\n}\r\n",
    "import InputEventCoordinate from '../inputEventCoordinate.js';\r\n\r\nexport type InputHandler = (coord: InputEventCoordinate) => void;\r\n\r\nexport interface InputEventEngineConfig {\r\n  /**\r\n   * Specifies the element that input listeners should be attached to.\r\n   */\r\n  readonly eventRoot: HTMLElement;\r\n  /**\r\n   * Specifies the most specific common ancestor element of any event target\r\n   * that the InputEventEngine should consider.\r\n   */\r\n  readonly targetRoot: HTMLElement;\r\n\r\n  readonly coordConstrainedWithinInteractiveBounds: (coord: InputEventCoordinate) => boolean;\r\n\r\n  readonly inputStartHandler?:      InputHandler;\r\n  readonly inputMoveHandler?:       InputHandler;\r\n  readonly inputMoveCancelHandler?: InputHandler;\r\n  readonly inputEndHandler?:        InputHandler;\r\n}\r\n\r\nexport default abstract class InputEventEngine {\r\n  protected readonly config: InputEventEngineConfig;\r\n\r\n  public constructor(config: InputEventEngineConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  abstract registerEventHandlers();\r\n  abstract unregisterEventHandlers();\r\n\r\n  onInputStart(coord: InputEventCoordinate) {\r\n    if(this.config.inputStartHandler) {\r\n      this.config.inputStartHandler(coord);\r\n    }\r\n  }\r\n\r\n  onInputMove(coord: InputEventCoordinate) {\r\n    if(this.config.inputMoveHandler) {\r\n      this.config.inputMoveHandler(coord);\r\n    }\r\n  }\r\n\r\n  onInputMoveCancel(coord: InputEventCoordinate) {\r\n    if(this.config.inputMoveCancelHandler) {\r\n      this.config.inputMoveCancelHandler(coord);\r\n    }\r\n  }\r\n\r\n  onInputEnd(coord: InputEventCoordinate) {\r\n    if(this.config.inputEndHandler) {\r\n      this.config.inputEndHandler(coord);\r\n    }\r\n  }\r\n}",
    "/**\r\n * Represents the current location of the current cursor / touchpoint during\r\n * an ongoing OSK input event.  This class standardizes to .pageX (document)\r\n * coordinates, rather than .clientX (viewport) coordinates.\r\n */\r\nexport default class InputEventCoordinate {\r\n  public readonly x: number;\r\n  public readonly y: number;\r\n\r\n  private readonly source: MouseEvent | TouchEvent;\r\n\r\n  public constructor(x: number, y: number, source?: MouseEvent | TouchEvent) {\r\n    this.x = x;\r\n    this.y = y;\r\n\r\n    if(source) {\r\n      this.source = source;\r\n    }\r\n  }\r\n\r\n  // Converts a MouseEvent or TouchEvent into the base coordinates needed\r\n  // by the mouse-dragging operations.\r\n  public static fromEvent(e: MouseEvent | TouchEvent) {\r\n    let coordSource: MouseEvent | Touch;\r\n\r\n    // Desktop Safari versions as recent as 14.1 do not support TouchEvents.\r\n    // So, just in case, a two-fold conditional check to avoid issues with a direct\r\n    // 'instanceof' against the type.\r\n    if(window['TouchEvent'] && e instanceof TouchEvent) {\r\n      coordSource = e.changedTouches[0];\r\n    } else if(e['changedTouches']) {\r\n      coordSource = e['changedTouches'][0] as Touch;\r\n    } else {\r\n      coordSource = e as MouseEvent;\r\n    }\r\n\r\n    // For MouseEvents, .pageX is slightly less supported in older browsers when\r\n    // compared to .clientX.  They're about equally supported for TouchEvents.\r\n    if (coordSource.pageX) {\r\n      return new InputEventCoordinate(coordSource.pageX, coordSource.pageY, e);\r\n    } else if (coordSource.clientX) {\r\n      const x = coordSource.clientX + document.body.scrollLeft;\r\n      const y = coordSource.clientY + document.body.scrollTop;\r\n\r\n      return new InputEventCoordinate(x, y, e);\r\n    } else {\r\n      return new InputEventCoordinate(null, null, e);\r\n    }\r\n  }\r\n\r\n  public get activeInputCount(): number {\r\n    // May not be an ACTUAL touch event during unit tests.\r\n    if(window['TouchEvent'] && this.source['touches'] !== undefined && this.source['touches'] !== null) {\r\n      return this.source['touches'].length;\r\n    } else {\r\n      const event = this.source as MouseEvent;\r\n      return event.buttons > 0 ? 1 : 0;\r\n    }\r\n  }\r\n\r\n  public get target() {\r\n    return this.source?.target;\r\n  }\r\n\r\n  public get isFromTouch(): boolean {\r\n    return !this.isFromMouse;\r\n  }\r\n\r\n  public get isFromMouse(): boolean {\r\n    return this.source instanceof MouseEvent;\r\n  }\r\n}",
    "import InputEventEngine, { InputEventEngineConfig } from './inputEventEngine.js';\r\nimport InputEventCoordinate from '../inputEventCoordinate.js';\r\n\r\nexport default class MouseEventEngine extends InputEventEngine {\r\n  private readonly _mouseStart: typeof MouseEventEngine.prototype.onMouseStart;\r\n  private readonly _mouseMove:  typeof MouseEventEngine.prototype.onMouseMove;\r\n  private readonly _mouseEnd:   typeof MouseEventEngine.prototype.onMouseEnd;\r\n\r\n  private hasActiveClick: boolean = false;\r\n  private ignoreSequence: boolean = false;\r\n\r\n  public constructor(config: InputEventEngineConfig) {\r\n    super(config);\r\n\r\n    this._mouseStart = this.onMouseStart.bind(this);\r\n    this._mouseMove  = this.onMouseMove.bind(this);\r\n    this._mouseEnd   = this.onMouseEnd.bind(this);\r\n  }\r\n\r\n  registerEventHandlers() {\r\n    this.config.eventRoot.addEventListener('mousedown', this._mouseStart, true);\r\n    this.config.eventRoot.addEventListener('mousemove',  this._mouseMove, false);\r\n    // The listener below fails to capture when performing automated testing checks in Chrome emulation unless 'true'.\r\n    this.config.eventRoot.addEventListener('mouseup',   this._mouseEnd, true);\r\n  }\r\n\r\n  unregisterEventHandlers() {\r\n    this.config.eventRoot.removeEventListener('mousedown', this._mouseStart, true);\r\n    this.config.eventRoot.removeEventListener('mousemove',  this._mouseMove, false);\r\n    this.config.eventRoot.removeEventListener('mouseup',   this._mouseEnd, true);\r\n  }\r\n\r\n  private preventPropagation(e: MouseEvent) {\r\n    // Standard event maintenance\r\n    e.preventDefault();\r\n    e.cancelBubble=true;\r\n    e.returnValue=false; // I2409 - Avoid focus loss for visual keyboard events\r\n\r\n    if(typeof e.stopImmediatePropagation == 'function') {\r\n      e.stopImmediatePropagation();\r\n    } else if(typeof e.stopPropagation == 'function') {\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n\r\n  onMouseStart(event: MouseEvent) {\r\n    if(!this.config.targetRoot.contains(event.target as Node)) {\r\n      this.ignoreSequence = true;\r\n      return;\r\n    }\r\n\r\n    this.preventPropagation(event);\r\n    this.onInputStart(InputEventCoordinate.fromEvent(event));\r\n    this.hasActiveClick = true;\r\n  }\r\n\r\n  onMouseMove(event: MouseEvent) {\r\n    if(this.ignoreSequence) {\r\n      return;\r\n    }\r\n\r\n    const coord = InputEventCoordinate.fromEvent(event);\r\n\r\n    if(!event.buttons) {\r\n      if(this.hasActiveClick) {\r\n        this.hasActiveClick = false;\r\n        this.onInputMoveCancel(coord);\r\n      }\r\n      return;\r\n    } else if(!this.hasActiveClick) {\r\n      // Can interfere with OSK drag-handlers (title bar, resize bar) otherwise.\r\n      return;\r\n    }\r\n\r\n    this.preventPropagation(event);\r\n\r\n    if(this.config.coordConstrainedWithinInteractiveBounds(coord)) {\r\n      this.onInputMove(coord);\r\n    } else {\r\n      this.onInputMoveCancel(coord);\r\n    }\r\n  }\r\n\r\n  onMouseEnd(event: MouseEvent) {\r\n    if(this.ignoreSequence) {\r\n      this.ignoreSequence = false;\r\n      return;\r\n    }\r\n\r\n    if(!event.buttons) {\r\n      this.hasActiveClick = false;\r\n    }\r\n    this.onInputEnd(InputEventCoordinate.fromEvent(event));\r\n  }\r\n}",
    "import InputEventEngine, { InputEventEngineConfig } from './inputEventEngine.js';\r\nimport InputEventCoordinate from '../inputEventCoordinate.js';\r\n\r\nexport default class TouchEventEngine extends InputEventEngine {\r\n  private readonly _touchStart: typeof TouchEventEngine.prototype.onTouchStart;\r\n  private readonly _touchMove:  typeof TouchEventEngine.prototype.onTouchMove;\r\n  private readonly _touchEnd:   typeof TouchEventEngine.prototype.onTouchEnd;\r\n\r\n  public constructor(config: InputEventEngineConfig) {\r\n    super(config);\r\n\r\n    this._touchStart = this.onTouchStart.bind(this);\r\n    this._touchMove  = this.onTouchMove.bind(this);\r\n    this._touchEnd   = this.onTouchEnd.bind(this);\r\n  }\r\n\r\n  registerEventHandlers() {\r\n    this.config.eventRoot.addEventListener('touchstart', this._touchStart, true);\r\n    this.config.eventRoot.addEventListener('touchmove',  this._touchMove, false);\r\n    // The listener below fails to capture when performing automated testing checks in Chrome emulation unless 'true'.\r\n    this.config.eventRoot.addEventListener('touchend',   this._touchEnd, true);\r\n  }\r\n\r\n  unregisterEventHandlers() {\r\n    this.config.eventRoot.removeEventListener('touchstart', this._touchStart, true);\r\n    this.config.eventRoot.removeEventListener('touchmove',  this._touchMove, false);\r\n    this.config.eventRoot.removeEventListener('touchend',   this._touchEnd, true);\r\n  }\r\n\r\n  private preventPropagation(e: TouchEvent) {\r\n    // Standard event maintenance\r\n    e.preventDefault();\r\n    e.cancelBubble=true;\r\n\r\n    if(typeof e.stopImmediatePropagation == 'function') {\r\n      e.stopImmediatePropagation();\r\n    } else if(typeof e.stopPropagation == 'function') {\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n\r\n  onTouchStart(event: TouchEvent) {\r\n    this.onInputStart(InputEventCoordinate.fromEvent(event));\r\n  }\r\n\r\n  onTouchMove(event: TouchEvent) {\r\n    this.preventPropagation(event);\r\n    const coord = InputEventCoordinate.fromEvent(event);\r\n\r\n    if(this.config.coordConstrainedWithinInteractiveBounds(coord)) {\r\n      this.onInputMove(coord);\r\n    } else {\r\n      this.onInputMoveCancel(coord);\r\n    }\r\n  }\r\n\r\n  onTouchEnd(event: TouchEvent) {\r\n    this.onInputEnd(InputEventCoordinate.fromEvent(event));\r\n  }\r\n}",
    "import InputEventCoordinate from \"../inputEventCoordinate.js\";\r\nimport { getAbsoluteY } from 'keyman/engine/dom-utils';\r\n\r\n/**\r\n * This class was added to facilitate scroll handling for overflow-x elements, though it could\r\n * be extended in the future to accept overflow-y if needed.\r\n *\r\n * This is necessary because of the OSK's need to use `.preventDefault()` for stability; that\r\n * same method blocks native handling of overflow scrolling for touch browsers.\r\n */\r\nclass ScrollState {\r\n  // While we don't currently track y-coordinates here, the class is designed\r\n  // to permit tracking them with minimal extra effort if we ever decide to do so.\r\n  x: number;\r\n  totalLength = 0;\r\n\r\n  // The amount of coordinate 'noise' allowed during a scroll-enabled touch allowed\r\n  // before interpreting the currently-ongoing touch command as having scrolled.\r\n  static readonly HAS_SCROLLED_FUDGE_FACTOR = 10;\r\n\r\n  constructor(coord: InputEventCoordinate) {\r\n    this.x = coord.x;\r\n\r\n    this.totalLength = 0;\r\n  }\r\n\r\n  updateTo(coord: InputEventCoordinate): {deltaX: number} {\r\n    let x = this.x;\r\n    this.x = coord.x;\r\n\r\n    let deltas = {deltaX: this.x - x};\r\n    this.totalLength += Math.abs(deltas.deltaX);\r\n\r\n    return deltas;\r\n  }\r\n\r\n  public get hasScrolled(): boolean {\r\n    // Allow an accidental fudge-factor for overflow element noise during a touch, but not much.\r\n    return this.totalLength > ScrollState.HAS_SCROLLED_FUDGE_FACTOR;\r\n  }\r\n}\r\n\r\nexport default abstract class UITouchHandlerBase<Target extends HTMLElement> {\r\n  private rowClassMatch: string;\r\n  private selectedTargetMatch: string;\r\n  private baseElement: HTMLElement;\r\n\r\n  private touchX: number;\r\n  private touchY: number;\r\n  private touchCount: number;\r\n\r\n  private currentTarget: Target;\r\n\r\n  private scrollTouchState: ScrollState;\r\n  private pendingTarget: Target;\r\n\r\n  constructor(baseElement: HTMLElement, rowClassMatch: string, selectedTargetMatch: string) {\r\n    this.baseElement = baseElement;\r\n    this.rowClassMatch = rowClassMatch;\r\n    this.selectedTargetMatch = selectedTargetMatch;\r\n  }\r\n\r\n  /**\r\n   * Finds the internally-preferred target element or submenu target element.\r\n   * @param e The DOM element that actually received the touch event.\r\n   * May be parent, child, or the actually-desired element itself.\r\n   */\r\n  abstract findTargetFrom(e: HTMLElement): Target;\r\n\r\n  /**\r\n   * Highlights the target element as visual feedback representing\r\n   * a pending touch.\r\n   * @param t The `Target` to highlight\r\n   * @param state `true` to apply highlighting, `false` to remove it.\r\n   */\r\n  protected abstract highlight(t: Target, state: boolean): void;\r\n\r\n  /**\r\n   * Called whenever the touch-handling analysis determines that the Target has been selected\r\n   * @param t The `Target` to activate/execute.\r\n   */\r\n  protected abstract select(t: Target): void;\r\n\r\n  /**\r\n   * Requests info on whether or not the indicated `Target` has subkeys or a submenu.\r\n   * @param t A `Target`.\r\n   */\r\n  protected abstract hasSubmenu(t: Target): boolean;\r\n\r\n  /**\r\n   * Indicates that the user is maintaining a `Touch` on the specified `Target`.\r\n   * Popups and-or longpress menus may be appropriate.\r\n   * @param t The `Target` being held.\r\n   */\r\n  protected abstract hold(t: Target): void;\r\n\r\n  /**\r\n   * Signals that any popup elements (previews, subkey views, etc) should be cancelled.\r\n   */\r\n  protected abstract clearHolds(): void;\r\n\r\n  /**\r\n   * Requests a boolean indicating whether or not the UI is currently displaying any input-blocking popup elements.\r\n   * Embedded mode should return `true` when the app is displaying popup menus.\r\n   */\r\n  protected abstract hasModalPopup(): boolean;\r\n\r\n  /**\r\n   * Designed to support highlighting of prepended base keys on phone form-factor subkey menus.\r\n   * @param target The base element with a potential subkey menu alias.\r\n   * @returns The aliased submenu version of the `Target`, or the original `Target` if no alias exists.\r\n   */\r\n  protected abstract dealiasSubTarget(target: Target): Target;\r\n\r\n  /**\r\n   * Should return true whenever a 'native'-mode submenu (or subkey) display is active.\r\n   */\r\n  protected abstract isSubmenuActive(): boolean;\r\n\r\n  /**\r\n   * For 'native' mode - requests that the submenu for the indicated `Target` be instantly displayed.\r\n   * @param target The base element with a potential submenu\r\n   */\r\n  protected abstract displaySubmenuFor(target: Target);\r\n\r\n  /**\r\n   * Identify the key nearest to (but NOT under) the touch point if at the end of a key row,\r\n   * but return null more than about 0.6 key width from the nearest key.\r\n   *\r\n   *  @param  {Object}  coord   A pre-analyzed input coordinate\r\n   *  @param  {Object}  t   HTML object at touch point\r\n   *  @param  {boolean} omitCurrent  Omits any target directly under the touch point.\r\n   *  @return {Object}      nearest key to touch point\r\n   *\r\n   **/\r\n  private findTargetFromTouch(coord: InputEventCoordinate, t: HTMLElement, forMove: boolean): Target {\r\n    var x = coord.x;\r\n\r\n    // Get the UI row beneath touch point (SuggestionBanner div, 'kmw-key-row' if OSK, ...)\r\n    while(t && t.className !== undefined && t.className.indexOf(this.rowClassMatch) < 0) {\r\n      t = <HTMLElement> t.parentNode;\r\n    }\r\n    if(!t) {\r\n      return null;\r\n    }\r\n\r\n    // Find minimum distance from any key\r\n    var k: number, bestMatch=0, dxMax=24, dxMin=100000, x1: number, x2: number;\r\n    for(k = 0; k < t.childNodes.length; k++) {\r\n      let childNode = t.childNodes[k] as HTMLElement;\r\n\r\n      if(this.isInvalidTarget(this.findTargetFrom(childNode))) {\r\n        continue;\r\n      }\r\n\r\n      x1 = childNode.offsetLeft;\r\n      x2 = x1 + childNode.offsetWidth;\r\n\r\n      // If it lies completely to the right and is the closest so far\r\n      let dxRight = x1 - x;\r\n      if(dxRight >= 0 && dxRight < dxMin) {\r\n        bestMatch = k;\r\n        dxMin = dxRight;\r\n      }\r\n\r\n      // If it lies completely to the left and is the closest so far\r\n      let dxLeft = x - x2;\r\n      if(dxLeft >= 0 && dxLeft < dxMin) {\r\n        bestMatch = k;\r\n        dxMin = dxLeft;\r\n      }\r\n\r\n      // If it is neither completely to the left nor completely to the right,\r\n      // it's under the cursor.  Stop the search!\r\n      if(dxLeft < 0 && dxRight < 0) {\r\n        return this.findTargetFrom(childNode);\r\n      }\r\n    }\r\n\r\n    if(dxMin < 100000) {\r\n      t = <HTMLElement> t.childNodes[bestMatch];\r\n      x1 = t.offsetLeft;\r\n      x2 = x1 + t.offsetWidth;\r\n\r\n      // Limit extended touch area to the larger of 0.6 of the potential target's width and 24 px\r\n      if(t.offsetWidth > 40) {\r\n        dxMax = 0.6 * t.offsetWidth;\r\n      }\r\n\r\n      if(((x1 - x) >= 0 && (x1 - x) < dxMax) || ((x - x2) >= 0 && (x - x2) < dxMax)) {\r\n        return this.findTargetFrom(t);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  findBestTarget(coord: InputEventCoordinate, forMove?: boolean) {\r\n    var eventTarget: HTMLElement;\r\n\r\n    if(forMove) {\r\n      const clientX = coord.x + document.body.scrollLeft;\r\n      const clientY = coord.y + document.body.scrollTop;\r\n      eventTarget = document.elementFromPoint(clientX, clientY) as HTMLElement;\r\n    } else {\r\n      eventTarget = coord.target as HTMLElement;\r\n    }\r\n\r\n    let target = this.findTargetFrom(eventTarget);\r\n\r\n    // Should refactor this multi-check a bit for more overall reliability.\r\n    if(!target) {\r\n      // We didn't find a direct target, so we should look for the closest possible one.\r\n      // Filters out invalid targets.\r\n      target = this.findTargetFromTouch(coord, eventTarget, forMove);\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * Reports whether or not a `Target` should be considered invalid.  Needed by the OSK for\r\n   * hidden keys.\r\n   * @param target A `Target` element to be validated.\r\n   */\r\n  protected isInvalidTarget(target: Target): boolean {\r\n    return false;\r\n  }\r\n\r\n  touchStart(coord: InputEventCoordinate) {\r\n    // Determine the selected Target, manage state.\r\n    this.currentTarget = this.findBestTarget(coord);\r\n    this.touchX = coord.x;\r\n    this.touchY = coord.y;\r\n\r\n    // If popup stuff, immediately return.\r\n\r\n    this.touchCount = coord.activeInputCount;\r\n\r\n    if(!this.currentTarget) {\r\n      return;\r\n    }\r\n\r\n    // Establish scroll tracking.\r\n    let shouldScroll = (this.currentTarget.clientWidth < this.currentTarget.scrollWidth);\r\n    this.scrollTouchState = shouldScroll ? new ScrollState(coord) : null;\r\n\r\n    // Alright, Target acquired!  Now to use it:\r\n\r\n    // Highlight the touched key\r\n    this.highlight(this.currentTarget,true);\r\n\r\n    // If used by the OSK, the special function keys need immediate action\r\n    // Add a `checkForImmediates()` to facilitate this.\r\n    if(this.pendingTarget) {\r\n      this.highlight(this.pendingTarget, false);\r\n      this.select(this.pendingTarget);\r\n      this.clearHolds();\r\n      // Decrement the number of unreleased touch points to prevent\r\n      // sending the keystroke again when the key is actually released\r\n      this.touchCount--;\r\n    } else {\r\n      // If this key has subkey, start timer to display subkeys after delay, set up release\r\n      this.hold(this.currentTarget);\r\n    }\r\n    this.pendingTarget = this.currentTarget;\r\n  }\r\n\r\n  touchEnd(coord: InputEventCoordinate): void {\r\n    // Prevent incorrect multi-touch behaviour if native or device popup visible\r\n    let t = this.currentTarget;\r\n\r\n    if(this.isSubmenuActive() || this.hasModalPopup()) {\r\n      // Ignore release if a multiple touch\r\n      if(coord.activeInputCount > 0) {\r\n        return;\r\n      }\r\n\r\n      // Cancel (but do not execute) pending key if neither a popup key or the base key\r\n      if(t == null || t.id.indexOf('popup') < 0) {\r\n        if (this.pendingTarget) {\r\n          this.highlight(this.pendingTarget,false);\r\n        }\r\n        this.clearHolds();\r\n        this.pendingTarget = null;\r\n      }\r\n    }\r\n\r\n    // Test if moved off screen (effective release point must be corrected for touch point horizontal speed)\r\n    // This is not completely effective and needs some tweaking, especially on Android\r\n    var x = coord.x;\r\n    var beyondEdge = ((x < 2 && this.touchX > 5) || (x > window.innerWidth - 2 && this.touchX < window.innerWidth - 5));\r\n\r\n    if(this.scrollTouchState) {\r\n      beyondEdge = beyondEdge || this.scrollTouchState.hasScrolled;\r\n    }\r\n\r\n    // Save then decrement current touch count\r\n    var tc=this.touchCount;\r\n    if(this.touchCount > 0) {\r\n      this.touchCount--;\r\n    }\r\n\r\n    // Process and clear highlighting of pending target\r\n    if(this.pendingTarget) {\r\n      this.highlight(this.pendingTarget,false);\r\n\r\n      // Output character unless moved off key\r\n      if(this.pendingTarget.className.indexOf('hidden') < 0 && tc > 0 && !beyondEdge) {\r\n        this.select(this.pendingTarget);\r\n      }\r\n      this.clearHolds();\r\n      this.pendingTarget = null;\r\n      // Always clear highlighting of current target on release (multi-touch)\r\n    } else {\r\n      t = this.findBestTarget(coord);\r\n\r\n      if(t) {\r\n        this.highlight(t,false);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * OSK touch move event handler\r\n   *\r\n   *  @param  {Object}  coord   A pre-analyzed input coordinate\r\n   *\r\n   **/\r\n  touchMove(coord: InputEventCoordinate) : void {\r\n    //let keyman = com.keyman.singleton;\r\n\r\n    // Do not attempt to support reselection of target key for overlapped keystrokes\r\n    if(coord.activeInputCount > 1 || this.touchCount == 0) {\r\n      return;\r\n    }\r\n\r\n    if(this.currentTarget && this.scrollTouchState != null) {\r\n      let deltaX = this.scrollTouchState.updateTo(coord).deltaX;\r\n      this.currentTarget.scrollLeft -= window.devicePixelRatio * deltaX;\r\n\r\n      return;\r\n    }\r\n\r\n    // Get touch position\r\n    var y = coord.y;\r\n\r\n    // Move target key and highlighting\r\n    var key0 = this.pendingTarget,\r\n        key1 = this.findBestTarget(coord, true);  // For the OSK, this ALSO gets subkeys.\r\n\r\n    // If option should not be selectable, how do we re-target?\r\n\r\n\r\n    // Do not move over keys if device popup visible\r\n    if(this.hasModalPopup()) {\r\n      if(key0) {\r\n        this.highlight(key0,false);\r\n      }\r\n      this.pendingTarget=null;\r\n      return;\r\n    }\r\n\r\n    // Use the popup duplicate of the base key if a phone with a visible popup array\r\n    key1 = this.dealiasSubTarget(key1);\r\n\r\n    // Identify current touch position (to manage off-key release)\r\n    this.currentTarget = key1;\r\n\r\n    // Clear previous key highlighting\r\n    if(key0 && key1 && key1 !== key0) {\r\n      this.highlight(key0,false);\r\n    }\r\n\r\n    // Code below directly related to subkeys should only be triggered within 'native' mode.\r\n    // The embedded version instead passes info to the apps to produce their own subkeys in-app.\r\n\r\n    // If popup is visible, need to move over popup, not over main keyboard\r\n    if(key1 && this.hasSubmenu(key1)) {\r\n      //this.highlightSubKeys(key1,x,y);\r\n\r\n      // Currently only used by the banner... which currently does not do submenus.\r\n      // // Native-mode: show popup keys immediately if touch moved up towards key array (KMEW-100, Build 353)\r\n      // if(!keyman.isEmbedded && (this.touchY-y > 5) && !this.isSubmenuActive()) {\r\n      //   // Instantly show the submenu.\r\n      //   this.displaySubmenuFor(key1);\r\n      // }\r\n\r\n      // Once a subkey array is displayed, do not allow changing the base key.\r\n      // Keep that array visible and accept no other options until the touch ends.\r\n      if(key1 && key1.id.indexOf('popup') < 0) { // TODO:  reliant on 'popup' in .id\r\n        return;\r\n      }\r\n\r\n      // Highlight the base key on devices that do not append it to the subkey array.\r\n      if(key1 && key1.className.indexOf(this.selectedTargetMatch) < 0) {\r\n        this.highlight(key1,true);\r\n      }\r\n      // Cancel touch if moved up and off keyboard, unless popup keys visible\r\n    } else {\r\n      let base = this.baseElement;\r\n      let top = getAbsoluteY(base);\r\n      let height = base.offsetHeight;\r\n      let yMin = Math.max(5, top - 0.25 * height);\r\n      let yMax = (top + height) + 0.25 * height;\r\n      if(key0 && (coord.y < yMin || coord.y > yMax)) {\r\n        this.highlight(key0,false);\r\n        this.clearHolds();\r\n        this.pendingTarget = null;\r\n      }\r\n    }\r\n\r\n    // Replace the target key, if any, by the new target key\r\n    // Do not replace a null target, as that indicates the key has already been released\r\n    if(key1 && this.pendingTarget) {\r\n      this.pendingTarget = key1;\r\n    }\r\n\r\n    if(this.pendingTarget) {\r\n      if(key1 && (key0 != key1 || key1.className.indexOf(this.selectedTargetMatch) < 0)) {\r\n        this.highlight(key1,true);\r\n      }\r\n    }\r\n\r\n    if(key0 && key1 && (key1 != key0) && (key1.id != '')) {\r\n      //  Display the touch-hold keys (after a pause)\r\n      this.hold(key1);\r\n    }\r\n  }\r\n}\r\n",
    "export interface LengthStyle {\r\n  val: number,\r\n  absolute: boolean,\r\n  special?: 'em' | 'rem';\r\n};\r\n\r\nexport class ParsedLengthStyle implements LengthStyle {\r\n  public readonly val: number;\r\n  public readonly absolute: boolean;\r\n  public readonly special: 'em' | 'rem';\r\n\r\n  public constructor(style: LengthStyle | string) {\r\n    let parsed: LengthStyle = (typeof style == 'string') ? ParsedLengthStyle.parseLengthStyle(style) : style;\r\n\r\n    // While Object.assign would be nice (and previously, was used), it will break\r\n    // on old but still supported versions of Android if their Chrome isn't updated.\r\n    // Requires mobile Chrome 45+, but API 21 (5.0) launches with an older browser.\r\n\r\n    // Object.assign(this, parsed);\r\n    this.val = parsed.val;\r\n    this.absolute = parsed.absolute;\r\n    if(parsed.special) {\r\n      this.special = parsed.special;\r\n    }\r\n  }\r\n\r\n  public get styleString(): string {\r\n    if(this.absolute) {\r\n      return this.val + 'px';\r\n    } else if(this.special) {\r\n      // Only 'em' and 'rem' are allowed, and both may be treated similarly.\r\n      // Both relate to font sizes, though the path to the reference element\r\n      // differs between them.\r\n      return this.val + this.special;\r\n    } else {\r\n      return (this.val * 100) + '%';\r\n    }\r\n  }\r\n\r\n  public scaledBy(scalar: number): ParsedLengthStyle {\r\n    return new ParsedLengthStyle({\r\n      val: scalar * this.val,\r\n      absolute: this.absolute\r\n    });\r\n  }\r\n\r\n  public static inPixels(val: number): ParsedLengthStyle {\r\n    return new ParsedLengthStyle({val: val, absolute: true});\r\n  }\r\n\r\n  public static inPercent(val: number): ParsedLengthStyle {\r\n    return new ParsedLengthStyle({val: val/100, absolute: false});\r\n  }\r\n\r\n  public static forScalar(val: number): ParsedLengthStyle {\r\n    return new ParsedLengthStyle({val: val, absolute: false});\r\n  }\r\n\r\n  public static special(val: number, suffix: 'em' | 'rem'): ParsedLengthStyle {\r\n    return new ParsedLengthStyle({val: val, absolute: false, special: suffix});\r\n  }\r\n\r\n  private static parseLengthStyle(spec: string): LengthStyle {\r\n    const val = parseFloat(spec);\r\n\r\n    if(isNaN(val)) {\r\n      // Cannot parse.\r\n      console.error(\"Could not properly parse specified length style info: '\" + spec + \"'.\");\r\n      return null;\r\n    }\r\n\r\n    return spec.indexOf('px') != -1 ? {val: val, absolute: true} :\r\n      // 16 px ~= 12 pt.\r\n      // Reference: https://kyleschaeffer.com/css-font-size-em-vs-px-vs-pt-vs-percent\r\n      spec.indexOf('pt') != -1 ? {val: (4 * val / 3), absolute: true} :\r\n      spec.indexOf('%') != -1 ? {val: val/100, absolute: false} :\r\n      spec.indexOf('rem') != -1 ? {val: val, absolute: false, special: 'rem'} :\r\n      spec.indexOf('em') != -1 ?  {val: val, absolute: false, special: 'em'} :\r\n      // At this point, assuming either Number or number in a string without units\r\n      // Note:  this one is NOT natively handled by browsers!\r\n      //        We'll treat it as if it were 'pt', since that's likely the user's\r\n      //        most familiar font size unit.\r\n      {val: (4 * val / 3), absolute: true};\r\n  }\r\n}\r\n",
    "import KeyboardView from \"./keyboardView.interface.js\";\r\nimport { ParsedLengthStyle } from \"../lengthStyle.js\";\r\n\r\nexport default class EmptyView implements KeyboardView {\r\n  readonly element: HTMLDivElement;\r\n\r\n  constructor() {\r\n    let Ldiv = this.element = document.createElement('div');\r\n    Ldiv.style.userSelect = 'none';\r\n    Ldiv.className='kmw-osk-none';\r\n  }\r\n\r\n  // No operations needed; this is a stand-in for the desktop OSK when no keyboard is active.\r\n  public postInsert() { }\r\n  public updateState() { }\r\n\r\n  public refreshLayout() { }\r\n\r\n  public get layoutHeight(): ParsedLengthStyle {\r\n    return ParsedLengthStyle.inPixels(0);\r\n  }\r\n}",
    "import { Keyboard } from '@keymanapp/keyboard-processor';\r\n\r\nimport KeyboardView from './keyboardView.interface.js';\r\nimport { ParsedLengthStyle } from \"../lengthStyle.js\";\r\n\r\nexport default class HelpPageView implements KeyboardView {\r\n  private readonly kbd: Keyboard;\r\n  public readonly element: HTMLDivElement;\r\n\r\n  private static readonly ID = 'kmw-osk-help-page';\r\n\r\n  constructor(keyboard: Keyboard) {\r\n    this.kbd = keyboard;\r\n\r\n    var Ldiv = this.element = document.createElement('div');\r\n    Ldiv.style.userSelect = \"none\";\r\n    Ldiv.className = 'kmw-osk-static';\r\n    Ldiv.id = HelpPageView.ID;\r\n    Ldiv.innerHTML = keyboard.helpText;\r\n  }\r\n\r\n  public postInsert() {\r\n    if(!this.element.parentElement || !document.getElementById(HelpPageView.ID)) {\r\n      throw new Error(\"The HelpPage root element has not yet been inserted into the DOM.\");\r\n    }\r\n\r\n    if(this.kbd.hasScript) {\r\n      // .parentElement:  ensure this matches the _Box element from OSKManager / OSKView\r\n      // Not a hard requirement for any known keyboards, but is asserted by legacy docs.\r\n      this.kbd.embedScript(this.element.parentElement);\r\n    }\r\n  }\r\n\r\n  public updateState() { }\r\n  public refreshLayout() { }\r\n\r\n  public get layoutHeight(): ParsedLengthStyle {\r\n    return ParsedLengthStyle.inPercent(100);\r\n  }\r\n}",
    "import EventEmitter from 'eventemitter3';\r\n\r\nimport {\r\n  ActiveKey,\r\n  ActiveLayout,\r\n  ButtonClass,\r\n  DeviceSpec,\r\n  type InternalKeyboardFont,\r\n  Keyboard,\r\n  KeyboardProperties,\r\n  KeyDistribution,\r\n  KeyEvent,\r\n  Layouts,\r\n  StateKeyMap\r\n} from '@keymanapp/keyboard-processor';\r\n\r\nimport { createStyleSheet, getAbsoluteX, getAbsoluteY, StylesheetManager } from 'keyman/engine/dom-utils';\r\n\r\nimport GlobeHint from './globehint.interface.js';\r\nimport InputEventCoordinate from './input/inputEventCoordinate.js';\r\nimport InputEventEngine, { InputEventEngineConfig } from './input/event-interpreter/inputEventEngine.js';\r\nimport MouseEventEngine from './input/event-interpreter/mouseEventEngine.js';\r\nimport TouchEventEngine from './input/event-interpreter/touchEventEngine.js';\r\nimport KeyboardView from './components/keyboardView.interface.js';\r\nimport { type KeyElement, getKeyFrom } from './keyElement.js';\r\nimport KeyTip from './keytip.interface.js';\r\nimport OSKKey, { OSKKeySpec } from './keyboard-layout/oskKey.js';\r\nimport OSKLayer from './keyboard-layout/oskLayer.js';\r\nimport OSKLayerGroup from './keyboard-layout/oskLayerGroup.js';\r\nimport { LengthStyle, ParsedLengthStyle } from './lengthStyle.js';\r\nimport PendingGesture from './input/gestures/pendingGesture.interface.js';\r\nimport RealizedGesture from './input/gestures/realizedGesture.interface.js';\r\nimport { defaultFontSize, getFontSizeStyle } from './fontSizeUtils.js';\r\nimport PendingMultiTap, { PendingMultiTapState } from './input/gestures/browser/pendingMultiTap.js';\r\nimport InternalSubkeyPopup from './input/gestures/browser/subkeyPopup.js';\r\nimport InternalPendingLongpress from './input/gestures/browser/pendingLongpress.js';\r\nimport InternalKeyTip from './input/gestures/browser/keytip.js';\r\nimport CommonConfiguration from './config/commonConfiguration.js';\r\n\r\nimport { getViewportScale } from './screenUtils.js';\r\n\r\nexport interface VisualKeyboardConfiguration extends CommonConfiguration {\r\n  /**\r\n   * The Keyman keyboard on which to base the on-screen keyboard being represented.\r\n   */\r\n  keyboard: Keyboard,\r\n\r\n  /**\r\n   * Metadata about the keyboard, such as relevant fonts, display name, and language code.\r\n   *\r\n   * Designed for use with `KeyboardStub` objects, which are defined external to the\r\n   * on-screen keyboard module.\r\n   */\r\n  keyboardMetadata: KeyboardProperties,\r\n\r\n  /**\r\n   * OSK-internal:  the top-most element of the full on-screen keyboard element hierarchy.\r\n   *\r\n   * May be set to `null` if `isStatic` is `true`.\r\n   */\r\n  topContainer: HTMLElement,\r\n\r\n  /**\r\n   * Set to `true` for documentation keyboards, disabling all user-interactivity.\r\n   */\r\n  isStatic?: boolean,\r\n\r\n  /**\r\n   * Provide this field with the OSKView's stylesheet per-keyboard manager instance.\r\n   *\r\n   * Interim developer note:  do NOT attach kmwosk.css using the same instance!  We don't\r\n   * want to remove that one when swapping keyboards.\r\n   */\r\n  styleSheetManager: StylesheetManager;\r\n}\r\n\r\ninterface BoundingRect {\r\n  left: number,\r\n  right: number,\r\n  top: number,\r\n  bottom: number\r\n};\r\n\r\ninterface EventMap {\r\n  /**\r\n   * Designed to pass key events off to any consuming modules/libraries.\r\n   *\r\n   * Note:  the following code block was originally used to integrate with the keyboard & input\r\n   * processors, but it requires entanglement with components external to this OSK module.\r\n   */\r\n  'keyevent': (event: KeyEvent) => void,\r\n\r\n  'hiderequested': (keyElement: KeyElement) => void,\r\n\r\n  'globekey': (keyElement: KeyElement, on: boolean) => void\r\n}\r\n\r\nexport default class VisualKeyboard extends EventEmitter<EventMap> implements KeyboardView {\r\n  // Legacy alias, maintaining a reference for code built against older\r\n  // versions of KMW.\r\n  static readonly specialCharacters = OSKKey.specialCharacters;\r\n\r\n  /**\r\n   * Contains layout properties corresponding to the OSK's layout.  Needs to be public\r\n   * so that its geometry may be updated on rotations and keyboard resize events, as\r\n   * said geometry needs to be accurate for fat-finger probability calculations.\r\n   */\r\n  kbdLayout: ActiveLayout;\r\n  layerGroup: OSKLayerGroup;\r\n\r\n  readonly config: VisualKeyboardConfiguration;\r\n\r\n  private _layerId: string = \"default\";\r\n  layerIndex: number = 0; // the index of the default layer\r\n  readonly isRTL: boolean;\r\n\r\n  inputEngine: InputEventEngine;\r\n\r\n  readonly isStatic: boolean = false;\r\n  _fixedWidthScaling:  boolean = false;\r\n  _fixedHeightScaling: boolean = true;\r\n\r\n  // Stores the base element for this instance of the visual keyboard.\r\n  kbdDiv: HTMLDivElement;\r\n  styleSheet: HTMLStyleElement;\r\n\r\n  /**\r\n   * The configured width for this VisualKeyboard.  May be `undefined` or `null`\r\n   * to allow automatic width scaling.\r\n   */\r\n  private _width: number;\r\n\r\n  /**\r\n   * The configured height for this VisualKeyboard.  May be `undefined` or `null`\r\n   * to allow automatic height scaling.\r\n   */\r\n  private _height: number;\r\n\r\n  /**\r\n   * The computed width for this VisualKeyboard.  May be null if auto sizing\r\n   * is allowed and the VisualKeyboard is not currently in the DOM hierarchy.\r\n   */\r\n  private _computedWidth: number;\r\n\r\n  /**\r\n   * The computed height for this VisualKeyboard.  May be null if auto sizing\r\n   * is allowed and the VisualKeyboard is not currently in the DOM hierarchy.\r\n   */\r\n  private _computedHeight: number;\r\n\r\n  // Style-related properties\r\n  fontFamily: string;\r\n  private _fontSize: ParsedLengthStyle;\r\n  // fontSize: string;\r\n\r\n  // State-related properties\r\n  keyPending: KeyElement;\r\n  touchPending: InputEventCoordinate;\r\n  deleteKey: KeyElement;\r\n  deleting: number; // Tracks a timer id for repeated deletions.\r\n  nextLayer: string;\r\n  currentKey: string;\r\n  stateKeys: StateKeyMap = {\r\n    K_CAPS: false,\r\n    K_NUMLOCK: false,\r\n    K_SCROLL: false\r\n  };\r\n\r\n  // Touch-tracking properties\r\n  initTouchCoord: InputEventCoordinate;\r\n  touchCount: number;\r\n  currentTarget: KeyElement;\r\n\r\n  // Used by embedded-mode's globe key\r\n  menuEvent: KeyElement; // Used by embedded-mode.\r\n\r\n  // Popup key management\r\n  keytip: KeyTip;\r\n  globeHint: GlobeHint;\r\n  pendingSubkey: PendingGesture;\r\n  subkeyGesture: RealizedGesture;\r\n\r\n  // Multi-tap gesture management\r\n  pendingMultiTap: PendingMultiTap;\r\n\r\n  // The keyboard object corresponding to this VisualKeyboard.\r\n  public readonly layoutKeyboard: Keyboard;\r\n  public readonly layoutKeyboardProperties: KeyboardProperties;\r\n\r\n  get layerId(): string {\r\n    return this._layerId;\r\n  }\r\n\r\n  set layerId(value: string) {\r\n    const changedLayer = value != this._layerId;\r\n    if(!this.layerGroup.layers[value]) {\r\n      throw new Error(`Keyboard ${this.layoutKeyboard.id} does not have a layer with id ${value}`);\r\n    } else {\r\n      this._layerId = value;\r\n    }\r\n\r\n    if(changedLayer) {\r\n      this.updateState();\r\n      this.refreshLayout();\r\n    }\r\n  }\r\n\r\n  get currentLayer(): OSKLayer {\r\n    return this.layerId ? this.layerGroup?.layers[this.layerId] : null;\r\n  }\r\n\r\n  // Special keys (for the currently-visible layer)\r\n  get lgKey(): KeyElement { // currently, must be visible for the touch language menu.\r\n    return this.currentLayer?.globeKey?.btn;\r\n  }\r\n\r\n  private get hkKey(): KeyElement { // hide keyboard key\r\n    return this.currentLayer?.hideKey?.btn;\r\n  }\r\n\r\n  public get spaceBar(): KeyElement { // also referenced by the touch language menu.\r\n    return this.currentLayer?.spaceBarKey?.btn;\r\n  }\r\n\r\n  //#region OSK constructor and helpers\r\n\r\n  /**\r\n   * @param       {Object}      PVK         Visual keyboard name\r\n   * @param       {Object}      Lhelp       true if OSK defined for this keyboard\r\n   * @param       {Object}      layout0\r\n   * @param       {Number}      kbdBitmask  Keyboard modifier bitmask\r\n   * Description  Generates the base visual keyboard element, prepping for attachment to KMW\r\n   */\r\n  constructor(config: VisualKeyboardConfiguration) {\r\n    super();\r\n\r\n    this.config = config; // TODO:  replace related parameters.\r\n\r\n    this.config.device = config.device || config.hostDevice;\r\n    this.config.isEmbedded = config.isEmbedded || false;\r\n\r\n    if (config.isStatic) {\r\n      this.isStatic = config.isStatic;\r\n    }\r\n\r\n    this._fixedWidthScaling  = this.device.touchable && !this.isStatic;\r\n    this._fixedHeightScaling = this.device.touchable && !this.isStatic;\r\n\r\n    // Create the collection of HTML elements from the device-dependent layout object\r\n    var Lkbd = document.createElement('div');\r\n    this.config.styleSheetManager = config.styleSheetManager || new StylesheetManager(Lkbd);\r\n\r\n    let layout: ActiveLayout;\r\n    if (config.keyboard) {\r\n      layout = this.kbdLayout = config.keyboard.layout(config.device.formFactor);\r\n      this.layoutKeyboardProperties = config.keyboardMetadata;\r\n      this.isRTL = config.keyboard.isRTL;\r\n    } else {\r\n      // This COULD be called with no backing keyboard; KMW will try to force-show the OSK even without\r\n      // a backing keyboard on mobile, using the most generic default layout as the OSK's base.\r\n      //\r\n      // In KMW's current state, it'd take a major break, though - Processor always has an activeKeyboard,\r\n      // even if it's \"hollow\".\r\n      let rawLayout = Layouts.buildDefaultLayout(null, null, config.device.formFactor);\r\n      layout = this.kbdLayout = ActiveLayout.polyfill(rawLayout, null, config.device.formFactor);\r\n      // null will probably need to be replaced with a defined value.\r\n      this.layoutKeyboardProperties = null;\r\n      this.isRTL = false;\r\n    }\r\n\r\n    // Override font if specified by keyboard\r\n    if ('font' in layout) {\r\n      this.fontFamily = layout['font'];\r\n    } else {\r\n      this.fontFamily = '';\r\n    }\r\n\r\n    // Now to build the actual layout.\r\n    const formFactor = config.device.formFactor;\r\n    this.layoutKeyboard = config.keyboard;\r\n    if (!this.layoutKeyboard) {\r\n      // May occasionally be null in embedded contexts; have seen this when iOS engine sets\r\n      // keyboard height during change of keyboards.\r\n      this.layoutKeyboard = new Keyboard(null);\r\n    }\r\n\r\n    this.layerGroup = new OSKLayerGroup(this, this.layoutKeyboard, formFactor);\r\n\r\n    // Now that we've properly processed the keyboard's layout, mark it as calibrated.\r\n    // TODO:  drop the whole 'calibration' thing.  The newer layout system supersedes the\r\n    // need for it.  (Is no longer really used, so the drop ought be clean.)\r\n    this.layoutKeyboard.markLayoutCalibrated(formFactor);\r\n\r\n    // Append the OSK layer group container element to the containing element\r\n    //osk.keyMap = divLayerContainer;\r\n    Lkbd.appendChild(this.layerGroup.element);\r\n\r\n    // Set base class - OS and keyboard added for Build 360\r\n    this.kbdDiv = Lkbd;\r\n\r\n    // For 'live' touch keyboards, attach touch-based event handling.\r\n    // Needs to occur AFTER this.kbdDiv is initialized.\r\n    if (!this.isStatic) {\r\n      if (this.hostDevice.touchable) {\r\n        this.inputEngine = this.touchInputConfiguration;\r\n      } else {\r\n        this.inputEngine = this.mouseInputConfiguration;\r\n      }\r\n      this.inputEngine.registerEventHandlers();\r\n    }\r\n\r\n    Lkbd.classList.add(config.device.formFactor, 'kmw-osk-inner-frame');\r\n\r\n    // Tag the VisualKeyboard with a CSS class corresponding to its ID.\r\n    let kbdID: string = this.layoutKeyboard?.id.replace('Keyboard_','') ?? '';\r\n\r\n    const separatorIndex = kbdID.indexOf('::');\r\n    if(separatorIndex != -1) { // We used to also test if we were in embedded mode, but... whatever.\r\n      // De-namespaces the ID for use with CSS classes.\r\n      // Assumes that keyboard IDs may not contain the ':' symbol.\r\n      kbdID = kbdID.substring(separatorIndex + 2);\r\n    }\r\n\r\n    const kbdClassSuffix = 'kmw-keyboard-' + kbdID;\r\n    this.element.classList.add(kbdClassSuffix);\r\n  }\r\n\r\n  private get mouseInputConfiguration() {\r\n    const config: InputEventEngineConfig = {\r\n      targetRoot: this.element,\r\n      // document.body is the event root b/c we need to track the mouse if it leaves\r\n      // the VisualKeyboard's hierarchy.\r\n      eventRoot: document.body,\r\n      inputStartHandler: this.touch.bind(this),\r\n      inputMoveHandler: this.moveOver.bind(this),\r\n      inputMoveCancelHandler: this.moveCancel.bind(this),\r\n      inputEndHandler: this.release.bind(this),\r\n      coordConstrainedWithinInteractiveBounds: this.detectWithinInteractiveBounds.bind(this)\r\n    };\r\n\r\n    return new MouseEventEngine(config);\r\n  }\r\n\r\n  private get touchInputConfiguration() {\r\n    let config: InputEventEngineConfig = {\r\n      targetRoot: this.element,\r\n      eventRoot: this.element,\r\n      inputStartHandler: this.touch.bind(this),\r\n      inputMoveHandler: this.moveOver.bind(this),\r\n      inputMoveCancelHandler: this.moveCancel.bind(this),\r\n      inputEndHandler: this.release.bind(this),\r\n      coordConstrainedWithinInteractiveBounds: this.detectWithinInteractiveBounds.bind(this)\r\n    };\r\n\r\n    return new TouchEventEngine(config);\r\n  }\r\n\r\n  public get element(): HTMLDivElement {\r\n    return this.kbdDiv;\r\n  }\r\n\r\n  public get device(): DeviceSpec {\r\n    return this.config.device;\r\n  }\r\n\r\n  public get hostDevice(): DeviceSpec {\r\n    return this.config.hostDevice;\r\n  }\r\n\r\n  public get fontRootPath(): string {\r\n    return this.config.pathConfig.fonts;\r\n  }\r\n\r\n  public get styleSheetManager(): StylesheetManager {\r\n    return this.config.styleSheetManager;\r\n  }\r\n\r\n  public get topContainer(): HTMLElement {\r\n    return this.config.topContainer;\r\n  }\r\n\r\n  public get isEmbedded(): boolean {\r\n    return this.config.isEmbedded;\r\n  }\r\n\r\n  public postInsert(): void { }\r\n\r\n  /**\r\n   * The configured width for this VisualKeyboard.  May be `undefined` or `null`\r\n   * to allow automatic width scaling.\r\n   */\r\n  get width(): number {\r\n    return this._width;\r\n  }\r\n\r\n  /**\r\n   * The configured height for this VisualKeyboard.  May be `undefined` or `null`\r\n   * to allow automatic height scaling.\r\n   */\r\n  get height(): number {\r\n    return this._height;\r\n  }\r\n\r\n  get layoutWidth(): ParsedLengthStyle {\r\n    if (this.usesFixedWidthScaling) {\r\n      let baseWidth = this.width;\r\n      let cs = getComputedStyle(this.element);\r\n      if (cs.border) {\r\n        let borderWidth = new ParsedLengthStyle(cs.borderWidth).val;\r\n        baseWidth -= borderWidth * 2;\r\n      }\r\n      return ParsedLengthStyle.inPixels(baseWidth);\r\n    } else {\r\n      return ParsedLengthStyle.forScalar(1);\r\n    }\r\n  }\r\n\r\n  get layoutHeight(): ParsedLengthStyle {\r\n    if (this.usesFixedHeightScaling) {\r\n      let baseHeight = this.height;\r\n      let cs = getComputedStyle(this.element);\r\n      if (cs.border) {\r\n        let borderHeight = new ParsedLengthStyle(cs.borderWidth).val;\r\n        baseHeight -= borderHeight * 2;\r\n      }\r\n      return ParsedLengthStyle.inPixels(baseHeight);\r\n    } else {\r\n      return ParsedLengthStyle.forScalar(1);\r\n    }\r\n  }\r\n\r\n  get internalHeight(): ParsedLengthStyle {\r\n    if (this.usesFixedHeightScaling) {\r\n      // Touch OSKs may apply internal padding to prevent row cropping at the edges.\r\n      return ParsedLengthStyle.inPixels(this.layoutHeight.val - this.getVerticalLayerGroupPadding());\r\n    } else {\r\n      return ParsedLengthStyle.forScalar(1);\r\n    }\r\n  }\r\n\r\n  get fontSize(): ParsedLengthStyle {\r\n    if (!this._fontSize) {\r\n      this._fontSize = new ParsedLengthStyle('1em');\r\n    }\r\n    return this._fontSize;\r\n  }\r\n\r\n  set fontSize(value: ParsedLengthStyle) {\r\n    this._fontSize = value;\r\n    this.kbdDiv.style.fontSize = value.styleString;\r\n  }\r\n\r\n  /**\r\n   * Uses fixed scaling for widths of internal elements, rather than relative,\r\n   * percent-based scaling.\r\n   */\r\n  public get usesFixedWidthScaling(): boolean {\r\n    return this._fixedWidthScaling;\r\n  }\r\n\r\n  public set usesFixedWidthScaling(val: boolean) {\r\n    this._fixedWidthScaling = val;\r\n  }\r\n\r\n  /**\r\n   * Uses fixed scaling for heights of internal elements, rather than relative,\r\n   * percent-based scaling.\r\n   */\r\n  public get usesFixedHeightScaling(): boolean {\r\n    return this._fixedHeightScaling;\r\n  }\r\n\r\n  public set usesFixedHeightScaling(val: boolean) {\r\n    this._fixedHeightScaling = val;\r\n  }\r\n\r\n  /**\r\n   * Denotes if the VisualKeyboard or its containing OSKView / OSKManager uses\r\n   * fixed positioning.\r\n   */\r\n  public get usesFixedPositioning(): boolean {\r\n    let node: HTMLElement = this.element;\r\n    while (node) {\r\n      if (getComputedStyle(node).position == 'fixed') {\r\n        return true;\r\n      } else {\r\n        node = node.offsetParent as HTMLElement;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Sets & tracks the size of the VisualKeyboard's primary element.\r\n   * @param width\r\n   * @param height\r\n   * @param pending Set to `true` if called during a resizing interaction\r\n   */\r\n  public setSize(width?: number, height?: number, pending?: boolean) {\r\n    this._width = width;\r\n    this._height = height;\r\n\r\n    if (this.kbdDiv) {\r\n      this.kbdDiv.style.width = width ? this._width + 'px' : '';\r\n      this.kbdDiv.style.height = height ? this._height + 'px' : '';\r\n\r\n      if (!this.device.touchable && height) {\r\n        this.fontSize = new ParsedLengthStyle((this._height / 8) + 'px');\r\n      }\r\n\r\n      if (!pending) {\r\n        this.refreshLayout();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the default properties for a key object, used to construct\r\n   * both a base keyboard key and popup keys\r\n   *\r\n   * @return    {Object}    An object that contains default key properties\r\n   */\r\n  getDefaultKeyObject(): OSKKeySpec {\r\n    return new OSKKeySpec(undefined, '', ActiveKey.DEFAULT_KEY.width, ActiveKey.DEFAULT_KEY.sp as ButtonClass,\r\n      null, ActiveKey.DEFAULT_KEY.pad);\r\n  };\r\n  //#endregion\r\n\r\n  //#region OSK touch handlers\r\n  getTouchCoordinatesOnKeyboard(input: InputEventCoordinate) {\r\n    // We need to compute the 'local', keyboard-based coordinates for the touch.\r\n    let kbdCoords = {\r\n      x: getAbsoluteX(this.kbdDiv),\r\n      y: getAbsoluteY(this.kbdDiv)\r\n    }\r\n    let offsetCoords = { x: input.x - kbdCoords.x, y: input.y - kbdCoords.y };\r\n\r\n    // The layer group's element always has the proper width setting, unlike kbdDiv itself.\r\n    offsetCoords.x /= this.layerGroup.element.offsetWidth;\r\n    offsetCoords.y /= this.kbdDiv.offsetHeight;\r\n\r\n    return offsetCoords;\r\n  }\r\n\r\n  /**\r\n   * Builds the fat-finger distribution used by predictive text as its source for likelihood\r\n   * of alternate keystroke sequences.\r\n   * @param input The input coordinate of the event that led to use of this function\r\n   * @param keySpec The spec of the key directly triggered by the input event.  May be for a subkey.\r\n   * @returns\r\n   */\r\n  getTouchProbabilities(input: InputEventCoordinate, keySpec?: ActiveKey): KeyDistribution {\r\n    // TODO: It'd be nice to optimize by keeping these off when unused, but the wiring\r\n    //       necessary would get in the way of modularization at the moment.\r\n    // let keyman = com.keyman.singleton;\r\n    // if (!keyman.core.languageProcessor.mayCorrect) {\r\n    //   return null;\r\n    // }\r\n\r\n    // Note:  if subkeys are active, they will still be displayed at this time.\r\n    // TODO:  In such cases, we should build an ActiveLayout (of sorts) for subkey displays,\r\n    //        update their geometries to the actual display values, and use the results here.\r\n    let touchKbdPos = this.getTouchCoordinatesOnKeyboard(input);\r\n    let layerGroup = this.layerGroup.element;  // Always has proper dimensions, unlike kbdDiv itself.\r\n    let width = layerGroup.offsetWidth, height = this.kbdDiv.offsetHeight;\r\n    // Prevent NaN breakages.\r\n    if (!width || !height) {\r\n      return null;\r\n    }\r\n\r\n    let kbdAspectRatio = layerGroup.offsetWidth / this.kbdDiv.offsetHeight;\r\n    let baseKeyProbabilities = this.kbdLayout.getLayer(this.layerId).getTouchProbabilities(touchKbdPos, kbdAspectRatio);\r\n\r\n    if (!keySpec || !this.subkeyGesture || !this.subkeyGesture.baseKey.key) {\r\n      return baseKeyProbabilities;\r\n    } else {\r\n      // A temp-hack, as this was noted just before 14.0's release.\r\n      // Since a more... comprehensive solution would be way too complex this late in the game,\r\n      // this provides a half-decent stopgap measure.\r\n      //\r\n      // Will not correct to nearby subkeys; only includes the selected subkey and its base keys.\r\n      // Still, better than ignoring them both for whatever base key is beneath the final cursor location.\r\n      let baseMass = 1.0;\r\n\r\n      let baseKeyMass = 1.0;\r\n      let baseKeyID = this.subkeyGesture.baseKey.key.spec.coreID;\r\n\r\n      let popupKeyMass = 0.0;\r\n      let popupKeyID: string = null;\r\n\r\n      popupKeyMass = 3.0;\r\n      popupKeyID = keySpec.coreID;\r\n\r\n      // If the base key appears in the subkey array and was selected, merge the probability masses.\r\n      if (popupKeyID == baseKeyID) {\r\n        baseKeyMass += popupKeyMass;\r\n        popupKeyMass = 0;\r\n      } else {\r\n        // We namespace it so that lookup operations know to find it via its base key.\r\n        popupKeyID = `${baseKeyID}::${popupKeyID}`;\r\n      }\r\n\r\n      // Compute the normalization factor\r\n      let totalMass = baseMass + baseKeyMass + popupKeyMass;\r\n      let scalar = 1.0 / totalMass;\r\n\r\n      // Prevent duplicate entries in the final map & normalize the remaining entries!\r\n      for (let i = 0; i < baseKeyProbabilities.length; i++) {\r\n        let entry = baseKeyProbabilities[i];\r\n        if (entry.keyId == baseKeyID) {\r\n          baseKeyMass += entry.p * scalar;\r\n          baseKeyProbabilities.splice(i, 1);\r\n          i--;\r\n        } else if (entry.keyId == popupKeyID) {\r\n          popupKeyMass = + entry.p * scalar;\r\n          baseKeyProbabilities.splice(i, 1);\r\n          i--;\r\n        } else {\r\n          entry.p *= scalar;\r\n        }\r\n      }\r\n\r\n      let finalArray: { keyId: string, p: number }[] = [];\r\n\r\n      if (popupKeyMass > 0) {\r\n        finalArray.push({ keyId: popupKeyID, p: popupKeyMass * scalar });\r\n      }\r\n\r\n      finalArray.push({ keyId: baseKeyID, p: baseKeyMass * scalar });\r\n\r\n      finalArray = finalArray.concat(baseKeyProbabilities);\r\n      return finalArray;\r\n    }\r\n  }\r\n\r\n  //#region Input handling start\r\n\r\n  /**\r\n   * Determines a \"fuzzy boundary\" area around the OSK within which active mouse and\r\n   * touch events will be maintained, even if their coordinates lie outside of the OSK's\r\n   * true visual bounds.\r\n   * @returns A `BoundingRect`, in `.pageX` / `.pageY` coordinates.\r\n   */\r\n  private getInteractiveBoundingRect(): BoundingRect {\r\n    // Determine the important geometric values involved\r\n    let oskX = getAbsoluteX(this.element);\r\n    let oskY = getAbsoluteY(this.element);\r\n\r\n    // Determine the out-of-bounds threshold at which touch-cancellation should automatically occur.\r\n    // Assuming square key-squares, we'll use 1/3 the height of a row for bounds detection\r\n    // for both dimensions.\r\n    const rowCount = this.currentLayer.rows.length;\r\n    const buffer = (0.333 * this.height / rowCount);\r\n\r\n    // Determine the OSK's boundaries and the boundaries of the page / view.\r\n    // These values are needed in .pageX / .pageY coordinates for the final calcs.\r\n    let boundingRect: BoundingRect = {\r\n      left: oskX - buffer,\r\n      right: oskX + this.width + buffer,\r\n      top: oskY - buffer,\r\n      bottom: oskY + this.height + buffer\r\n    };\r\n\r\n    return boundingRect;\r\n  }\r\n\r\n  /**\r\n   * Adjusts a potential \"interactive boundary\" definition by enforcing an\r\n   * \"event cancellation zone\" near screen boundaries that are not directly adjacent\r\n   * to the ongoing input event's initial coordinate.\r\n   *\r\n   * This facilitates modeling of conventional cancellation gestures where a user would\r\n   * drag the mouse or touch point off the OSK, as mouse and touch event handlers receive\r\n   * no input beyond screen boundaries.\r\n   *\r\n   * @param baseBounds The baseline interactive bounding area to be adjusted\r\n   * @param startCoord The initial coordinate of a currently-ongoing input event\r\n   * @returns\r\n   */\r\n  private applyScreenMarginBoundsThresholding(baseBounds: BoundingRect,\r\n    startCoord: InputEventCoordinate): BoundingRect {\r\n    // Determine the needed linear translation to screen coordinates.\r\n    const xDelta = window.screenLeft - window.pageXOffset;\r\n    const yDelta = window.screenTop - window.pageYOffset;\r\n\r\n    let adjustedBounds: BoundingRect = { ...baseBounds };\r\n\r\n    // Also translate the initial touch's screen coord, as it affects our bounding box logic.\r\n    const initScreenCoord = new InputEventCoordinate(startCoord.x + xDelta, startCoord.y + yDelta);\r\n\r\n    // Detection:  is the OSK aligned with any screen boundaries?\r\n    // If so, create a 'fuzzy' zone around the edges not near the initial touch point that allow\r\n    // move-based cancellation.\r\n\r\n    // If the initial input screen-coord is at least 5 pixels from the screen's left AND\r\n    // the OSK's left boundary is within 2 pixels from the screen's left...\r\n    if (initScreenCoord.x >= 5 && baseBounds.left + xDelta <= 2) {\r\n      adjustedBounds.left = 2 - xDelta; // new `leftBound` is set to 2 pixels from the screen's left.\r\n    }\r\n\r\n    if (initScreenCoord.x <= screen.width - 5 && baseBounds.right + xDelta >= screen.width - 2) {\r\n      adjustedBounds.right = (screen.width - 2) - xDelta; // new `rightBound` 2px from screen's right.\r\n    }\r\n\r\n    if (initScreenCoord.y >= 5 && baseBounds.top + yDelta <= 2) {\r\n      adjustedBounds.top = 2 - yDelta;\r\n    }\r\n\r\n    if (initScreenCoord.y <= screen.height - 5 && baseBounds.bottom + yDelta >= screen.height - 2) {\r\n      adjustedBounds.bottom = (screen.height - 2) - yDelta;\r\n    }\r\n\r\n    return adjustedBounds;\r\n  }\r\n\r\n  detectWithinInteractiveBounds(coord: InputEventCoordinate): boolean {\r\n    // Shortcuts the method during unit testing, as we don't currently\r\n    // provide coordinate values in its synthetic events.\r\n    if (coord.x === null && coord.y === null) {\r\n      return true;\r\n    }\r\n\r\n    const baseBoundingRect = this.getInteractiveBoundingRect();\r\n    let adjustedBoundingRect = baseBoundingRect;\r\n    if(this.initTouchCoord) {\r\n      this.applyScreenMarginBoundsThresholding(baseBoundingRect, this.initTouchCoord);\r\n    }\r\n\r\n    // Now to check where the input coordinate lies in relation to the final bounding box!\r\n\r\n    if (coord.x < adjustedBoundingRect.left || coord.x > adjustedBoundingRect.right) {\r\n      return false;\r\n    } else if (coord.y < adjustedBoundingRect.top || coord.y > adjustedBoundingRect.bottom) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The main OSK touch start event handler\r\n   *\r\n   *  @param  {Event} e   touch start event object\r\n   *\r\n   */\r\n  touch(input: InputEventCoordinate) {\r\n    // Identify the key touched\r\n    var t = <HTMLElement>input.target, key = this.keyTarget(t);\r\n\r\n    // Save the touch point, which is used for quick-display of popup keys (defined in highlightSubKeys)\r\n    this.initTouchCoord = input;\r\n\r\n    // Set the key for the new touch point to be current target, if defined\r\n    this.currentTarget = key;\r\n\r\n    // Clear repeated backspace if active, preventing 'sticky' behavior.\r\n    this.cancelDelete();\r\n\r\n    // Prevent multi-touch if popup displayed\r\n    if (this.subkeyGesture && this.subkeyGesture.isVisible()) {\r\n      return;\r\n    }\r\n\r\n    // Keep track of number of active (unreleased) touch points\r\n    this.touchCount = input.activeInputCount;\r\n\r\n    // Get nearest key if touching a hidden key or the end of a key row\r\n    if ((key && ((key.className.indexOf('key-hidden') >= 0) || (key.className.indexOf('key-blank') >= 0)))\r\n      || t.className.indexOf('kmw-key-row') >= 0) {\r\n\r\n      // Perform \"fudged\" selection ops if and only if we're not sure about the precision of the\r\n      // input source.  Mouse-based selection IS precise, so no need for \"fudging\" there.\r\n      if (!input.isFromMouse) {\r\n        key = this.findNearestKey(input, t);\r\n      }\r\n    }\r\n    // Do not do anything if no key identified!\r\n    if (key == null) {\r\n      return;\r\n    }\r\n\r\n    // Get key name (K_...) from element ID\r\n    let keyName = key['keyId'];\r\n\r\n    // Highlight the touched key\r\n    this.highlightKey(key, true);\r\n\r\n    // Special function keys need immediate action\r\n    if (keyName == 'K_LOPT' || keyName == 'K_ROPT') {\r\n      window.setTimeout(function (this: VisualKeyboard) {\r\n        this.modelKeyClick(key);\r\n        // Because we immediately process the key, we need to re-highlight it after the click.\r\n        this.highlightKey(key, true);\r\n        // Highlighting'll be cleared automatically later.\r\n      }.bind(this), 0);\r\n      this.keyPending = null;\r\n      this.touchPending = null;\r\n\r\n      // Also backspace, to allow delete to repeat while key held\r\n    } else if (keyName == 'K_BKSP') {\r\n      // While we could inline the execution of the delete key here, we lose the ability to\r\n      // record the backspace key if we do so.\r\n      this.modelKeyClick(key, input);\r\n      this.deleteKey = key;\r\n      this.deleting = window.setTimeout(this.repeatDelete, 500);\r\n      this.keyPending = null;\r\n      this.touchPending = null;\r\n    } else {\r\n      if (this.keyPending) {\r\n        this.highlightKey(this.keyPending, false);\r\n\r\n        if (this.subkeyGesture && this.subkeyGesture instanceof InternalSubkeyPopup) {\r\n          let subkeyPopup = this.subkeyGesture as InternalSubkeyPopup;\r\n          subkeyPopup.updateTouch(input);\r\n          subkeyPopup.finalize(input);\r\n        } else {\r\n          this.modelKeyClick(this.keyPending, this.touchPending);\r\n        }\r\n        // Decrement the number of unreleased touch points to prevent\r\n        // sending the keystroke again when the key is actually released\r\n        this.touchCount--;\r\n      } else {\r\n        this.initGestures(key, input);\r\n      }\r\n      this.keyPending = key;\r\n      this.touchPending = input;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * OSK touch release event handler\r\n   *\r\n   *  @param  {Event} e   touch release event object\r\n   *\r\n   **/\r\n  release(input: InputEventCoordinate): void {\r\n    // Prevent incorrect multi-touch behaviour if native or device popup visible\r\n    var t = this.currentTarget;\r\n\r\n    // Clear repeated backspace if active, preventing 'sticky' behavior.\r\n    this.cancelDelete();\r\n\r\n    // Multi-Tap\r\n    if (this.pendingMultiTap && this.pendingMultiTap.realized) {\r\n      // Ignore pending key if we've just handled a multitap\r\n      this.pendingMultiTap = null;\r\n\r\n      this.highlightKey(this.keyPending, false);\r\n      this.keyPending = null;\r\n      this.touchPending = null;\r\n\r\n      return;\r\n    }\r\n\r\n    if (this.pendingMultiTap && this.pendingMultiTap.cancelled) {\r\n      this.pendingMultiTap = null;\r\n    }\r\n\r\n    // Longpress\r\n    if ((this.subkeyGesture && this.subkeyGesture.isVisible())) {\r\n      // Ignore release if a multiple touch\r\n      if (input.activeInputCount > 0) {\r\n        return;\r\n      }\r\n\r\n      if (this.subkeyGesture instanceof InternalSubkeyPopup) {\r\n        let subkeyPopup = this.subkeyGesture as InternalSubkeyPopup;\r\n        subkeyPopup.finalize(input);\r\n      }\r\n      this.highlightKey(this.keyPending, false);\r\n      this.keyPending = null;\r\n      this.touchPending = null;\r\n\r\n      return;\r\n    }\r\n\r\n    // Handle menu key release event\r\n    if (t && t.id) {\r\n      this.optionKey(t, t.id, false);\r\n    }\r\n\r\n    // Test if moved off screen (effective release point must be corrected for touch point horizontal speed)\r\n    // This is not completely effective and needs some tweaking, especially on Android\r\n    if (!this.detectWithinInteractiveBounds(input)) {\r\n      this.moveCancel(input);\r\n      this.touchCount--;\r\n      return;\r\n    }\r\n\r\n    // Save then decrement current touch count\r\n    var tc = this.touchCount;\r\n    if (this.touchCount > 0) {\r\n      this.touchCount--;\r\n    }\r\n\r\n    // Process and clear highlighting of pending target\r\n    if (this.keyPending) {\r\n      this.highlightKey(this.keyPending, false);\r\n      // Output character unless moved off key\r\n      if (this.keyPending.className.indexOf('hidden') < 0 && tc > 0) {\r\n        this.modelKeyClick(this.keyPending, input);\r\n      }\r\n      this.clearPopup();\r\n      this.keyPending = null;\r\n      this.touchPending = null;\r\n      // Always clear highlighting of current target on release (multi-touch)\r\n    } else {\r\n      var tt = input;\r\n      t = this.keyTarget(tt.target);\r\n      if (!t) {\r\n        // Operates relative to the viewport, not based on the actual coordinate on the page.\r\n        var t1 = document.elementFromPoint(input.x - window.pageXOffset, input.y - window.pageYOffset);\r\n        t = this.findNearestKey(input, <HTMLElement>t1);\r\n      }\r\n\r\n      this.highlightKey(t, false);\r\n    }\r\n  }\r\n\r\n  moveCancel(input: InputEventCoordinate): void {\r\n    // Do not attempt to support reselection of target key for overlapped keystrokes.\r\n    // Perform _after_ ensuring possible sticky keys have been cancelled.\r\n    if (input.activeInputCount > 1) {\r\n      return;\r\n    }\r\n\r\n    // Update all gesture tracking.  The function returns true if further input processing\r\n    // should be blocked.  (Keeps the subkey array operating when the input coordinate has\r\n    // moved outside the OSK's boundaries.)\r\n    if (this.updateGestures(null, this.keyPending, input)) {\r\n      return;\r\n    }\r\n\r\n    this.cancelDelete();\r\n\r\n    this.highlightKey(this.keyPending, false);\r\n    this.showKeyTip(null, false);\r\n    this.clearPopup();\r\n    this.keyPending = null;\r\n    this.touchPending = null;\r\n  }\r\n\r\n  /**\r\n   * OSK touch move event handler\r\n   *\r\n   *  @param  {Event} e   touch move event object\r\n   *\r\n   **/\r\n  moveOver(input: InputEventCoordinate): void {\r\n    // Shouldn't be possible, but just in case.\r\n    if (this.touchCount == 0) {\r\n      this.cancelDelete();\r\n      return;\r\n    }\r\n\r\n    // Get touch position\r\n    const x = input.x - window.pageXOffset;\r\n    const y = input.y - window.pageYOffset;\r\n\r\n    // Move target key and highlighting\r\n    this.touchPending = input;\r\n    // Operates on viewport-based coordinates, not page-based.\r\n    var t1 = <HTMLElement>document.elementFromPoint(x, y);\r\n    const key0 = this.keyPending;\r\n    let key1 = this.keyTarget(t1); // Not only gets base keys, but also gets popup keys!\r\n\r\n    // Find the nearest key to the touch point if not on a visible key\r\n    if ((key1 && key1.className.indexOf('key-hidden') >= 0) ||\r\n      (t1 && (!key1) && t1.className.indexOf('key-row') >= 0)) {\r\n      key1 = this.findNearestKey(input, t1);\r\n    }\r\n\r\n    // Cancels BKSP if it's not the key.  (Note... could also cancel BKSP if the ongoing\r\n    // input is cancelled, regardless of key, just to be safe.)\r\n\r\n    // Stop repeat if no longer on BKSP key\r\n    if (key1 && (typeof key1.id == 'string') && (key1.id.indexOf('-K_BKSP') < 0)) {\r\n      this.cancelDelete();\r\n    }\r\n\r\n    // Cancels if it's a multitouch attempt.\r\n\r\n    // Do not attempt to support reselection of target key for overlapped keystrokes.\r\n    // Perform _after_ ensuring possible sticky keys have been cancelled.\r\n    if (input.activeInputCount > 1) {\r\n      return;\r\n    }\r\n\r\n    // Gesture-updates should probably be a separate call from other touch-move aspects.\r\n\r\n    // Update all gesture tracking.  The function returns true if further input processing\r\n    // should be blocked.\r\n    if (this.updateGestures(key1, key0, input)) {\r\n      return;\r\n    }\r\n\r\n    // Identify current touch position (to manage off-key release)\r\n    this.currentTarget = key1;\r\n\r\n    // Only NOW do we denote the newly-selected key as the currently-focused key.\r\n\r\n    // Replace the target key, if any, by the new target key\r\n    // Do not replace a null target, as that indicates the key has already been released\r\n    if (key1 && this.keyPending) {\r\n      this.highlightKey(key0, false);\r\n      this.keyPending = key1;\r\n      this.touchPending = input;\r\n    }\r\n\r\n    if (key0 && key1 && (key1 != key0) && (key1.id != '')) {\r\n      // While there may not be an active subkey menu, we should probably update which base key\r\n      // is being highlighted by the current touch & start a pending longpress for it.\r\n      this.clearPopup();\r\n      this.initGestures(key1, input);\r\n    }\r\n\r\n    if (this.keyPending) {\r\n      if (key0 != key1 || key1.className.indexOf(OSKKey.HIGHLIGHT_CLASS) < 0) {\r\n        this.highlightKey(key1, true);\r\n      }\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n\r\n  /**\r\n   * Get the current key target from the touch point element within the key\r\n   *\r\n   * @param   {Object}  t   element at touch point\r\n   * @return  {Object}      the key element (or null)\r\n   **/\r\n  keyTarget(target: HTMLElement | EventTarget): KeyElement {\r\n    let t = <HTMLElement>target;\r\n\r\n    try {\r\n      if (t) {\r\n        if (t.classList.contains('kmw-key')) {\r\n          return getKeyFrom(t);\r\n        }\r\n        if (t.parentNode && (t.parentNode as HTMLElement).classList.contains('kmw-key')) {\r\n          return getKeyFrom(t.parentNode);\r\n        }\r\n        if (t.firstChild && (t.firstChild as HTMLElement).classList.contains('kmw-key')) {\r\n          return getKeyFrom(t.firstChild);\r\n        }\r\n      }\r\n    } catch (ex) { }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Identify the key nearest to the touch point if at the end of a key row,\r\n   * but return null more than about 0.6 key width from the nearest key.\r\n   *\r\n   *  @param  {Event}   e   touch event\r\n   *  @param  {Object}  t   HTML object at touch point\r\n   *  @return {Object}      nearest key to touch point\r\n   *\r\n   **/\r\n  findNearestKey(input: InputEventCoordinate, t: HTMLElement): KeyElement {\r\n    if (!input) {\r\n      return null;\r\n    }\r\n\r\n    // Get touch point on screen\r\n    var x = input.x;\r\n\r\n    // Get key-row beneath touch point\r\n    while (t && t.className !== undefined && t.className.indexOf('key-row') < 0) {\r\n      t = <HTMLElement>t.parentNode;\r\n    }\r\n    if (!t) {\r\n      return null;\r\n    }\r\n\r\n    // Find minimum distance from any key\r\n    var k, k0 = 0, dx, dxMax = 24, dxMin = 100000, x1, x2;\r\n    for (k = 0; k < t.childNodes.length; k++) {\r\n      let keySquare = t.childNodes[k] as HTMLElement; // gets the .kmw-key-square containing a key\r\n      // Find the actual key element.\r\n      let childNode = keySquare.firstChild ? keySquare.firstChild as HTMLElement : keySquare;\r\n\r\n      if (childNode.className !== undefined\r\n        && (childNode.className.indexOf('key-hidden') >= 0\r\n          || childNode.className.indexOf('key-blank') >= 0)) {\r\n        continue;\r\n      }\r\n      x1 = keySquare.offsetLeft;\r\n      x2 = x1 + keySquare.offsetWidth;\r\n      if (x >= x1 && x <= x2) {\r\n        // Within the key square\r\n        return <KeyElement>childNode;\r\n      }\r\n      dx = x1 - x;\r\n      if (dx >= 0 && dx < dxMin) {\r\n        // To right of key\r\n        k0 = k; dxMin = dx;\r\n      }\r\n      dx = x - x2;\r\n      if (dx >= 0 && dx < dxMin) {\r\n        // To left of key\r\n        k0 = k; dxMin = dx;\r\n      }\r\n    }\r\n\r\n    if (dxMin < 100000) {\r\n      t = <HTMLElement>t.childNodes[k0];\r\n      x1 = t.offsetLeft;\r\n      x2 = x1 + t.offsetWidth;\r\n\r\n      // Limit extended touch area to the larger of 0.6 of key width and 24 px\r\n      if (t.offsetWidth > 40) {\r\n        dxMax = 0.6 * t.offsetWidth;\r\n      }\r\n\r\n      if (((x1 - x) >= 0 && (x1 - x) < dxMax) || ((x - x2) >= 0 && (x - x2) < dxMax)) {\r\n        return <KeyElement>t.firstChild;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   *  Repeat backspace as long as the backspace key is held down\r\n   **/\r\n  repeatDelete: () => void = function (this: VisualKeyboard) {\r\n    if (this.deleting) {\r\n      this.modelKeyClick(this.deleteKey);\r\n      this.deleting = window.setTimeout(this.repeatDelete, 100);\r\n    }\r\n  }.bind(this);\r\n\r\n  /**\r\n   * Cancels any active repeatDelete() timeouts, ensuring that\r\n   * repeating backspace operations are properly terminated.\r\n   */\r\n  cancelDelete() {\r\n    // Clears the delete-repeating timeout.\r\n    if (this.deleting) {\r\n      window.clearTimeout(this.deleting);\r\n    }\r\n    this.deleting = 0;\r\n  }\r\n  //#endregion\r\n\r\n  modelKeyClick(e: KeyElement, input?: InputEventCoordinate) {\r\n    let keyEvent = this.initKeyEvent(e, input);\r\n    this.raiseKeyEvent(keyEvent, e);\r\n  }\r\n\r\n  initKeyEvent(e: KeyElement, input?: InputEventCoordinate) {\r\n    // Turn off key highlighting (or preview)\r\n    this.highlightKey(e, false);\r\n\r\n    // Future note:  we need to refactor osk.OSKKeySpec to instead be a 'tag field' for\r\n    // keyboards.ActiveKey.  (Prob with generics, allowing the Web-only parts to\r\n    // be fully specified within the tag.)\r\n    //\r\n    // Would avoid the type shenanigans needed here because of our current type-abuse setup\r\n    // for key spec tracking.\r\n    let keySpec = (e['key'] ? e['key'].spec : null) as unknown as ActiveKey;\r\n    if (!keySpec) {\r\n      console.error(\"OSK key with ID '\" + e.id + \"', keyID '\" + e.keyId + \"' missing needed specification\");\r\n      return null;\r\n    }\r\n\r\n    // Return the event object.\r\n    return this.keyEventFromSpec(keySpec, input);\r\n  }\r\n\r\n  keyEventFromSpec(keySpec: ActiveKey, input?: InputEventCoordinate) {\r\n    //let core = com.keyman.singleton.core; // only singleton-based ref currently needed here.\r\n\r\n    // Start:  mirrors _GetKeyEventProperties\r\n\r\n    // First check the virtual key, and process shift, control, alt or function keys\r\n    //let Lkc = keySpec.constructKeyEvent(core.keyboardProcessor, this.device);\r\n    let Lkc = this.layoutKeyboard.constructKeyEvent(keySpec, this.device, this.stateKeys);\r\n\r\n    /* In case of \"fun\" edge cases caused by JS's single-threadedness & event processing queue.\r\n      *\r\n      * Should a touch occur on an OSK key during active JS execution that results in a change\r\n      * of the active keyboard, it's possible for an OSK key to be evaluated against an\r\n      * unexpected, non-matching keyboard - one that could even be `null`!\r\n      *\r\n      * So, we mark the keyboard backing the OSK as the 'correct' keyboard for this key.\r\n      */\r\n    Lkc.srcKeyboard = this.layoutKeyboard;\r\n\r\n    // End - mirrors _GetKeyEventProperties\r\n\r\n    if (input) {\r\n      Lkc.source = input;\r\n      Lkc.keyDistribution = this.getTouchProbabilities(input, keySpec);\r\n    }\r\n\r\n    // Return the event object.\r\n    return Lkc;\r\n  }\r\n\r\n  // cancel = function(e) {} //cancel event is never generated by iOS\r\n\r\n  /**\r\n   * Function     _UpdateVKShiftStyle\r\n   * Scope        Private\r\n   * @param       {string=}   layerId\r\n   * Description  Updates the OSK's visual style for any toggled state keys\r\n   */\r\n  _UpdateVKShiftStyle(layerId?: string) {\r\n    var i;\r\n    //let core = com.keyman.singleton.core;\r\n\r\n    if (!layerId) {\r\n      layerId = this.layerId;\r\n    }\r\n\r\n    const layer = this.layerGroup.layers[layerId];\r\n    if (!layer) {\r\n      return;\r\n    }\r\n\r\n    // So... through KMW 14, we actually never tracked the capsKey, numKey, and scrollKey\r\n    // properly for keyboard-defined layouts - only _default_, desktop-style layouts.\r\n    //\r\n    // We _could_ remedy this, but then... touch keyboards like khmer_angkor actually\r\n    // repurpose certain state keys, and in an inconsistent manner at that.\r\n    // Considering the potential complexity of touch layouts, with multiple possible\r\n    // layer-shift keys, it's likely best to just leave things as they are for now.\r\n    if (!this.layoutKeyboard?.usesDesktopLayoutOnDevice(this.device)) {\r\n      return;\r\n    }\r\n\r\n    // Set the on/off state of any visible state keys.\r\n    const states = ['K_CAPS', 'K_NUMLOCK', 'K_SCROLL'];\r\n    const keys = [layer.capsKey, layer.numKey, layer.scrollKey];\r\n\r\n    for (i = 0; i < keys.length; i++) {\r\n      // Skip any keys not in the OSK!\r\n      if (keys[i] == null) {\r\n        continue;\r\n      }\r\n\r\n      keys[i].setToggleState(this.stateKeys[states[i]]);\r\n    }\r\n  }\r\n\r\n  updateStateKeys(stateKeys: StateKeyMap) {\r\n    for(let key in this.stateKeys) {\r\n      this.stateKeys[key] = stateKeys[key];\r\n    }\r\n\r\n    this._UpdateVKShiftStyle();\r\n  }\r\n\r\n  clearPopup() {\r\n    // Remove the displayed subkey array, if any, and cancel popup request\r\n    if (this.subkeyGesture) {\r\n      this.subkeyGesture.clear();\r\n      this.subkeyGesture = null;\r\n    }\r\n\r\n    if (this.pendingSubkey) {\r\n      this.pendingSubkey.cancel();\r\n      this.pendingSubkey = null;\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n\r\n  /**\r\n   * Indicate the current language and keyboard on the space bar\r\n   **/\r\n  showLanguage() {\r\n    let activeStub = this.layoutKeyboardProperties;\r\n    let displayName: string = activeStub?.displayName ?? '(System keyboard)';\r\n\r\n    try {\r\n      var t = <HTMLElement>this.spaceBar.key.label;\r\n      let tParent = <HTMLElement>t.parentNode;\r\n      if (typeof (tParent.className) == 'undefined' || tParent.className == '') {\r\n        tParent.className = 'kmw-spacebar';\r\n      } else if (tParent.className.indexOf('kmw-spacebar') == -1) {\r\n        tParent.className += ' kmw-spacebar';\r\n      }\r\n\r\n      if (t.className != 'kmw-spacebar-caption') {\r\n        t.className = 'kmw-spacebar-caption';\r\n      }\r\n\r\n      // It sounds redundant, but this dramatically cuts down on browser DOM processing;\r\n      // but sometimes innerText is reported empty when it actually isn't, so set it\r\n      // anyway in that case (Safari, iOS 14.4)\r\n      if (t.innerText != displayName || displayName == '') {\r\n        t.innerText = displayName;\r\n      }\r\n\r\n      this.spaceBar.key.refreshLayout(this);\r\n    }\r\n    catch (ex) { }\r\n  }\r\n\r\n  /**\r\n   *  Add or remove a class from a keyboard key (when touched or clicked)\r\n   *  or add a key preview for phone devices\r\n   *\r\n   *  @param    {Object}    key   key affected\r\n   *  @param    {boolean}   on    add or remove highlighting\r\n   **/\r\n  highlightKey(key: KeyElement, on: boolean) {\r\n    // Do not change element class unless a key\r\n    if (!key || !key.key || (key.className == '') || (key.className.indexOf('kmw-key-row') >= 0)) return;\r\n\r\n    // For phones, use key preview rather than highlighting the key,\r\n    var usePreview = (this.keytip != null) && key.key.allowsKeyTip();\r\n\r\n    if (usePreview) {\r\n      this.showKeyTip(key, on);\r\n    } else {\r\n      // No key tip should be shown. In some cases (e.g. multitap), we\r\n      // may still have a tip visible so let's always hide in that case\r\n      this.showKeyTip(null, false);\r\n      key.key.highlight(on);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use of `getComputedStyle` is ideal, but in many of our use cases its preconditions are not met.\r\n   * This function allows us to calculate the font size in those situations.\r\n   */\r\n  getKeyEmFontSize(): number {\r\n    if (!this.fontSize) {\r\n      return 0;\r\n    }\r\n\r\n    if (this.device.formFactor == 'desktop') {\r\n      let keySquareScale = 0.8; // Set in kmwosk.css, is relative.\r\n      return this.fontSize.scaledBy(keySquareScale).val;\r\n    } else {\r\n      let emSizeStr = getComputedStyle(document.body).fontSize;\r\n      let emSize = getFontSizeStyle(emSizeStr).val;\r\n\r\n      var emScale = 1;\r\n      if (!this.isStatic) {\r\n        // Double-check against the font scaling applied to the _Box element.\r\n        if (this.fontSize.absolute) {\r\n          return this.fontSize.val;\r\n        } else {\r\n          emScale = this.fontSize.val;\r\n        }\r\n      }\r\n      return emSize * emScale;\r\n    }\r\n  }\r\n\r\n  updateState() {\r\n    // May happen for desktop-oriented keyboards that neglect to specify a touch layout.\r\n    // See `test_chirality.js` from the unit-test keyboard suite, which tests keystrokes\r\n    // using modifiers that lack corresponding visual-layout representation.\r\n    if (!this.currentLayer) {\r\n      return;\r\n    }\r\n\r\n    var n, b = this.kbdDiv.childNodes[0].childNodes;\r\n    this.nextLayer = this.layerId;\r\n\r\n    if (this.currentLayer.nextlayer) {\r\n      this.nextLayer = this.currentLayer.nextlayer;\r\n    }\r\n\r\n    for (n = 0; n < b.length; n++) {\r\n      let layerElement = <HTMLDivElement>b[n];\r\n      if (layerElement['layer'] == this.layerId) {\r\n        layerElement.style.display = 'block';\r\n        //b[n].style.visibility='visible';\r\n\r\n        // Most functions that call this one often indicate a change in modifier\r\n        // or state key state.  Keep it updated!\r\n        this._UpdateVKShiftStyle();\r\n      } else {\r\n        layerElement.style.display = 'none';\r\n        //layerElement.style.visibility='hidden';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Used to refresh the VisualKeyboard's geometric layout and key sizes\r\n   * when needed.\r\n   */\r\n  refreshLayout() {\r\n    //let keyman = com.keyman.singleton;\r\n    let device = this.device;\r\n\r\n    var fs = 1.0;\r\n    // TODO: Logically, this should be needed for Android, too - may need to be changed for the next version!\r\n    if (device.OS == DeviceSpec.OperatingSystem.iOS && !this.isEmbedded) {\r\n      fs = fs / getViewportScale();\r\n    }\r\n\r\n    let paddedHeight: number;\r\n    if (this.height) {\r\n      paddedHeight = this.computedAdjustedOskHeight(this.height);\r\n    }\r\n\r\n    let b = this.layerGroup.element as HTMLElement;\r\n    let gs = this.kbdDiv.style;\r\n    let bs = b.style;\r\n    if (this.usesFixedHeightScaling && this.height) {\r\n      // Sets the layer group to the correct height.\r\n      gs.height = gs.maxHeight = this.height + 'px';\r\n    }\r\n\r\n    // The font-scaling applied on the layer group.\r\n    gs.fontSize = this.fontSize.styleString;\r\n    bs.fontSize = ParsedLengthStyle.forScalar(fs).styleString;\r\n\r\n    // NEW CODE ------\r\n\r\n    // Step 1:  have the necessary conditions been met?\r\n    const fixedSize = this.width && this.height;\r\n    const computedStyle = getComputedStyle(this.kbdDiv);\r\n    const isInDOM = computedStyle.height != '' && computedStyle.height != 'auto';\r\n\r\n    // Step 2:  determine basic layout geometry, refresh things that might update.\r\n    this.showLanguage(); // In case the spacebar-text mode setting has changed.\r\n\r\n    if (fixedSize) {\r\n      this._computedWidth = this.width;\r\n      this._computedHeight = this.height;\r\n    } else if (isInDOM) {\r\n      this._computedWidth = parseInt(computedStyle.width, 10);\r\n      if (!this._computedWidth) {\r\n        // For touch keyboards, the width _was_ specified on the layer group,\r\n        // not the root element (`kbdDiv`).\r\n        const groupStyle = getComputedStyle(this.kbdDiv.firstElementChild);\r\n        this._computedWidth = parseInt(groupStyle.width, 10);\r\n      }\r\n      this._computedHeight = parseInt(computedStyle.height, 10);\r\n    } else {\r\n      // Cannot perform layout operations!\r\n      return;\r\n    }\r\n\r\n    // Step 3:  perform layout operations.  (Handled by 'old code' section below.)\r\n\r\n    // END NEW CODE -----------\r\n\r\n    // Needs the refreshed layout info to work correctly.\r\n    if(this.currentLayer) {\r\n      this.currentLayer.refreshLayout(this, this._computedHeight - this.getVerticalLayerGroupPadding());\r\n    }\r\n  }\r\n\r\n  private getVerticalLayerGroupPadding(): number {\r\n    // For touch-based OSK layouts, kmwosk.css may include top & bottom padding on the layer-group element.\r\n    const computedGroupStyle = getComputedStyle(this.layerGroup.element);\r\n\r\n    // parseInt('') => NaN, which is falsy; we want to fallback to zero.\r\n    let pt = parseInt(computedGroupStyle.paddingTop, 10) || 0;\r\n    let pb = parseInt(computedGroupStyle.paddingBottom, 10) || 0;\r\n    return pt + pb;\r\n  }\r\n\r\n  /*private*/ computedAdjustedOskHeight(allottedHeight: number): number {\r\n    if (!this.layerGroup) {\r\n      return allottedHeight;\r\n    }\r\n\r\n    const layers = this.layerGroup.layers;\r\n    let oskHeight = 0;\r\n\r\n    // In case the keyboard's layers have differing row counts, we check them all for the maximum needed oskHeight.\r\n    for (const layerID in layers) {\r\n      const layer = layers[layerID];\r\n      let nRows = layer.rows.length;\r\n      let rowHeight = Math.floor(allottedHeight / (nRows == 0 ? 1 : nRows));\r\n      let layerHeight = nRows * rowHeight;\r\n\r\n      if (layerHeight > oskHeight) {\r\n        oskHeight = layerHeight;\r\n      }\r\n    }\r\n\r\n    // This isn't set anywhere else; it's a legacy part of the original methods.\r\n    const oskPad = 0;\r\n    let oskPaddedHeight = oskHeight + oskPad;\r\n\r\n    return oskPaddedHeight;\r\n  }\r\n\r\n  /**\r\n   *  Append a style sheet for the current keyboard if needed for specifying an embedded font\r\n   *  or to re-apply the default element font\r\n   *\r\n   **/\r\n  appendStyleSheet() {\r\n    //let util = com.keyman.singleton.util;\r\n\r\n    var activeKeyboard = this.layoutKeyboard;\r\n    var activeStub = this.layoutKeyboardProperties;\r\n\r\n    // Do not do anything if a null stub\r\n    if (activeStub == null) {\r\n      return;\r\n    }\r\n\r\n    // First remove any existing keyboard style sheet\r\n    if (this.styleSheet && this.styleSheet.parentNode) {\r\n      this.styleSheet.parentNode.removeChild(this.styleSheet);\r\n    }\r\n\r\n    var kfd = activeStub.textFont, ofd = activeStub.oskFont;\r\n\r\n    // Add and define style sheets for embedded fonts if necessary (each font-face style will only be added once)\r\n    this.styleSheetManager.addStyleSheetForFont(kfd, this.fontRootPath, this.device.OS);\r\n    this.styleSheetManager.addStyleSheetForFont(ofd, this.fontRootPath, this.device.OS);\r\n\r\n    // Build the style string to USE the fonts and append (or replace) the font style sheet\r\n    // Note: Some browsers do not download the font-face font until it is applied,\r\n    //       so must apply style before testing for font availability\r\n    // Extended to allow keyboard-specific custom styles for Build 360\r\n    var customStyle = this.addFontStyle(kfd, ofd);\r\n    if (activeKeyboard != null && typeof (activeKeyboard.oskStyling) == 'string')  // KMEW-129\r\n      customStyle = customStyle + activeKeyboard.oskStyling;\r\n\r\n    this.styleSheet = createStyleSheet(customStyle); //Build 360\r\n    this.styleSheet.addEventListener('load', () => {\r\n      // Once any related fonts are loaded, we can re-adjust key-cap scaling.\r\n      this.refreshLayout();\r\n    })\r\n    this.styleSheetManager.linkStylesheet(this.styleSheet);\r\n  }\r\n\r\n  /**\r\n   *  Add or replace the style sheet used to set the font for input elements and OSK\r\n   *\r\n   *  @param  {Object}  kfd   KFont font descriptor\r\n   *  @param  {Object}  ofd   OSK font descriptor (if any)\r\n   *  @return {string}\r\n   *\r\n   **/\r\n  addFontStyle(kfd: InternalKeyboardFont, ofd: InternalKeyboardFont): string {\r\n    let s: string = '';\r\n\r\n    let family = (fd: InternalKeyboardFont) => fd.family.replace(/\\u0022/g, '').replace(/,/g, '\",\"');\r\n\r\n    // Set font family for OSK text, suggestion text\r\n    if (kfd || ofd) {\r\n      s = `\r\n.kmw-key-text {\r\n  font-family: \"${family(ofd || kfd)}\";\r\n}\r\n\r\n.kmw-suggestion-text {\r\n  font-family: \"${family(kfd || ofd)}\";\r\n}\r\n`;\r\n    }\r\n\r\n    // Return the style string\r\n    return s;\r\n  }\r\n\r\n  /**\r\n   * Create copy of the OSK that can be used for embedding in documentation or help\r\n   * The currently active keyboard will be returned if PInternalName is null\r\n   *\r\n   *  @param  {Object}            PKbd            the keyboard object to be displayed\r\n   *  @param  {string=}           argFormFactor   layout form factor, defaulting to 'desktop'\r\n   *  @param  {(string|number)=}  argLayerId      name or index of layer to show, defaulting to 'default'\r\n   *  @param  {number}            height          Target height for the rendered keyboard\r\n   *                                              (currently required for legacy reasons)\r\n   *  @return {Object}                            DIV object with filled keyboard layer content\r\n   */\r\n  static buildDocumentationKeyboard(PKbd: Keyboard, kbdProperties: KeyboardProperties, fontRootPath: string, argFormFactor: DeviceSpec.FormFactor, argLayerId, height: number): HTMLElement { // I777\r\n    if (!PKbd) {\r\n      return null;\r\n    }\r\n\r\n    var formFactor = (typeof (argFormFactor) == 'undefined' ? 'desktop' : argFormFactor) as DeviceSpec.FormFactor,\r\n      layerId = (typeof (argLayerId) == 'undefined' ? 'default' : argLayerId),\r\n      device: {\r\n        formFactor?: DeviceSpec.FormFactor,\r\n        OS?: DeviceSpec.OperatingSystem,\r\n        touchable?: boolean\r\n      } = {};\r\n\r\n    // Device emulation for target documentation.\r\n    device.formFactor = formFactor;\r\n    if (formFactor != 'desktop') {\r\n      device.OS = DeviceSpec.OperatingSystem.iOS;\r\n      device.touchable = true;\r\n    } else {\r\n      device.OS = DeviceSpec.OperatingSystem.Windows;\r\n      device.touchable = false;\r\n    }\r\n\r\n    let layout = PKbd.layout(formFactor);\r\n\r\n    const deviceSpec = new DeviceSpec('other', device.formFactor, device.OS, device.touchable);\r\n    let kbdObj = new VisualKeyboard({\r\n      keyboard: PKbd,\r\n      keyboardMetadata: kbdProperties,\r\n      hostDevice: deviceSpec,\r\n      isStatic: true,\r\n      topContainer: null,\r\n      pathConfig: {\r\n        fonts: fontRootPath,\r\n        resources: '' // ignored\r\n      },\r\n      styleSheetManager: null\r\n    }); //\r\n\r\n    kbdObj.layerGroup.element.className = kbdObj.kbdDiv.className; // may contain multiple classes\r\n    kbdObj.layerGroup.element.classList.add(device.formFactor + '-static');\r\n\r\n    let kbd = kbdObj.kbdDiv.childNodes[0] as HTMLDivElement; // Gets the layer group.\r\n\r\n    // Models CSS classes hosted on the OSKView in normal operation.  We can't do this on the main\r\n    // layer-group element because of the CSS rule structure for keyboard styling.\r\n    //\r\n    // For example, `.ios .kmw-keyboard-sil_cameroon_azerty` requires the element with the keyboard\r\n    // ID to be in a child of an element with the .ios class.\r\n    let classWrapper = document.createElement('div');\r\n    classWrapper.classList.add(device.OS.toLowerCase(), device.formFactor);\r\n\r\n    // Select the layer to display, and adjust sizes\r\n    if (layout != null) {\r\n      kbdObj.layerId = layerId;\r\n\r\n      // This still feels fairly hacky... but something IS needed to constrain the height.\r\n      // There are plans to address related concerns through some of the later aspects of\r\n      // the Web OSK-Core design.\r\n      kbdObj.setSize(800, height); // Probably need something for width, too, rather than\r\n      kbdObj.fontSize = defaultFontSize(deviceSpec, height, false);\r\n\r\n      // assuming 100%.\r\n      kbdObj.refreshLayout(); // Necessary for the row heights to be properly set!\r\n      // Relocates the font size definition from the main VisualKeyboard wrapper, since we don't return the whole thing.\r\n      kbd.style.fontSize = kbdObj.kbdDiv.style.fontSize;\r\n      kbd.style.height = kbdObj.kbdDiv.style.height;\r\n      kbd.style.maxHeight = kbdObj.kbdDiv.style.maxHeight;\r\n    } else {\r\n      kbd.innerHTML = \"<p style='color:#c40; font-size:0.5em;margin:10px;'>No \" + formFactor + \" layout is defined for \" + PKbd.name + \".</p>\";\r\n    }\r\n    // Add a faint border\r\n    kbd.style.border = '1px solid #ccc';\r\n\r\n    kbdObj.updateState(); // double-ensure that the 'default' layer is properly displayed.\r\n\r\n    // Once the element is inserted into the DOM, refresh the layout so that proper text scaling may apply.\r\n    const detectAndHandleInsertion = () => {\r\n      if(document.contains(kbd)) {\r\n        // Yay, insertion!\r\n\r\n        try {\r\n          // Are there font-size attributes we may safely adjust?  If so, do that!\r\n          if(getComputedStyle(kbd) && kbd.style.fontSize) {\r\n            kbdObj.fontSize = new ParsedLengthStyle(kbd.style.fontSize);\r\n          }\r\n\r\n          // Make sure that the stylesheet is attached, now that the keyboard-doc's been inserted.\r\n          // The stylesheet is currently built + constructed in the same code that attaches it to\r\n          // the page.\r\n          kbdObj.appendStyleSheet();\r\n\r\n          // Grab a reference to the stylesheet.\r\n          const stylesheet = kbdObj.styleSheet;\r\n          const stylesheetParentElement = stylesheet.parentElement;\r\n\r\n          // Don't reset top-level stuff; just the visible layer.\r\n          // kbdObj.currentLayer.refreshLayout(kbdObj, kbdObj.height);\r\n\r\n          // We refresh the full layout so that font-size is properly detected & stored\r\n          // on the documentation keyboard.\r\n          kbdObj.refreshLayout();\r\n          kbd.style.fontSize = kbdObj.kbdDiv.style.fontSize;\r\n\r\n          // We no longer need a reference to the constructing VisualKeyboard, so we should let\r\n          // it clean up its <head> stylesheet links.  This detaches the stylesheet, though.\r\n          kbdObj.shutdown();\r\n\r\n          // Now that shutdown is done, re-attach the stylesheet - but to the layer group.\r\n          kbd.appendChild(stylesheet);\r\n        } finally {\r\n          insertionObserver.disconnect();\r\n        }\r\n      }\r\n    }\r\n\r\n    const insertionObserver = new MutationObserver(detectAndHandleInsertion);\r\n    insertionObserver.observe(document.body, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n\r\n    classWrapper.append(kbd);\r\n    return classWrapper;\r\n  }\r\n\r\n  onHide() {\r\n    // Remove highlighting from hide keyboard key, if applied\r\n    if (this.hkKey) {\r\n      this.highlightKey(this.hkKey, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts an implementation-specific longpress gesture.  Separately implemented for\r\n   * in-browser and embedded modes.\r\n   * @param key The base key of the longpress.\r\n   * @returns\r\n   */\r\n  startLongpress(key: KeyElement): PendingGesture {\r\n    // First-level object/Promise:  will produce a subkey popup when the longpress gesture completes.\r\n    // 'Returns' a second-level object/Promise:  resolves when a subkey is selected or is cancelled.\r\n    let pendingLongpress = new InternalPendingLongpress(this, key);\r\n    pendingLongpress.promise.then((subkeyPopup) => {\r\n      // In-browser-specific handling.\r\n      if (subkeyPopup) {\r\n        // Append the touch-hold (subkey) array to the OSK\r\n        this.topContainer.appendChild(subkeyPopup.element);\r\n        this.topContainer.appendChild(subkeyPopup.shim);\r\n\r\n        // Must be placed after its `.element` has been inserted into the DOM.\r\n        subkeyPopup.reposition(this);\r\n      }\r\n    });\r\n\r\n    return pendingLongpress;\r\n  }\r\n\r\n  /**\r\n   * Initializes all supported gestures given a base key and the triggering touch coordinates.\r\n   * @param key     The gesture's base key\r\n   * @param touch   The starting touch coordinates for the gesture\r\n   * @returns\r\n   */\r\n  initGestures(key: KeyElement, input: InputEventCoordinate) {\r\n\r\n    if (this.pendingMultiTap) {\r\n      switch (this.pendingMultiTap.incrementTouch(key)) {\r\n        case PendingMultiTapState.Cancelled:\r\n          this.pendingMultiTap = null;\r\n          break;\r\n        case PendingMultiTapState.Realized:\r\n          // Don't initialize any other gestures if the\r\n          // multi tap is realized; we cleanup on touch\r\n          // release because we need to cancel the base\r\n          // key action\r\n          return;\r\n      }\r\n    }\r\n\r\n    if (!this.pendingMultiTap && PendingMultiTap.isValidTarget(this, key)) {\r\n      // We are only going to support double-tap on Shift\r\n      // in Keyman 15, so we pass in the constant count = 2\r\n      this.pendingMultiTap = new PendingMultiTap(this, key, 2);\r\n      this.pendingMultiTap.timeout.then(() => {\r\n        this.pendingMultiTap = null;\r\n      });\r\n    }\r\n\r\n\r\n    if (key['subKeys']) {\r\n      let _this = this;\r\n\r\n      let pendingLongpress = this.startLongpress(key);\r\n      if (pendingLongpress == null) {\r\n        return;\r\n      }\r\n      this.pendingSubkey = pendingLongpress;\r\n\r\n      pendingLongpress.promise.then(function (subkeyPopup) {\r\n        if (_this.pendingSubkey == pendingLongpress) {\r\n          _this.pendingSubkey = null;\r\n        }\r\n\r\n        if (subkeyPopup) {\r\n          // Clear key preview if any\r\n          _this.showKeyTip(null, false);\r\n\r\n          _this.subkeyGesture = subkeyPopup;\r\n          subkeyPopup.promise.then(function (keyEvent: KeyEvent) {\r\n            // Allow active cancellation, even if the source should allow passive.\r\n            // It's an easy and cheap null guard.\r\n            if (keyEvent) {\r\n              _this.raiseKeyEvent(keyEvent, null);\r\n            }\r\n            _this.clearPopup();\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates all currently-pending and activated gestures.\r\n   *\r\n   * @param currentKey    The key currently underneath the most recent touch coordinate\r\n   * @param previousKey   The previously-selected key\r\n   * @param input         The current mouse or touch coordinate for the gesture\r\n   * @returns true if should fully capture input, false if input should 'fall through'.\r\n   */\r\n  updateGestures(currentKey: KeyElement, previousKey: KeyElement, input: InputEventCoordinate): boolean {\r\n    let key0 = previousKey;\r\n    let key1 = currentKey;\r\n\r\n    if(!currentKey && this.pendingMultiTap) {\r\n      this.pendingMultiTap.cancel();\r\n      this.pendingMultiTap = null;\r\n    }\r\n\r\n    // Clear previous key highlighting, allow subkey controller to highlight as appropriate.\r\n    if (this.subkeyGesture) {\r\n      if (key0) {\r\n        key0.key.highlight(false);\r\n      }\r\n      this.subkeyGesture.updateTouch(input);\r\n\r\n      this.keyPending = null;\r\n      this.touchPending = null;\r\n\r\n      return true;\r\n    }\r\n\r\n    this.currentTarget = null;\r\n\r\n    // If popup is visible, need to move over popup, not over main keyboard\r\n    // Could be turned into a browser-longpress specific implementation within browser.PendingLongpress?\r\n    if (key1 && key1['subKeys'] != null && this.initTouchCoord) {\r\n      if(this.pendingSubkey && this.pendingSubkey instanceof InternalPendingLongpress) {\r\n        // Show popup keys immediately if touch moved up towards key array (KMEW-100, Build 353)\r\n        if (this.initTouchCoord.y - input.y > this.getLongpressFlickThreshold()) {\r\n          this.pendingSubkey.resolve();\r\n        }\r\n      }\r\n    }\r\n\r\n    // If there is an active popup menu (which can occur from the previous block),\r\n    // a subkey popup exists; do not allow base key output.\r\n    if (this.subkeyGesture || this.pendingSubkey) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private getLongpressFlickThreshold(): number {\r\n    const rowHeight = this.currentLayer.rowHeight;\r\n\r\n    // If larger than 5 (and it likely is), new threshold = 1/4 the std. key height.\r\n    const proportionalThreshold = rowHeight / 4;\r\n\r\n    // 5 - the longpress-flick triggering threshold before 15.0.\r\n    return Math.max(proportionalThreshold, 5);\r\n  }\r\n\r\n  optionKey(e: KeyElement, keyName: string, keyDown: boolean) {\r\n    if (keyName.indexOf('K_LOPT') >= 0) {\r\n      this.emit('globekey', e, keyDown);\r\n    } else if (keyName.indexOf('K_ROPT') >= 0) {\r\n      if (keyDown) {\r\n        this.emit('hiderequested', e);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add (or remove) the keytip preview (if KeymanWeb on a phone device)\r\n   *\r\n   * @param   {Object}  key   HTML key element\r\n   * @param   {boolean} on    show or hide\r\n   */\r\n  showKeyTip(key: KeyElement, on: boolean) {\r\n    var tip = this.keytip;\r\n\r\n    if (tip == null) {\r\n      return;\r\n    }\r\n\r\n    let sk = this.subkeyGesture;\r\n    let popup = (sk && sk.isVisible());\r\n\r\n    // If popup keys are active, do not show the key tip.\r\n    on = popup ? false : on;\r\n\r\n    tip.show(key, on, this);\r\n  };\r\n\r\n  /**\r\n   *  Create a key preview element for phone devices\r\n   */\r\n  createKeyTip() {\r\n    if(this.device.formFactor == 'phone') {\r\n      if (this.keytip == null) {\r\n        // For now, should only be true (in production) when keyman.isEmbedded == true.\r\n        let constrainPopup = this.isEmbedded;\r\n        this.keytip = new InternalKeyTip(constrainPopup);\r\n      }\r\n    }\r\n\r\n    // Always append to _Box (since cleared during OSK Load)\r\n    if (this.keytip && this.keytip.element) {\r\n      this.topContainer.appendChild(this.keytip.element);\r\n    }\r\n  };\r\n\r\n  createGlobeHint(): GlobeHint {\r\n    if(this.config.embeddedGestureConfig.createGlobeHint) {\r\n      return this.config.embeddedGestureConfig.createGlobeHint(this);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  shutdown() {\r\n    // Prevents style-sheet pollution from multiple keyboard swaps.\r\n    if(this.styleSheet && this.styleSheet.parentNode) {\r\n      this.styleSheet.parentNode.removeChild(this.styleSheet);\r\n    }\r\n\r\n    if(this.inputEngine) {\r\n      this.inputEngine.unregisterEventHandlers();\r\n    }\r\n\r\n    if(this.deleting) {\r\n      window.clearTimeout(this.deleting);\r\n    }\r\n\r\n    this.keyPending = null;\r\n    this.touchPending = null;\r\n\r\n    this.keytip?.show(null, false, this);\r\n    this.subkeyGesture?.clear();\r\n    this.pendingMultiTap?.cancel();\r\n    this.pendingSubkey?.cancel();\r\n  }\r\n\r\n  raiseKeyEvent(keyEvent: KeyEvent, e: KeyElement) {\r\n    // Exclude menu and OSK hide keys from normal click processing\r\n    if(keyEvent.kName == 'K_LOPT' || keyEvent.kName == 'K_ROPT') {\r\n      this.optionKey(e, keyEvent.kName, true);\r\n      return true;\r\n    }\r\n\r\n    this.emit('keyevent', keyEvent);\r\n  }\r\n}\r\n",
    "import { DeviceSpec } from \"@keymanapp/web-utils\";\r\nimport { ParsedLengthStyle } from \"./lengthStyle.js\";\r\n\r\nexport function getFontSizeStyle(e: HTMLElement|string): {val: number, absolute: boolean} {\r\n  var fs: string;\r\n\r\n  if(typeof e == 'string') {\r\n    fs = e;\r\n  } else {\r\n    fs = e.style.fontSize;\r\n    if(!fs) {\r\n      fs = getComputedStyle(e).fontSize;\r\n    }\r\n  }\r\n\r\n  return new ParsedLengthStyle(fs);\r\n}\r\n\r\nexport function defaultFontSize(device: DeviceSpec, computedHeight: number, isEmbedded: boolean): ParsedLengthStyle {\r\n  if(device.touchable) {\r\n    const fontScale = device.formFactor == 'phone'\r\n      ? 1.6 * (isEmbedded ? 0.65 : 0.6) * 1.2  // Combines original scaling factor with one previously applied to the layer group.\r\n      : 2; // iPad or Android tablet\r\n    return ParsedLengthStyle.special(fontScale, 'em');\r\n  } else {\r\n    return computedHeight ? ParsedLengthStyle.inPixels(computedHeight / 8) : undefined;\r\n  }\r\n}",
    "// Defines the PUA code mapping for the various 'special' modifier/control/non-printing keys on keyboards.\r\n// `specialCharacters` must be kept in sync with the same variable in constants.js. See also CompileKeymanWeb.pas: CSpecialText10\r\nlet specialCharacters = {\r\n  '*Shift*':    8,\r\n  '*Enter*':    5,\r\n  '*Tab*':      6,\r\n  '*BkSp*':     4,\r\n  '*Menu*':     11,\r\n  '*Hide*':     10,\r\n  '*Alt*':      25,\r\n  '*Ctrl*':     1,\r\n  '*Caps*':     3,\r\n  '*ABC*':      16,\r\n  '*abc*':      17,\r\n  '*123*':      19,\r\n  '*Symbol*':   21,\r\n  '*Currency*': 20,\r\n  '*Shifted*':  9,\r\n  '*AltGr*':    2,\r\n  '*TabLeft*':  7,\r\n  '*LAlt*':     0x56,\r\n  '*RAlt*':     0x57,\r\n  '*LCtrl*':    0x58,\r\n  '*RCtrl*':    0x59,\r\n  '*LAltCtrl*':       0x60,\r\n  '*RAltCtrl*':       0x61,\r\n  '*LAltCtrlShift*':  0x62,\r\n  '*RAltCtrlShift*':  0x63,\r\n  '*AltShift*':       0x64,\r\n  '*CtrlShift*':      0x65,\r\n  '*AltCtrlShift*':   0x66,\r\n  '*LAltShift*':      0x67,\r\n  '*RAltShift*':      0x68,\r\n  '*LCtrlShift*':     0x69,\r\n  '*RCtrlShift*':     0x70,\r\n  // Added in Keyman 14.0.\r\n  '*LTREnter*':       0x05, // Default alias of '*Enter*'.\r\n  '*LTRBkSp*':        0x04, // Default alias of '*BkSp*'.\r\n  '*RTLEnter*':       0x71,\r\n  '*RTLBkSp*':        0x72,\r\n  '*ShiftLock*':      0x73,\r\n  '*ShiftedLock*':    0x74,\r\n  '*ZWNJ*':           0x75, // If this one is specified, auto-detection will kick in.\r\n  '*ZWNJiOS*':        0x75, // The iOS version will be used by default, but the\r\n  '*ZWNJAndroid*':    0x76, // Android platform has its own default glyph.\r\n  // Added in Keyman 17.0.\r\n  // Reference: https://github.com/silnrsi/font-symchar/blob/v4.000/documentation/encoding.md\r\n  '*ZWNJGeneric*':    0x79, // Generic version of ZWNJ (no override)\r\n  '*Sp*':             0x80, // Space\r\n  '*NBSp*':           0x82, // No-break Space\r\n  '*NarNBSp*':        0x83, // Narrow No-break Space\r\n  '*EnQ*':            0x84, // En Quad\r\n  '*EmQ*':            0x85, // Em Quad\r\n  '*EnSp*':           0x86, // En Space\r\n  '*EmSp*':           0x87, // Em Space\r\n  // TODO: Skipping #-per-em-space\r\n  '*PunctSp*':        0x8c, // Punctuation Space\r\n  '*ThSp*':           0x8d, // Thin Space\r\n  '*HSp*':            0x8e, // Hair Space\r\n  '*ZWSp*':           0x81, // Zero Width Space\r\n  '*ZWJ*':            0x77, // Zero Width Joiner\r\n  '*WJ*':             0x78, // Word Joiner\r\n  '*CGJ*':            0x7a, // Combining Grapheme Joiner\r\n  '*LTRM*':           0x90, // Left-to-right Mark\r\n  '*RTLM*':           0x91, // Right-to-left Mark\r\n  '*SH*':             0xa1, // Soft Hyphen\r\n  '*HTab*':           0xa2, // Horizontal Tabulation\r\n  // TODO: Skipping size references\r\n\r\n};\r\n\r\nexport default specialCharacters;",
    "\r\n/**\r\n * Maps 'sp' properties on a touch-layout spec to their corresponding CSS class names.\r\n */\r\nlet BUTTON_CLASSES = [\r\n  'default',\r\n  'shift',\r\n  'shift-on',\r\n  'special',\r\n  'special-on',\r\n  '', // Key classes 5 through 7 are reserved for future use.\r\n  '',\r\n  '',\r\n  'deadkey',\r\n  'blank',\r\n  'hidden'\r\n];\r\n\r\nexport default BUTTON_CLASSES;",
    "import { ActiveKey, ButtonClass, DeviceSpec, LayoutKey } from '@keymanapp/keyboard-processor';\r\n// At present, we don't use @keymanapp/keyman.  Just `keyman`.  (Refer to <root>/web/package.json.)\r\nimport { getAbsoluteX, getAbsoluteY } from 'keyman/engine/dom-utils';\r\n\r\nimport { getFontSizeStyle } from '../fontSizeUtils.js';\r\nimport InputEventCoordinate from '../input/inputEventCoordinate.js';\r\nimport specialChars from '../specialCharacters.js';\r\nimport buttonClassNames from '../buttonClassNames.js';\r\n\r\nimport { KeyElement } from '../keyElement.js';\r\nimport VisualKeyboard from '../visualKeyboard.js';\r\n\r\nexport class OSKKeySpec implements LayoutKey {\r\n  id: string;\r\n\r\n  // Only set (within @keymanapp/keyboard-processor) for keys actually specified in a loaded layout\r\n  baseKeyID?: string;\r\n  coreID?: string;\r\n  elementID?: string;\r\n\r\n  text?: string;\r\n  sp?: ButtonClass;\r\n  width: number;\r\n  layer?: string; // The key will derive its base modifiers from this property - may not equal the layer on which it is displayed.\r\n  nextlayer?: string;\r\n  pad?: number;\r\n  sk?: OSKKeySpec[];\r\n  default?: boolean;\r\n\r\n  constructor(id: string, text?: string, width?: number, sp?: ButtonClass, nextlayer?: string, pad?: number) {\r\n    this.id = id;\r\n    this.text = text;\r\n    this.width = width ? width : 50;\r\n    this.sp = sp;\r\n    this.nextlayer = nextlayer;\r\n    this.pad = pad;\r\n  }\r\n}\r\n\r\nexport default abstract class OSKKey {\r\n  // Only set here to act as an alias for code built against legacy versions.\r\n  static readonly specialCharacters = specialChars;\r\n\r\n  static readonly BUTTON_CLASSES = buttonClassNames;\r\n\r\n  static readonly HIGHLIGHT_CLASS = 'kmw-key-touched';\r\n  readonly spec: OSKKeySpec;\r\n\r\n  btn: KeyElement;\r\n  label: HTMLSpanElement;\r\n  square: HTMLDivElement;\r\n\r\n  /**\r\n   * The layer of the OSK on which the key is displayed.\r\n   */\r\n  readonly layer: string;\r\n\r\n  constructor(spec: OSKKeySpec, layer: string) {\r\n    this.spec = spec;\r\n    this.layer = layer;\r\n  }\r\n\r\n  abstract getId(): string;\r\n\r\n  /**\r\n   * Attach appropriate class to each key button, according to the layout\r\n   *\r\n   * @param       {Object=}   layout  source layout description (optional, sometimes)\r\n   */\r\n  public setButtonClass() {\r\n    let key = this.spec;\r\n    let btn = this.btn;\r\n\r\n    var n=0;\r\n    if(typeof key['dk'] == 'string' && key['dk'] == '1') {\r\n      n=8;\r\n    }\r\n\r\n    n = key['sp'] ?? n;\r\n\r\n    if(n < 0 || n > 10) {\r\n      n=0;\r\n    }\r\n\r\n    btn.className='kmw-key kmw-key-'+ buttonClassNames[n];\r\n  }\r\n\r\n  /**\r\n   * For keys with button classes that support toggle states, this method\r\n   * may be used to toggle which state the key's button class is in.\r\n   * -  shift  <=>  shift-on\r\n   * - special <=> special-on\r\n   * @param {boolean=} flag The new toggle state\r\n   */\r\n  public setToggleState(flag?: boolean) {\r\n    let btnClassId: number;\r\n\r\n    btnClassId = this.spec['sp'];\r\n\r\n    // 1 + 2:   shift  +  shift-on\r\n    // 3 + 4:  special + special-on\r\n    switch(buttonClassNames[btnClassId]) {\r\n      case 'shift':\r\n      case 'shift-on':\r\n        if(flag === undefined) {\r\n          flag = buttonClassNames[btnClassId] == 'shift';\r\n        }\r\n\r\n        this.spec['sp'] = 1 + (flag ? 1 : 0) as ButtonClass;\r\n        break;\r\n      // Added in 15.0:  special key highlight toggling.\r\n      // Was _intended_ in earlier versions, but not actually implemented.\r\n      case 'special':\r\n      case 'special-on':\r\n        if(flag === undefined) {\r\n          flag = buttonClassNames[btnClassId] == 'special';\r\n        }\r\n\r\n        this.spec['sp'] = 3 + (flag ? 1 : 0) as ButtonClass;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    this.setButtonClass();\r\n  }\r\n\r\n  // \"Frame key\" - generally refers to non-linguistic keys on the keyboard\r\n  public isFrameKey(): boolean {\r\n    let classIndex = this.spec['sp'] || 0;\r\n    switch(buttonClassNames[classIndex]) {\r\n      case 'default':\r\n      case 'deadkey':\r\n        // Note:  will (generally) include the spacebar.\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  public allowsKeyTip(): boolean {\r\n    if(this.isFrameKey()) {\r\n      return false;\r\n    } else {\r\n      return !this.btn.classList.contains('kmw-spacebar');\r\n    }\r\n  }\r\n\r\n  public highlight(on: boolean) {\r\n    var classes=this.btn.classList;\r\n\r\n    if(on) {\r\n      if(!classes.contains(OSKKey.HIGHLIGHT_CLASS)) {\r\n        classes.add(OSKKey.HIGHLIGHT_CLASS);\r\n      }\r\n    } else {\r\n      classes.remove(OSKKey.HIGHLIGHT_CLASS);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\r\n   *\r\n   * @param {String} text The text to be rendered.\r\n   * @param {String} style The CSSStyleDeclaration for an element to measure against, without modification.\r\n   *\r\n   * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\r\n   * This version has been substantially modified to work for this particular application.\r\n   */\r\n  static getTextMetrics(text: string, emScale: number, style: {fontFamily?: string, fontSize: string}): TextMetrics {\r\n    // Since we may mutate the incoming style, let's make sure to copy it first.\r\n    // Only the relevant properties, though.\r\n    style = {\r\n      fontFamily: style.fontFamily,\r\n      fontSize: style.fontSize\r\n    };\r\n\r\n    // A final fallback - having the right font selected makes a world of difference.\r\n    if(!style.fontFamily) {\r\n      style.fontFamily = getComputedStyle(document.body).fontFamily;\r\n    }\r\n\r\n    if(!style.fontSize || style.fontSize == \"\") {\r\n      style.fontSize = '1em';\r\n    }\r\n\r\n    let fontFamily = style.fontFamily;\r\n    let fontSpec = getFontSizeStyle(style.fontSize);\r\n\r\n    var fontSize: string;\r\n    if(fontSpec.absolute) {\r\n      // We've already got an exact size - use it!\r\n      fontSize = fontSpec.val + 'px';\r\n    } else {\r\n      fontSize = fontSpec.val * emScale + 'px';\r\n    }\r\n\r\n    // re-use canvas object for better performance\r\n    var canvas: HTMLCanvasElement = OSKKey.getTextMetrics['canvas'] ||\r\n                                    (OSKKey.getTextMetrics['canvas'] = document.createElement(\"canvas\"));\r\n    var context = canvas.getContext(\"2d\");\r\n    context.font = fontSize + \" \" + fontFamily;\r\n    var metrics = context.measureText(text);\r\n\r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * Calculate the font size required for a key cap, scaling to fit longer text\r\n   * @param vkbd\r\n   * @param text\r\n   * @param style     specification for the desired base font size\r\n   * @param override  if true, don't use the font spec from the button, just use the passed in spec\r\n   * @returns         font size as a style string\r\n   */\r\n  getIdealFontSize(vkbd: VisualKeyboard, text: string, style: {height?: string, fontFamily?: string, fontSize: string}, override?: boolean): string {\r\n    let buttonStyle = getComputedStyle(this.btn);\r\n    let keyWidth = parseFloat(buttonStyle.width);\r\n    let emScale = 1;\r\n\r\n    const originalSize = getFontSizeStyle(style.fontSize || '1em');\r\n\r\n    // Not yet available; it'll be handled in a later layout pass.\r\n    if(!buttonStyle.fontSize) {\r\n      // NOTE:  preserves old behavior for use in documentation keyboards, for now.\r\n      // Once we no longer need to maintain this code block, we can drop all current\r\n      // method parameters safely.\r\n      //\r\n      // Recompute the new width for use in autoscaling calculations below, just in case.\r\n      emScale = vkbd.getKeyEmFontSize();\r\n      keyWidth = this.getKeyWidth(vkbd);\r\n    } else if(!override) {\r\n      // When available, just use computedStyle instead.\r\n      style = buttonStyle;\r\n    }\r\n\r\n    let fontSpec = getFontSizeStyle(style.fontSize || '1em');\r\n    let metrics = OSKKey.getTextMetrics(text, emScale, style);\r\n\r\n    const MAX_X_PROPORTION = 0.90;\r\n    const MAX_Y_PROPORTION = 0.90;\r\n    const X_PADDING = 2;\r\n\r\n    var fontHeight: number, keyHeight: number;\r\n    if(metrics.fontBoundingBoxAscent) {\r\n      fontHeight = metrics.fontBoundingBoxAscent + metrics.fontBoundingBoxDescent;\r\n    }\r\n\r\n    // Don't add extra padding to height - multiplying with MAX_Y_PROPORTION already gives\r\n    // padding\r\n    let textHeight = fontHeight ?? 0;\r\n    if(style.height && style.height.indexOf('px') != -1) {\r\n      keyHeight = Number.parseFloat(style.height.substring(0, style.height.indexOf('px')));\r\n    }\r\n\r\n    let xProportion = (keyWidth * MAX_X_PROPORTION) / (metrics.width + X_PADDING); // How much of the key does the text want to take?\r\n    let yProportion = textHeight && keyHeight ? (keyHeight * MAX_Y_PROPORTION) / textHeight : undefined;\r\n\r\n    var proportion: number = xProportion;\r\n    if(yProportion && yProportion < xProportion) {\r\n      proportion = yProportion;\r\n    }\r\n\r\n    // Never upscale keys past the default - only downscale them.\r\n    // Proportion < 1:  ratio of key width to (padded [loosely speaking]) text width\r\n    //                  maxProportion determines the 'padding' involved.\r\n    //\r\n    if(proportion < 1) {\r\n      if(originalSize.absolute) {\r\n        return proportion * fontSpec.val + 'px';\r\n      } else {\r\n        return proportion * originalSize.val + 'em';\r\n      }\r\n    } else {\r\n      if(originalSize.absolute) {\r\n        return fontSpec.val + 'px';\r\n      } else {\r\n        return originalSize.val + 'em';\r\n      }\r\n    }\r\n  }\r\n\r\n  getKeyWidth(vkbd: VisualKeyboard): number {\r\n    let key = this.spec as ActiveKey;\r\n    return key.proportionalWidth * vkbd.width;\r\n  }\r\n\r\n  /**\r\n   * Replace default key names by special font codes for modifier keys\r\n   *\r\n   *  @param  {string}  oldText\r\n   *  @return {string}\r\n   **/\r\n  protected renameSpecialKey(oldText: string, vkbd: VisualKeyboard): string {\r\n    // If a 'special key' mapping exists for the text, replace it with its corresponding special OSK character.\r\n    switch(oldText) {\r\n      case '*ZWNJ*':\r\n        // Default ZWNJ symbol comes from iOS.  We'd rather match the system defaults where\r\n        // possible / available though, and there's a different standard symbol on Android.\r\n        oldText = vkbd.device.OS == DeviceSpec.OperatingSystem.Android ?\r\n          '*ZWNJAndroid*' :\r\n          '*ZWNJiOS*';\r\n        break;\r\n      case '*Enter*':\r\n        oldText = vkbd.isRTL ? '*RTLEnter*' : '*LTREnter*';\r\n        break;\r\n      case '*BkSp*':\r\n        oldText = vkbd.isRTL ? '*RTLBkSp*' : '*LTRBkSp*';\r\n        break;\r\n      default:\r\n        // do nothing.\r\n    }\r\n\r\n    let specialCodePUA = 0XE000 + specialChars[oldText];\r\n\r\n    return specialChars[oldText] ?\r\n      String.fromCharCode(specialCodePUA) :\r\n      oldText;\r\n  }\r\n\r\n  public get keyText(): string {\r\n    const spec = this.spec;\r\n    const DEFAULT_BLANK = '\\xa0';\r\n\r\n    // Add OSK key labels\r\n    let keyText = null;\r\n    if(spec['text'] == null || spec['text'] == '') {\r\n      if(typeof spec['id'] == 'string') {\r\n        // If the ID's Unicode-based, just use that code.\r\n        keyText = ActiveKey.unicodeIDToText(spec['id']);\r\n      }\r\n\r\n      keyText = keyText || DEFAULT_BLANK;\r\n    } else {\r\n      keyText=spec['text'];\r\n\r\n      // Unique layer-based transformation:  SHIFT-TAB uses a different glyph.\r\n      if(keyText == '*Tab*' && this.layer == 'shift') {\r\n        keyText = '*TabLeft*';\r\n      }\r\n    }\r\n\r\n    return keyText;\r\n  }\r\n\r\n  // Produces a HTMLSpanElement with the key's actual text.\r\n  protected generateKeyText(vkbd: VisualKeyboard): HTMLSpanElement {\r\n    const spec = this.spec;\r\n\r\n    let t = document.createElement('span'), ts=t.style;\r\n    t.className='kmw-key-text';\r\n\r\n    // Add OSK key labels\r\n    let keyText = this.keyText;\r\n    let specialText = this.renameSpecialKey(keyText, vkbd);\r\n    if(specialText != keyText) {\r\n      // The keyboard wants to use the code for a special glyph defined by the SpecialOSK font.\r\n      keyText = specialText;\r\n      spec['font'] = \"SpecialOSK\";\r\n    }\r\n\r\n    //Override font spec if set for this key in the layout\r\n    if(typeof spec['font'] == 'string' && spec['font'] != '') {\r\n      ts.fontFamily=spec['font'];\r\n    }\r\n\r\n    if(typeof spec['fontsize'] == 'string' && spec['fontsize'] != '') {\r\n      ts.fontSize=spec['fontsize'];\r\n    }\r\n\r\n    // For some reason, fonts will sometimes 'bug out' for the embedded iOS page if we\r\n    // instead assign fontFamily to the existing style 'ts'.  (Occurs in iOS 12.)\r\n    let styleSpec: {fontFamily?: string, fontSize: string} = {fontSize: ts.fontSize};\r\n\r\n    if(ts.fontFamily) {\r\n      styleSpec.fontFamily = ts.fontFamily;\r\n    } else {\r\n      styleSpec.fontFamily = vkbd.fontFamily; // Helps with style sheet calculations.\r\n    }\r\n\r\n    // Check the key's display width - does the key visualize well?\r\n    let emScale = vkbd.getKeyEmFontSize();\r\n    var width: number = OSKKey.getTextMetrics(keyText, emScale, styleSpec).width;\r\n    if(width == 0 && keyText != '' && keyText != '\\xa0') {\r\n      // Add the Unicode 'empty circle' as a base support for needy diacritics.\r\n\r\n      // Disabled by mcdurdin 2020-10-19; dotted circle display is inconsistent on iOS/Safari\r\n      // at least and doesn't combine with diacritic marks. For consistent display, it may be\r\n      // necessary to build a custom font that does not depend on renderer choices for base\r\n      // mark display -- e.g. create marks with custom base included, potentially even on PUA\r\n      // code points and use those in rendering the OSK. See #3039 for more details.\r\n      // keyText = '\\u25cc' + keyText;\r\n\r\n      if(vkbd.isRTL) {\r\n        // Add the RTL marker to ensure it displays properly.\r\n        keyText = '\\u200f' + keyText;\r\n      }\r\n    }\r\n\r\n    ts.fontSize = this.getIdealFontSize(vkbd, keyText, styleSpec);\r\n\r\n    // Finalize the key's text.\r\n    t.innerText = keyText;\r\n\r\n    return t;\r\n  }\r\n\r\n  public isUnderTouch(input: InputEventCoordinate): boolean {\r\n    let x = input.x;\r\n    let y = input.y;\r\n\r\n    let btn = this.btn;\r\n    let x0 = getAbsoluteX(btn);\r\n    let y0 = getAbsoluteY(btn);\r\n    let x1 = x0 + btn.offsetWidth;\r\n    let y1 = y0 + btn.offsetHeight;\r\n\r\n    return (x > x0 && x < x1 && y > y0 && y < y1);\r\n  }\r\n\r\n  public refreshLayout(vkbd: VisualKeyboard) {\r\n    // space bar may not define the text span!\r\n    if(this.label) {\r\n      if(!this.label.classList.contains('kmw-spacebar-caption')) {\r\n        this.label.style.fontSize = this.getIdealFontSize(vkbd, this.keyText, this.btn.style);\r\n      } else {\r\n        // Remove any custom setting placed on it before recomputing its inherited style info.\r\n        this.label.style.fontSize = '';\r\n        const fontSize = this.getIdealFontSize(vkbd, this.label.textContent, getComputedStyle(this.label), true);\r\n\r\n        // Since the kmw-spacebar-caption version uses !important, we must specify\r\n        // it directly on the element too; otherwise, scaling gets ignored.\r\n        this.label.style.setProperty(\"font-size\", fontSize, \"important\");\r\n      }\r\n    }\r\n  }\r\n}\r\n",
    "import OSKKey, { OSKKeySpec } from \"./keyboard-layout/oskKey.js\";\r\n\r\nexport class KeyData {\r\n  ['key']: OSKKey;\r\n  ['keyId']: string;\r\n  ['subKeys']?: OSKKeySpec[];\r\n\r\n  constructor(keyData: OSKKey, keyId: string) {\r\n    this['key'] = keyData;\r\n    this['keyId'] = keyId;\r\n  }\r\n}\r\n\r\nexport type KeyElement = HTMLDivElement & KeyData;\r\n\r\n// Many thanks to https://www.typescriptlang.org/docs/handbook/advanced-types.html for this.\r\nexport function link(elem: HTMLDivElement, data: KeyData): KeyElement {\r\n  let e = <KeyElement> elem;\r\n\r\n  // Merges all properties and methods of KeyData onto the underlying HTMLDivElement, creating a merged class.\r\n  for(let id in data) {\r\n    if(!e.hasOwnProperty(id)) {\r\n      (<any>e)[id] = (<any>data)[id];\r\n    }\r\n  }\r\n\r\n  return e;\r\n}\r\n\r\nexport function isKey(elem: Node): boolean {\r\n  return elem && ('key' in elem) && ((<any> elem['key']) instanceof OSKKey);\r\n}\r\n\r\nexport function getKeyFrom(elem: Node): KeyElement {\r\n  if(isKey(elem)) {\r\n    return <KeyElement> elem;\r\n  } else {\r\n    return null;\r\n  }\r\n}",
    "import { ActiveKey, Codes, DeviceSpec } from '@keymanapp/keyboard-processor';\r\nimport { landscapeView } from 'keyman/engine/dom-utils';\r\n\r\nimport OSKKey, { OSKKeySpec } from './oskKey.js';\r\nimport { KeyData, KeyElement, link } from '../keyElement.js';\r\nimport OSKRow from './oskRow.js';\r\nimport VisualKeyboard from '../visualKeyboard.js';\r\n\r\n\r\nexport default class OSKBaseKey extends OSKKey {\r\n  private capLabel: HTMLDivElement;\r\n  public readonly row: OSKRow;\r\n\r\n  constructor(spec: OSKKeySpec, layer: string, row: OSKRow) {\r\n    super(spec, layer);\r\n    this.row = row;\r\n  }\r\n\r\n  getId(): string {\r\n    // Define each key element id by layer id and key id (duplicate possible for SHIFT - does it matter?)\r\n    return this.spec.elementID;\r\n  }\r\n\r\n  getCoreId(): string {\r\n    return this.spec.coreID;\r\n  }\r\n\r\n  getBaseId(): string {\r\n    return this.spec.baseKeyID;\r\n  }\r\n\r\n  // Produces a small reference label for the corresponding physical key on a US keyboard.\r\n  private generateKeyCapLabel(): HTMLDivElement {\r\n    // Create the default key cap labels (letter keys, etc.)\r\n    var x = Codes.keyCodes[this.spec.baseKeyID];\r\n    switch(x) {\r\n      // Converts the keyman key id code for common symbol keys into its representative ASCII code.\r\n      // K_COLON -> K_BKQUOTE\r\n      case 186: x=59; break;\r\n      case 187: x=61; break;\r\n      case 188: x=44; break;\r\n      case 189: x=45; break;\r\n      case 190: x=46; break;\r\n      case 191: x=47; break;\r\n      case 192: x=96; break;\r\n      // K_LBRKT -> K_QUOTE\r\n      case 219: x=91; break;\r\n      case 220: x=92; break;\r\n      case 221: x=93; break;\r\n      case 222: x=39; break;\r\n      default:\r\n        // No other symbol character represents a base key on the standard QWERTY English layout.\r\n        if(x < 48 || x > 90) {\r\n          x=0;\r\n        }\r\n    }\r\n\r\n    let q = document.createElement('div');\r\n    q.className='kmw-key-label';\r\n    if(x > 0) {\r\n      q.innerText=String.fromCharCode(x);\r\n    } else {\r\n      // Keyman-only virtual keys have no corresponding physical key.\r\n      // So, no text for the key-cap.\r\n    }\r\n    return q;\r\n  }\r\n\r\n  private processSubkeys(btn: KeyElement, vkbd: VisualKeyboard) {\r\n    // Add reference to subkey array if defined\r\n    var bsn: number, bsk=btn['subKeys'] = this.spec['sk'];\r\n    // Transform any special keys into their PUA representations.\r\n    for(bsn=0; bsn<bsk.length; bsn++) {\r\n      if(bsk[bsn]['sp'] == 1 || bsk[bsn]['sp'] == 2) {\r\n        var oldText=bsk[bsn]['text'];\r\n        bsk[bsn]['text']=this.renameSpecialKey(oldText, vkbd);\r\n      }\r\n\r\n      // If a subkey doesn't have a defined layer property, copy it from the base key's layer by default.\r\n      if(!bsk[bsn].layer) {\r\n        bsk[bsn].layer = btn.key.layer\r\n      }\r\n    }\r\n\r\n    // If a subkey array is defined, add an icon\r\n    var skIcon = document.createElement('div');\r\n    skIcon.className='kmw-key-popup-icon';\r\n    //kDiv.appendChild(skIcon);\r\n    btn.appendChild(skIcon);\r\n  }\r\n\r\n  construct(vkbd: VisualKeyboard): HTMLDivElement {\r\n    let spec = this.spec;\r\n\r\n    let kDiv = document.createElement('div');\r\n    kDiv.className='kmw-key-square';\r\n\r\n    let btnEle = document.createElement('div');\r\n    let btn = this.btn = link(btnEle, new KeyData(this, spec['id']));\r\n\r\n    // Set button class\r\n    this.setButtonClass();\r\n\r\n    // Add the (US English) keycap label for layouts requesting display of underlying keys\r\n    let keyCap = this.capLabel = this.generateKeyCapLabel();\r\n    btn.appendChild(keyCap);\r\n\r\n    // Define each key element id by layer id and key id (duplicate possible for SHIFT - does it matter?)\r\n    btn.id=this.getId();\r\n\r\n    // Make sure the key text is the element's first child - processSubkeys()\r\n    // will add an extra element if subkeys exist, which can interfere with\r\n    // keyboard/language name display on the space bar!\r\n    btn.appendChild(this.label = this.generateKeyText(vkbd));\r\n\r\n    // Handle subkey-related tasks.\r\n    if(typeof(spec['sk']) != 'undefined' && spec['sk'] != null) {\r\n      this.processSubkeys(btn, vkbd);\r\n    } else {\r\n      btn['subKeys']=null;\r\n    }\r\n\r\n    // Add text to button and button to placeholder div\r\n    kDiv.appendChild(btn);\r\n\r\n    // The 'return value' of this process.\r\n    return this.square = kDiv;\r\n  }\r\n\r\n  public refreshLayout(vkbd: VisualKeyboard) {\r\n    let key = this.spec as ActiveKey;\r\n    this.square.style.width = vkbd.layoutWidth.scaledBy(key.proportionalWidth).styleString;\r\n    this.square.style.marginLeft = vkbd.layoutWidth.scaledBy(key.proportionalPad).styleString;\r\n    this.btn.style.width = vkbd.usesFixedWidthScaling ? this.square.style.width : '100%';\r\n\r\n    if(vkbd.usesFixedHeightScaling) {\r\n      // Matches its row's height.\r\n      this.square.style.height = vkbd.internalHeight.scaledBy(this.row.heightFraction).styleString;\r\n    } else {\r\n      this.square.style.height = '100%'; // use the full row height\r\n    }\r\n\r\n    super.refreshLayout(vkbd);\r\n\r\n    const device = vkbd.device;\r\n    const resizeLabels = (device.OS == DeviceSpec.OperatingSystem.iOS &&\r\n                          device.formFactor == DeviceSpec.FormFactor.Phone\r\n                          && landscapeView());\r\n\r\n    // Rescale keycap labels on iPhone (iOS 7)\r\n    if(resizeLabels && this.capLabel) {\r\n      this.capLabel.style.fontSize = '6px';\r\n    }\r\n  }\r\n\r\n  public get displaysKeyCap(): boolean {\r\n    return this.capLabel && this.capLabel.style.display == 'block';\r\n  }\r\n\r\n  public set displaysKeyCap(flag: boolean) {\r\n    if(!this.capLabel) {\r\n      throw new Error(\"Key element not yet constructed; cannot display key cap\");\r\n    }\r\n    this.capLabel.style.display = flag ? 'block' : 'none';\r\n  }\r\n}\r\n",
    "import { ActiveLayer, ActiveRow } from '@keymanapp/keyboard-processor';\r\n\r\nimport OSKBaseKey from './oskBaseKey.js';\r\nimport { ParsedLengthStyle } from '../lengthStyle.js';\r\nimport { type OSKKeySpec } from './oskKey.js';\r\nimport VisualKeyboard from '../visualKeyboard.js';\r\n\r\n/**\r\n * Models one row of one layer of the OSK (`VisualKeyboard`) for a keyboard.\r\n */\r\nexport default class OSKRow {\r\n  public readonly element: HTMLDivElement;\r\n  public readonly keys: OSKBaseKey[];\r\n  public readonly heightFraction: number;\r\n\r\n  public constructor(vkbd: VisualKeyboard,\r\n                      layerSpec: ActiveLayer,\r\n                      rowSpec: ActiveRow) {\r\n    const rDiv = this.element = document.createElement('div');\r\n    rDiv.className='kmw-key-row';\r\n\r\n    // Calculate default row height\r\n    this.heightFraction = 1 / layerSpec.row.length;\r\n\r\n    // Apply defaults, setting the width and other undefined properties for each key\r\n    const keys=rowSpec.key;\r\n    this.keys = [];\r\n\r\n    // Calculate actual key widths by multiplying by the OSK's width and rounding appropriately,\r\n    // adjusting the width of the last key to make the total exactly 100%.\r\n    // Overwrite the previously-computed percent.\r\n    // NB: the 'percent' suffix is historical, units are percent on desktop devices, but pixels on touch devices\r\n    // All key widths and paddings are rounded for uniformity\r\n    for(let j=0; j<keys.length; j++) {\r\n      const key = keys[j];\r\n      var keyObj = new OSKBaseKey(key as OSKKeySpec, layerSpec.id, this);\r\n\r\n      var element = keyObj.construct(vkbd);\r\n      this.keys.push(keyObj);\r\n\r\n      rDiv.appendChild(element);\r\n    }\r\n  }\r\n\r\n  public get displaysKeyCaps(): boolean {\r\n    if(this.keys.length > 0) {\r\n      return this.keys[0].displaysKeyCap;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  public set displaysKeyCaps(flag: boolean) {\r\n    for(const key of this.keys) {\r\n      key.displaysKeyCap = flag;\r\n    }\r\n  }\r\n\r\n  public refreshLayout(vkbd: VisualKeyboard) {\r\n    const rs = this.element.style;\r\n\r\n    const rowHeight = vkbd.internalHeight.scaledBy(this.heightFraction);\r\n    rs.maxHeight=rs.lineHeight=rs.height=rowHeight.styleString;\r\n\r\n    // Only used for fixed-height scales at present.\r\n    const padRatio = 0.15;\r\n\r\n    const keyHeightBase = vkbd.usesFixedHeightScaling ? rowHeight : ParsedLengthStyle.forScalar(1);\r\n    const padTop = keyHeightBase.scaledBy(padRatio / 2);\r\n    const keyHeight = keyHeightBase.scaledBy(1 - padRatio);\r\n\r\n    for(const key of this.keys) {\r\n      const keySquare  = key.btn.parentElement;\r\n      const keyElement = key.btn;\r\n\r\n      // Set the kmw-key-square position\r\n      const kss = keySquare.style;\r\n      kss.height=kss.minHeight=keyHeightBase.styleString;\r\n\r\n      const kes = keyElement.style;\r\n      kes.top = padTop.styleString;\r\n      kes.height=kes.lineHeight=kes.minHeight=keyHeight.styleString;\r\n\r\n      if(keyElement.key) {\r\n        keyElement.key.refreshLayout(vkbd);\r\n      }\r\n    }\r\n  }\r\n}",
    "import { ActiveLayer, ActiveLayout } from '@keymanapp/keyboard-processor';\r\n\r\nimport OSKRow from './oskRow.js';\r\nimport OSKBaseKey from './oskBaseKey.js';\r\nimport VisualKeyboard from '../visualKeyboard.js';\r\n\r\nexport default class OSKLayer {\r\n  public readonly element: HTMLDivElement;\r\n  public readonly rows: OSKRow[];\r\n  public readonly spec: ActiveLayer;\r\n  public readonly nextlayer: string;\r\n\r\n  public readonly globeKey:    OSKBaseKey;\r\n  public readonly spaceBarKey: OSKBaseKey;\r\n  public readonly hideKey:     OSKBaseKey;\r\n  public readonly capsKey:     OSKBaseKey;\r\n  public readonly numKey:      OSKBaseKey;\r\n  public readonly scrollKey:   OSKBaseKey;\r\n\r\n  private _rowHeight: number;\r\n\r\n  public get rowHeight(): number {\r\n    return this._rowHeight;\r\n  }\r\n\r\n  public get id(): string {\r\n    return this.spec.id;\r\n  }\r\n\r\n  public constructor(vkbd: VisualKeyboard,\r\n                      layout: ActiveLayout,\r\n                      layer: ActiveLayer) {\r\n    this.spec = layer;\r\n\r\n    const gDiv = this.element = document.createElement('div');\r\n    const gs=gDiv.style;\r\n    gDiv.className='kmw-key-layer';\r\n\r\n    var nRows=layer['row'].length;\r\n    if(nRows > 4 && vkbd.device.formFactor == 'phone') {\r\n      gDiv.className = gDiv.className + ' kmw-5rows';\r\n    }\r\n\r\n    // Set font for layer if defined in layout\r\n    gs.fontFamily = 'font' in layout ? layout['font'] : '';\r\n\r\n    this.nextlayer = gDiv['layer'] = layer['id'];\r\n    if(typeof layer['nextlayer'] == 'string') {\r\n      // The gDiv['nextLayer'] is no longer referenced in KMW 15.0+, but is\r\n      // maintained for partial back-compat in case any site devs actually\r\n      // relied on its value from prior versions.\r\n      //\r\n      // We won't pay attention to any mutations to the gDiv copy, though.\r\n      gDiv['nextLayer'] = this.nextlayer = layer['nextlayer'];\r\n    }\r\n\r\n    // Create a DIV for each row of the group\r\n    let rows=layer['row'];\r\n    this.rows = [];\r\n\r\n    for(let i=0; i<rows.length; i++) {\r\n      let rowObj = new OSKRow(vkbd, layer, rows[i]);\r\n      rowObj.displaysKeyCaps = layout[\"displayUnderlying\"];\r\n      gDiv.appendChild(rowObj.element);\r\n      this.rows.push(rowObj);\r\n    }\r\n\r\n    // Identify and save references to the language key, hide keyboard key, and space bar\r\n    if(vkbd.device.touchable) {\r\n      this.globeKey  = this.findKey('K_LOPT');\r\n      this.hideKey   = this.findKey('K_ROPT');\r\n    }\r\n\r\n    // Define for both desktop and touchable OSK\r\n    this.spaceBarKey = this.findKey('K_SPACE');\r\n    this.capsKey     = this.findKey('K_CAPS');\r\n    this.numKey      = this.findKey('K_NUMLOCK');\r\n    this.scrollKey   = this.findKey('K_SCROLL');\r\n  }\r\n\r\n  /**\r\n   *  Find the OSKBaseKey representing the specified\r\n   *  key ID for the currently visible OSK layer\r\n   *\r\n   *  @param    {string}  keyId   key identifier\r\n   *  @return   {Object}          Reference to key\r\n   */\r\n  private findKey(keyId: string): OSKBaseKey {\r\n    for(const row of this.rows) {\r\n      for(const key of row.keys) {\r\n        if(key.getBaseId() == keyId) {\r\n          return key;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public refreshLayout(vkbd: VisualKeyboard, layerHeight: number) {\r\n    // Check the heights of each row, in case different layers have different row counts.\r\n    const nRows = this.rows.length;\r\n    const rowHeight = this._rowHeight = Math.floor(layerHeight/(nRows == 0 ? 1 : nRows));\r\n\r\n    if(vkbd.usesFixedHeightScaling) {\r\n      this.element.style.height=(layerHeight)+'px';\r\n    }\r\n\r\n    for(let nRow=0; nRow<nRows; nRow++) {\r\n      const oskRow = this.rows[nRow];\r\n      const bottom = (nRows-nRow-1)*rowHeight+1;\r\n\r\n      if(vkbd.usesFixedHeightScaling) {\r\n        // Calculate the exact vertical coordinate of the row's center.\r\n        this.spec.row[nRow].proportionalY = ((layerHeight - bottom) - rowHeight/2) / layerHeight;\r\n\r\n        if(nRow == nRows-1) {\r\n          oskRow.element.style.bottom = '1px';\r\n        }\r\n      }\r\n\r\n      oskRow.refreshLayout(vkbd);\r\n    }\r\n  }\r\n}\r\n",
    "import { ActiveLayer, type DeviceSpec, Keyboard, LayoutLayer } from '@keymanapp/keyboard-processor';\r\n\r\nimport OSKLayer from './oskLayer.js';\r\nimport VisualKeyboard from '../visualKeyboard.js';\r\n\r\nexport default class OSKLayerGroup {\r\n  public readonly element: HTMLDivElement;\r\n  public readonly layers: {[layerID: string]: OSKLayer} = {};\r\n\r\n  public constructor(vkbd: VisualKeyboard, keyboard: Keyboard, formFactor: DeviceSpec.FormFactor) {\r\n    let layout = keyboard.layout(formFactor);\r\n\r\n    const lDiv = this.element = document.createElement('div');\r\n    const ls=lDiv.style;\r\n\r\n    // Set OSK box default style\r\n    lDiv.className='kmw-key-layer-group';\r\n\r\n    // Return empty DIV if no layout defined\r\n    if(layout == null) {\r\n      return;\r\n    }\r\n\r\n    // Set default OSK font size (Build 344, KMEW-90)\r\n    let layoutFS = layout['fontsize'];\r\n    if(typeof layoutFS == 'undefined' || layoutFS == null || layoutFS == '') {\r\n      ls.fontSize='1em';\r\n    } else {\r\n      ls.fontSize=layout['fontsize'];\r\n    }\r\n\r\n    ls.width = '100%';\r\n    ls.height = '100%';\r\n\r\n    // Create a separate OSK div for each OSK layer, only one of which will ever be visible\r\n    var n: number, i: number, j: number;\r\n    var layers: LayoutLayer[];\r\n\r\n    layers=layout['layer'];\r\n\r\n    // Set key default attributes (must use exportable names!)\r\n    var tKey=vkbd.getDefaultKeyObject();\r\n    tKey['fontsize']=ls.fontSize;\r\n\r\n    for(n=0; n<layers.length; n++) {\r\n      let layer=layers[n] as ActiveLayer;\r\n      const layerObj = new OSKLayer(vkbd, layout, layer);\r\n      this.layers[layer.id] = layerObj;\r\n\r\n      // Always make the 'default' layer visible by default.\r\n      layerObj.element.style.display = (layer.id == 'default' ? 'block' : 'none');\r\n\r\n      // Add layer to group\r\n      lDiv.appendChild(layerObj.element);\r\n    }\r\n  }\r\n}",
    "import { Codes, KeyEvent } from '@keymanapp/keyboard-processor';\r\nimport { type KeyElement } from '../../../keyElement.js';\r\nimport VisualKeyboard from '../../../visualKeyboard.js';\r\nimport PendingGesture from '../pendingGesture.interface.js';\r\n\r\nexport enum PendingMultiTapState { Waiting, Realized, Cancelled };\r\n/**\r\n * Implements the multi-tap gesture, which is a series of taps on a single key\r\n * (based on key id substring in the case of the shift key), within a\r\n * specified timeout period.\r\n */\r\nexport default class PendingMultiTap implements PendingGesture {\r\n  public readonly vkbd: VisualKeyboard;\r\n  public readonly baseKey: KeyElement;\r\n  public readonly count: number;\r\n  private timerId;\r\n  private _touches = 1; // we start the multitap with a single touch\r\n  private _state: PendingMultiTapState = PendingMultiTapState.Waiting;\r\n  private _timeout: Promise<void>;\r\n  private cancelDelayFactor = 125; // 125msec * count\r\n  private _destinationLayerId;\r\n\r\n  public get timeout() {\r\n    return this._timeout;\r\n  }\r\n  public get realized() {\r\n    return this._state == PendingMultiTapState.Realized;\r\n  }\r\n  public get cancelled() {\r\n    return this._state == PendingMultiTapState.Cancelled;\r\n  }\r\n\r\n  /**\r\n   * Construct a record of a potential multitap gesture\r\n   * @param vkbd\r\n   * @param baseKey   key which is being tapped\r\n   * @param count     number of taps required to finalize this gesture\r\n   */\r\n  constructor(vkbd: VisualKeyboard, baseKey: KeyElement, count: number) {\r\n    this.vkbd = vkbd;\r\n    this.count = count;\r\n    this.baseKey = baseKey;\r\n\r\n    this._destinationLayerId = 'caps';\r\n    let multitap = baseKey?.key?.spec?.['multitap'];\r\n    if(multitap?.length && multitap[0]?.['nextlayer']) {\r\n      this._destinationLayerId = multitap[0]['nextlayer'];\r\n    }\r\n\r\n    const _this = this;\r\n    this._timeout = new Promise<void>(function(resolve) {\r\n      // If multiple taps do not occur within the timeout window,\r\n      // then we will abandon the gesture\r\n      _this.timerId = window.setTimeout(() => {\r\n        _this.cancel();\r\n        resolve();\r\n      }, _this.cancelDelayFactor * _this.count);\r\n    });\r\n  }\r\n\r\n  public static isValidTarget(vkbd: VisualKeyboard, baseKey: KeyElement) {\r\n    // Could use String.includes, but Chrome for Android must be version 41+.\r\n    // We support down to version 37.\r\n    return (\r\n      baseKey['keyId'].indexOf('K_SHIFT') >= 0 &&\r\n      vkbd.layerGroup.layers['caps'] &&\r\n      !baseKey['subKeys'] &&\r\n      vkbd.touchCount == 1\r\n    );\r\n  }\r\n\r\n  private cleanup(): void {\r\n    if(this.timerId) {\r\n      window.clearTimeout(this.timerId);\r\n    }\r\n    this.timerId = null;\r\n  }\r\n\r\n  /**\r\n   * Cancel a pending multitap gesture\r\n   */\r\n  public cancel(): void {\r\n    this._state = PendingMultiTapState.Cancelled;\r\n    this.cleanup();\r\n  }\r\n\r\n  /**\r\n   * Increments the touch counter for the gesture, and\r\n   * if the touch count is reached, realize the gesture\r\n   * @returns new state of the gesture\r\n   */\r\n  public incrementTouch(newKey: KeyElement): PendingMultiTapState {\r\n    // TODO: support for any key\r\n    if(this._state == PendingMultiTapState.Waiting) {\r\n      if(!newKey?.['keyId']?.includes('K_SHIFT')) {\r\n        this.cancel();\r\n      }\r\n      else if(++this._touches == this.count) {\r\n        this.realize();\r\n      }\r\n    }\r\n    return this._state;\r\n  }\r\n\r\n  /**\r\n   * Realize the gesture. In Keyman 15, this supports only\r\n   * the Caps double-tap gesture on the Shift key.\r\n   */\r\n  public realize(): void {\r\n    if(this._state != PendingMultiTapState.Waiting) {\r\n      return;\r\n    }\r\n    this._state = PendingMultiTapState.Realized;\r\n    this.cleanup();\r\n\r\n    // In Keyman 15, only the K_SHIFT key supports multi-tap, so we can hack\r\n    // in the switch to the caps layer.\r\n    //\r\n    // TODO: generalize this with double-tap key properties in touch layout\r\n    //       description.\r\n    let e = KeyEvent.constructNullKeyEvent(this.vkbd.device);\r\n    e.kNextLayer = this._destinationLayerId;\r\n    e.Lstates = Codes.stateBitmasks.CAPS;\r\n    e.LmodifierChange = true;\r\n    this.vkbd.raiseKeyEvent(e, null);\r\n  }\r\n}",
    "import OSKKey, { OSKKeySpec } from '../../../keyboard-layout/oskKey.js';\r\nimport { KeyData, KeyElement, link } from '../../../keyElement.js';\r\nimport VisualKeyboard from '../../../visualKeyboard.js';\r\n\r\nexport default class OSKSubKey extends OSKKey {\r\n  constructor(spec: OSKKeySpec, layer: string) {\r\n    if(typeof(layer) != 'string' || layer == '') {\r\n      throw \"The 'layer' parameter for subkey construction must be properly defined.\";\r\n    }\r\n\r\n    super(spec, layer);\r\n  }\r\n\r\n  getId(): string {\r\n    // Create (temporarily) unique ID by prefixing 'popup-' to actual key ID\r\n    return 'popup-'+this.layer+'-'+this.spec['id'];\r\n  }\r\n\r\n  construct(osk: VisualKeyboard, baseKey: KeyElement, topMargin: boolean): HTMLDivElement {\r\n    let spec = this.spec;\r\n\r\n    let kDiv=document.createElement('div');\r\n    let tKey = osk.getDefaultKeyObject();\r\n    let ks=kDiv.style;\r\n\r\n    for(var tp in tKey) {\r\n      if(typeof spec[tp] != 'string') {\r\n        spec[tp]=tKey[tp];\r\n      }\r\n    }\r\n\r\n    kDiv.className='kmw-key-square-ex';\r\n    if(topMargin) {\r\n      ks.marginTop='5px';\r\n    }\r\n\r\n    if(typeof spec['width'] != 'undefined') {\r\n      ks.width=(spec['width']*baseKey.offsetWidth/100)+'px';\r\n    } else {\r\n      ks.width=baseKey.offsetWidth+'px';\r\n    }\r\n    ks.height=baseKey.offsetHeight+'px';\r\n\r\n    let btnEle=document.createElement('div');\r\n    let btn = this.btn = link(btnEle, new KeyData(this, spec['id']));\r\n\r\n    this.setButtonClass();\r\n    btn.id = this.getId();\r\n\r\n    // Must set button size (in px) dynamically, not from CSS\r\n    let bs=btn.style;\r\n    bs.height=ks.height;\r\n    bs.lineHeight=baseKey.style.lineHeight;\r\n    bs.width=ks.width;\r\n\r\n    // Must set position explicitly, at least for Android\r\n    bs.position='absolute';\r\n\r\n    btn.appendChild(this.label = this.generateKeyText(osk));\r\n    kDiv.appendChild(btn);\r\n\r\n    return this.square = kDiv;\r\n  }\r\n\r\n  public allowsKeyTip(): boolean {\r\n    return false;\r\n  }\r\n}",
    "import OSKSubKey from './oskSubKey.js';\r\nimport RealizedGesture from '../realizedGesture.interface.js';\r\nimport { OSKKeySpec } from '../../../keyboard-layout/oskKey.js';\r\nimport { type KeyElement } from '../../../keyElement.js';\r\nimport OSKBaseKey from '../../../keyboard-layout/oskBaseKey.js';\r\nimport VisualKeyboard from '../../../visualKeyboard.js';\r\nimport InputEventCoordinate from '../../../input/inputEventCoordinate.js';\r\n\r\nimport { DeviceSpec, KeyEvent } from '@keymanapp/keyboard-processor';\r\n\r\n/**\r\n * Represents a 'realized' longpress gesture's default implementation\r\n * within KeymanWeb.  Once a touch sequence has been confirmed to\r\n * correspond to a longpress gesture, implementations of this class\r\n * provide the following:\r\n * * The UI needed to present a subkey menu\r\n * * The state management needed to present feedback about the\r\n * currently-selected subkey to the user\r\n * * A `Promise` that will resolve to the user's selected subkey\r\n * once the longpress operation is complete.\r\n *\r\n * As selection of the subkey occurs after the subkey popup is\r\n * displayed, selection of the subkey is inherently asynchronous.\r\n * The `Promise` may also resolve to `null` if the user indicates\r\n * the desire to cancel subkey selection.\r\n */\r\nexport default class SubkeyPopup implements RealizedGesture {\r\n  public readonly element: HTMLDivElement;\r\n  public readonly shim: HTMLDivElement;\r\n\r\n  private vkbd: VisualKeyboard;\r\n  private currentSelection: KeyElement;\r\n\r\n  private callout: HTMLDivElement;\r\n\r\n  public readonly baseKey: KeyElement;\r\n  public readonly promise: Promise<KeyEvent>;\r\n\r\n  private initialX: number;\r\n  private initialY: number;\r\n\r\n  // Resolves the promise that generated this SubkeyPopup.\r\n  private resolver: (keyEvent: KeyEvent) => void;\r\n\r\n  constructor(vkbd: VisualKeyboard, e: KeyElement) {\r\n    let _this = this;\r\n\r\n    this.promise = new Promise<KeyEvent>(function(resolve) {\r\n      _this.resolver = resolve;\r\n    })\r\n\r\n    this.vkbd = vkbd;\r\n    this.baseKey = e;\r\n\r\n    // If the user doesn't move their finger and releases, we'll output the base key\r\n    // by default.\r\n    this.currentSelection = e;\r\n    e.key.highlight(true);\r\n\r\n    // A tag we directly set on a key element during its construction.\r\n    let subKeySpec: OSKKeySpec[] = e['subKeys'];\r\n\r\n    // The holder is position:fixed, but the keys do not need to be, as no scrolling\r\n    // is possible while the array is visible.  So it is simplest to let the keys have\r\n    // position:static and display:inline-block\r\n    var subKeys = this.element = document.createElement('div');\r\n\r\n    var i;\r\n    subKeys.id='kmw-popup-keys';\r\n\r\n    // #3718: No longer prepend base key to popup array\r\n\r\n    // Must set position dynamically, not in CSS\r\n    var ss=subKeys.style;\r\n\r\n    // Set key font according to layout, or defaulting to OSK font\r\n    // (copied, not inherited, since OSK is not a parent of popup keys)\r\n    ss.fontFamily=vkbd.fontFamily;\r\n\r\n    // Copy the font size from the parent key, allowing for style inheritance\r\n    const computedStyle = getComputedStyle(e);\r\n    ss.fontSize=computedStyle.fontSize;\r\n    ss.visibility='hidden';\r\n\r\n    var nKeys=subKeySpec.length,nRows,nCols;\r\n    nRows=Math.min(Math.ceil(nKeys/9),2);\r\n    nCols=Math.ceil(nKeys/nRows);\r\n    ss.width=(nCols*e.offsetWidth+nCols*5)+'px';\r\n\r\n    // Add nested button elements for each sub-key\r\n    for(i=0; i<nKeys; i++) {\r\n      var needsTopMargin = false;\r\n      let nRow=Math.floor(i/nCols);\r\n      if(nRows > 1 && nRow > 0) {\r\n        needsTopMargin = true;\r\n      }\r\n\r\n      let layer = e['key'].layer;\r\n      if(typeof(layer) != 'string' || layer == '') {\r\n        // Use the currently-active layer.\r\n        layer = vkbd.layerId;\r\n      }\r\n      let keyGenerator = new OSKSubKey(subKeySpec[i], layer);\r\n      let kDiv = keyGenerator.construct(vkbd, <KeyElement> e, needsTopMargin);\r\n\r\n      subKeys.appendChild(kDiv);\r\n    }\r\n\r\n    // And add a filter to fade main keyboard\r\n    this.shim = document.createElement('div');\r\n    this.shim.id = 'kmw-popup-shim';\r\n\r\n    // Highlight the duplicated base key or ideal subkey (if a phone)\r\n    if(vkbd.device.formFactor == DeviceSpec.FormFactor.Phone) {\r\n      this.selectDefaultSubkey(vkbd, e, subKeys /* == this.element */);\r\n    }\r\n  }\r\n\r\n  finalize(input: InputEventCoordinate) {\r\n    if(this.resolver) {\r\n      let keyEvent: KeyEvent = null;\r\n      if(this.currentSelection) {\r\n        keyEvent = this.vkbd.initKeyEvent(this.currentSelection, input);\r\n        this.currentSelection.key.highlight(false);\r\n      }\r\n      this.resolver(keyEvent);\r\n    }\r\n    this.resolver = null;\r\n  }\r\n\r\n  reposition(vkbd: VisualKeyboard) {\r\n    let subKeys = this.element;\r\n    let e = this.baseKey;\r\n\r\n    // And correct its position with respect to that element\r\n    const _Box = vkbd.topContainer;\r\n    let rowElement = (e.key as OSKBaseKey).row.element;\r\n    let ss=subKeys.style;\r\n    var x = e.offsetLeft + (<HTMLElement>e.offsetParent).offsetLeft + 0.5*(e.offsetWidth-subKeys.offsetWidth);\r\n    var xMax = vkbd.width - subKeys.offsetWidth;\r\n\r\n    if(x > xMax) {\r\n      x=xMax;\r\n    }\r\n    if(x < 0) {\r\n      x=0;\r\n    }\r\n    ss.left=x+'px';\r\n\r\n    let _BoxRect = _Box.getBoundingClientRect();\r\n    let rowElementRect = rowElement.getBoundingClientRect();\r\n    ss.top = (rowElementRect.top - _BoxRect.top - subKeys.offsetHeight - 3) + 'px';\r\n\r\n    // Make the popup keys visible\r\n    ss.visibility='visible';\r\n\r\n    // For now, should only be true (in production) when keyman.isEmbedded == true.\r\n    let constrainPopup = vkbd.isEmbedded;\r\n\r\n    let cs = getComputedStyle(subKeys);\r\n    let topY = parseFloat(cs.top);\r\n\r\n    // Adjust the vertical position of the popup to keep it within the\r\n    // bounds of the keyboard rectangle, when on iPhone (system keyboard)\r\n    const topOffset = 0; // Set this when testing constrainPopup, e.g. to -80px\r\n    let delta = 0;\r\n    if(topY < topOffset && constrainPopup) {\r\n      delta = topOffset - topY;\r\n      ss.top = topOffset + 'px';\r\n    }\r\n\r\n    // Add the callout\r\n    if(vkbd.device.formFactor == DeviceSpec.FormFactor.Phone && vkbd.device.OS == DeviceSpec.OperatingSystem.iOS) {\r\n      this.callout = this.addCallout(e, delta);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a callout for popup keys (if KeymanWeb on a phone device)\r\n   *\r\n   * @param   {Object}  key   HTML key element\r\n   * @return  {Object}        callout object\r\n   */\r\n  addCallout(key: KeyElement, delta?: number): HTMLDivElement {\r\n    const _Box = this.vkbd.topContainer;\r\n\r\n    delta = delta || 0;\r\n\r\n    let calloutHeight = key.offsetHeight - delta + 6;\r\n\r\n    if(calloutHeight > 0) {\r\n      var cc = document.createElement('div'), ccs = cc.style;\r\n      cc.id = 'kmw-popup-callout';\r\n      _Box.appendChild(cc);\r\n\r\n      // Create the callout\r\n      let keyRect = key.getBoundingClientRect();\r\n      let _BoxRect = _Box.getBoundingClientRect();\r\n\r\n      // Set position and style\r\n      // We're going to adjust the top of the box to ensure it stays\r\n      // pixel aligned, otherwise we can get antialiasing artifacts\r\n      // that look ugly\r\n      let top = Math.floor(keyRect.top - _BoxRect.top - 9 + delta);\r\n      ccs.top = top + 'px';\r\n      ccs.left = (keyRect.left - _BoxRect.left) + 'px';\r\n      ccs.width = keyRect.width + 'px';\r\n      ccs.height = (keyRect.bottom - _BoxRect.top - top - 1) + 'px'; //(height - 1) + 'px';\r\n\r\n      // Return callout element, to allow removal later\r\n      return cc;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  selectDefaultSubkey(vkbd: VisualKeyboard, baseKey: KeyElement, popupBase: HTMLElement) {\r\n    var bk: KeyElement;\r\n    let subkeys = baseKey['subKeys'];\r\n    for(let i=0; i < subkeys.length; i++) {\r\n      let skSpec = subkeys[i];\r\n      let skElement = <KeyElement> popupBase.childNodes[i].firstChild;\r\n\r\n      // Preference order:\r\n      // #1:  if a default subkey has been specified, select it.\r\n      // #2:  if no default subkey is specified, default to a subkey with the same\r\n      //      key ID and layer / modifier spec.\r\n      if(skSpec.default) {\r\n       bk = skElement;\r\n       break;\r\n      } else if(!baseKey.key || !baseKey.key.spec) {\r\n        continue;\r\n      }\r\n\r\n      if(skSpec.elementID == baseKey.key.spec.elementID) {\r\n        bk = skElement;\r\n      }\r\n    }\r\n\r\n    if(bk) {\r\n      // Prevent sticky-highlighting should the default key be selected.\r\n      vkbd.keyPending?.key.highlight(false);\r\n      vkbd.keyPending = bk;\r\n      this.currentSelection = bk;\r\n      // Subkeys never get key previews, so we can directly highlight the subkey.\r\n      bk.key.highlight(true);\r\n    }\r\n  }\r\n\r\n  isVisible(): boolean {\r\n    return this.element.style.visibility == 'visible';\r\n  }\r\n\r\n  clear() {\r\n    // Discard the reference to the Promise's resolve method, allowing\r\n    // GC to clean it up.  The corresponding Promise's contract allows\r\n    // passive cancellation.\r\n    this.resolver = null;\r\n\r\n    // Remove the displayed subkey array, if any\r\n    if(this.element.parentNode) {\r\n      this.element.parentNode.removeChild(this.element);\r\n    }\r\n\r\n    if(this.shim.parentNode) {\r\n      this.shim.parentNode.removeChild(this.shim);\r\n    }\r\n\r\n    if(this.callout && this.callout.parentNode) {\r\n      this.callout.parentNode.removeChild(this.callout);\r\n    }\r\n  }\r\n\r\n  updateTouch(input: InputEventCoordinate) {\r\n    // For 'default' subkey handling, we want a small fudge factor.\r\n    if(this.initialX === undefined || this.initialY === undefined) {\r\n      this.initialX = input.x;\r\n      this.initialY = input.y;\r\n    }\r\n\r\n    const deltaX = this.initialX - input.x;\r\n    const deltaY = this.initialY - input.y;\r\n    const dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n\r\n    if(dist > 5) {\r\n      this.initialX = Number.MAX_SAFE_INTEGER; // it'll always exceed the threshold hereafter.\r\n      this.currentSelection = null;\r\n    } else {\r\n      // The function that calls this to perform subkey updates auto-unhighlights the active selection;\r\n      // make sure that highlighting is maintained if no new key was selected, but we haven't cancelled\r\n      // default-selection mode yet.\r\n      this.currentSelection.key.highlight(true);\r\n\r\n      // Even if we technically have a different subkey underneath the touchpoint, we're still in\r\n      // default-selection mode.  Require more movement before cancelling default-selection mode.\r\n      //\r\n      // Can occur for large subkey menus or when subkey menus are \"constrained\" within OSK bounds,\r\n      // as with the iOS app.\r\n      return;\r\n    }\r\n\r\n    this.baseKey.key.highlight(false);\r\n\r\n    for(let i=0; i < this.baseKey['subKeys'].length; i++) {\r\n      try {\r\n        let sk = this.element.childNodes[i].firstChild as KeyElement;\r\n\r\n        let onKey = sk.key.isUnderTouch(input);\r\n        if(onKey) {\r\n          this.currentSelection = sk;\r\n        }\r\n        sk.key.highlight(onKey);\r\n      } catch(ex) {\r\n        if(ex.message) {\r\n          console.error(\"Unexpected error when attempting to update selected subkey:\" + ex.message);\r\n        } else {\r\n          console.error(\"Unexpected error (and error type) when attempting to update selected subkey.\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // Use the popup duplicate of the base key if a phone with a visible popup array\r\n    if(!this.currentSelection && this.baseKey.key.isUnderTouch(input)) {\r\n      this.baseKey.key.highlight(true);\r\n      this.currentSelection = this.baseKey;\r\n    }\r\n  }\r\n}\r\n",
    "import { type KeyElement } from '../../../keyElement.js';\r\nimport VisualKeyboard from '../../../visualKeyboard.js';\r\nimport PendingGesture from '../pendingGesture.interface.js';\r\nimport SubkeyPopup from './subkeyPopup.js';\r\n\r\n/**\r\n * (Conceptually) represents a finite-state-machine that determines\r\n * whether or not a series of touch events corresponds to a longpress\r\n * touch input.  The `resolve` method may be used to trigger the\r\n * subkey menu early, as with the upward quick-display shortcut.\r\n *\r\n * This is the default implementation of longpress behavior for KMW.\r\n * Alterate implementations are modeled through the `embedded`\r\n * namespace's equivalent, which is designed to facilitate custom\r\n * modeling for such gestures.\r\n *\r\n * Once the conditions to recognize a longpress gesture have been\r\n * fulfilled, this class's `promise` will resolve with a `SubkeyPopup`\r\n * matching the gesture's 'base' key, which itself provides a\r\n * `promise` field that will resolve to a `KeyEvent` once the touch\r\n * sequence is completed.\r\n */\r\nexport default class PendingLongpress implements PendingGesture {\r\n  public readonly baseKey: KeyElement;\r\n  public readonly promise: Promise<SubkeyPopup>;\r\n\r\n  public readonly subkeyUI: SubkeyPopup;\r\n\r\n  private readonly vkbd: VisualKeyboard;\r\n  private resolver: (subkeyPopup: SubkeyPopup) => void;\r\n\r\n  private timerId: number;\r\n  private popupDelay: number = 500;\r\n\r\n  constructor(vkbd: VisualKeyboard, baseKey: KeyElement) {\r\n    this.vkbd = vkbd;\r\n    this.baseKey = baseKey;\r\n\r\n    let _this = this;\r\n    this.promise = new Promise<SubkeyPopup>(function(resolve, reject) {\r\n      _this.resolver = resolve;\r\n      // After the timeout, it's no longer deferred; it's being fulfilled.\r\n      // Even if the actual subkey itself is still async.\r\n      _this.timerId = window.setTimeout(_this.resolve.bind(_this), _this.popupDelay);\r\n    });\r\n  }\r\n\r\n  public cancel() {\r\n    if(this.timerId) {\r\n      window.clearTimeout(this.timerId);\r\n      this.timerId = null;\r\n    }\r\n\r\n    if(this.resolver) {\r\n      this.resolver(null);\r\n      this.resolver = null;\r\n    }\r\n  }\r\n\r\n  public resolve() {\r\n    // User has flicked up to get to the longpress, before\r\n    // the timeout has expired. We need to cancel the timeout.\r\n    // See #5950\r\n    if(this.timerId) {\r\n      window.clearTimeout(this.timerId);\r\n      this.timerId = null;\r\n    }\r\n\r\n    if(this.resolver) {\r\n      this.resolver(new SubkeyPopup(this.vkbd, this.baseKey));\r\n    }\r\n  }\r\n}\r\n",
    "import OSKBaseKey from '../../../keyboard-layout/oskBaseKey.js';\r\nimport { KeyElement } from '../../../keyElement.js';\r\nimport KeyTipInterface from '../../../keytip.interface.js';\r\nimport VisualKeyboard from '../../../visualKeyboard.js';\r\n\r\nexport default class KeyTip implements KeyTipInterface {\r\n  public readonly element: HTMLDivElement;\r\n  public key: KeyElement;\r\n  public state: boolean = false;\r\n\r\n  //  -----\r\n  // |     | <-- tip\r\n  // |  x  | <-- label\r\n  // |_   _|\r\n  //  |   |\r\n  //  |   |  <-- cap\r\n  //  |___|\r\n\r\n  private readonly cap: HTMLDivElement;\r\n  private readonly tip: HTMLDivElement;\r\n  private readonly label: HTMLSpanElement;\r\n\r\n  private readonly constrain: boolean;\r\n\r\n  /**\r\n   *\r\n   * @param constrain keep the keytip within the bounds of the overall OSK.\r\n   *                  Will probably be handled via function in a later pass.\r\n   */\r\n  constructor(constrain: boolean) {\r\n    let tipElement = this.element=document.createElement('div');\r\n    tipElement.className='kmw-keytip';\r\n    tipElement.id = 'kmw-keytip';\r\n\r\n    // The following style is critical, so do not rely on external CSS\r\n    tipElement.style.pointerEvents='none';\r\n    tipElement.style.display='none';\r\n\r\n    tipElement.appendChild(this.tip = document.createElement('div'));\r\n    tipElement.appendChild(this.cap = document.createElement('div'));\r\n    this.tip.appendChild(this.label = document.createElement('span'));\r\n\r\n    this.tip.className = 'kmw-keytip-tip';\r\n    this.cap.className = 'kmw-keytip-cap';\r\n    this.label.className = 'kmw-keytip-label';\r\n\r\n    this.constrain = constrain;\r\n  }\r\n\r\n  show(key: KeyElement, on: boolean, vkbd: VisualKeyboard) {\r\n    // Create and display the preview\r\n    // If !key.offsetParent, the OSK is probably hidden.  Either way, it's a half-\r\n    // decent null-guard check.\r\n    if(on && key.offsetParent) {\r\n      // The key element is positioned relative to its key-square, which is,\r\n      // in turn, relative to its row.  Rows take 100% width, so this is sufficient.\r\n      //\r\n      let rowElement = (key.key as OSKBaseKey).row.element;\r\n\r\n      // May need adjustment for borders if ever enabled for the desktop form-factor target.\r\n      let rkey = key.getClientRects()[0], rrow = rowElement.getClientRects()[0];\r\n      let xLeft = rkey.left - rrow.left,\r\n          xWidth = rkey.width,\r\n          xHeight = rkey.height,\r\n          kc = key.key.label,\r\n          previewFontScale = 1.8;\r\n\r\n      let kts = this.element.style;\r\n\r\n      // Roughly matches how the subkey positioning is set.\r\n      const _Box = vkbd.topContainer as HTMLDivElement;\r\n      const _BoxRect = _Box.getBoundingClientRect();\r\n      const keyRect = key.getBoundingClientRect();\r\n      let y = (keyRect.bottom - _BoxRect.top + 1);\r\n      let ySubPixelPadding = y - Math.floor(y);\r\n\r\n      // Canvas dimensions must be set explicitly to prevent clipping\r\n      // This gives us exactly the same number of pixels on left and right\r\n      let canvasWidth = xWidth + Math.ceil(xWidth * 0.3) * 2;\r\n      let canvasHeight = Math.ceil(2.3 * xHeight) + (ySubPixelPadding); //\r\n\r\n      kts.top = 'auto';\r\n      kts.bottom = Math.floor(_BoxRect.height - y) + 'px';\r\n      kts.textAlign = 'center';\r\n      kts.overflow = 'visible';\r\n      kts.width = canvasWidth+'px';\r\n      kts.height = canvasHeight+'px';\r\n\r\n      const ckts = getComputedStyle(vkbd.element);\r\n      kts.fontFamily = ckts.fontFamily;\r\n\r\n      var px=parseInt(ckts.fontSize,10);\r\n      if(px == Number.NaN) {\r\n        px = 0;\r\n      }\r\n\r\n      if(px != 0) {\r\n        let popupFS = previewFontScale * px;\r\n        let scaleStyle = {\r\n          fontFamily: kts.fontFamily,\r\n          fontSize: popupFS + 'px',\r\n          height: 1.6 * xHeight + 'px' // as opposed to the canvas height of 2.3 * xHeight.\r\n        };\r\n\r\n        kts.fontSize = key.key.getIdealFontSize(vkbd, key.key.keyText, scaleStyle, true);\r\n      }\r\n\r\n      this.label.textContent = kc.textContent;\r\n\r\n      // Adjust shape if at edges\r\n      var xOverflow = (canvasWidth - xWidth) / 2;\r\n      if(xLeft < xOverflow) {\r\n        this.cap.style.left = '1px';\r\n        xLeft += xOverflow - 1;\r\n      } else if(xLeft > window.innerWidth - xWidth - xOverflow) {\r\n        this.cap.style.left = (canvasWidth - xWidth - 1) + 'px';\r\n        xLeft -= xOverflow - 1;\r\n      } else {\r\n        this.cap.style.left = xOverflow + 'px';\r\n      }\r\n\r\n      kts.left=(xLeft - xOverflow) + 'px';\r\n\r\n      let cs = getComputedStyle(this.element);\r\n      let oskHeight = _BoxRect.height;\r\n      let bottomY = parseFloat(cs.bottom);\r\n      let tipHeight = parseFloat(cs.height);\r\n      let halfHeight = Math.ceil(canvasHeight / 2);\r\n\r\n      this.cap.style.width = xWidth + 'px';\r\n      this.tip.style.height = halfHeight + 'px';\r\n\r\n      this.cap.style.top = (halfHeight - 3) + 'px';\r\n      this.cap.style.height = (keyRect.bottom - _BoxRect.top - Math.floor(y - canvasHeight) - (halfHeight)) + 'px'; //(halfHeight + 3 + ySubPixelPadding) + 'px';\r\n\r\n      if(this.constrain && tipHeight + bottomY > oskHeight) {\r\n        const delta = tipHeight + bottomY - oskHeight;\r\n        kts.height = (canvasHeight-delta) + 'px';\r\n        const hx = Math.max(0, (canvasHeight-delta)-(canvasHeight/2) + 2);\r\n        this.cap.style.height = hx + 'px';\r\n      }\r\n\r\n      kts.display = 'block';\r\n    } else { // Hide the key preview\r\n      this.element.style.display = 'none';\r\n    }\r\n\r\n    // Save the key preview state\r\n    this.key = key;\r\n    this.state = on;\r\n  }\r\n}",
    "import { landscapeView } from \"keyman/engine/dom-utils\";\r\n\r\n/**\r\n * Get viewport scale factor for this document\r\n *\r\n * @return      {number}\r\n */\r\nexport function getViewportScale(): number {\r\n  // This can sometimes fail with some browsers if called before document defined,\r\n  // so catch the exception\r\n  try {\r\n    // For emulation of iOS on a desktop device, use a default value\r\n    if(this.device.formFactor == 'desktop') {\r\n      return 1;\r\n    }\r\n\r\n    // Get viewport width\r\n    var viewportWidth = document.documentElement.clientWidth;\r\n\r\n    // Return a default value if screen width is greater than the viewport width (not fullscreen).\r\n    if(screen.width > viewportWidth) {\r\n      return 1;\r\n    }\r\n\r\n    // Get the orientation corrected screen width\r\n    var screenWidth = screen.width;\r\n    if(landscapeView()) {\r\n      // Take larger of the two dimensions\r\n      if(screen.width < screen.height) {\r\n        screenWidth = screen.height;\r\n      }\r\n    } else {\r\n      // Take smaller of the two dimensions\r\n      if(screen.width > screen.height) {\r\n        screenWidth = screen.height;\r\n      }\r\n    }\r\n    // Calculate viewport scale\r\n    return Math.round(100*screenWidth / viewportWidth)/100;\r\n  } catch(ex) {\r\n    return 1;\r\n  }\r\n}",
    "import EventEmitter from 'eventemitter3';\r\n\r\ninterface EventMap {\r\n  activate: (flag: boolean) => void;\r\n}\r\n\r\n/**\r\n * Used to encapsulate activation logic for the on-screen keyboadr, conditionally activating\r\n * and deactivating it based on specified conditions.\r\n */\r\nexport default abstract class Activator<ExtraEvents = void> extends EventEmitter<EventMap & ExtraEvents, Activator> {\r\n  /**\r\n   * For certain sub-types, this may be set to `false` to \"turn activation off\", putting\r\n   * the `Activator` in a state that ignores changes to any other conditions.\r\n   */\r\n  abstract get enabled(): boolean;\r\n\r\n  abstract set enabled(flag: boolean);\r\n\r\n  /**\r\n   * When `true`, indicates that the listener should activate / become visible.\r\n   */\r\n  abstract get activate(): boolean;\r\n\r\n  /**\r\n   * When `true` and `activate` is `false`, indicates that changing the value of `enabled`\r\n   * will result in activation.\r\n   */\r\n  abstract get conditionsMet(): boolean;\r\n}\r\n\r\nexport class StaticActivator extends Activator {\r\n  get enabled(): boolean {\r\n    return true;\r\n  }\r\n\r\n  get activate(): boolean {\r\n    return true;\r\n  }\r\n\r\n  get conditionsMet(): boolean {\r\n    return true;\r\n  }\r\n}",
    "import { ManagedPromise } from \"@keymanapp/web-utils\";\r\n\r\nexport default class TouchEventPromiseMap {\r\n  private map: Record<number, ManagedPromise<void>> = {};\r\n\r\n  // Used to\r\n  public promiseForTouchpoint(id: number): ManagedPromise<void> {\r\n    if(!this.map[id]) {\r\n      this.map[id] = new ManagedPromise<void>();\r\n    }\r\n\r\n    return this.map[id]; // touchpoint identifiers are unique during a page's lifetime.\r\n  }\r\n\r\n  public maintainTouches(list: TouchList) {\r\n    let keys = Object.keys(this.map);\r\n\r\n    for(let i=0; i < list.length; i++) {\r\n      let pos = keys.indexOf('' + list.item(i).identifier);\r\n      if(pos != -1) {\r\n        keys.splice(pos, 1);\r\n      }\r\n    }\r\n\r\n    // Any remaining entries of `keys` are no longer in the map!\r\n    for(let endedKey of keys) {\r\n      (this.map[endedKey] as ManagedPromise<void>).resolve();\r\n      delete this.map[endedKey];\r\n    }\r\n  }\r\n}",
    "import EventEmitter from 'eventemitter3';\r\n\r\nimport { Keyboard } from '@keymanapp/keyboard-processor';\r\n\r\nimport OSKViewComponent from './oskViewComponent.interface.js';\r\nimport { ParsedLengthStyle } from '../lengthStyle.js';\r\nimport MouseDragOperation from '../input/mouseDragOperation.js';\r\n\r\nimport { createUnselectableElement } from 'keyman/engine/dom-utils';\r\n\r\ninterface EventMap {\r\n  /**\r\n   * The close button (to request that the OSK hide) has been clicked.\r\n   */\r\n  close: () => void,\r\n\r\n  /**\r\n   * The config button has been clicked.\r\n   */\r\n  config: () => void,\r\n\r\n  /**\r\n   * The help button has been clicked.\r\n   */\r\n  help: () => void,\r\n\r\n  /**\r\n   * The pin button was visible and has been clicked.\r\n   */\r\n  unpin: () => void\r\n}\r\n\r\nexport default class TitleBar extends EventEmitter<EventMap, TitleBar> implements OSKViewComponent {\r\n  private _element: HTMLDivElement;\r\n  private _unpinButton: HTMLDivElement;\r\n  private _closeButton: HTMLDivElement;\r\n  private _helpButton: HTMLDivElement;\r\n  private _configButton: HTMLDivElement;\r\n  private _caption: HTMLSpanElement;\r\n\r\n  private _helpEnabled:   boolean;\r\n  private _configEnabled: boolean;\r\n\r\n  public get helpEnabled(): boolean {\r\n    return this._helpEnabled;\r\n  }\r\n\r\n  public set helpEnabled(val) {\r\n    this._helpEnabled = val;\r\n\r\n    this._helpButton.style.display = val ? 'inline' : 'none';\r\n  }\r\n\r\n  public get configEnabled(): boolean {\r\n    return this._configEnabled;\r\n  }\r\n\r\n  public set configEnabled(val) {\r\n    this._configEnabled = val;\r\n\r\n    this._configButton.style.display = val ? 'inline' : 'none';\r\n  }\r\n\r\n  private static readonly DISPLAY_HEIGHT = ParsedLengthStyle.inPixels(20); // As set in kmwosk.css\r\n\r\n  public constructor(dragHandler?: MouseDragOperation) {\r\n    super();\r\n\r\n    this._element = this.buildTitleBar();\r\n\r\n    this.helpEnabled   = false;\r\n    this.configEnabled = false;\r\n\r\n    if(dragHandler) {\r\n      this.element.onmousedown = dragHandler.mouseDownHandler;\r\n    }\r\n  }\r\n\r\n  public get layoutHeight(): ParsedLengthStyle {\r\n    return TitleBar.DISPLAY_HEIGHT;\r\n  }\r\n\r\n  private mouseCancellingHandler: (ev: MouseEvent) => boolean = function(ev: MouseEvent) {\r\n    ev.preventDefault();\r\n    ev.cancelBubble = true;\r\n    return false;\r\n  };\r\n\r\n  public get element(): HTMLDivElement {\r\n    return this._element;\r\n  }\r\n\r\n  public setPinCJKOffset() {\r\n    this._unpinButton.style.left = '15px';\r\n  }\r\n\r\n  public showPin(visible: boolean) {\r\n    this._unpinButton.style.display = visible ? 'block' : 'none';\r\n  }\r\n\r\n  public setTitle(str: string) {\r\n    this._caption.innerHTML = str;\r\n  }\r\n\r\n  public setTitleFromKeyboard(keyboard: Keyboard) {\r\n    let title = \"<span style='font-weight:bold'>\" + keyboard?.name + '</span>';  // I1972  // I2186\r\n    this._caption.innerHTML = title;\r\n  }\r\n\r\n  /**\r\n   * Create a control bar with title and buttons for the desktop OSK\r\n   */\r\n  buildTitleBar(): HTMLDivElement {\r\n    let bar = createUnselectableElement('div');\r\n    bar.id='keymanweb_title_bar';\r\n    bar.className='kmw-title-bar';\r\n\r\n    var Ltitle = this._caption = createUnselectableElement('span');\r\n    Ltitle.className='kmw-title-bar-caption';\r\n    Ltitle.style.color='#fff';\r\n    bar.appendChild(Ltitle);\r\n\r\n    var Limg = this._closeButton = this.buildCloseButton();\r\n    this._closeButton.onclick = () => {\r\n      this.emit('close');\r\n      return false;\r\n    };\r\n    bar.appendChild(Limg);\r\n\r\n    Limg = this._helpButton = this.buildHelpButton()\r\n    this._helpButton.onclick = () => {\r\n      this.emit('help');\r\n      return false;\r\n    }\r\n    bar.appendChild(Limg);\r\n\r\n    Limg = this._configButton = this.buildConfigButton();\r\n    this._configButton.onclick = () => {\r\n      this.emit('config');\r\n      return false;\r\n    }\r\n    bar.appendChild(Limg);\r\n\r\n    Limg = this._unpinButton = this.buildUnpinButton();\r\n    this._unpinButton.onclick = () => {\r\n      this.emit('unpin');\r\n      return false;\r\n    }\r\n    bar.appendChild(Limg);\r\n\r\n    return bar;\r\n  }\r\n\r\n  private buildCloseButton(): HTMLDivElement {\r\n    var Limg = createUnselectableElement('div');\r\n\r\n    Limg.id='kmw-close-button';\r\n    Limg.className='kmw-title-bar-image';\r\n    Limg.onmousedown = this.mouseCancellingHandler;\r\n\r\n    return Limg;\r\n  }\r\n\r\n  private buildHelpButton(): HTMLDivElement {\r\n    let Limg = createUnselectableElement('div');\r\n    Limg.id='kmw-help-image';\r\n    Limg.className='kmw-title-bar-image';\r\n    Limg.title='KeymanWeb Help';\r\n    Limg.onmousedown = this.mouseCancellingHandler;\r\n    return Limg;\r\n  }\r\n\r\n  private buildConfigButton(): HTMLDivElement {\r\n    let Limg = createUnselectableElement('div');\r\n\r\n    Limg.id='kmw-config-image';\r\n    Limg.className='kmw-title-bar-image';\r\n    Limg.title='KeymanWeb Configuration Options';\r\n    Limg.onmousedown = this.mouseCancellingHandler;\r\n\r\n    return Limg;\r\n  }\r\n\r\n  /**\r\n   * Builds an 'unpin' button for restoring OSK to default location, handle mousedown and click events\r\n   */\r\n  private buildUnpinButton(): HTMLDivElement {\r\n    let Limg = createUnselectableElement('div');  //I2186\r\n\r\n    Limg.id = 'kmw-pin-image';\r\n    Limg.className = 'kmw-title-bar-image';\r\n    Limg.title='Pin the On Screen Keyboard to its default location on the active text box';\r\n\r\n    Limg.onmousedown = this.mouseCancellingHandler;\r\n\r\n    return Limg;\r\n  }\r\n\r\n  public refreshLayout() {\r\n    // The title bar is adaptable as it is and needs no adjustments.\r\n  }\r\n}",
    "import EventEmitter from 'eventemitter3';\r\n\r\nimport OSKViewComponent from './oskViewComponent.interface.js';\r\nimport { ParsedLengthStyle } from '../lengthStyle.js';\r\nimport MouseDragOperation from '../input/mouseDragOperation.js';\r\n\r\nimport { createUnselectableElement } from 'keyman/engine/dom-utils';\r\n\r\ninterface EventMap {\r\n  /**\r\n   * Triggered when the user inputs a special command to show the engine's current version number.\r\n   */\r\n  showbuild: () => void;\r\n}\r\n\r\nexport default class ResizeBar extends EventEmitter<EventMap, ResizeBar> implements OSKViewComponent {\r\n  private _element: HTMLDivElement;\r\n  private _resizeHandle: HTMLDivElement;\r\n\r\n  private static readonly DISPLAY_HEIGHT = ParsedLengthStyle.inPixels(16); // As set in kmwosk.css\r\n\r\n  private mouseCancellingHandler: (ev: MouseEvent) => boolean = function(ev: MouseEvent) {\r\n    ev.preventDefault();\r\n    ev.cancelBubble = true;\r\n    return false;\r\n  };\r\n\r\n  public constructor(dragHandler?: MouseDragOperation) {\r\n    super();\r\n    this._element = this.buildResizeBar();\r\n\r\n    if(dragHandler) {\r\n      this._resizeHandle.onmousedown = dragHandler.mouseDownHandler;\r\n    }\r\n  }\r\n\r\n  public get layoutHeight(): ParsedLengthStyle {\r\n    return ResizeBar.DISPLAY_HEIGHT;\r\n  }\r\n\r\n  public get element(): HTMLDivElement {\r\n    return this._element;\r\n  }\r\n\r\n  public get handle(): HTMLDivElement {\r\n    return this._resizeHandle;\r\n  }\r\n\r\n  public allowResizing(flag: boolean) {\r\n    this._resizeHandle.style.display = flag ? 'block' : 'none';\r\n  }\r\n\r\n  /**\r\n   * Create a bottom bar with a resizing icon for the desktop OSK\r\n   */\r\n  buildResizeBar(): HTMLDivElement {\r\n    var bar = createUnselectableElement('div');\r\n    bar.className='kmw-footer';\r\n    bar.onmousedown = this.mouseCancellingHandler;\r\n\r\n    // Add caption\r\n    var Ltitle=createUnselectableElement('div');\r\n    Ltitle.className='kmw-footer-caption';\r\n    Ltitle.innerHTML='<a href=\"https://keyman.com/developer/keymanweb/\">KeymanWeb</a>';\r\n    Ltitle.id='keymanweb-osk-footer-caption';\r\n\r\n    // Display build number on shift+double click\r\n    Ltitle.addEventListener('dblclick', (e) => {\r\n      this.emit('showbuild');\r\n\r\n      return false;\r\n    }, false);\r\n\r\n    bar.appendChild(Ltitle);\r\n\r\n    var Limg = createUnselectableElement('div');\r\n    Limg.className='kmw-footer-resize';\r\n    bar.appendChild(Limg);\r\n    this._resizeHandle=Limg;\r\n\r\n    return bar;\r\n  }\r\n\r\n  public refreshLayout() {\r\n    // The title bar is adaptable as it is and needs no adjustments.\r\n  }\r\n}",
    "import InputEventCoordinate from './inputEventCoordinate.js';\r\n\r\ntype MouseHandler = (this: GlobalEventHandlers, ev: MouseEvent) => any;\r\n\r\n/**\r\n * Used to store the page's original mouse handlers and properties\r\n * when temporarily overridden by OSK moving or resizing handlers due\r\n * to user interaction.\r\n */\r\nclass MouseStartSnapshot {\r\n  private readonly _VPreviousMouseMove: MouseHandler;\r\n  private readonly _VPreviousMouseUp: MouseHandler;\r\n  private readonly _VPreviousCursor: string;\r\n  private readonly _VPreviousMouseButton: number;\r\n\r\n  constructor(e: MouseEvent) {\r\n    this._VPreviousMouseMove = document.onmousemove;\r\n    this._VPreviousMouseUp = document.onmouseup;\r\n\r\n    this._VPreviousCursor = document.body.style.cursor;\r\n    this._VPreviousMouseButton = (typeof(e.which)=='undefined' ? e.button : e.which);\r\n  }\r\n\r\n  restore() {\r\n    document.onmousemove = this._VPreviousMouseMove;\r\n    document.onmouseup = this._VPreviousMouseUp;\r\n\r\n    if(document.body.style.cursor) {\r\n      document.body.style.cursor = this._VPreviousCursor;\r\n    }\r\n  }\r\n\r\n  matchesCausingClick(e: MouseEvent): boolean {\r\n    return this._VPreviousMouseButton == (typeof(e.which)=='undefined' ? e.button : e.which);\r\n  }\r\n}\r\n\r\nexport default abstract class MouseDragOperation {\r\n  private _enabled: boolean;\r\n  private _startCoord: InputEventCoordinate;\r\n  private _mouseStartSnapshot: MouseStartSnapshot;\r\n\r\n  private startHandler: (e: MouseEvent) => void;\r\n  private cursorType: string;\r\n\r\n  public constructor(cursorType?: string) {\r\n    this.startHandler = this._VMoveMouseDown.bind(this);\r\n    this.cursorType = cursorType;\r\n  }\r\n\r\n  /**\r\n   * Denotes whether or not this object should handle incoming events.\r\n   */\r\n  public get enabled(): boolean {\r\n    return this._enabled;\r\n  }\r\n\r\n  public set enabled(flag: boolean) {\r\n    this._enabled = flag;\r\n  }\r\n\r\n  /**\r\n   * Denotes whether or not this object is currently handling an ongoing drag event.\r\n   */\r\n  public get isActive(): boolean {\r\n    return !!this._mouseStartSnapshot;\r\n  }\r\n\r\n  public get mouseDownHandler(): (e: MouseEvent) => void {\r\n    return this.startHandler;\r\n  }\r\n\r\n  /**\r\n   * Function     _VMoveMouseDown\r\n   * Scope        Private\r\n   * @param       {Object}      e      event\r\n   * Description  Process mouse down on OSK\r\n   */\r\n    private _VMoveMouseDown(e: MouseEvent) {\r\n    if(!e) {\r\n      return true;\r\n    }\r\n\r\n    if(!this._enabled) {\r\n      return true;\r\n    }\r\n\r\n    if(!this._mouseStartSnapshot) { // I1472 - Dragging off edge of browser window causes muckup\r\n      this._mouseStartSnapshot = new MouseStartSnapshot(e);\r\n    }\r\n\r\n    this._startCoord = InputEventCoordinate.fromEvent(e);\r\n\r\n    document.onmousemove = this._VMoveMouseMove.bind(this);\r\n    document.onmouseup = this._VMoveMouseUp.bind(this);\r\n    if(document.body.style.cursor) {\r\n      document.body.style.cursor = this.cursorType;\r\n    }\r\n\r\n    e.preventDefault();\r\n    e.cancelBubble = true;\r\n\r\n    this.onDragStart();\r\n    return false;\r\n  }\r\n\r\n  protected abstract onDragStart();\r\n\r\n  /**\r\n   * Process mouse drag on OSK\r\n   *\r\n   * @param       {Object}      e      event\r\n   */\r\n    private _VMoveMouseMove(e: MouseEvent) {\r\n    if(!e) {\r\n      return true;\r\n    }\r\n\r\n    if(!this.enabled) {\r\n      return true;\r\n    }\r\n\r\n    e.preventDefault();\r\n    e.cancelBubble = true;\r\n\r\n    if(!this._mouseStartSnapshot.matchesCausingClick(e)) { // I1472 - Dragging off edge of browser window causes muckup\r\n      return this._VMoveMouseUp(e);\r\n    } else {\r\n      const coord = InputEventCoordinate.fromEvent(e);\r\n      const deltaX = coord.x - this._startCoord.x;\r\n      const deltaY = coord.y - this._startCoord.y;\r\n\r\n      this.onDragMove(deltaX, deltaY);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param deltaX The total horizontal distance moved, in pixels, since the start of the drag\r\n   * @param deltaY The total vertical distance moved, in pixels, since the start of the drag\r\n   */\r\n  protected abstract onDragMove(deltaX: number, deltaY: number);\r\n\r\n  /**\r\n   * Function     _VMoveMouseUp\r\n   * Scope        Private\r\n   * @param       {Object}      e      event\r\n   * Description  Process mouse up during movement of KMW OSK UI\r\n   */\r\n  private _VMoveMouseUp(e: MouseEvent) {\r\n    if(!e) {\r\n      return true;\r\n    }\r\n\r\n    this._mouseStartSnapshot.restore();\r\n    this._mouseStartSnapshot = null;\r\n\r\n    e.preventDefault();\r\n    e.cancelBubble = true;\r\n\r\n    this.onDragRelease();\r\n    return false;\r\n  }\r\n\r\n  protected abstract onDragRelease();\r\n}",
    "import Activator from './activator.js';\r\n\r\ninterface TriggerEventMap<Type> {\r\n  triggerchange: (trigger: Type) => void;\r\n}\r\n\r\nexport default class TwoStateActivator<Type> extends Activator<TriggerEventMap<Type>> {\r\n  private _enabled: boolean = true;\r\n  private actValue: Type = null;\r\n\r\n  get activate(): boolean {\r\n    return this._enabled && !!this.actValue;\r\n  }\r\n\r\n  private checkState(oldValue: boolean) {\r\n    if(this.activate != oldValue) {\r\n      this.emit('activate', this.activate);\r\n    }\r\n  }\r\n\r\n  get enabled(): boolean {\r\n    return this._enabled;\r\n  }\r\n\r\n  set enabled(flag: boolean) {\r\n    const oldState = this.activate;\r\n    this._enabled = flag; // may change this.value!\r\n\r\n    this.checkState(oldState);\r\n  }\r\n\r\n  get activationTrigger(): Type {\r\n    return this.actValue;\r\n  }\r\n\r\n  set activationTrigger(value: Type) {\r\n    const oldState = this.activate;\r\n    const oldValue = this.actValue;\r\n    this.actValue = value; // may change this.value!\r\n\r\n    this.checkState(oldState);\r\n    if(oldValue != value) {\r\n      this.emit('triggerchange', value);\r\n    }\r\n  }\r\n\r\n  get conditionsMet(): boolean {\r\n    return !!this.activationTrigger;\r\n  }\r\n}",
    "import { CookieSerializer } from 'keyman/engine/dom-utils';\r\n\r\nexport interface FloatingOSKCookie {\r\n  /**\r\n   * Notes whether or not the OSK was hidden at the end of the previous session.\r\n   */\r\n  visible: 0 | 1;\r\n\r\n  /**\r\n   * Notes whether or not the OSK was pinned (located by the user) at the end\r\n   * of the previous session.\r\n   */\r\n  userSet: 0 | 1;\r\n\r\n  /**\r\n   * Denotes the left-position of the OSK at the end of the previous session if pinned.\r\n   * Defaults to -1 if the value was undefined.\r\n   */\r\n  left: number;\r\n\r\n  /**\r\n   * Denotes the left-position of the OSK at the end of the previous session if pinned.\r\n   * Defaults to -1 if the value was undefined.\r\n   */\r\n  top: number;\r\n\r\n  /**\r\n   * The previously-set OSK width.\r\n   */\r\n  width?: number;\r\n\r\n  /**\r\n   * The previously-set OSK height.\r\n   */\r\n  height?: number;\r\n\r\n  /**\r\n   * The version of KeymanWeb active when this cookie was generated.\r\n   */\r\n  _version: string;\r\n}\r\n\r\nexport class FloatingOSKCookieSerializer extends CookieSerializer<Required<FloatingOSKCookie>> {\r\n  constructor() {\r\n    super('KeymanWeb_OnScreenKeyboard');\r\n  }\r\n\r\n  loadWithDefaults(defaults: Required<FloatingOSKCookie>) {\r\n    return {...defaults, ...this.load()};\r\n  }\r\n\r\n  load() {\r\n    const cookie = super.load((value, key) => {\r\n      switch(key) {\r\n        case 'version':\r\n          return value;\r\n        default:\r\n          return Number.parseInt(value, 10);\r\n      }\r\n    });\r\n\r\n    if(!cookie.width) {\r\n      delete cookie.width;  // in case of a '' entry.\r\n    }\r\n    if(!cookie.height) {\r\n      delete cookie.height; // in case of a '' entry.\r\n    }\r\n\r\n    return cookie;\r\n  }\r\n\r\n  save(cookie: Required<FloatingOSKCookie>) {\r\n    super.save(cookie);\r\n  }\r\n}",
    "import { Codes, DeviceSpec, ManagedPromise, Version } from '@keymanapp/keyboard-processor';\r\nimport { getAbsoluteX, getAbsoluteY, landscapeView } from 'keyman/engine/dom-utils';\r\nimport { EmitterListenerSpy, LegacyEventMap } from 'keyman/engine/events';\r\n\r\nimport OSKView, { EventMap, type LegacyOSKEventMap, OSKPos, OSKRect } from './oskView.js';\r\nimport TitleBar from '../components/titleBar.js';\r\nimport ResizeBar from '../components/resizeBar.js';\r\n\r\nimport MouseDragOperation from '../input/mouseDragOperation.js';\r\nimport { getViewportScale } from '../screenUtils.js';\r\nimport Configuration from '../config/viewConfiguration.js';\r\nimport TwoStateActivator from './twoStateActivator.js';\r\nimport { FloatingOSKCookie, FloatingOSKCookieSerializer } from './floatingOskCookie.js';\r\n\r\n/***\r\n   KeymanWeb 10.0\r\n   Copyright 2017 SIL International\r\n***/\r\n\r\nexport interface FloatingOSKViewConfiguration extends Configuration {\r\n  activator?: TwoStateActivator<HTMLElement>;\r\n}\r\n\r\nexport default class FloatingOSKView extends OSKView {\r\n  // OSK positioning fields\r\n  userPositioned: boolean = false;\r\n  specifiedPosition: boolean = false;\r\n  x: number;\r\n  y: number;\r\n  noDrag: boolean = false;\r\n  dfltX: string;\r\n  dfltY: string;\r\n\r\n  layoutSerializer = new FloatingOSKCookieSerializer();\r\n\r\n  private titleBar: TitleBar;\r\n  private resizeBar: ResizeBar;\r\n\r\n  // Encapsulations of the drag behaviors for OSK movement & resizing\r\n  private _moveHandler: MouseDragOperation;\r\n  private _resizeHandler: MouseDragOperation;\r\n\r\n  public constructor(config: FloatingOSKViewConfiguration) {\r\n    config.activator = config.activator || new TwoStateActivator<HTMLElement>();\r\n\r\n    super(config);\r\n\r\n    this.typedActivationModel.on('triggerchange', () => this.setDisplayPositioning());\r\n\r\n    document.body.appendChild(this._Box);\r\n\r\n    // Add header element to OSK only for desktop browsers\r\n    this.titleBar = new TitleBar(this.titleDragHandler);\r\n    this.titleBar.on('help', () => {\r\n      this.legacyEvents.callEvent('helpclick', {});\r\n    });\r\n    this.titleBar.on('config', () => {\r\n      this.legacyEvents.callEvent('configclick', {});\r\n    });\r\n    this.titleBar.on('close', () => this.startHide(true));\r\n    this.titleBar.on('unpin', () => this.restorePosition(true));\r\n\r\n    this.resizeBar = new ResizeBar(this.resizeDragHandler);\r\n    this.resizeBar.on('showbuild', () => this.emit('showbuild'));\r\n\r\n    this.headerView = this.titleBar;\r\n\r\n    const onListenedEvent = (eventName: keyof EventMap | keyof LegacyOSKEventMap) => {\r\n      // As the following title bar buttons (for desktop / FloatingOSKView) do nothing unless a site\r\n      // designer uses these events, we disable / hide them unless an event-handler is attached.\r\n      let titleBar = this.headerView;\r\n      if(titleBar && titleBar instanceof TitleBar) {\r\n        switch(eventName) {\r\n          case 'configclick':\r\n            titleBar.configEnabled = this.legacyEvents.listenerCount('configclick') > 0;\r\n            break;\r\n          case 'helpclick':\r\n            titleBar.helpEnabled = this.legacyEvents.listenerCount('helpclick') > 0;\r\n            break;\r\n          default:\r\n            return;\r\n        }\r\n      }\r\n    }\r\n\r\n    const listenerSpyNew = new EmitterListenerSpy(this);\r\n    const listenerSpyOld = new EmitterListenerSpy(this.legacyEvents);\r\n    for(let listenerSpy of [listenerSpyNew, listenerSpyOld]) {\r\n      listenerSpy.on('listeneradded', onListenedEvent);\r\n      listenerSpy.on('listenerremoved', onListenedEvent);\r\n    }\r\n\r\n    this.loadPersistedLayout();\r\n  }\r\n\r\n  private get typedActivationModel(): TwoStateActivator<HTMLElement> {\r\n    return this.activationModel as TwoStateActivator<HTMLElement>;\r\n  }\r\n\r\n  /**\r\n   * Function     _Unload\r\n   * Scope        Private\r\n   * Description  Clears OSK variables prior to exit (JMD 1.9.1 - relocation of local variables 3/9/10)\r\n   */\r\n  _Unload() {\r\n    this.keyboardView = null;\r\n    this.bannerView = null;\r\n    this._Box = null;\r\n  }\r\n\r\n  protected setBoxStyling() {\r\n    const s = this._Box.style;\r\n\r\n    s.zIndex   = '9999';\r\n    s.display  = 'none';\r\n    s.width    = 'auto';\r\n    s.position = 'absolute';\r\n  }\r\n\r\n  protected postKeyboardAdjustments() {\r\n    // Add header element to OSK only for desktop browsers\r\n    this.enableMoveResizeHandlers();\r\n    if(this.activeKeyboard) {\r\n      this.titleBar.setTitleFromKeyboard(this.activeKeyboard.keyboard);\r\n    }\r\n\r\n    if(this.vkbd) {\r\n      this.footerView = this.resizeBar;\r\n      this._Box.appendChild(this.footerView.element);\r\n    } else {\r\n      if(this.footerView) {\r\n        this._Box.removeChild(this.footerView.element);\r\n      }\r\n      this.footerView = null;\r\n    }\r\n\r\n    this.loadPersistedLayout();\r\n    this.setNeedsLayout();\r\n  }\r\n\r\n  /**\r\n   * Function     restorePosition\r\n   * Scope        Public\r\n   * @param       {boolean?}      keepDefaultPosition  If true, does not reset the default x,y set by `setRect`.\r\n   *                                                   If false or omitted, resets the default x,y as well.\r\n   * Description  Move OSK back to default position, floating under active input element\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/restorePosition\r\n   */\r\n  public restorePosition: (keepDefaultPosition?: boolean) => void = function(this: FloatingOSKView, keepDefaultPosition?: boolean) {\r\n    let isVisible = this._Visible;\r\n\r\n    let dragPromise = new ManagedPromise<void>();\r\n    this.emit('dragmove', dragPromise.corePromise);\r\n\r\n    this.loadPersistedLayout();\r\n    this.userPositioned=false;\r\n    if(!keepDefaultPosition) {\r\n      delete this.dfltX;\r\n      delete this.dfltY;\r\n    }\r\n    this.savePersistedLayout();\r\n\r\n    if(isVisible) {\r\n      this.present();\r\n    }\r\n\r\n    this.titleBar.showPin(false);\r\n    dragPromise.resolve();\r\n    this.doResizeMove(); //allow the UI to respond to OSK movements\r\n  }.bind(this);\r\n\r\n  /**\r\n   * Function     enabled\r\n   * Scope        Public\r\n   * @return      {boolean|number}    True if KMW OSK enabled\r\n   * Description  Test if KMW OSK is enabled\r\n   */\r\n  ['isEnabled'](): boolean {\r\n    return this.displayIfActive;\r\n  }\r\n\r\n  /**\r\n   * Function     isVisible\r\n   * Scope        Public\r\n   * @return      {boolean|number}    True if KMW OSK visible\r\n   * Description  Test if KMW OSK is actually visible\r\n   * Note that this will usually return false after any UI event that results in (temporary) loss of input focus\r\n   */\r\n  ['isVisible'](): boolean {\r\n    return this._Visible;\r\n  }\r\n\r\n  /**\r\n   * Save size, position, font size and visibility of OSK\r\n   */\r\n  private savePersistedLayout() {\r\n    var p = this.getPos();\r\n\r\n    const c: FloatingOSKCookie = {\r\n      visible: this.displayIfActive ? 1 : 0,\r\n      userSet: this.userPositioned ?  1 : 0,\r\n      left: p.left,\r\n      top:  p.top,\r\n      _version: Version.CURRENT.toString()\r\n    }\r\n\r\n    if(this.vkbd) {\r\n      c.width =  this.width.val;\r\n      c.height = this.height.val;\r\n    }\r\n\r\n    this.layoutSerializer.save(c as Required<FloatingOSKCookie>);\r\n  }\r\n\r\n  /**\r\n   * Restore size, position, font size and visibility of desktop OSK\r\n   *\r\n   *  @return {boolean}\r\n   */\r\n  private loadPersistedLayout(): void {\r\n    let c = this.layoutSerializer.loadWithDefaults({\r\n      visible: 1,\r\n      userSet: 0,\r\n      left: -1,\r\n      top: -1,\r\n      _version: undefined,\r\n      width:  0.3*screen.width,\r\n      height: 0.15*screen.height\r\n    });\r\n\r\n    this.activationModel.enabled = c.visible == 1;\r\n    this.userPositioned = c.userSet == 1;\r\n    this.x = c.left;\r\n    this.y = c.top;\r\n    const cookieVersionString = c._version;\r\n\r\n    // Restore OSK size - font size now fixed in relation to OSK height, unless overridden (in em) by keyboard\r\n    const isNewCookie = cookieVersionString === undefined;\r\n    let newWidth  = c.width;\r\n    let newHeight = c.height;\r\n\r\n    // Limit the OSK dimensions to reasonable values\r\n    if(newWidth < 0.2*screen.width) {\r\n      newWidth = 0.2*screen.width;\r\n    }\r\n    if(newHeight < 0.1*screen.height) {\r\n      newHeight = 0.1*screen.height;\r\n    }\r\n    if(newWidth > 0.9*screen.width) {\r\n      newWidth=0.9*screen.width;\r\n    }\r\n    if(newHeight > 0.5*screen.height) {\r\n      newHeight=0.5*screen.height;\r\n    }\r\n\r\n    // if(!cookieVersionString) - this component was not tracked until 15.0.\r\n    // Before that point, the OSK's title bar and resize bar heights were not included\r\n    // in the OSK's cookie-persisted height.\r\n    if(isNewCookie || !cookieVersionString) {\r\n      // Adds some space to account for the OSK's header and footer, should they exist.\r\n      if(this.headerView && this.headerView.layoutHeight.absolute) {\r\n        newHeight += this.headerView.layoutHeight.val;\r\n      }\r\n\r\n      if(this.footerView && this.footerView.layoutHeight.absolute) {\r\n        newHeight += this.footerView.layoutHeight.val;\r\n      }\r\n    }\r\n\r\n    this.setSize(newWidth, newHeight);\r\n\r\n    // and OSK position if user located\r\n    if(this.x == -1 || this.y == -1 || (!this._Box)) {\r\n      this.userPositioned = false;\r\n    }\r\n\r\n    if(this.x < window.pageXOffset-0.8*newWidth) {\r\n      this.x=window.pageXOffset-0.8*newWidth;\r\n    }\r\n    if(this.y < 0) {\r\n      this.x=-1;\r\n      this.y=-1;\r\n      this.userPositioned=false;\r\n    }\r\n\r\n    if(this.userPositioned && this._Box) {\r\n      this.setPos({'left': this.x, 'top': this.y});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the wanted height of the OSK for touch devices (does not include banner height)\r\n   *  @return   {number}    height in pixels\r\n   **/\r\n  getDefaultKeyboardHeight(): number {\r\n    // KeymanTouch - get OSK height from device\r\n    if(this.configuration.heightOverride) {\r\n      return this.configuration.heightOverride();\r\n    }\r\n\r\n    var oskHeightLandscapeView=Math.floor(Math.min(screen.availHeight,screen.availWidth)/2),\r\n        height=oskHeightLandscapeView;\r\n\r\n    if(this.targetDevice.formFactor == 'phone') {\r\n      var sx=Math.min(screen.height,screen.width),\r\n          sy=Math.max(screen.height,screen.width);\r\n\r\n      if(!landscapeView())\r\n        height=Math.floor(Math.max(screen.availHeight,screen.availWidth)/3);\r\n      else\r\n        height=height*(sy/sx)/1.6;  //adjust for aspect ratio, increase slightly for iPhone 5\r\n    }\r\n\r\n    // Correct for viewport scaling (iOS - Android 4.2 does not want this, at least on Galaxy Tab 3))\r\n    if(this.targetDevice.OS == DeviceSpec.OperatingSystem.iOS) {\r\n      height=height/getViewportScale();\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Get the wanted width of the OSK for touch devices\r\n   *\r\n   *  @return   {number}    height in pixels\r\n   **/\r\n  getDefaultWidth(): number {\r\n    // KeymanTouch - get OSK height from device\r\n    if(this.configuration.widthOverride) {\r\n      return this.configuration.widthOverride();\r\n    }\r\n\r\n    var width: number;\r\n    if(this.targetDevice.OS == DeviceSpec.OperatingSystem.iOS) {\r\n      // iOS does not interchange these values when the orientation changes!\r\n      //width = util.portraitView() ? screen.width : screen.height;\r\n      width = window.innerWidth;\r\n    } else if(this.targetDevice.OS == DeviceSpec.OperatingSystem.Android) {\r\n      try {\r\n        width=document.documentElement.clientWidth;\r\n      } catch(ex) {\r\n        width=screen.availWidth;\r\n      }\r\n    } else {\r\n      width=screen.width;\r\n    }\r\n\r\n    return width;\r\n  }\r\n\r\n  /**\r\n   * Allow UI to update OSK position and properties\r\n   *\r\n   * @param       {Object=}     p       object with coordinates and userdefined flag\r\n   *\r\n   */\r\n  doResizeMove(p?) {\r\n    this.legacyEvents.callEvent('resizemove', p);\r\n  }\r\n\r\n  /**\r\n   * Allow the UI or page to set the position and size of the OSK\r\n   * and (optionally) override user repositioning or sizing\r\n   *\r\n   * @param       {Object.<string,number>}   p  Array object with position and size of OSK container\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/setRect\r\n  **/\r\n  public setRect(p: OSKRect) {\r\n    if(this._Box == null || this.targetDevice.formFactor != 'desktop') {\r\n      return;\r\n    }\r\n\r\n    var b = this._Box, bs = b.style;\r\n    if('left' in p) {\r\n      this.x = p['left'] - getAbsoluteX(b) + b.offsetLeft;\r\n      bs.left= this.x + 'px';\r\n      this.dfltX=bs.left;\r\n    }\r\n\r\n    if('top' in p) {\r\n      this.y = p['top'] - getAbsoluteY(b) + b.offsetTop;\r\n      bs.top = this.y + 'px';\r\n      this.dfltY=bs.top;\r\n    }\r\n\r\n    //Do not allow user resizing for non-standard keyboards (e.g. EuroLatin)\r\n    if(this.vkbd != null) {\r\n      var d=this.vkbd.kbdDiv, ds=d.style;\r\n\r\n      // Set width, but limit to reasonable value\r\n      if('width' in p) {\r\n        var w=(p['width']-(b.offsetWidth-d.offsetWidth));\r\n        if(w < 0.2*screen.width) {\r\n          w=0.2*screen.width;\r\n        }\r\n        if(w > 0.9*screen.width) {\r\n          w=0.9*screen.width;\r\n        }\r\n        ds.width=w+'px';\r\n        // Use of the `computed` variant is here temporary.\r\n        // Shouldn't use `setSize` for this in the long-term.\r\n        this.setSize(w, this.computedHeight, true);\r\n      }\r\n\r\n      // Set height, but limit to reasonable value\r\n      // This sets the default font size for the OSK in px, but that\r\n      // can be modified at the key text level by setting\r\n      // the font size in em in the kmw-key-text class\r\n      if('height' in p) {\r\n        var h=(p['height']-(b.offsetHeight-d.offsetHeight));\r\n        if(h < 0.1*screen.height) {\r\n          h=0.1*screen.height;\r\n        }\r\n        if(h > 0.5*screen.height) {\r\n          h=0.5*screen.height;\r\n        }\r\n        ds.height=h+'px'; ds.fontSize=(h/8)+'px';\r\n        // Use of the `computed` variant is here temporary.\r\n        // Shouldn't use `setSize` for this in the long-term.\r\n        this.setSize(this.computedWidth, h, true);\r\n      }\r\n\r\n      // Fix or release user resizing\r\n      if('nosize' in p) {\r\n        this.resizingEnabled = !p['nosize'];\r\n      }\r\n\r\n    }\r\n    // Fix or release user dragging\r\n    if('nomove' in p) {\r\n      this.noDrag=p['nomove'];\r\n      this.movementEnabled = !this.noDrag;\r\n    }\r\n    // Save the user-defined OSK size\r\n    this.savePersistedLayout();\r\n  }\r\n\r\n  /**\r\n   * Get position of OSK window\r\n   *\r\n   * @return      {Object.<string,number>}     Array object with OSK window position\r\n  **/\r\n  getPos(): OSKPos {\r\n    var Lkbd=this._Box, p={\r\n      left: this._Visible ? Lkbd.offsetLeft : this.x,\r\n      top: this._Visible ? Lkbd.offsetTop : this.y\r\n    };\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Function     setPos\r\n   * Scope        Private\r\n   * @param       {Object.<string,number>}    p     Array object with OSK left, top\r\n   * Description  Set position of OSK window, but limit to screen\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/setPos\r\n   */\r\n  public setPos(p: OSKPos) {\r\n    if(typeof(this._Box) == 'undefined') {\r\n      return; // I3363 (Build 301)\r\n    }\r\n\r\n    if(this.userPositioned) {\r\n      var Px=p['left'], Py=p['top'];\r\n\r\n      if(typeof(Px) != 'undefined') {\r\n        if(Px < -0.8*this._Box.offsetWidth) {\r\n          Px = -0.8*this._Box.offsetWidth;\r\n        }\r\n        if(this.userPositioned) {\r\n          this._Box.style.left=Px+'px';\r\n          this.x = Px;\r\n        }\r\n      }\r\n      // May not be needed - vertical positioning is handled differently and defaults to input field if off screen\r\n      if(typeof(Py) != 'undefined') {\r\n        if(Py < 0) {\r\n          Py = 0;\r\n        }\r\n\r\n        if(this.userPositioned) {\r\n          this._Box.style.top=Py+'px';\r\n          this.y = Py;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.titleBar.showPin(this.userPositioned);\r\n  }\r\n\r\n  public setDisplayPositioning() {\r\n    var Ls = this._Box.style;\r\n\r\n    Ls.position='absolute';\r\n    // Keep it hidden if not currently displayed.\r\n    if(this.activationModel.activate) {\r\n      Ls.display='block'; //Ls.visibility='visible';\r\n    }\r\n    Ls.left='0px';\r\n    if(this.specifiedPosition || this.userPositioned) {\r\n      Ls.left = this.x+'px';\r\n      Ls.top  = this.y+'px';\r\n    } else {\r\n      let el: HTMLElement = this.typedActivationModel.activationTrigger || null;\r\n\r\n      if(this.dfltX) {\r\n        Ls.left=this.dfltX;\r\n      } else if(typeof el != 'undefined' && el != null) {\r\n        Ls.left=getAbsoluteX(el) + 'px';\r\n      }\r\n\r\n      if(this.dfltY) {\r\n        Ls.top=this.dfltY;\r\n      } else if(typeof el != 'undefined' && el != null) {\r\n        Ls.top=(getAbsoluteY(el) + el.offsetHeight)+'px';\r\n      }\r\n    }\r\n\r\n    // Unset the flag, keeping 'specified position' specific to single\r\n    // presentAtPosition calls.\r\n    this.specifiedPosition = false;\r\n  }\r\n\r\n  /**\r\n   * Display KMW OSK at specified position (returns nothing)\r\n   *\r\n   * @param       {number=}     Px      x-coordinate for OSK rectangle\r\n   * @param       {number=}     Py      y-coordinate for OSK rectangle\r\n   */\r\n  presentAtPosition(Px?: number, Py?: number) {\r\n    if(!this.mayShow()) {\r\n      return;\r\n    }\r\n\r\n    this.specifiedPosition = Px >= 0 || Py >= 0; //probably never happens, legacy support only\r\n    if(this.specifiedPosition) {\r\n      this.x = Px;\r\n      this.y = Py;\r\n    }\r\n\r\n    // Combines the two paths with set positioning.\r\n    this.specifiedPosition = this.specifiedPosition || this.userPositioned;\r\n\r\n    this.present();\r\n  }\r\n\r\n  present() {\r\n    if(!this.mayShow()) {\r\n      return;\r\n    }\r\n\r\n    this.titleBar.showPin(this.userPositioned);\r\n\r\n    super.present();\r\n\r\n    // Allow desktop UI to execute code when showing the OSK\r\n    var Lpos={};\r\n    Lpos['x']=this._Box.offsetLeft;\r\n    Lpos['y']=this._Box.offsetTop;\r\n    Lpos['userLocated']=this.userPositioned;\r\n    this.doShow(Lpos);\r\n  }\r\n\r\n  public startHide(hiddenByUser: boolean) {\r\n    super.startHide(hiddenByUser);\r\n\r\n    if(hiddenByUser) {\r\n      this.savePersistedLayout();  // Save current OSK state, size and position (desktop only)\r\n    }\r\n  }\r\n\r\n  ['show'](bShow?: boolean) {\r\n    if(bShow !== undefined) {\r\n      super['show'](bShow);\r\n    } else {\r\n      super['show']();\r\n    }\r\n    this.savePersistedLayout();\r\n  }\r\n\r\n  /**\r\n   * Function     userPositioned\r\n   * Scope        Public\r\n   * @return      {(boolean|number)}          true if user located\r\n   * Description  Test if OSK window has been repositioned by user\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/userLocated\r\n   */\r\n  public userLocated() {\r\n    return this.userPositioned;\r\n  }\r\n\r\n  public get movementEnabled(): boolean {\r\n    return this.titleDragHandler.enabled;\r\n  }\r\n\r\n  public set movementEnabled(flag: boolean) {\r\n    this.titleDragHandler.enabled = flag;\r\n    this.titleBar.showPin(flag && this.userPositioned);\r\n  }\r\n\r\n  public get resizingEnabled(): boolean {\r\n    return this.resizeDragHandler.enabled;\r\n  }\r\n\r\n  public set resizingEnabled(flag: boolean) {\r\n    this.resizeDragHandler.enabled = flag;\r\n    this.resizeBar.allowResizing(flag);\r\n  }\r\n\r\n  public get isBeingMoved(): boolean {\r\n    return this.titleDragHandler.isActive;\r\n  }\r\n\r\n  public get isBeingResized(): boolean {\r\n    return this.resizeDragHandler.isActive;\r\n  }\r\n\r\n  private enableMoveResizeHandlers() {\r\n    this.titleDragHandler.enabled = !this.noDrag;\r\n    this.resizeDragHandler.enabled = true; // by default.\r\n  }\r\n\r\n  private get titleDragHandler(): MouseDragOperation {\r\n    const _this = this;\r\n\r\n    if(this._moveHandler) {\r\n      return this._moveHandler;\r\n    }\r\n\r\n    this._moveHandler = new class extends MouseDragOperation {\r\n      startX: number;\r\n      startY: number;\r\n\r\n      dragPromise: ManagedPromise<void>;\r\n\r\n      constructor() {\r\n        super('move'); // The type of cursor to use while 'active'.\r\n      }\r\n\r\n      onDragStart() {\r\n        this.startX = _this._Box.offsetLeft;\r\n        this.startY = _this._Box.offsetTop;\r\n\r\n        if(_this.activeKeyboard.keyboard.isCJK) {\r\n          _this.titleBar.setPinCJKOffset();\r\n        }\r\n\r\n        if(this.dragPromise) {\r\n          // We got interrupted during the previous one; allow it to reset, at least!\r\n          this.dragPromise.resolve();\r\n        }\r\n\r\n        this.dragPromise = new ManagedPromise<void>();\r\n        _this.emit('dragmove', this.dragPromise.corePromise);\r\n      }\r\n\r\n      onDragMove(cumulativeX: number, cumulativeY: number) {\r\n        _this.titleBar.showPin(true);\r\n        _this.userPositioned = true;\r\n\r\n        _this._Box.style.left = (this.startX + cumulativeX) + 'px';\r\n        _this._Box.style.top  = (this.startY + cumulativeY) + 'px';\r\n\r\n        var r=_this.getRect();\r\n        _this.setSize(r.width, r.height, true);\r\n        _this.x = r.left;\r\n        _this.y = r.top;\r\n      }\r\n\r\n      onDragRelease() {\r\n        if(_this.vkbd) {\r\n          _this.vkbd.currentKey=null;\r\n        }\r\n\r\n        this.dragPromise.resolve();\r\n\r\n        // Remainder should be done after anything else pending on the Promise.\r\n        this.dragPromise.then(() => {\r\n          _this.userPositioned = true;\r\n          _this.doResizeMove();\r\n          _this.savePersistedLayout();\r\n        });\r\n        this.dragPromise = null;\r\n      }\r\n    }\r\n\r\n    return this._moveHandler;\r\n  }\r\n\r\n  private get resizeDragHandler(): MouseDragOperation {\r\n    const _this = this;\r\n\r\n    if(this._resizeHandler) {\r\n      return this._resizeHandler;\r\n    }\r\n\r\n    this._resizeHandler = new class extends MouseDragOperation {\r\n      startWidth: number;\r\n      startHeight: number;\r\n\r\n      dragPromise: ManagedPromise<void>;\r\n\r\n      constructor() {\r\n        super('se-resize'); // The type of cursor to use while 'active'.\r\n      }\r\n\r\n      onDragStart() {\r\n        this.startWidth = _this.computedWidth;\r\n        this.startHeight = _this.computedHeight;\r\n\r\n        if(this.dragPromise) {\r\n          // We got interrupted during the previous one; allow it to reset, at least!\r\n          this.dragPromise.resolve();\r\n        }\r\n\r\n        this.dragPromise = new ManagedPromise<void>();\r\n        _this.emit('resizemove', this.dragPromise.corePromise);\r\n      }\r\n\r\n      onDragMove(cumulativeX: number, cumulativeY: number) {\r\n        let newWidth  = this.startWidth  + cumulativeX;\r\n        let newHeight = this.startHeight + cumulativeY;\r\n\r\n        // Set the smallest and largest OSK size\r\n        if(newWidth < 0.2*screen.width) {\r\n          newWidth = 0.2*screen.width;\r\n        }\r\n        if(newHeight < 0.1*screen.height) {\r\n          newHeight = 0.1*screen.height;\r\n        }\r\n        if(newWidth > 0.9*screen.width) {\r\n          newWidth = 0.9*screen.width;\r\n        }\r\n        if(newHeight > 0.5*screen.height) {\r\n          newHeight = 0.5*screen.height;\r\n        }\r\n\r\n        // Explicitly set OSK width, height,  and font size - cannot safely rely on scaling from font\r\n        _this.setSize(newWidth, newHeight, true);\r\n      }\r\n\r\n      onDragRelease() {\r\n        if(_this.vkbd) {\r\n          _this.vkbd.currentKey=null;\r\n        }\r\n\r\n        if(_this.vkbd) {\r\n          this.startWidth  = _this.computedWidth;\r\n          this.startHeight = _this.computedHeight;\r\n        }\r\n\r\n        _this.refreshLayout(); // Finalize the resize.\r\n\r\n        this.dragPromise.resolve();\r\n\r\n        // Remainder should be done after anything else pending on the Promise.\r\n        this.dragPromise.then(() => {\r\n          _this.doResizeMove();\r\n          _this.savePersistedLayout();\r\n        });\r\n        this.dragPromise = null;\r\n      }\r\n    }\r\n\r\n    return this._resizeHandler;\r\n  }\r\n}\r\n",
    "import { Codes, DeviceSpec } from '@keymanapp/keyboard-processor';\r\nimport { landscapeView } from 'keyman/engine/dom-utils';\r\n\r\nimport OSKView, { OSKPos, OSKRect } from './oskView.js';\r\nimport { getViewportScale } from '../screenUtils.js';\r\nimport Configuration from '../config/viewConfiguration.js';\r\nimport { StaticActivator } from './activator.js';\r\nimport TwoStateActivator from './twoStateActivator.js';\r\n\r\n/***\r\n   KeymanWeb 10.0\r\n   Copyright 2017 SIL International\r\n***/\r\n\r\nexport default class AnchoredOSKView extends OSKView {\r\n\r\n  // OSK positioning fields\r\n  x: number;\r\n  y: number;\r\n\r\n  private isResizing: boolean = false;\r\n\r\n  public constructor(config: Configuration) {\r\n    if(config.isEmbedded) {\r\n      config.activator = config.activator || new StaticActivator();\r\n    } else {\r\n      config.activator = config.activator || new TwoStateActivator<HTMLElement>();\r\n    }\r\n    super(config);\r\n\r\n    document.body.appendChild(this._Box);\r\n\r\n  }\r\n\r\n  /**\r\n   * Function     _Unload\r\n   * Scope        Private\r\n   * Description  Clears OSK variables prior to exit (JMD 1.9.1 - relocation of local variables 3/9/10)\r\n   */\r\n  _Unload() {\r\n    this.keyboardView = null;\r\n    this.bannerView = null;\r\n    this._Box = null;\r\n  }\r\n\r\n  protected setBoxStyling() {\r\n    const s = this._Box.style;\r\n\r\n    s.zIndex   = '9999';\r\n    s.display  = 'none';\r\n    s.width    = '100%';\r\n    s.position = 'fixed';\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  public refreshLayout(pending?: boolean): void {\r\n    // This function is generally triggered whenever the OSK's dimensions change, among other\r\n    // things.\r\n    if(this.isResizing) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.isResizing = true;\r\n      // This resizes the OSK to what is appropriate for the device's current orientation,\r\n      // which will often trigger a resize event... which in turn triggers a layout refresh.\r\n      //\r\n      // So, we mark and unmark the `isResizing` flag to prevent triggering a circular\r\n      // call-stack chain from this call.\r\n      this.doResize();\r\n    } finally {\r\n      this.isResizing = false;\r\n    }\r\n    super.refreshLayout(pending);\r\n  }\r\n\r\n  protected doResize() {\r\n    if(this.vkbd) {\r\n      let targetOSKHeight = this.getDefaultKeyboardHeight();\r\n      this.setSize(this.getDefaultWidth(), targetOSKHeight + this.banner.height);\r\n    }\r\n  }\r\n\r\n  protected postKeyboardAdjustments() {\r\n    // Initializes the size of a touch keyboard.\r\n    this.doResize();\r\n  }\r\n\r\n  /**\r\n   * Function     restorePosition\r\n   * Scope        Public\r\n   * @param       {boolean?}      keepDefaultPosition  If true, does not reset the default x,y set by `setRect`.\r\n   *                                                   If false or omitted, resets the default x,y as well.\r\n   * Description  Move OSK back to default position, floating under active input element\r\n   */\r\n  ['restorePosition']: (keepDefaultPosition?: boolean) => void = function(this: AnchoredOSKView, keepDefaultPosition?: boolean) {\r\n    return;\r\n  }.bind(this);\r\n\r\n  /**\r\n   * Get the wanted height of the OSK for touch devices (does not include banner height)\r\n   *  @return   {number}    height in pixels\r\n   **/\r\n  getDefaultKeyboardHeight(): number {\r\n    let device = this.targetDevice;\r\n\r\n    // KeymanTouch - get OSK height from device\r\n    if(this.configuration.heightOverride) {\r\n      return this.configuration.heightOverride();\r\n    }\r\n\r\n    /*\r\n      * We've noticed some fairly inconsistent behavior in the past when attempting to base\r\n      * this logic on window.innerWidth/Height, as there can be very unexpected behavior\r\n      * on mobile devices during and after rotation.\r\n      *\r\n      * Online forums (such as https://stackoverflow.com/a/54812656) seem to indicate that\r\n      * document.documentElement.clientWidth/Height seem to be the most stable analogues\r\n      * to a window's size in the situations where it matters for Keyman Engine for Web.\r\n      *\r\n      * That said, an important note:  this gets the dimensions of the _document element_,\r\n      * not the screen or even the window.\r\n      */\r\n    let baseWidth  = document?.documentElement?.clientWidth;\r\n    let baseHeight = document?.documentElement?.clientHeight;\r\n    if(typeof baseWidth == 'undefined') {\r\n      /*\r\n        * Fallback logic.  We _shouldn't_ need this, but it's best to have _something_\r\n        * for the sake of robustness.\r\n        */\r\n      baseWidth  = Math.min(screen.height, screen.width);\r\n      baseHeight = Math.max(screen.height, screen.width);\r\n\r\n      if(landscapeView()) {\r\n        let temp = baseWidth;\r\n        baseWidth = baseHeight;\r\n        baseHeight = temp;\r\n      }\r\n    }\r\n\r\n    var oskHeightLandscapeView=Math.floor(Math.min(baseHeight, baseWidth)/2),\r\n        height=oskHeightLandscapeView;\r\n\r\n    if(device.formFactor == 'phone') {\r\n      /**\r\n       * Assuming the first-pass detection of width and height work correctly, note\r\n       * that these calculations are based on the document's size, not the device's\r\n       * resolution.  This _particularly_ matters for height.\r\n       *\r\n       * - Is the mobile-device browser showing a URL bar?  That's not included.\r\n       * - The standard signal-strength, battery-strength, etc device status bar?\r\n       *   Also not included.\r\n       */\r\n      if(!landscapeView())\r\n        height=Math.floor(baseHeight/2.4);\r\n      else\r\n        height=Math.floor(baseHeight/1.6);  //adjust for aspect ratio, increase slightly for iPhone 5\r\n    }\r\n\r\n    // Correct for viewport scaling (iOS - Android 4.2 does not want this, at least on Galaxy Tab 3))\r\n    if(this.targetDevice.OS == DeviceSpec.OperatingSystem.iOS) {\r\n      height=height/getViewportScale();\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Get the wanted width of the OSK for touch devices\r\n   *\r\n   *  @return   {number}    height in pixels\r\n   **/\r\n  getDefaultWidth(): number {\r\n    let device = this.targetDevice;\r\n\r\n    // KeymanTouch - get OSK height from device\r\n    if(this.configuration.widthOverride) {\r\n      return this.configuration.widthOverride();\r\n    }\r\n\r\n    var width: number;\r\n\r\n    width = document?.documentElement?.clientWidth;\r\n    if(typeof width == 'undefined') {\r\n      if(this.targetDevice.OS == DeviceSpec.OperatingSystem.iOS) {\r\n        width = window.innerWidth;\r\n      } else if(device.OS == DeviceSpec.OperatingSystem.Android) {\r\n        width=screen.availWidth;\r\n      } else {\r\n        width=screen.width;\r\n      }\r\n    }\r\n\r\n    return width;\r\n  }\r\n\r\n  /**\r\n   * Allow the UI or page to set the position and size of the OSK\r\n   * and (optionally) override user repositioning or sizing\r\n   *\r\n   * @param       {Object.<string,number>}   p  Array object with position and size of OSK container\r\n  **/\r\n  ['setRect'](p: OSKRect) {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get position of OSK window\r\n   *\r\n   * @return      {Object.<string,number>}     Array object with OSK window position\r\n  **/\r\n  getPos(): OSKPos {\r\n    var Lkbd=this._Box, p={\r\n      left: this._Visible ? Lkbd.offsetLeft : this.x,\r\n      top: this._Visible ? Lkbd.offsetTop : this.y\r\n    };\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Function     setPos\r\n   * Scope        Private\r\n   * @param       {Object.<string,number>}    p     Array object with OSK left, top\r\n   * Description  Set position of OSK window, but limit to screen, and ignore if  a touch input device\r\n   */\r\n  ['setPos'](p: OSKPos) {\r\n    return; // I3363 (Build 301)\r\n  }\r\n\r\n  protected setDisplayPositioning() {\r\n    let Ls = this._Box.style;\r\n\r\n    // The following code will always be executed except for externally created OSK such as EuroLatin\r\n    if(this.vkbd) {\r\n      Ls.position='fixed';\r\n      Ls.left=Ls.bottom='0px';\r\n      Ls.border='none';\r\n      Ls.borderTop='1px solid gray';\r\n    }\r\n  }\r\n\r\n  public present() {\r\n    super.present();\r\n    this.legacyEvents.callEvent('show', {});\r\n  }\r\n}\r\n",
    "import Activator from './activator.js';\r\n\r\nexport default class SimpleActivator extends Activator {\r\n  private flag: boolean = true;\r\n\r\n  get enabled(): boolean {\r\n    return this.flag;\r\n  }\r\n\r\n  set enabled(value: boolean) {\r\n    // Enabled + activated are the same thing for this class.\r\n    this.activate = value;\r\n  }\r\n\r\n  get activate(): boolean {\r\n    return this.flag;\r\n  }\r\n\r\n  set activate(value: boolean) {\r\n    if(this.flag != value) {\r\n      this.flag = value;\r\n      this.emit('activate', value);\r\n    }\r\n  }\r\n\r\n  get conditionsMet(): boolean {\r\n    return true;\r\n  }\r\n}",
    "import { Codes, DeviceSpec } from '@keymanapp/keyboard-processor';\r\n\r\nimport OSKView, { OSKPos, OSKRect } from './oskView.js';\r\nimport VisualKeyboard from '../visualKeyboard.js';\r\nimport Configuration from '../config/viewConfiguration.js';\r\nimport SimpleActivator from './simpleActivator.js';\r\n\r\n/*\r\n * Keyman is copyright (c) SIL International.  MIT License.\r\n */\r\n\r\n/**\r\n * Defines a version of the OSK that produces an element designed for site-controlled\r\n * insertion into the DOM.  Rather than \"floating\" over the page, this version is inlined\r\n * as part of the host page's layout.\r\n */\r\nexport default class InlinedOSKView extends OSKView {\r\n  public constructor(config: Configuration) {\r\n    config.activator = config.activator || new SimpleActivator();\r\n    super(config);\r\n  }\r\n\r\n  public get element(): HTMLDivElement {\r\n    return this._Box;\r\n  }\r\n\r\n  /**\r\n   * Clears OSK variables prior to exit (JMD 1.9.1 - relocation of local variables 3/9/10)\r\n   *\r\n   * This should probably be merged or incorporated into the `shutdown` method at some point.\r\n   */\r\n  _Unload() {\r\n    this.keyboardView = null;\r\n    this.bannerView = null;\r\n    this._Box = null;\r\n  }\r\n\r\n  protected setBoxStyling() {\r\n    const s = this._Box.style;\r\n    s.display  = 'none';\r\n    // Positioned with no relative offset from its default position.\r\n    // This allows _Box to still serve as an offsetParent for keytip & subkey menu positioning.\r\n    s.position = 'relative';\r\n  }\r\n\r\n  protected postKeyboardAdjustments() {\r\n  }\r\n\r\n  /**\r\n   * Moves the OSK back to default position, floating under active input element\r\n   *\r\n   * Is a long-published API intended solely for use with the FloatingOSKView use pattern.\r\n   * @param  keepDefaultPosition  If true, does not reset the default x,y set by `setRect`.\r\n   *                              If false or omitted, resets the default x,y as well.\r\n   */\r\n  ['restorePosition']: (keepDefaultPosition?: boolean) => void = function(this: InlinedOSKView, keepDefaultPosition?: boolean) {\r\n    return;\r\n  }.bind(this);\r\n\r\n  /**\r\n   * Get the default height for the OSK\r\n   * @return  height in pixels\r\n   **/\r\n  getDefaultKeyboardHeight(): number {\r\n    if(this.keyboardView instanceof VisualKeyboard) {\r\n      return this.keyboardView.height;\r\n    } else {\r\n      // Should probably refine, but it's a decent stopgap.\r\n      return this.computedHeight;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the default width for the OSK\r\n   * @return width in pixels\r\n   **/\r\n  getDefaultWidth(): number {\r\n    return this.computedWidth;\r\n  }\r\n\r\n  /**\r\n   * Allow the UI or page to set the position and size of the OSK\r\n   * and (optionally) override user repositioning or sizing\r\n   *\r\n   * Designed solely for use with the FloatingOSKView use pattern, but is a\r\n   * long-standing API endpoint that needs preservation.\r\n   *\r\n   * @param  p  Array object with position and size of OSK container\r\n  **/\r\n  ['setRect'](p: OSKRect) {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get position of OSK window\r\n   *\r\n   * @return Array object with OSK window position\r\n  **/\r\n  getPos(): OSKPos {\r\n    var Lkbd=this._Box, p={\r\n      left: this._Visible ? Lkbd.offsetLeft : undefined,\r\n      top:  this._Visible ? Lkbd.offsetTop  : undefined\r\n    };\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Set position of OSK window, but limited to the screen.\r\n   *\r\n   * Designed solely for use with the FloatingOSKView use pattern, but is a\r\n   * long-standing API endpoint that needs preservation.\r\n   * @param  p Array object with OSK left, top\r\n   */\r\n  ['setPos'](p: OSKPos) {\r\n    return; // I3363 (Build 301)\r\n  }\r\n\r\n  public present() {\r\n    super.present();\r\n\r\n    this.legacyEvents.callEvent('show', {});\r\n  }\r\n\r\n  protected setDisplayPositioning() {\r\n    // no-op; an inlined OSK cannot control its own positioning.\r\n  }\r\n\r\n  protected allowsDeviceChange(newSpec: DeviceSpec): boolean {\r\n    return true;\r\n  }\r\n}\r\n",
    "import {\r\n  ViewConfiguration,\r\n  AnchoredOSKView,\r\n  FloatingOSKView,\r\n  FloatingOSKViewConfiguration,\r\n  InlinedOSKView\r\n} from \"keyman/engine/osk\";\r\nimport KeymanEngine from \"./keymanEngine.js\";\r\n\r\nfunction buildBaseOskConfiguration(engine: KeymanEngine) {\r\n  return {\r\n    hostDevice: engine.config.hostDevice,\r\n    pathConfig: engine.config.paths,\r\n    predictionContextManager: engine.contextManager.predictionContext,\r\n    isEmbedded: false\r\n  };\r\n};\r\n\r\nclass PublishedAnchoredOSKView extends AnchoredOSKView {\r\n  constructor(engine: KeymanEngine, config?: ViewConfiguration) {\r\n    let finalConfig = {\r\n      ...buildBaseOskConfiguration(engine),\r\n      ...(config || {})\r\n    };\r\n\r\n    super(finalConfig);\r\n  }\r\n}\r\n\r\nclass PublishedFloatingOSKView extends FloatingOSKView {\r\n  constructor(engine: KeymanEngine, config?: FloatingOSKViewConfiguration) {\r\n    let finalConfig: FloatingOSKViewConfiguration = {\r\n      ...buildBaseOskConfiguration(engine),\r\n      ...(config || {})\r\n    };\r\n\r\n    super(finalConfig);\r\n  }\r\n}\r\n\r\nclass PublishedInlineOSKView extends InlinedOSKView {\r\n  constructor(engine: KeymanEngine, config?: ViewConfiguration) {\r\n    let finalConfig: ViewConfiguration = {\r\n      ...buildBaseOskConfiguration(engine),\r\n      ...(config || {})\r\n    };\r\n\r\n    super(finalConfig);\r\n  }\r\n}\r\n\r\nexport { PublishedAnchoredOSKView as AnchoredOSKView };\r\nexport { PublishedFloatingOSKView as FloatingOSKView };\r\nexport { PublishedInlineOSKView   as InlinedOSKView };\r\n\r\n",
    "import { OutputTarget as OutputTargetBase } from \"@keymanapp/keyboard-processor\";\r\nimport EventEmitter from 'eventemitter3';\r\n\r\nexport default abstract class OutputTarget<EventMap extends EventEmitter.ValidEventTypes> extends OutputTargetBase {\r\n  // JS/TS can't do true multiple inheritance, so we maintain class events on a readonly field.\r\n  public readonly events: EventEmitter<EventMap, this> = new EventEmitter<EventMap, this>();\r\n\r\n  /**\r\n   * A field that may be used to track whether or not the represented context has changed over an\r\n   * arbitrary period of time.\r\n   */\r\n  public changed = false;\r\n\r\n  /**\r\n   * Returns the underlying element / document modeled by the wrapper.\r\n   */\r\n  abstract getElement(): HTMLElement;\r\n\r\n  public focus(): void {\r\n    const ele = this.getElement();\r\n    if(ele.focus) {\r\n      ele.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Denotes when the represented element is forcing a text scroll via focus manipulation.\r\n   * As the intent is not to change the focused element, but just to have the browser update\r\n   * the scroll location, standard focus handlers (for updating the active context) should\r\n   * not deactivate the element while this state is active.\r\n   */\r\n  isForcingScroll(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * A helper method for doInputEvent; creates a simple common event and default dispatching.\r\n   * @param elem\r\n   */\r\n  protected dispatchInputEventOn(elem: HTMLElement) {\r\n    let event: InputEvent;\r\n\r\n    // `undefined` in pre-Chrome Edge and Chrome for Android before version 60.\r\n    if(window['InputEvent']) { // can't condition on the type directly; TS optimizes that out.\r\n      event = new InputEvent('input', {\"bubbles\": true, \"cancelable\": false});\r\n    }\r\n\r\n    if(elem && event) {\r\n      elem.dispatchEvent(event);\r\n    }\r\n  }\r\n}",
    "import OutputTarget from './outputTarget.js';\r\n\r\ninterface EventMap  {\r\n  /**\r\n   * This event will be raised when a newline is received by wrapped elements not of\r\n   * the 'search' or 'submit' types.\r\n   *\r\n   * Original code this is replacing:\r\n   ```\r\n      // Allows compiling this separately from the main body of KMW.\r\n      // TODO:  rework class to accept a class-static 'callback' from the DOM module that this can call.\r\n      //        Would eliminate the need for this 'static' reference.\r\n      //        Only strongly matters once we better modularize KMW, with web-dom vs web-dom-targets vs web-core, etc.\r\n      if(com.keyman[\"singleton\"]) {\r\n        com.keyman[\"singleton\"].domManager.moveToNext(false);\r\n      }\r\n   ```\r\n   * This does not belong in a modularized version of this class; it must be supplied\r\n   * by the consuming top-level products instead.\r\n   */\r\n  'unhandlednewline': (element: HTMLInputElement) => void\r\n}\r\n\r\nexport default class Input extends OutputTarget<EventMap> {\r\n  root: HTMLInputElement;\r\n\r\n  /**\r\n   * Tracks the most recently-cached selection start index.\r\n   */\r\n  private _cachedSelectionStart: number\r\n\r\n  /**\r\n   * Tracks the most recently processed, extended-string-based selection start index.\r\n   * When the element's selectionStart value changes, this should be invalidated.\r\n   */\r\n  private processedSelectionStart: number;\r\n\r\n  /**\r\n   * Tracks the most recently processed, extended-string-based selection end index.\r\n   * When the element's selectionEnd value changes, this should be invalidated.\r\n   */\r\n  private processedSelectionEnd: number;\r\n\r\n  /**\r\n   * Set, then unset within the `forceScroll` method in order to facilitate the\r\n   * `isForcingScroll` flag.\r\n   */\r\n  private _activeForcedScroll: boolean;\r\n\r\n  constructor(ele: HTMLInputElement) {\r\n    super();\r\n\r\n    this.root = ele;\r\n    this._cachedSelectionStart = -1;\r\n  }\r\n\r\n  get isSynthetic(): boolean {\r\n    return false;\r\n  }\r\n\r\n  getElement(): HTMLInputElement {\r\n    return this.root;\r\n  }\r\n\r\n  clearSelection(): void {\r\n    // Processes our codepoint-based variants of selectionStart and selectionEnd.\r\n    this.getCaret(); // updates processedSelectionStart if required\r\n    this.root.value = this.root.value._kmwSubstring(0, this.processedSelectionStart) + this.root.value._kmwSubstring(this.processedSelectionEnd); //I3319\r\n\r\n    this.setCaret(this.processedSelectionStart);\r\n  }\r\n\r\n  isSelectionEmpty(): boolean {\r\n    return this.root.selectionStart == this.root.selectionEnd;\r\n  }\r\n\r\n  hasSelection(): boolean {\r\n    return true;\r\n  }\r\n\r\n  invalidateSelection() {\r\n    // Since .selectionStart will never return this value, we use it to indicate\r\n    // the need to refresh our processed indices.\r\n    this._cachedSelectionStart = -1;\r\n  }\r\n\r\n  getCaret(): number {\r\n    if(this.root.selectionStart != this._cachedSelectionStart) {\r\n      this._cachedSelectionStart = this.root.selectionStart; // KMW-1\r\n      this.processedSelectionStart = this.root.value._kmwCodeUnitToCodePoint(this.root.selectionStart); // I3319\r\n      this.processedSelectionEnd = this.root.value._kmwCodeUnitToCodePoint(this.root.selectionEnd);     // I3319\r\n    }\r\n    return this.root.selectionDirection == 'forward' ? this.processedSelectionEnd : this.processedSelectionStart;\r\n  }\r\n\r\n  getDeadkeyCaret(): number {\r\n    return this.getCaret();\r\n  }\r\n\r\n  setCaret(caret: number) {\r\n    this.setSelection(caret, caret, \"none\");\r\n  }\r\n\r\n  setSelection(start: number, end: number, direction: \"forward\" | \"backward\" | \"none\") {\r\n    let domStart = this.root.value._kmwCodePointToCodeUnit(start);\r\n    let domEnd = this.root.value._kmwCodePointToCodeUnit(end);\r\n    this.root.setSelectionRange(domStart, domEnd, direction);\r\n\r\n    this.processedSelectionStart = start;\r\n    this.processedSelectionEnd = end;\r\n\r\n    this.forceScroll();\r\n\r\n    this.root.setSelectionRange(domStart, domEnd, direction);\r\n  }\r\n\r\n  forceScroll() {\r\n    // Only executes when com.keyman.DOMEventHandlers is defined.\r\n    //\r\n    // We bypass this whenever operating in the embedded format.\r\n    const element = this.getElement();\r\n\r\n    let selectionStart = element.selectionStart;\r\n    let selectionEnd = element.selectionEnd;\r\n\r\n    this._activeForcedScroll = true;\r\n\r\n    try {\r\n      //Forces scrolling; the re-focus triggers the scroll, at least.\r\n      element.blur();\r\n      element.focus();\r\n    } finally {\r\n      // On Edge, it appears that the blur/focus combination will reset the caret position\r\n      // under certain scenarios during unit tests.  So, we re-set it afterward.\r\n      element.selectionStart = selectionStart;\r\n      element.selectionEnd = selectionEnd;\r\n      this._activeForcedScroll = false;\r\n    }\r\n  }\r\n\r\n  isForcingScroll(): boolean {\r\n    return this._activeForcedScroll;\r\n  }\r\n\r\n  getSelectionDirection(): \"forward\" | \"backward\" | \"none\" {\r\n    return this.root.selectionDirection;\r\n  }\r\n\r\n  getTextBeforeCaret(): string {\r\n    this.getCaret();\r\n    return this.getText()._kmwSubstring(0, this.processedSelectionStart);\r\n  }\r\n\r\n  getSelectedText(): string {\r\n    this.getCaret();\r\n    return this.getText()._kmwSubstring(this.processedSelectionStart, this.processedSelectionEnd);\r\n  }\r\n\r\n  setTextBeforeCaret(text: string) {\r\n    this.getCaret();\r\n    let selectionLength = this.processedSelectionEnd - this.processedSelectionStart;\r\n    let direction = this.getSelectionDirection();\r\n    let newCaret = text._kmwLength();\r\n    this.root.value = text + this.getText()._kmwSubstring(this.processedSelectionStart);\r\n\r\n    this.setSelection(newCaret, newCaret + selectionLength, direction);\r\n  }\r\n\r\n  protected setTextAfterCaret(s: string) {\r\n    let c = this.getCaret();\r\n    let direction = this.getSelectionDirection();\r\n\r\n    this.root.value = this.getTextBeforeCaret() + s;\r\n    this.setSelection(this.processedSelectionStart, this.processedSelectionEnd, direction);\r\n  }\r\n\r\n  getTextAfterCaret(): string {\r\n    this.getCaret();\r\n    return this.getText()._kmwSubstring(this.processedSelectionEnd);\r\n  }\r\n\r\n  getText(): string {\r\n    return this.root.value;\r\n  }\r\n\r\n  deleteCharsBeforeCaret(dn: number) {\r\n    if(dn > 0) {\r\n      let curText = this.getTextBeforeCaret();\r\n      let caret = this.processedSelectionStart;\r\n\r\n      if(dn > caret) {\r\n        dn = caret;\r\n      }\r\n\r\n      this.adjustDeadkeys(-dn);\r\n      this.setTextBeforeCaret(curText.kmwSubstring(0, caret - dn));\r\n      this.setCaret(caret - dn);\r\n    }\r\n  }\r\n\r\n  insertTextBeforeCaret(s: string) {\r\n    if(!s) {\r\n      return;\r\n    }\r\n\r\n    let caret = this.getCaret();\r\n    let front = this.getTextBeforeCaret();\r\n    let back = this.getText()._kmwSubstring(this.processedSelectionStart);\r\n\r\n    this.adjustDeadkeys(s._kmwLength());\r\n    this.root.value = front + s + back;\r\n    this.setCaret(caret + s._kmwLength());\r\n  }\r\n\r\n  handleNewlineAtCaret(): void {\r\n    const inputEle = this.root;\r\n    // Can't occur for Mocks - just Input types.\r\n    if (inputEle && (inputEle.type == 'search' || inputEle.type == 'submit')) {\r\n      inputEle.disabled=false;\r\n      inputEle.form.submit();\r\n    } else {\r\n      this.events.emit('unhandlednewline', inputEle);\r\n    }\r\n  }\r\n\r\n  doInputEvent() {\r\n    this.dispatchInputEventOn(this.root);\r\n  }\r\n}",
    "import OutputTarget from './outputTarget.js';\r\n\r\nexport default class TextArea extends OutputTarget<{}> {\r\n  root: HTMLTextAreaElement;\r\n\r\n  /**\r\n   * Tracks the most recently-cached selection start index.\r\n   */\r\n  private _cachedSelectionStart: number\r\n\r\n  /**\r\n   * Tracks the most recently processed, extended-string-based selection start index.\r\n   * When the element's selectionStart value changes, this should be invalidated.\r\n   */\r\n  private processedSelectionStart: number;\r\n\r\n  /**\r\n   * Tracks the most recently processed, extended-string-based selection end index.\r\n   * When the element's selectionEnd value changes, this should be invalidated.\r\n   */\r\n  private processedSelectionEnd: number;\r\n\r\n  /**\r\n   * Set, then unset within the `forceScroll` method in order to facilitate the\r\n   * `isForcingScroll` flag.\r\n   */\r\n  private _activeForcedScroll: boolean;\r\n\r\n  constructor(ele: HTMLTextAreaElement) {\r\n    super();\r\n\r\n    this.root = ele;\r\n    this._cachedSelectionStart = -1;\r\n  }\r\n\r\n  get isSynthetic(): boolean {\r\n    return false;\r\n  }\r\n\r\n  getElement(): HTMLTextAreaElement {\r\n    return this.root;\r\n  }\r\n\r\n  clearSelection(): void {\r\n    // Processes our codepoint-based variants of selectionStart and selectionEnd.\r\n    this.getCaret(); // updates processedSelectionStart if required\r\n    this.root.value = this.root.value._kmwSubstring(0, this.processedSelectionStart) + this.root.value._kmwSubstring(this.processedSelectionEnd); //I3319\r\n\r\n    this.setCaret(this.processedSelectionStart);\r\n  }\r\n\r\n  isSelectionEmpty(): boolean {\r\n    return this.root.selectionStart == this.root.selectionEnd;\r\n  }\r\n\r\n  hasSelection(): boolean {\r\n    return true;\r\n  }\r\n\r\n  invalidateSelection() {\r\n    // Since .selectionStart will never return this value, we use it to indicate\r\n    // the need to refresh our processed indices.\r\n    this._cachedSelectionStart = -1;\r\n  }\r\n\r\n  getCaret(): number {\r\n    if(this.root.selectionStart != this._cachedSelectionStart) {\r\n      this._cachedSelectionStart = this.root.selectionStart; // KMW-1\r\n      this.processedSelectionStart = this.root.value._kmwCodeUnitToCodePoint(this.root.selectionStart); // I3319\r\n      this.processedSelectionEnd = this.root.value._kmwCodeUnitToCodePoint(this.root.selectionEnd);     // I3319\r\n    }\r\n    return this.root.selectionDirection == 'forward' ? this.processedSelectionEnd : this.processedSelectionStart;\r\n  }\r\n\r\n  getDeadkeyCaret(): number {\r\n    return this.getCaret();\r\n  }\r\n\r\n  setCaret(caret: number) {\r\n    this.setSelection(caret, caret, \"none\");\r\n  }\r\n\r\n  setSelection(start: number, end: number, direction: \"forward\" | \"backward\" | \"none\") {\r\n    let domStart = this.root.value._kmwCodePointToCodeUnit(start);\r\n    let domEnd = this.root.value._kmwCodePointToCodeUnit(end);\r\n    this.root.setSelectionRange(domStart, domEnd, direction);\r\n\r\n    this.processedSelectionStart = start;\r\n    this.processedSelectionEnd = end;\r\n\r\n    this.forceScroll();\r\n\r\n    this.root.setSelectionRange(domStart, domEnd, direction);\r\n  }\r\n\r\n  forceScroll() {\r\n    // Only executes when com.keyman.DOMEventHandlers is defined.\r\n    //\r\n    // We bypass this whenever operating in the embedded format.\r\n    const element = this.getElement();\r\n\r\n    let selectionStart = element.selectionStart;\r\n    let selectionEnd = element.selectionEnd;\r\n\r\n    this._activeForcedScroll = true;\r\n\r\n    try {\r\n      //Forces scrolling; the re-focus triggers the scroll, at least.\r\n      element.blur();\r\n      element.focus();\r\n    } finally {\r\n      // On Edge, it appears that the blur/focus combination will reset the caret position\r\n      // under certain scenarios during unit tests.  So, we re-set it afterward.\r\n      element.selectionStart = selectionStart;\r\n      element.selectionEnd = selectionEnd;\r\n      this._activeForcedScroll = false;\r\n    }\r\n  }\r\n\r\n  isForcingScroll(): boolean {\r\n    return this._activeForcedScroll;\r\n  }\r\n\r\n  getSelectionDirection(): \"forward\" | \"backward\" | \"none\" {\r\n    return this.root.selectionDirection;\r\n  }\r\n\r\n  getTextBeforeCaret(): string {\r\n    this.getCaret();\r\n    return this.getText()._kmwSubstring(0, this.processedSelectionStart);\r\n  }\r\n\r\n  setTextBeforeCaret(text: string) {\r\n    this.getCaret();\r\n    let selectionLength = this.processedSelectionEnd - this.processedSelectionStart;\r\n    let direction = this.getSelectionDirection();\r\n    let newCaret = text._kmwLength();\r\n    this.root.value = text + this.getText()._kmwSubstring(this.processedSelectionStart);\r\n\r\n    this.setSelection(newCaret, newCaret + selectionLength, direction);\r\n  }\r\n\r\n  protected setTextAfterCaret(s: string) {\r\n    let c = this.getCaret();\r\n    let direction = this.getSelectionDirection();\r\n\r\n    this.root.value = this.getTextBeforeCaret() + s;\r\n    this.setSelection(this.processedSelectionStart, this.processedSelectionEnd, direction);\r\n  }\r\n\r\n  getTextAfterCaret(): string {\r\n    this.getCaret();\r\n    return this.getText()._kmwSubstring(this.processedSelectionEnd);\r\n  }\r\n\r\n  getSelectedText(): string {\r\n    this.getCaret();\r\n    return this.getText()._kmwSubstring(this.processedSelectionStart, this.processedSelectionEnd);\r\n  }\r\n\r\n  getText(): string {\r\n    return this.root.value;\r\n  }\r\n\r\n  deleteCharsBeforeCaret(dn: number) {\r\n    if(dn > 0) {\r\n      let curText = this.getTextBeforeCaret();\r\n      let caret = this.processedSelectionStart;\r\n\r\n      if(dn > caret) {\r\n        dn = caret;\r\n      }\r\n\r\n      this.adjustDeadkeys(-dn);\r\n      this.setTextBeforeCaret(curText.kmwSubstring(0, caret - dn));\r\n      this.setCaret(caret - dn);\r\n    }\r\n  }\r\n\r\n  insertTextBeforeCaret(s: string) {\r\n    if(!s) {\r\n      return;\r\n    }\r\n\r\n    let caret = this.getCaret();\r\n    let front = this.getTextBeforeCaret();\r\n    let back = this.getText()._kmwSubstring(this.processedSelectionStart);\r\n\r\n    this.adjustDeadkeys(s._kmwLength());\r\n    this.root.value = front + s + back;\r\n    this.setCaret(caret + s._kmwLength());\r\n  }\r\n\r\n  handleNewlineAtCaret(): void {\r\n    this.insertTextBeforeCaret('\\n');\r\n  }\r\n\r\n  doInputEvent() {\r\n    this.dispatchInputEventOn(this.root);\r\n  }\r\n}",
    "import OutputTarget from './outputTarget.js';\r\n\r\nclass SelectionCaret {\r\n  node: Node;\r\n  offset: number;\r\n\r\n  constructor(node, offset) {\r\n    this.node = node;\r\n    this.offset = offset;\r\n  }\r\n}\r\n\r\nclass SelectionRange {\r\n  start: SelectionCaret;\r\n  end: SelectionCaret;\r\n\r\n  constructor(start, end) {\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n}\r\n\r\nclass StyleCommand {\r\n  cmd: string;\r\n  stateType: number;\r\n  cache: string|boolean;\r\n\r\n  constructor(c: string, s:number) {\r\n    this.cmd = c;\r\n    this.stateType = s;\r\n  }\r\n}\r\n\r\nexport default class DesignIFrame extends OutputTarget<{}> {\r\n  root: HTMLIFrameElement;\r\n  doc: Document;\r\n  docRoot: HTMLElement;\r\n\r\n  commandCache: StyleCommand[];\r\n\r\n  constructor(ele: HTMLIFrameElement) {\r\n    super();\r\n    this.root = ele;\r\n\r\n    if(ele.contentWindow && ele.contentWindow.document && ele.contentWindow.document.designMode == 'on') {\r\n      this.doc = ele.contentWindow.document;\r\n      this.docRoot = ele.contentWindow.document.documentElement;\r\n    } else {\r\n      throw \"Specified IFrame is not in design-mode!\";\r\n    }\r\n  }\r\n\r\n  get isSynthetic(): boolean {\r\n    return false;\r\n  }\r\n\r\n  getElement(): HTMLIFrameElement {\r\n    return this.root;\r\n  }\r\n\r\n  focus(): void {\r\n    this.doc.defaultView.focus(); // I3363 (Build 301)\r\n  }\r\n\r\n  isSelectionEmpty(): boolean {\r\n    if(!this.hasSelection()) {\r\n      return true;\r\n    }\r\n\r\n    return this.doc.getSelection().isCollapsed;\r\n  }\r\n\r\n  hasSelection(): boolean {\r\n    let Lsel = this.doc.getSelection();\r\n    let outerSel = document.getSelection();\r\n\r\n    // If the outer doc's selection matches, we're active.\r\n    if(outerSel.anchorNode == Lsel.anchorNode && outerSel.focusNode == Lsel.focusNode) {\r\n      return true;\r\n    } else {\r\n      // Problem:  for testing, we can't enforce the ideal (ie: first) condition.\r\n      // Technically, the IFrame _will_ always have its own internal selection, though... so... it kinda works?\r\n      return true;\r\n    }\r\n  }\r\n\r\n  clearSelection(): void {\r\n    if(this.hasSelection()) {\r\n      let Lsel = this.doc.getSelection();\r\n\r\n      if(!Lsel.isCollapsed) {\r\n        Lsel.deleteFromDocument();  // I2134, I2192\r\n      }\r\n    } else {\r\n      console.warn(\"Attempted to clear an unowned Selection!\");\r\n    }\r\n  }\r\n\r\n  invalidateSelection(): void { /* No cache maintenance needed here, partly because\r\n                                  * it's impossible to cache a Selection; it mutates.\r\n                                  */  }\r\n\r\n  getCarets(): SelectionRange {\r\n    let Lsel = this.doc.getSelection();\r\n    let code = Lsel.anchorNode.compareDocumentPosition(Lsel.focusNode);\r\n\r\n    if(Lsel.isCollapsed) {\r\n      let caret = new SelectionCaret(Lsel.anchorNode, Lsel.anchorOffset);\r\n      return new SelectionRange(caret, caret);\r\n    } else {\r\n      let anchor = new SelectionCaret(Lsel.anchorNode, Lsel.anchorOffset);\r\n      let focus = new SelectionCaret(Lsel.focusNode, Lsel.focusOffset);\r\n\r\n      if(anchor.node == focus.node) {\r\n        code = (focus.offset - anchor.offset > 0) ? 2 : 4;\r\n      }\r\n\r\n      if(code & 2) {\r\n        return new SelectionRange(anchor, focus);\r\n      } else { // Default\r\n        // can test against code & 4 to ensure Focus is before anchor, though.\r\n        return new SelectionRange(focus, anchor);\r\n      }\r\n    }\r\n  }\r\n\r\n  getDeadkeyCaret(): number {\r\n    return this.getTextBeforeCaret().kmwLength();\r\n  }\r\n\r\n  getTextBeforeCaret(): string {\r\n    if(!this.hasSelection()) {\r\n      return this.getText();\r\n    }\r\n\r\n    let caret = this.getCarets().start;\r\n\r\n    if(caret.node.nodeType != 3) {\r\n      return ''; // Must be a text node to provide a context.\r\n    }\r\n\r\n    return caret.node.textContent.substr(0, caret.offset);\r\n  }\r\n\r\n  getSelectedText(): string {\r\n    // TODO:  figure out the proper implementation.\r\n    // KMW 16 and before behavior may be maintained by just returning the empty string.\r\n    return '';\r\n  }\r\n\r\n  getTextAfterCaret(): string {\r\n    if(!this.hasSelection()) {\r\n      return '';\r\n    }\r\n\r\n    let caret = this.getCarets().end;\r\n\r\n    if(caret.node.nodeType != 3) {\r\n      return ''; // Must be a text node to provide a context.\r\n    }\r\n\r\n    return caret.node.textContent.substr(caret.offset);\r\n  }\r\n\r\n  getText(): string {\r\n    return this.docRoot.innerText;\r\n  }\r\n\r\n  deleteCharsBeforeCaret(dn: number) {\r\n    if(!this.hasSelection() || dn <= 0) {\r\n      return;\r\n    }\r\n\r\n    let start = this.getCarets().start;\r\n\r\n    // Bounds-check on the number of chars to delete.\r\n    if(dn > start.offset) {\r\n      dn = start.offset;\r\n    }\r\n\r\n    if(start.node.nodeType != 3) {\r\n      console.warn(\"Deletion of characters requested without available context!\");\r\n      return; // No context to delete characters from.\r\n    }\r\n\r\n    let range = this.doc.createRange();\r\n    let dnOffset = start.offset - start.node.nodeValue.substr(0, start.offset)._kmwSubstr(-dn).length;\r\n\r\n    range.setStart(start.node, dnOffset);\r\n    range.setEnd(start.node, start.offset);\r\n\r\n    this.adjustDeadkeys(-dn);\r\n    range.deleteContents();\r\n    // No need to reposition the caret - the DOM will auto-move the selection accordingly, since\r\n    // we didn't use the selection to delete anything.\r\n  }\r\n\r\n  insertTextBeforeCaret(s: string) {\r\n    if(!this.hasSelection()) {\r\n      return;\r\n    }\r\n\r\n    let start = this.getCarets().start;\r\n    let delta = s._kmwLength();\r\n    let Lsel = this.doc.getSelection();\r\n\r\n    if(delta == 0) {\r\n      return;\r\n    }\r\n\r\n    this.adjustDeadkeys(delta);\r\n\r\n    // While Selection.extend() was really nice for this, IE didn't support it whatsoever.\r\n    // However, IE (11, at least) DID support setting selections via ranges, so we were still\r\n    // able to manage the caret properly.\r\n    //\r\n    // TODO:  double-check that it was only IE-motivated, re-implement with Selection.extend().\r\n    let finalCaret = this.root.ownerDocument.createRange();\r\n\r\n    if(start.node.nodeType == 3) {\r\n      let textStart = <Text> start.node;\r\n      textStart.insertData(start.offset, s);\r\n      finalCaret.setStart(textStart, start.offset + s.length);\r\n    } else {\r\n      // Create a new text node - empty control\r\n      var n = this.doc.createTextNode(s);\r\n\r\n      let range = this.doc.createRange();\r\n      range.setStart(start.node, start.offset);\r\n      range.collapse(true);\r\n      range.insertNode(n);\r\n      finalCaret.setStart(n, s.length);\r\n    }\r\n\r\n    finalCaret.collapse(true);\r\n    Lsel.removeAllRanges();\r\n    try {\r\n      Lsel.addRange(finalCaret);\r\n    } catch(e) {\r\n      // Chrome (through 4.0 at least) throws an exception because it has not synchronised its content with the selection.\r\n      // scrollIntoView synchronises the content for selection\r\n      start.node.parentElement.scrollIntoView();\r\n      Lsel.addRange(finalCaret);\r\n    }\r\n    Lsel.collapseToEnd();\r\n  }\r\n\r\n  handleNewlineAtCaret(): void {\r\n    // TODO:  Implement.\r\n    //\r\n    // As it turns out, we never had an implementation for handling newline inputs from the OSK for this element type.\r\n    // At least this way, it's more explicit.\r\n    //\r\n    // Note:  consult \"// Create a new text node - empty control\" case in insertTextBeforeCaret -\r\n    // this helps to handle the browser-default implementation of newline handling.  In particular,\r\n    // entry of the first character after a newline.\r\n    //\r\n    // If raw newlines are entered into the HTML, but as with usual HTML, they're interpreted as excess whitespace and\r\n    // have no effect.  We need to add DOM elements for a functional newline.\r\n  }\r\n\r\n  protected setTextAfterCaret(s: string) {\r\n    if(!this.hasSelection()) {\r\n      return;\r\n    }\r\n\r\n    let caret = this.getCarets().end;\r\n    let delta = s._kmwLength();\r\n    let Lsel = this.doc.getSelection();\r\n\r\n    if(delta == 0) {\r\n      return;\r\n    }\r\n\r\n    // This is designed explicitly for use in direct-setting operations; deadkeys\r\n    // will be handled after this method.\r\n\r\n    if(caret.node.nodeType == 3) {\r\n      let textStart = <Text> caret.node;\r\n      textStart.replaceData(caret.offset, textStart.length, s);\r\n    } else {\r\n      // Create a new text node - empty control\r\n      var n = caret.node.ownerDocument.createTextNode(s);\r\n\r\n      let range = this.root.ownerDocument.createRange();\r\n      range.setStart(caret.node, caret.offset);\r\n      range.collapse(true);\r\n      range.insertNode(n);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     saveProperties\r\n   * Scope        Private\r\n   * Description  Build and create list of styles that can be applied in iframes\r\n   */\r\n  saveProperties() {\r\n    // Formerly _CacheCommands.\r\n    var _CacheableCommands=[\r\n      new StyleCommand('backcolor',1), new StyleCommand('fontname',1), new StyleCommand('fontsize',1),\r\n      new StyleCommand('forecolor',1), new StyleCommand('bold',0), new StyleCommand('italic',0),\r\n      new StyleCommand('strikethrough',0), new StyleCommand('subscript',0),\r\n      new StyleCommand('superscript',0), new StyleCommand('underline',0)\r\n    ];\r\n\r\n    if(this.doc.defaultView) {\r\n      _CacheableCommands.push(new StyleCommand('hilitecolor',1));\r\n    }\r\n\r\n    for(var n=0; n < _CacheableCommands.length; n++) { // I1511 - array prototype extended\r\n      let cmd = _CacheableCommands[n];\r\n      //KeymanWeb._Debug('Command:'+_CacheableCommands[n][0]);\r\n      if(cmd.stateType == 1) {\r\n        cmd.cache = this.doc.queryCommandValue(cmd.cmd);\r\n      } else {\r\n        cmd.cache = this.doc.queryCommandState(cmd.cmd);\r\n      }\r\n    }\r\n    this.commandCache = _CacheableCommands;\r\n  }\r\n\r\n  /**\r\n   * Function     restoreProperties\r\n   * Scope        Private\r\n   * Description  Restore styles in IFRAMEs (??)\r\n   */\r\n  restoreProperties(_func?: () => void): void {\r\n    // Formerly _CacheCommandsReset.\r\n    if(!this.commandCache) {\r\n      console.error(\"No command cache exists to restore!\");\r\n    }\r\n\r\n    for(var n=0; n < this.commandCache.length; n++) { // I1511 - array prototype extended\r\n      let cmd = this.commandCache[n];\r\n\r\n      //KeymanWeb._Debug('ResetCacheCommand:'+_CacheableCommands[n][0]+'='+_CacheableCommands[n][2]);\r\n      if(cmd.stateType == 1) {\r\n        if(this.doc.queryCommandValue(cmd.cmd) != cmd.cache) {\r\n          if(_func) {\r\n            _func();\r\n          }\r\n          this.doc.execCommand(cmd.cmd, false, <string> cmd.cache);\r\n        }\r\n      } else if(this.doc.queryCommandState(cmd.cmd) != cmd.cache) {\r\n        if(_func) {\r\n          _func();\r\n        }\r\n        //KeymanWeb._Debug('executing command '+_CacheableCommand[n][0]);\r\n        this.doc.execCommand(cmd.cmd, false, null);\r\n      }\r\n    }\r\n  }\r\n\r\n  doInputEvent() {\r\n    // Root = the iframe, the outermost component and the one we were originally told to attach to.\r\n    this.dispatchInputEventOn(this.root);\r\n  }\r\n}",
    "import OutputTarget from './outputTarget.js';\r\n\r\nclass SelectionCaret {\r\n  node: Node;\r\n  offset: number;\r\n\r\n  constructor(node, offset) {\r\n    this.node = node;\r\n    this.offset = offset;\r\n  }\r\n}\r\n\r\nclass SelectionRange {\r\n  start: SelectionCaret;\r\n  end: SelectionCaret;\r\n\r\n  constructor(start, end) {\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n}\r\n\r\nexport default class ContentEditable extends OutputTarget<{}> {\r\n  root: HTMLElement;\r\n\r\n  constructor(ele: HTMLElement) {\r\n    if(ele.isContentEditable) {\r\n      super();\r\n      this.root = ele;\r\n    } else {\r\n      throw \"Specified element is not already content-editable!\";\r\n    }\r\n  }\r\n\r\n  get isSynthetic(): boolean {\r\n    return false;\r\n  }\r\n\r\n  getElement(): HTMLElement {\r\n    return this.root;\r\n  }\r\n\r\n  isSelectionEmpty(): boolean {\r\n    if(!this.hasSelection()) {\r\n      return true;\r\n    }\r\n\r\n    return this.root.ownerDocument.getSelection().isCollapsed;\r\n  }\r\n\r\n  hasSelection(): boolean {\r\n    let Lsel = this.root.ownerDocument.getSelection();\r\n\r\n    if(this.root != Lsel.anchorNode && !this.root.contains(Lsel.anchorNode)) {\r\n      return false;\r\n    }\r\n\r\n    if(this.root != Lsel.focusNode && !this.root.contains(Lsel.focusNode)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  clearSelection(): void {\r\n    if(this.hasSelection()) {\r\n      let Lsel = this.root.ownerDocument.getSelection();\r\n\r\n      if(!Lsel.isCollapsed) {\r\n        Lsel.deleteFromDocument();  // I2134, I2192\r\n      }\r\n    } else {\r\n      console.warn(\"Attempted to clear an unowned Selection!\");\r\n    }\r\n  }\r\n\r\n  invalidateSelection(): void { /* No cache maintenance needed here, partly because\r\n                                  * it's impossible to cache a Selection; it mutates.\r\n                                  */  }\r\n\r\n  getCarets(): SelectionRange {\r\n    let Lsel = this.root.ownerDocument.getSelection();\r\n    let code = Lsel.anchorNode.compareDocumentPosition(Lsel.focusNode);\r\n\r\n    if(Lsel.isCollapsed) {\r\n      let caret = new SelectionCaret(Lsel.anchorNode, Lsel.anchorOffset);\r\n      return new SelectionRange(caret, caret);\r\n    } else {\r\n      let anchor = new SelectionCaret(Lsel.anchorNode, Lsel.anchorOffset);\r\n      let focus = new SelectionCaret(Lsel.focusNode, Lsel.focusOffset);\r\n\r\n      if(anchor.node == focus.node) {\r\n        code = (focus.offset - anchor.offset > 0) ? 2 : 4;\r\n      }\r\n\r\n      if(code & 2) {\r\n        return new SelectionRange(anchor, focus);\r\n      } else { // Default\r\n        // can test against code & 4 to ensure Focus is before anchor, though.\r\n        return new SelectionRange(focus, anchor);\r\n      }\r\n    }\r\n  }\r\n\r\n  getDeadkeyCaret(): number {\r\n    return this.getTextBeforeCaret().kmwLength();\r\n  }\r\n\r\n  getTextBeforeCaret(): string {\r\n    if(!this.hasSelection()) {\r\n      return this.getText();\r\n    }\r\n\r\n    let caret = this.getCarets().start;\r\n\r\n    if(caret.node.nodeType != 3) {\r\n      return ''; // Must be a text node to provide a context.\r\n    }\r\n\r\n    return caret.node.textContent.substr(0, caret.offset);\r\n  }\r\n\r\n  getSelectedText(): string {\r\n    // TODO:  figure out the proper implementation.\r\n    // KMW 16 and before behavior may be maintained by just returning the empty string.\r\n    return '';\r\n  }\r\n\r\n  getTextAfterCaret(): string {\r\n    if(!this.hasSelection()) {\r\n      return '';\r\n    }\r\n\r\n    let caret = this.getCarets().end;\r\n\r\n    if(caret.node.nodeType != 3) {\r\n      return ''; // Must be a text node to provide a context.\r\n    }\r\n\r\n    return caret.node.textContent.substr(caret.offset);\r\n  }\r\n\r\n  getText(): string {\r\n    return this.root.innerText;\r\n  }\r\n\r\n  deleteCharsBeforeCaret(dn: number) {\r\n    if(!this.hasSelection() || dn <= 0) {\r\n      return;\r\n    }\r\n\r\n    let start = this.getCarets().start;\r\n\r\n    // Bounds-check on the number of chars to delete.\r\n    if(dn > start.offset) {\r\n      dn = start.offset;\r\n    }\r\n\r\n    if(start.node.nodeType != 3) {\r\n      console.warn(\"Deletion of characters requested without available context!\");\r\n      return; // No context to delete characters from.\r\n    }\r\n\r\n    let range = this.root.ownerDocument.createRange();\r\n    let dnOffset = start.offset - start.node.nodeValue.substr(0, start.offset)._kmwSubstr(-dn).length;\r\n\r\n    range.setStart(start.node, dnOffset);\r\n    range.setEnd(start.node, start.offset);\r\n\r\n    this.adjustDeadkeys(-dn);\r\n    range.deleteContents();\r\n    // No need to reposition the caret - the DOM will auto-move the selection accordingly, since\r\n    // we didn't use the selection to delete anything.\r\n  }\r\n\r\n  insertTextBeforeCaret(s: string) {\r\n    if(!this.hasSelection()) {\r\n      return;\r\n    }\r\n\r\n    let start = this.getCarets().start;\r\n    let delta = s._kmwLength();\r\n    let Lsel = this.root.ownerDocument.getSelection();\r\n\r\n    if(delta == 0) {\r\n      return;\r\n    }\r\n\r\n    this.adjustDeadkeys(delta);\r\n\r\n    // While Selection.extend() was really nice for this, IE didn't support it whatsoever.\r\n    // However, IE (11, at least) DID support setting selections via ranges, so we were still\r\n    // able to manage the caret properly.\r\n    //\r\n    // TODO:  double-check that it was only IE-motivated, re-implement with Selection.extend().\r\n    let finalCaret = this.root.ownerDocument.createRange();\r\n\r\n    if(start.node.nodeType == 3) {\r\n      let textStart = <Text> start.node;\r\n      textStart.insertData(start.offset, s);\r\n      finalCaret.setStart(textStart, start.offset + s.length);\r\n    } else {\r\n      // Create a new text node - empty control\r\n      var n = start.node.ownerDocument.createTextNode(s);\r\n\r\n      let range = this.root.ownerDocument.createRange();\r\n      range.setStart(start.node, start.offset);\r\n      range.collapse(true);\r\n      range.insertNode(n);\r\n      finalCaret.setStart(n, s.length);\r\n    }\r\n\r\n    finalCaret.collapse(true);\r\n    Lsel.removeAllRanges();\r\n    try {\r\n      Lsel.addRange(finalCaret);\r\n    } catch(e) {\r\n      // Chrome (through 4.0 at least) throws an exception because it has not synchronised its content with the selection.\r\n      // scrollIntoView synchronises the content for selection\r\n      start.node.parentElement.scrollIntoView();\r\n      Lsel.addRange(finalCaret);\r\n    }\r\n    Lsel.collapseToEnd();\r\n  }\r\n\r\n  handleNewlineAtCaret(): void {\r\n    // TODO:  Implement.\r\n    //\r\n    // As it turns out, we never had an implementation for handling newline inputs from the OSK for this element type.\r\n    // At least this way, it's more explicit.\r\n    //\r\n    // Note:  consult \"// Create a new text node - empty control\" case in insertTextBeforeCaret -\r\n    // this helps to handle the browser-default implementation of newline handling.  In particular,\r\n    // entry of the first character after a newline.\r\n    //\r\n    // If raw newlines are entered into the HTML, but as with usual HTML, they're interpreted as excess whitespace and\r\n    // have no effect.  We need to add DOM elements for a functional newline.\r\n  }\r\n\r\n  protected setTextAfterCaret(s: string) {\r\n    if(!this.hasSelection()) {\r\n      return;\r\n    }\r\n\r\n    let caret = this.getCarets().end;\r\n    let delta = s._kmwLength();\r\n    let Lsel = this.root.ownerDocument.getSelection();\r\n\r\n    if(delta == 0) {\r\n      return;\r\n    }\r\n\r\n    // This is designed explicitly for use in direct-setting operations; deadkeys\r\n    // will be handled after this method.\r\n\r\n    if(caret.node.nodeType == 3) {\r\n      let textStart = <Text> caret.node;\r\n      textStart.replaceData(caret.offset, textStart.length, s);\r\n    } else {\r\n      // Create a new text node - empty control\r\n      var n = caret.node.ownerDocument.createTextNode(s);\r\n\r\n      let range = this.root.ownerDocument.createRange();\r\n      range.setStart(caret.node, caret.offset);\r\n      range.collapse(true);\r\n      range.insertNode(n);\r\n    }\r\n  }\r\n\r\n  doInputEvent() {\r\n    this.dispatchInputEventOn(this.root);\r\n  }\r\n}",
    "/**\r\n * Checks the type of an input DOM-related object while ensuring that it is checked against the correct prototype,\r\n * as class prototypes are (by specification) scoped upon the owning Window.\r\n *\r\n * See https://stackoverflow.com/questions/43587286/why-does-instanceof-return-false-on-chrome-safari-and-edge-and-true-on-firefox\r\n * for more details.\r\n *\r\n * @param {Element|Event}   Pelem       An element of the web page or one of its IFrame-based subdocuments.\r\n * @param {string}          className   The plain-text name of the expected Element type.\r\n * @return {boolean}\r\n */\r\nexport function nestedInstanceOf(Pelem: Event|EventTarget, className: string): boolean {\r\n  var scopedClass;\r\n\r\n  if(!Pelem) {\r\n    // If we're bothering to check something's type, null references don't match\r\n    // what we're looking for.\r\n    return false;\r\n  }\r\n  if (Pelem['Window']) { // Window objects contain the class definitions for types held within them.  So, we can check for those.\r\n    return className == 'Window';\r\n  } else if (Pelem['defaultView']) { // Covers Document.\r\n    scopedClass = Pelem['defaultView'][className];\r\n  } else if(Pelem['ownerDocument']) {\r\n    scopedClass = (Pelem as Node).ownerDocument.defaultView[className];\r\n  } else if(Pelem['target']) {\r\n    var event = Pelem as Event;\r\n\r\n    if(this.instanceof(event.target, 'Window')) {\r\n      scopedClass = event.target[className];\r\n    } else if(this.instanceof(event.target, 'Document')) {\r\n      scopedClass = (event.target as Document).defaultView[className];\r\n    } else if(this.instanceof(event.target, 'HTMLElement')) {\r\n      scopedClass = (event.target as HTMLElement).ownerDocument.defaultView[className];\r\n    }\r\n  }\r\n\r\n  if(scopedClass) {\r\n    return Pelem instanceof scopedClass;\r\n  } else {\r\n    return false;\r\n  }\r\n}",
    "import type OutputTarget from './outputTarget.js';\r\nimport Input from './input.js';\r\nimport TextArea from './textarea.js';\r\nimport DesignIFrame from './designIFrame.js';\r\nimport ContentEditable from './contentEditable.js';\r\nimport { nestedInstanceOf } from './utils.js';\r\n\r\nexport default function wrapElement(e: HTMLElement): OutputTarget<any> {\r\n  // Complex type scoping is implemented here so that kmwutils.ts is not a dependency for test compilations.\r\n\r\n  if(nestedInstanceOf(e, \"HTMLInputElement\")) {\r\n    return new Input(<HTMLInputElement> e);\r\n  } else if(nestedInstanceOf(e, \"HTMLTextAreaElement\")) {\r\n    return new TextArea(<HTMLTextAreaElement> e);\r\n  } else if(nestedInstanceOf(e, \"HTMLIFrameElement\")) {\r\n    let iframe = <HTMLIFrameElement> e;\r\n\r\n    if(iframe.contentWindow && iframe.contentWindow.document && iframe.contentWindow.document.designMode == \"on\") {\r\n      return new DesignIFrame(iframe);\r\n    } else if (e.isContentEditable) {\r\n      // Do content-editable <iframe>s make sense?\r\n      return new ContentEditable(e);\r\n    } else {\r\n      return null;\r\n    }\r\n  } else if(e.isContentEditable) {\r\n    return new ContentEditable(e);\r\n  }\r\n\r\n  return null;\r\n}",
    "/**\r\n * Encapsulates the emulated dialog used by KMW to signal alerts and keyboard-load\r\n * waiting messages to the user.\r\n *\r\n * The intent is for this to be a direct child element of `document.body`.\r\n */\r\nexport class AlertHost {\r\n  /**\r\n   * The \"background\" element - a full-page shim _behind_ the alert / wait box that assists\r\n   * in emulating a modal state.\r\n   *\r\n   * This element uses `display: none` by default, and as the root element, this keeps the others\r\n   * hidden by default as well.\r\n   */\r\n  private readonly bg: HTMLDivElement;\r\n\r\n  /**\r\n   * The \"wait box\" element - the top-level element comprising the wait/message box itself.\r\n   */\r\n  private readonly lb: HTMLDivElement;\r\n\r\n  /**\r\n   * The \"wait text\" / \"alert text\" element - the element containing any message text associated\r\n   * with the alert or wait being signaled.\r\n   */\r\n  private readonly lt: HTMLDivElement;\r\n\r\n  /**\r\n   * The \"wait graphic\" - the spinny-bar graphic used during keyboard-load waiting messages.\r\n   */\r\n  private readonly gr: HTMLDivElement;\r\n\r\n  /**\r\n   * The top-right 'close'/'x' button.\r\n   */\r\n  private readonly bx: HTMLDivElement;\r\n\r\n  private dismiss?: () => void;\r\n  private pending: boolean = false;\r\n\r\n  // Formerly known as `this.waiting` when within `keyman.util`.\r\n  public get rootElement(): HTMLDivElement {\r\n    return this.bg;\r\n  }\r\n\r\n  /**\r\n   *  Prepares, but does not display, the background and keyboard loading wait message box\r\n   *  Should not be called before options are defined during initialization\r\n   **/\r\n  constructor() {\r\n    // \"background\" - the clickable shim BEHIND the 'dialog'\r\n    const bg = this.bg = document.createElement('div'),\r\n          lb = this.lb = document.createElement('div'), // 'wait box' - the main actual message box / 'dialog' element\r\n          lt = this.lt = document.createElement('div'), // 'wait text' // or alert text - but the host for message text\r\n          gr = this.gr = document.createElement('div'), // 'wait graphic' - the little 'please wait' spinny / faux progress bar\r\n          bx = this.bx = document.createElement('div'); // the little 'close' top-right x button.\r\n\r\n    bg.className='kmw-wait-background';\r\n    lb.className='kmw-wait-box';\r\n    this.dismiss=null;\r\n    lt.className='kmw-wait-text';\r\n    gr.className='kmw-wait-graphic';\r\n    bx.className='kmw-alert-close';\r\n\r\n    // Close alert if anywhere in box is touched, since close box is too small on mobiles\r\n    lb.onmousedown = lb.onclick = (e) => {\r\n      // Ignore if waiting, only handle for alert\r\n      if(bx.style.display == 'block') {\r\n        bg.style.display='none';\r\n        if(this.dismiss) {\r\n          this.dismiss();\r\n        }\r\n      }\r\n    };\r\n\r\n    lb.addEventListener('touchstart', lb.onclick, false);\r\n    bg.onmousedown = bg.onclick = (e) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n    }\r\n    bg.addEventListener('touchstart', bg.onclick, false);\r\n    lb.appendChild(bx); // [0]\r\n    lb.appendChild(lt); // [1]\r\n    lb.appendChild(gr); // [2]\r\n    bg.appendChild(lb);\r\n\r\n    document.body.appendChild(bg);\r\n  }\r\n\r\n  /**\r\n   * Customized wait display\r\n   *\r\n   * @param   {string|boolean}   s       displayed text\r\n   */\r\n  wait(s?: string) {\r\n    // Keyboards loaded with page are initialized before the page is ready,\r\n    // so cannot use the wait indicator (and don't need it, anyway)\r\n    const bg = this.bg;\r\n    if(typeof(bg) == 'undefined' || bg == null) {\r\n      return;\r\n    }\r\n\r\n    if(s) {\r\n      this.pending=true;\r\n      // In practice, is typically:  \"Installing keyboard\", with line 2 = keyboard name.\r\n      window.setTimeout(() => {\r\n        if(this.pending) {\r\n          window.scrollTo(0,0);\r\n          this.bx.style.display='none';\r\n          this.lt.className='kmw-wait-text';\r\n          this.lt.innerHTML=s;\r\n          this.gr.style.display='block';\r\n          bg.style.display='block';\r\n        }\r\n      }, 1000);\r\n    } else {\r\n      if(this.pending) {\r\n        this.lt.innerHTML='';\r\n        this.pending=false;\r\n        bg.style.display='none';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Customized alert.\r\n   *\r\n   * @param     {string}        s       alert text\r\n   * @param     {function()=}   fn      function to call when alert dismissed\r\n   */\r\n  alert(s: string, fn?: () => void): void {\r\n    const bg = this.bg;\r\n    this.bx.style.display='block';\r\n    this.lt.className='kmw-alert-text';\r\n    this.lt.innerHTML=s;\r\n    this.gr.style.display='none';\r\n    bg.style.display='block';\r\n    this.dismiss = arguments.length > 1 ? fn : null;\r\n  }\r\n\r\n  shutdown() {\r\n    this.bg.parentNode.removeChild(this.bg);\r\n  }\r\n}",
    "export function whenDocumentReady(): Promise<void> {\r\n  if(document.readyState === 'complete') {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const loadHandler: (e: Event) => void = () => {\r\n      window.removeEventListener('load', loadHandler);\r\n\r\n      resolve();\r\n    };\r\n\r\n    window.addEventListener('load', loadHandler);\r\n  });\r\n}",
    "import { EngineConfiguration, InitOptionSpec, InitOptionDefaults } from \"keyman/engine/main\";\r\n\r\nimport { OutputTarget as DOMOutputTarget } from 'keyman/engine/element-wrappers';\r\nimport { isEmptyTransform, OutputTarget, RuleBehavior } from '@keymanapp/keyboard-processor';\r\nimport { AlertHost } from \"./utils/alertHost.js\";\r\nimport { whenDocumentReady } from \"./utils/documentReady.js\";\r\n\r\nexport class BrowserConfiguration extends EngineConfiguration {\r\n  private _ui: string;\r\n  private _attachType: string;\r\n\r\n  private _alertHost?: AlertHost;\r\n  private _options: Required<BrowserInitOptionSpec>;\r\n\r\n  initialize(options: Required<BrowserInitOptionSpec>) {\r\n    if(this._options) {\r\n      // Preserve old options, but replace with any newly-set ones if specified.\r\n      // If specified, even as 'undefined' or 'null', it will still override.\r\n      this._options = {...this._options, ...options};\r\n    } else {\r\n      this._options = {...options};\r\n    }\r\n    super.initialize(options);\r\n    this._options = options;\r\n\r\n    this._ui = options.ui;\r\n    this._attachType = options.attachType;\r\n\r\n    whenDocumentReady().then(() => {\r\n      if(options.useAlerts && !this.alertHost) {\r\n        this._alertHost = new AlertHost();\r\n      } else if(!options.useAlerts && this.alertHost) {\r\n        this._alertHost?.shutdown();\r\n        this._alertHost = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  get options() {\r\n    return this._options;\r\n  }\r\n\r\n  get attachType() {\r\n    return this._attachType;\r\n  }\r\n\r\n  get alertHost(): AlertHost | undefined {\r\n    return this._alertHost;\r\n  }\r\n\r\n  set signalUser(host: AlertHost) {\r\n    if(!host || host != this.alertHost) {\r\n      this.alertHost.shutdown();\r\n    }\r\n\r\n    this._alertHost = host;\r\n  }\r\n\r\n  debugReport(): Record<string, any> {\r\n    const baseReport = super.debugReport();\r\n    baseReport.attachType = this.attachType;\r\n    baseReport.ui = this._ui;\r\n    baseReport.keymanEngine = 'app/browser';\r\n\r\n    return baseReport;\r\n  }\r\n\r\n  onRuleFinalization(ruleBehavior: RuleBehavior, outputTarget: OutputTarget) {\r\n    // TODO: Patch up to modularized form.  But that doesn't exist yet for some of these...\r\n\r\n    // If the transform isn't empty, we've changed text - which should produce a 'changed' event in the DOM.\r\n    const ruleTransform = ruleBehavior.transcription.transform;\r\n    if(!isEmptyTransform(ruleTransform)) {\r\n      if(outputTarget instanceof DOMOutputTarget) {\r\n        outputTarget.changed = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport interface BrowserInitOptionSpec extends InitOptionSpec {\r\n  ui?: string;\r\n  attachType?: 'auto' | 'manual' | ''; // If blank or undefined, attachType will be assigned to \"auto\" or \"manual\"\r\n  useAlerts?: boolean;\r\n}\r\n\r\nexport const BrowserInitOptionDefaults: Required<BrowserInitOptionSpec> = {\r\n  ui: '',\r\n  attachType: '',\r\n  useAlerts: true,\r\n  ...InitOptionDefaults\r\n}",
    "import { OutputTarget } from 'keyman/engine/element-wrappers';\r\n\r\nexport class AttachmentInfo {\r\n  /**\r\n   * Provides the core interface between the DOM and the actual keyboard.\r\n   */\r\n  interface:      OutputTarget<any>;\r\n\r\n  /**\r\n   * Tracks the control's independent keyboard selection, when applicable.\r\n   */\r\n  keyboard:       string;\r\n\r\n  /**\r\n   * Tracks the language code corresponding to the `keyboard` field.\r\n   */\r\n  languageCode:   string;\r\n\r\n  /**\r\n   * Tracks the inputmode originally set by the webpage.\r\n   */\r\n  inputMode?: string;\r\n\r\n  constructor(eleInterface: OutputTarget<any>, kbd: string, touch?: boolean) {\r\n    this.interface = eleInterface;\r\n    this.keyboard = kbd;\r\n  }\r\n}",
    "import { nestedInstanceOf } from \"keyman/engine/element-wrappers\";\r\n\r\n/**\r\n * Given a DOM event related to an KMW-attached element, this function determines\r\n * the corresponding OutputTarget.\r\n * @param e\r\n * @returns\r\n */\r\nexport function eventOutputTarget(e: Event) {\r\n  let Ltarg: HTMLElement = e?.target as HTMLElement;\r\n  return outputTargetForElement(Ltarg);\r\n}\r\n\r\n/**\r\n * Given a DOM event related to an KMW-attached element, this function determines\r\n * the corresponding OutputTarget.\r\n * @param e\r\n * @returns\r\n */\r\nexport function outputTargetForElement(Ltarg: HTMLElement) {\r\n  if (Ltarg == null) {\r\n    return null;\r\n  }\r\n  // ... determine the element expected to hold the KMW attachment object based on\r\n  // its typing, properties, etc.\r\n\r\n  if(Ltarg['body']) {\r\n    Ltarg = Ltarg['body']; // Occurs in Firefox for design-mode iframes.\r\n  }\r\n\r\n  if (Ltarg.nodeType == 3) { // defeat Safari bug\r\n    Ltarg = Ltarg.parentNode as HTMLElement;\r\n  }\r\n\r\n  // Verify that the element does correspond to a remappable input field\r\n  if(nestedInstanceOf(Ltarg, \"HTMLInputElement\")) {\r\n    const et=(Ltarg as HTMLInputElement).type.toLowerCase();\r\n    if(!(et == 'text' || et == 'search')) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Step 2:  With the most likely host element determined, obtain the corresponding OutputTarget\r\n  // instance.\r\n  return Ltarg._kmwAttachment.interface;\r\n}",
    "import EventEmitter from 'eventemitter3';\r\n\r\nimport { DeviceSpec, InternalKeyboardFont } from \"@keymanapp/keyboard-processor\";\r\nimport { nestedInstanceOf, wrapElement } from \"keyman/engine/element-wrappers\";\r\nimport {\r\n  arrayFromNodeList,\r\n  createStyleSheet,\r\n  getAbsoluteX,\r\n  getAbsoluteY,\r\n  StylesheetManager\r\n} from \"keyman/engine/dom-utils\";\r\n\r\nimport { AttachmentInfo } from \"./attachmentInfo.js\";\r\n\r\n// Extends the standard DOM definition for HTMLElement with our custom property underlying KMW element attachment.\r\ndeclare global {\r\n  interface HTMLElement {\r\n    /**\r\n     * A custom property used by Keyman Engine for Web to tag elements that it has attached to.\r\n     */\r\n    _kmwAttachment: AttachmentInfo,     // Used to track each input element's attachment data.\r\n  }\r\n}\r\n\r\n// Used for the `.sortedList` property - that is, for ordering valid input elements based\r\n// upon their location within the page.\r\ntype SortableInput = {\r\n  ip: HTMLInputElement | HTMLTextAreaElement,\r\n  x: number,\r\n  y: number\r\n};\r\n\r\ninterface EventMap {\r\n  /**\r\n   * For any elements being attached or being re-enabled after having been disabled.\r\n   */\r\n  'enabled': (obj: HTMLElement) => void;\r\n\r\n  /**\r\n   * For any elements being detached, disabled, or selectively not being attached due\r\n   * being pre-marked for a disabled state.\r\n   */\r\n  'disabled': (obj: HTMLElement) => void;\r\n}\r\n\r\nexport interface PageAttachmentOptions {\r\n  /**\r\n   * The DeviceSpec metadata for the actual device hosting the active webpage.\r\n   */\r\n  hostDevice: DeviceSpec;\r\n\r\n  /**\r\n   * If contained within an iframe, this should be set to .document's owning iframe.\r\n   */\r\n  owner?: HTMLIFrameElement;\r\n}\r\n\r\n/*\r\n * Note:  part of this class's design is to facilitate unit testing for the core\r\n * attachment algorithm - for validating the logic that determines which elements\r\n * gain attachment.\r\n */\r\n\r\n/**\r\n * This class is responsible for Keyman Engine for Web's\r\n * \"attachment\" mechanism, which is used to hook into page elements to determine\r\n * the user's active context and to receive any keystrokes said context receives.\r\n */\r\nexport class PageContextAttachment extends EventEmitter<EventMap> {\r\n  // Note:  we only seem to rely on `device.touchable` within this class?  None of the other properties.\r\n  private readonly options: PageAttachmentOptions;\r\n\r\n  public get device(): DeviceSpec {\r\n    return this.options.hostDevice;\r\n  }\r\n\r\n  public readonly document: Document;\r\n  protected readonly owner: HTMLIFrameElement;\r\n  private baseFont: string = '';\r\n  private appliedFont: string = '';\r\n  private stylesheetManager: StylesheetManager;\r\n\r\n  public get window(): Window {\r\n    return this.document.defaultView;\r\n  }\r\n\r\n  private embeddedPageContexts: PageContextAttachment[] = [];\r\n\r\n  // Only used for `shutdown`; order doesn't matter.\r\n  private _inputList: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Returns a list of all elements attached by this object or one of its children.\r\n   * Note that the list should be considered unordered, as its entries will not\r\n   * be in order of definition within the document.\r\n   */\r\n  public get inputList(): readonly HTMLElement[] {\r\n    let embeddedInputs = this.embeddedPageContexts.map(\r\n      // Gets the input list for any pages embedded via iframe\r\n      (embeddedPage) => embeddedPage.inputList\r\n    ).reduce(\r\n      // Flattens the resulting arrays into a 1D array.\r\n      (flattenedInputList, pageInputList) => flattenedInputList.concat(pageInputList), []\r\n    );\r\n\r\n    return [].concat(this._inputList).concat(embeddedInputs);\r\n  }\r\n\r\n  // Useful for `moveToNext` operations:  order matters.\r\n  // Note that it only includes `input` and `textarea` elements of the top-level document!\r\n  // Anything in embedded iframes was always ignored for this.\r\n  private _sortedInputs: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Returns a list of the Input and Textarea elements hosted by the represented document,\r\n   * in 2D sorted order:  top to bottom, then left to right.\r\n   */\r\n  public get sortedInputs(): ReadonlyArray<HTMLElement> {\r\n    return this._sortedInputs;\r\n  }\r\n\r\n  private manualAttach: boolean;\r\n\r\n  /**\r\n   * Tracks the attachment MutationObserver.\r\n   */\r\n  private attachmentObserver: MutationObserver;\r\n\r\n  /**\r\n   * Tracks the enablement MutationObserver.\r\n   */\r\n  private enablementObserver: MutationObserver;\r\n\r\n  /**\r\n   * Tracks changes in inputmode state for attached elements.\r\n   */\r\n  private inputModeObserver: MutationObserver;\r\n\r\n  // Fields & properties done; now for the 'meat'.\r\n\r\n  /**\r\n   * Prepares the page context-attachment instance for the corresponding document.\r\n   * Does not actually attach until `.attach()` is called.\r\n   * @param document\r\n   * @param options\r\n   */\r\n  constructor(document: Document, options: PageAttachmentOptions) {\r\n    if(!document) {\r\n      throw new Error(\"Cannot attach to a null/undefined document\");\r\n    }\r\n\r\n    super();\r\n    this.options = options;\r\n    this.document = document;\r\n    this.stylesheetManager = new StylesheetManager(this.document.body);\r\n  }\r\n\r\n  // Note:  `install()` must be separate from construction - otherwise, there's no time\r\n  // interval available to attach event handlers before the attachment process begins.\r\n\r\n  /*\r\n   * Call this method **once**, when the page is fully loaded, to attach to all page elements\r\n   * eligible to serve as context for Keyman keyboard input.\r\n   */\r\n  install(manualAttach: boolean) {\r\n    // This field gets referenced by any non-design iframes detected during _SetupDocument.\r\n    // Thus, we must initialize it now.\r\n    this.manualAttach = manualAttach;\r\n    this.baseFont = this.getBaseFont();\r\n\r\n    if(!this.manualAttach) {\r\n      this._SetupDocument(this.document.documentElement);\r\n\r\n      // Create an ordered list of all input and textarea fields\r\n      this.listInputs();\r\n    }\r\n\r\n    // KMW 16.0 and before:  these were only ever established for the top-level doc, and so for\r\n    // 17.0 we'll keep it that way initially.\r\n    //\r\n    // That said, for future consideration:  enable it within iframe-internal documents too.\r\n    if(!this.options.owner) {\r\n      this.initMutationObservers(this.document, manualAttach);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     setupElementAttachment\r\n   * Scope        Private\r\n   * @param       {Element}   x   An element from the page valid for KMW attachment\r\n   * Description  Establishes the base KeymanWeb data for newly-attached elements.\r\n   *              Does not establish input hooks, which are instead handled during enablement.\r\n   */\r\n  setupElementAttachment(x: HTMLElement) {\r\n    // The `_kmwAttachment` property tag maintains all relevant KMW-maintained data regarding the element.\r\n    // It is disgarded upon de-attachment.\r\n    if(x._kmwAttachment) {\r\n      return;\r\n    } else {\r\n      // Problem:  tries to wrap IFrames that aren't design-mode.\r\n      // The elements in the contained document get separately wrapped, so this doesn't need a proper wrapper.\r\n      //\r\n      // Its attachment process might need some work.\r\n      let eleInterface = wrapElement(x);\r\n\r\n      // May should filter better for IFrames.\r\n      if(!(eleInterface || nestedInstanceOf(x, \"HTMLIFrameElement\"))) {\r\n        console.warn(\"Could not create processing interface for newly-attached element!\");\r\n      }\r\n\r\n      x._kmwAttachment = new AttachmentInfo(eleInterface, null, this.device.touchable);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     clearElementAttachment\r\n   * Scope        Private\r\n   * @param       {Element}   x   An element from the page valid for KMW attachment\r\n   * Description  Establishes the base KeymanWeb data for newly-attached elements.\r\n   *              Does not establish input hooks, which are instead handled during enablement.\r\n   */\r\n  clearElementAttachment(x: HTMLElement) {\r\n    // We need to clear the object when de-attaching; helps prevent memory leaks.\r\n    x._kmwAttachment = null;\r\n  }\r\n\r\n  /**\r\n   * Function     isKMWInput\r\n   * Scope        Private\r\n   * @param       {Element}   x   An element from the page.\r\n   * @return      {boolean}      true if the element is viable for KMW attachment.\r\n   * Description  Examines potential input elements to determine whether or not they are viable for KMW attachment.\r\n   *              Also filters elements not supported for touch devices when device.touchable == true.\r\n   */\r\n  isKMWInput(x: HTMLElement): boolean {\r\n    if(x instanceof x.ownerDocument.defaultView.HTMLTextAreaElement) {\r\n      return true;\r\n    } else if(x instanceof x.ownerDocument.defaultView.HTMLInputElement) {\r\n      if (x.type == 'text' || x.type == 'search') {\r\n        return true;\r\n      }\r\n    } else if(x instanceof x.ownerDocument.defaultView.HTMLIFrameElement) {\r\n      try {\r\n        if(x.contentWindow) {\r\n          const iframeDoc = x.contentWindow.document;\r\n          if(iframeDoc) { // Only allow attachment if the iframe's internal document is valid.\r\n            // Do not allow design-mode iframe attachment if in 'touch' mode.\r\n            if(this.device.touchable && iframeDoc.designMode.toLowerCase() == 'on') {\r\n              return false;\r\n            }\r\n            return true;\r\n          }\r\n        } else {\r\n          // If the element is being wholesale-deleted, the contentWindow may be gone...\r\n          // but a previously-placed attachment object may yet remain.\r\n          return !!x._kmwAttachment;\r\n        }\r\n      }\r\n      catch(err) {\r\n        /* Do not attempt to access iframes outside this site */\r\n        console.warn(\"Error during attachment to / detachment from iframe: \");\r\n        console.warn(err);\r\n      }\r\n    } else if(x.isContentEditable) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Function     isAttached\r\n   * Scope        Private\r\n   * @param       {Element}   x   An element from the page.\r\n   * @return      {boolean}       true if KMW is attached to the element, otherwise false.\r\n   */\r\n  isAttached(x: HTMLElement) {\r\n    if(x._kmwAttachment) {\r\n      return true;\r\n    }\r\n\r\n    // A non-design IFrame is 'attached' if there is a corresponding PageContextAttachment instance.\r\n    // ... which could be this one!\r\n    if(nestedInstanceOf(x, 'HTMLIFrameElement')) {\r\n      const iframe = x as HTMLIFrameElement;\r\n      if(iframe.contentDocument == this.document) {\r\n        return true;\r\n      }\r\n\r\n      // If not this one, perhaps a child?\r\n      for(let child of this.embeddedPageContexts) {\r\n        if(child.isAttached(x)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Function     isKMWDisabled\r\n   * Scope        Private\r\n   * @param       {Element}   x   An element from the page.\r\n   * @return      {boolean}      true if the element's properties indicate a 'disabled' state.\r\n   * Description  Examines attachable elements to determine their default enablement state.\r\n   */\r\n  isKMWDisabled(x: HTMLElement): boolean {\r\n    const c = x.className;\r\n\r\n    // Exists for some HTMLElements.\r\n    if(x['readOnly']) {\r\n      return true;\r\n    } else if(c && c.indexOf('kmw-disabled') >= 0) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Function     enableInputElement\r\n   * Scope        Private\r\n   * @param       {Element}   Pelem   An element from the document to be enabled with full KMW handling.\r\n   * @param       {boolean=}   isAlias A flag that indicates if the element is a simulated input element for touch.\r\n   * Description  Performs the basic enabling setup for one element and adds it to the inputList if it is an input element.\r\n   *              Note that this method is called for both desktop and touch control routes; the touch route calls it from within\r\n   *              enableTouchElement as it must first establish the simulated touch element to serve as the alias \"input element\" here.\r\n   *              Note that the 'kmw-disabled' property is managed by the MutationObserver and by the surface API calls.\r\n   */\r\n  enableInputElement(Pelem: HTMLElement) {\r\n    if(!this.isKMWDisabled(Pelem)) {\r\n      if(Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement) {\r\n        this._AttachToIframe(Pelem);\r\n      } else {\r\n        this.setupElementAttachment(Pelem);\r\n\r\n        Pelem._kmwAttachment.inputMode = Pelem.inputMode ?? 'text';\r\n        this.disableInputModeObserver();\r\n        // ensures that the system keyboard doesn't show on mobile devices.\r\n        Pelem.inputMode = 'none';\r\n        this.enableInputModeObserver();\r\n\r\n        Pelem.classList.add('keymanweb-font');\r\n        this._inputList.push(Pelem);\r\n\r\n        this.emit('enabled', Pelem);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function     disableInputElement\r\n   * Scope        Private\r\n   * @param       {Element}   Pelem   An element from the document to be enabled with full KMW handling.\r\n   * @param       {boolean=}   isAlias A flag that indicates if the element is a simulated input element for touch.\r\n   * Description  Inverts the process of enableInputElement, removing all event-handling from the element.\r\n   *              Note that the 'kmw-disabled' property is managed by the MutationObserver and by the surface API calls.\r\n   */\r\n  disableInputElement(Pelem: HTMLElement) {\r\n    if(!Pelem) {\r\n      return;\r\n    }\r\n\r\n    // Do NOT test for pre-disabledness - we also use this to fully detach without officially 'disabling' via kmw-disabled.\r\n    if((Pelem.ownerDocument.defaultView && Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement) ||\r\n        Pelem instanceof HTMLIFrameElement) {\r\n      this._DetachFromIframe(Pelem);\r\n    } else {\r\n      if(this.isAttached(Pelem)) {\r\n        const intendedInputMode = Pelem._kmwAttachment?.inputMode;\r\n\r\n        this.disableInputModeObserver();\r\n        // restores the last-known setting before KMW forced it to 'none'.\r\n        // Refer to enableInputElement.\r\n        Pelem.inputMode = intendedInputMode;\r\n        this.enableInputModeObserver();\r\n      }\r\n\r\n      let cnIndex = Pelem.className.indexOf('keymanweb-font');\r\n      if(cnIndex >= 0) { // See note about the alias below.\r\n        Pelem.className = Pelem.className.replace('keymanweb-font', '').trim();\r\n      }\r\n\r\n      // Remove the element from our internal input tracking.\r\n      var index = this.inputList.indexOf(Pelem);\r\n      if(index > -1) {\r\n        this._inputList.splice(index, 1);\r\n      }\r\n      this.emit('disabled', Pelem);\r\n    }\r\n\r\n    return;\r\n  };\r\n\r\n  //#region Prime for removal! ----------------------\r\n\r\n  // TODO:  I missed this before, but the 'enable' and 'disable' `TouchElement` method variants should\r\n  // be 100% safe to remove now that touch-aliases are out!\r\n  //\r\n  // I've pre-emptively removed the `touchEnabled` flag, since the handlers are already so pruned as to make\r\n  // said flag unnecessary.\r\n\r\n  /**\r\n   * Function     enableTouchElement\r\n   * Scope        Private\r\n   * @param       {Element}  Pelem   An input or textarea element from the page.\r\n   * @return      {boolean}  Returns true if it creates a simulated input element for Pelem; false if not.\r\n   * Description  Creates a simulated input element for the specified INPUT or TEXTAREA, comprising:\r\n   *              an outer DIV, matching the position, size and style of the base element\r\n   *              a scrollable DIV within that outer element\r\n   *              two SPAN elements within the scrollable DIV, to hold the text before and after the caret\r\n   *\r\n   *              The left border of the second SPAN is flashed on and off as a visible caret\r\n   *\r\n   *              Also ensures the element is registered on keymanweb's internal input list.\r\n   */\r\n  enableTouchElement(Pelem: HTMLElement) {\r\n    if(this.isKMWDisabled(Pelem)) {\r\n      this.emit('disabled', Pelem);\r\n      return false;\r\n    }\r\n\r\n    if(!this.isAttached(Pelem)) {\r\n      this.setupElementAttachment(Pelem);\r\n    }\r\n\r\n    // Set font for base element\r\n    this.enableInputElement(Pelem);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Function     disableTouchElement\r\n   * Scope        Private\r\n   * @param       {Element}  Pelem   An input or textarea element from the page.\r\n   * Description  Destroys the simulated input element for the specified INPUT or TEXTAREA and reverts\r\n   *              back to desktop-style 'enablement' for the base control.\r\n   */\r\n  disableTouchElement(Pelem: HTMLElement) {\r\n    // Do not check for the element being officially disabled - it's also used for detachment.\r\n    if(this.isAttached(Pelem)) {\r\n      const intendedInputMode = Pelem._kmwAttachment.inputMode;\r\n\r\n      this.disableInputModeObserver();\r\n      Pelem.inputMode = intendedInputMode;\r\n      this.enableInputModeObserver();\r\n    }\r\n  }\r\n\r\n  //#endregion Prime for removal! ----------------------\r\n\r\n  /**\r\n   * The core method for a MutationObserver that checks for changes to the `.inputMode` property\r\n   * of controls that KMW is attached to in touch mode.\r\n   *\r\n   * In touch mode, KMW requires that their `.inputMode` property be set to 'none' in order\r\n   * to hide the device's default OSK.  That said, we should still aim to honor the setting\r\n   * and restore it if and when detachment occurs.  Should we ever support intents, we'll want\r\n   * to utilize the incoming value for use with that feature too.\r\n   */\r\n  private _InputModeObserverCore = (mutations: MutationRecord[]) => {\r\n    // Prevent infinite recursion from any changes / updates made within the observation handler.\r\n    this.disableInputModeObserver();\r\n    try {\r\n      for(const mutation of mutations) {\r\n        const target = mutation.target as HTMLElement;\r\n        if(!this.isAttached(target)) {\r\n          continue;\r\n        }\r\n\r\n        target._kmwAttachment.inputMode = target.inputMode;\r\n\r\n        if(this.device.touchable) {\r\n          target.inputMode = 'none';\r\n        }\r\n      }\r\n    } finally {\r\n      this.enableInputModeObserver();\r\n    }\r\n  };\r\n\r\n  /**\r\n     * Function     _AttachToIframe\r\n     * Scope        Private\r\n     * @param       {Element}      Pelem       IFrame to which KMW will be attached\r\n     * Description  Attaches KeymanWeb to IFrame\r\n     */\r\n  _AttachToIframe(Pelem: HTMLIFrameElement) {\r\n    try {\r\n      const Lelem=Pelem.contentWindow.document;\r\n      /* editable Iframe */\r\n      if(Lelem) {\r\n        if(Lelem.designMode.toLowerCase() == 'on') {\r\n          // Set up a reference alias; the internal document will need the same attachment info!\r\n          this.setupElementAttachment(Pelem);\r\n          Lelem.body._kmwAttachment = Pelem._kmwAttachment;\r\n\r\n          this._inputList.push(Pelem);\r\n          this.emit('enabled', Pelem);\r\n        } else {\r\n          // If already attached, do not attempt to attach again.\r\n          if(this.embeddedPageContexts.filter((context) => context.document == Lelem).length == 0) {\r\n            // Lelem is the IFrame's internal document; set 'er up!\r\n            let embeddedPageAttachment = new PageContextAttachment(Lelem, {\r\n              ...this.options,\r\n              owner: Pelem\r\n            });\r\n\r\n            this.embeddedPageContexts.push(embeddedPageAttachment);\r\n            // Forward any attached elements from the embedded page as if we attached them directly.\r\n            embeddedPageAttachment.on('enabled',  (elem) => this.emit('enabled',  elem));\r\n            embeddedPageAttachment.on('disabled', (elem) => this.emit('disabled', elem));\r\n\r\n            embeddedPageAttachment.install(this.manualAttach);\r\n          }\r\n        }\r\n      }\r\n    } catch(err) {\r\n      // do not attempt to attach to the iframe as it is from another domain - XSS denied!\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     _DetachFromIframe\r\n   * Scope        Private\r\n   * @param       {Element}      Pelem       IFrame to which KMW will be attached\r\n   * Description  Detaches KeymanWeb from an IFrame\r\n   */\r\n  _DetachFromIframe(Pelem: HTMLIFrameElement) {\r\n    const detachFromDesignIframe = () => {\r\n      this.clearElementAttachment(Pelem);\r\n\r\n      let index = this._inputList.indexOf(Pelem);\r\n      if(index != -1) {\r\n        this._inputList.splice(index, 1);\r\n      }\r\n      this.emit('disabled', Pelem);\r\n    }\r\n\r\n    try {\r\n      const Lelem=Pelem.contentWindow.document;\r\n      /* editable Iframe */\r\n      if(Lelem) {\r\n        if(Lelem.designMode.toLowerCase() == 'on') {\r\n          // Remove the reference to our prior attachment data!\r\n          Lelem.body._kmwAttachment = null; // is an extra step needed for this case.\r\n\r\n          detachFromDesignIframe();\r\n        } else {\r\n          // If already attached, do not attempt to attach again.\r\n          for(let i=0; i < this.embeddedPageContexts.length; i++) {\r\n            if(this.embeddedPageContexts[i].document == Lelem) {\r\n              // Pops the entry from the array and maintains a reference to it.\r\n              const embeddedPageAttachment = this.embeddedPageContexts.splice(i, 1)[0];\r\n\r\n              embeddedPageAttachment._ClearDocument(Lelem.body); // I2404 - Manage IE events in IFRAMEs\r\n              // The events defined in _AttachToIframe will still forward during `shutdown`.\r\n              embeddedPageAttachment.shutdown();\r\n\r\n              // Also, remove child attachment-engine, too.\r\n              this.embeddedPageContexts.splice(i, 1);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } catch(err) {\r\n      // If we were previously attached but the content doc/window have been unloaded,\r\n      // we can at least address attachment via the attachment object.\r\n      if(Pelem._kmwAttachment) {\r\n        detachFromDesignIframe();\r\n      }\r\n\r\n      // Otherwise, do not attempt to attach to/detach from the iframe;\r\n      // as it's likely from another domain - XSS denied!\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     attachToControl\r\n   * Scope        Public\r\n   * @param       {Element}    Pelem       Element to which KMW will be attached\r\n   * Description  Attaches KMW to control (or IFrame)\r\n   */\r\n  attachToControl(Pelem: HTMLElement) {\r\n    var touchable = this.device.touchable;\r\n\r\n    // Exception for IFrame elements, in case of async loading issues.  (Fixes fun iframe loading bug with Chrome.)\r\n    if(this.isAttached(Pelem) && !(Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement)) {\r\n      return; // We're already attached.\r\n    }\r\n\r\n    if(this.isKMWInput(Pelem)) {\r\n      if(this.isKMWDisabled(Pelem)) {\r\n        // Future improvement - go ahead and attach, but in disabled state?\r\n        // Can't use `enableControl` later without that... or without the page\r\n        // directly manipulating `kmw-disabled`, anyway.\r\n        // Note:  this idea may require some shuffling of iframe-related handling\r\n        // to handle everything cleanly.\r\n        this.emit('disabled', Pelem);\r\n      } else {\r\n        if(touchable) {\r\n          this.enableTouchElement(Pelem);\r\n        } else {\r\n          this.enableInputElement(Pelem);\r\n        }\r\n      }\r\n    } else if(touchable) {\r\n      // Maybe an 'invalid' instead?\r\n      this.emit('disabled', Pelem);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     detachFromControl\r\n   * Scope        Public\r\n   * @param       {Element}    Pelem       Element from which KMW will detach\r\n   * Description  Detaches KMW from a control (or IFrame)\r\n   */\r\n  detachFromControl(Pelem: HTMLElement) {\r\n    if(!(this.isAttached(Pelem) || Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement)) {\r\n      return;  // We never were attached.\r\n    }\r\n\r\n    // #1 - if element is enabled, disable it.  But don't manipulate the 'kmw-disabled' tag.\r\n    if(this.isKMWInput(Pelem)) {\r\n      // Is it already disabled?\r\n      if(!this.isKMWDisabled(Pelem)) {\r\n        this._DisableControl(Pelem);\r\n      }\r\n    }\r\n\r\n    // #2 - clear attachment data.\r\n    this.clearElementAttachment(Pelem);\r\n  }\r\n\r\n  /**\r\n   * Function     _DisableControl\r\n   * Scope        Private\r\n   * @param       {Element}      Pelem       Element to be disabled\r\n   * Description  Disable KMW control element\r\n   */\r\n  _DisableControl(Pelem: HTMLElement) {\r\n    // Only operate on attached elements!  Non-design-mode IFrames don't get attachment markers, so we check them specifically instead.\r\n    if(this.isAttached(Pelem) || Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement) {\r\n      if(this.device.touchable) {\r\n        this.disableTouchElement(Pelem);\r\n      }\r\n\r\n      this.listInputs(); // Fix up our internal input ordering scheme.\r\n      this.disableInputElement(Pelem);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     _EnableControl\r\n   * Scope        Private\r\n   * @param       {Element}    Pelem   Element to be enabled\r\n   * Description  Enable KMW control element\r\n   */\r\n  _EnableControl(Pelem: HTMLElement) {\r\n    if(this.isAttached(Pelem)) { // Only operate on attached elements!\r\n      if(this.device.touchable) {\r\n        this.enableTouchElement(Pelem);\r\n\r\n      } else {\r\n        this.enableInputElement(Pelem);\r\n      }\r\n\r\n      this.listInputs();\r\n    } else if(nestedInstanceOf(Pelem, \"HTMLIFrameElement\")) {\r\n      // Future fix idea for this case:  when disabling a normal-iframe, keep the child instance.\r\n      // Just call 'shutdown' on it.  Then, re-'install' here.\r\n      // Current architecture unfortunately conflates 'enable' and 'detach' for iframes, though. :(\r\n      // Should be 'easy enough' to address if and when the time comes.\r\n      // But for now, this'll keep things smoothed over.\r\n      this._AttachToIframe(Pelem as HTMLIFrameElement);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Function     disableControl\r\n   * Scope        Public\r\n   * @param       {Element}      Pelem       Element to be disabled\r\n   * Description  Disables a KMW control element\r\n   */\r\n  disableControl(Pelem: HTMLElement) {\r\n    if(!this.isAttached(Pelem)) {\r\n      console.warn(\"KeymanWeb is not attached to element \" + Pelem);\r\n    }\r\n\r\n    var cn = Pelem.className;\r\n    if(cn.indexOf('kmw-disabled') < 0) { // if not already explicitly disabled...\r\n      Pelem.className = cn ? cn + ' kmw-disabled' : 'kmw-disabled';\r\n    }\r\n\r\n    // The rest is triggered within MutationObserver code.\r\n    // See _EnablementMutationObserverCore.\r\n  }\r\n\r\n  /**\r\n   * Function     enableControl\r\n   * Scope        Public\r\n   * @param       {Element}      Pelem       Element to be disabled\r\n   * Description  Disables a KMW control element\r\n   */\r\n  enableControl(Pelem: HTMLElement) {\r\n    // Current architecture unfortunately conflates 'enable' and 'detach' for iframes, so a\r\n    // disabled iframe appears detached.\r\n    if(!this.isAttached(Pelem) && !nestedInstanceOf(Pelem, \"HTMLIFrameElement\")) {\r\n      console.warn(\"KeymanWeb is not attached to element \" + Pelem);\r\n    }\r\n\r\n    var cn = Pelem.className;\r\n    var tagIndex = cn.indexOf('kmw-disabled');\r\n    if(tagIndex >= 0) { // if already explicitly disabled...\r\n      Pelem.className = cn.replace('kmw-disabled', '').trim();\r\n    }\r\n\r\n    // The rest is triggered within MutationObserver code.\r\n    // See _EnablementMutationObserverCore.\r\n  }\r\n\r\n  // Create an ordered list of all text and search input elements and textarea elements\r\n  // except any tagged with class 'kmw-disabled'\r\n  // TODO: email and url types should perhaps use default keyboard only\r\n  listInputs() {\r\n    let eList: SortableInput[]=[];\r\n    let t1=document.getElementsByTagName('input');\r\n    let t2=document.getElementsByTagName('textarea');\r\n\r\n    for(let i=0; i<t1.length; i++) {\r\n      switch(t1[i].type) {\r\n        case 'text':\r\n        case 'search':\r\n        case 'email':\r\n        case 'url':\r\n          if(t1[i].className.indexOf('kmw-disabled') < 0) {\r\n            eList.push({ip:t1[i], x: getAbsoluteX(t1[i]), y: getAbsoluteY(t1[i])});\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    for(let i=0; i<t2.length; i++) {\r\n      if(t2[i].className.indexOf('kmw-disabled') < 0) {\r\n        eList.push({ip:t2[i], x: getAbsoluteX(t2[i]), y: getAbsoluteY(t2[i])});\r\n      }\r\n    }\r\n\r\n    // Sort elements by Y then X\r\n    eList.sort((e1, e2) => {\r\n      if(e1.y != e2.y) {\r\n        return e1.y-e2.y;\r\n      }\r\n      return e1.x-e2.x;\r\n    });\r\n\r\n    // Create a new list of sorted elements\r\n    let tList: HTMLElement[] = [];\r\n    for(let i=0; i<eList.length; i++) {\r\n      tList.push(eList[i].ip);\r\n    }\r\n\r\n    // Return the sorted element list\r\n    this._sortedInputs=tList;\r\n  }\r\n\r\n  /**\r\n   * Move focus to next (or previous) input or text area element on TAB\r\n   *   Uses list of actual input elements\r\n   *\r\n   *   Note that activeElement() on touch devices returns the DIV that overlays\r\n   *   the input element, not the element itself.\r\n   *\r\n   * @param      {number|boolean}  bBack     Direction to move (0 or 1)\r\n   */\r\n  findNeighboringInput(activeBase: HTMLElement, bBack: number|boolean) {\r\n    var i,t=this.sortedInputs;\r\n\r\n    if(t.length == 0) {\r\n      return null;\r\n    }\r\n\r\n    // Identify the active element in the list of inputs ordered by position\r\n    for(i=0; i<t.length; i++) {\r\n      if(t[i] == activeBase) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // If the array is empty or does not hold the element, reverse by one so that\r\n    // either the last (bBack: true) or the first (bBack: false) element is selected.\r\n    if(i == t.length && !bBack) { // otherwise, ... \"or the second\".\r\n      i--;\r\n    }\r\n\r\n    // Find the next (or previous) element in the list\r\n    i = bBack ? i-1 : i+1;\r\n    // Treat the list as circular, wrapping the index if necessary.\r\n    i = i >= t.length ? i-t.length : i;\r\n    i = i < 0 ? i+t.length : i;\r\n\r\n    return t[i];\r\n  }\r\n\r\n\r\n  /**\r\n   * Function     _GetDocumentEditables\r\n   * Scope        Private\r\n   * @param       {Element}     Pelem     HTML element\r\n   * @return      {Array<Element>}        A list of potentially-editable controls.  Further filtering [as with isKMWInput() and\r\n   *                                      isKMWDisabled()] is required.\r\n   */\r\n  private _GetDocumentEditables(Pelem: HTMLElement): (HTMLElement)[] {\r\n    let possibleInputs: (HTMLElement)[] = [];\r\n\r\n    // Document.ownerDocument === null, so we better check that it's not null before proceeding.\r\n    if(Pelem.ownerDocument && Pelem instanceof Pelem.ownerDocument.defaultView.HTMLElement) {\r\n      let dv = Pelem.ownerDocument.defaultView;\r\n\r\n      if(Pelem instanceof dv.HTMLInputElement || Pelem instanceof dv.HTMLTextAreaElement) {\r\n        possibleInputs.push(Pelem);\r\n      } else if(Pelem instanceof dv.HTMLIFrameElement) {\r\n        possibleInputs.push(Pelem);\r\n      }\r\n    }\r\n\r\n    // Constructing it like this also allows for individual element filtering for the auto-attach MutationObserver without errors.\r\n    if(Pelem.getElementsByTagName) {\r\n      /**\r\n       * Function     LiTmp\r\n       * Scope        Private\r\n       * @param       {string}    _colon    type of element\r\n       * @return      {Array<Element>}  array of elements of specified type\r\n       * Description  Local function to get list of editable controls\r\n       */\r\n      var LiTmp = function(_colon: string): HTMLElement[] {\r\n        return arrayFromNodeList(Pelem.getElementsByTagName(_colon));\r\n      };\r\n\r\n      // Note that isKMWInput() will block IFRAME elements as necessary for touch-based devices.\r\n      possibleInputs = possibleInputs.concat(LiTmp('INPUT'), LiTmp('TEXTAREA'), LiTmp('IFRAME'));\r\n    }\r\n\r\n    // Not all active browsers may support the method, but only those that do would work with contenteditables anyway.\r\n    if(Pelem.querySelectorAll) {\r\n      possibleInputs = possibleInputs.concat(arrayFromNodeList(Pelem.querySelectorAll('[contenteditable]')));\r\n    }\r\n\r\n    if(Pelem.ownerDocument && Pelem instanceof Pelem.ownerDocument.defaultView.HTMLElement && Pelem.isContentEditable) {\r\n      possibleInputs.push(Pelem);\r\n    }\r\n\r\n    return possibleInputs;\r\n  }\r\n\r\n  /**\r\n   * Function     _SetupDocument\r\n   * Scope        Private\r\n   * @param       {Element}     Pelem - the root element of a document, including IFrame documents.\r\n   * Description  Used to automatically attach KMW to editable controls, regardless of control path.\r\n   */\r\n  private _SetupDocument(Pelem: HTMLElement) { // I1961\r\n    let possibleInputs = this._GetDocumentEditables(Pelem);\r\n\r\n    for(var Li = 0; Li < possibleInputs.length; Li++) {\r\n      // It knows how to handle pre-loaded iframes appropriately.\r\n      this.attachToControl(possibleInputs[Li]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     _ClearDocument\r\n   * Scope        Private\r\n   * @param       {Element}     Pelem - the root element of a document, including IFrame documents.\r\n   * Description  Used to automatically detach KMW from editable controls, regardless of control path.\r\n   *              Mostly used to clear out all controls of a detached IFrame.\r\n   */\r\n  private _ClearDocument(Pelem: HTMLElement) { // I1961\r\n    let possibleInputs = this._GetDocumentEditables(Pelem);\r\n\r\n    for(var Li = 0; Li < possibleInputs.length; Li++) {\r\n      // It knows how to handle pre-loaded iframes appropriately.\r\n      this.detachFromControl(possibleInputs[Li]);\r\n    }\r\n  }\r\n\r\n\r\n  _EnablementMutationObserverCore = (mutations: MutationRecord[]) => {\r\n    for(var i=0; i < mutations.length; i++) {\r\n      var mutation = mutations[i];\r\n\r\n      // ( ? : ) needed as a null check.\r\n      var disabledBefore = mutation.oldValue ? mutation.oldValue.indexOf('kmw-disabled') >= 0 : false;\r\n      var disabledAfter = (mutation.target as HTMLElement).className.indexOf('kmw-disabled') >= 0;\r\n\r\n      if(disabledBefore && !disabledAfter) {\r\n        this._EnableControl(mutation.target as HTMLElement);\r\n      } else if(!disabledBefore && disabledAfter) {\r\n        this._DisableControl(mutation.target as HTMLElement);\r\n      }\r\n\r\n      // 'readonly' triggers on whether or not the attribute exists, not its value.\r\n      if(!disabledAfter && mutation.attributeName == \"readonly\") {\r\n        var readonlyBefore = mutation.oldValue ? mutation.oldValue != null : false;\r\n        var elem = mutation.target;\r\n\r\n        if(elem instanceof elem.ownerDocument.defaultView.HTMLInputElement\r\n            || elem instanceof elem.ownerDocument.defaultView.HTMLTextAreaElement) {\r\n          var readonlyAfter = elem.readOnly;\r\n\r\n          if(readonlyBefore && !readonlyAfter) {\r\n            this._EnableControl(mutation.target as HTMLElement);\r\n          } else if(!readonlyBefore && readonlyAfter) {\r\n            this._DisableControl(mutation.target as HTMLElement);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  _AutoAttachObserverCore = (mutations: MutationRecord[]) => {\r\n    var inputElementAdditions = [];\r\n    var inputElementRemovals = [];\r\n\r\n    for(var i=0; i < mutations.length; i++) {\r\n      let mutation = mutations[i];\r\n\r\n      for(var j=0; j < mutation.addedNodes.length; j++) {\r\n        inputElementAdditions = inputElementAdditions.concat(this._GetDocumentEditables(mutation.addedNodes[j] as HTMLElement));\r\n      }\r\n\r\n      for(j = 0; j < mutation.removedNodes.length; j++) {\r\n        inputElementRemovals = inputElementRemovals.concat(this._GetDocumentEditables(mutation.removedNodes[j] as HTMLElement));\r\n      }\r\n    }\r\n\r\n    for(var k = 0; k < inputElementAdditions.length; k++) {\r\n      if(this.isKMWInput(inputElementAdditions[k])) { // Apply standard element filtering!\r\n        this._MutationAdditionObserved(inputElementAdditions[k]);\r\n      }\r\n    }\r\n\r\n    for(k = 0; k < inputElementRemovals.length; k++) {\r\n      let matched = false;\r\n      const elem = inputElementRemovals[k];\r\n\r\n      // Note:  for iframes, .contentWindow has already been deleted by this point!\r\n      if(elem instanceof elem.ownerDocument.defaultView.HTMLIFrameElement) {\r\n        // Non-design iframes\r\n        for(let i = 0; i < this.embeddedPageContexts.length; i++) {\r\n          if(this.embeddedPageContexts[i].options.owner == elem) {\r\n            // we can't do the standard detachment anymore, since the document and its elements\r\n            // have been obliterated.  BUT!  We still have our .inputList and can handle\r\n            // things that way!\r\n            this.embeddedPageContexts[i].shutdown();\r\n\r\n            // Also, remove the child attachment-engine, too.\r\n            this.embeddedPageContexts.splice(i, 1);\r\n            matched = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if(!matched) {\r\n          // Time to check for design-mode iframe attachment...\r\n          for(let i = 0; i < this._inputList.length; i++) {\r\n            if(this._inputList[i] == elem) {\r\n              // We have a match!  Fortunately, this case is simpler from here.\r\n              this.detachFromControl(elem);\r\n\r\n              // Since the iframe itself was removed from the hierarchy, the detachment\r\n              // design-mode check will likely fail.  Double-check for robustness, but\r\n              // we'll need to tidy up our _inputList here.\r\n              if(this._inputList[i] == elem) {\r\n                this._inputList.splice(i, 1);\r\n              }\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      } else if(this.isKMWInput(elem)) {\r\n        this._MutationRemovalObserved(elem);\r\n      }\r\n    }\r\n\r\n    /* After all mutations have been handled, we need to recompile our .sortedInputs array, but only\r\n      * if any have actually occurred.\r\n      */\r\n    if(inputElementAdditions.length || inputElementRemovals.length) {\r\n      if(!this.device.touchable) {\r\n        this.listInputs();\r\n      } else if(this.device.touchable) {   // If something was added or removed, chances are it's gonna mess up our touch-based layout scheme, so let's update the touch elements.\r\n        window.setTimeout(() => {\r\n          this.listInputs();\r\n        }, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function     _MutationAdditionObserved\r\n   * Scope        Private\r\n   * @param       {Element}  Pelem     A page input, textarea, or iframe element.\r\n   * Description  Used by the MutationObserver event handler to properly setup any elements dynamically added to the document post-initialization.\r\n   *\r\n   */\r\n  _MutationAdditionObserved = (Pelem: HTMLElement) => {\r\n    if(Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement) {\r\n      //Problem:  the iframe is loaded asynchronously, and we must wait for it to load fully before hooking in.\r\n\r\n      const attachFunctor = () => {  // Triggers at the same time as iframe's onload property, after its internal document loads.\r\n        // Provide a minor delay to allow 'load' event handlers to set the design-mode property.\r\n        window.setTimeout(() => {\r\n          this.attachToControl(Pelem);\r\n        }, 1);\r\n      };\r\n\r\n      Pelem.addEventListener('load', attachFunctor);\r\n\r\n      // The following block breaks for design-mode iframes, at least in Chrome; a blank document may exist\r\n      // before the load of the desired actual document.\r\n      //\r\n      // /* If the iframe has somehow already loaded, we can't expect the onload event to be raised.  We ought just\r\n      // * go ahead and perform our callback's contents.\r\n      // *\r\n      // * keymanweb.domManager.attachToControl() is now idempotent, so even if our call 'whiffs', it won't cause long-lasting\r\n      // * problems.\r\n      // */\r\n      // if(Pelem.contentDocument.readyState == 'complete') {\r\n      //   window.setTimeout(attachFunctor, 1);\r\n      // }\r\n    } else {\r\n      this.attachToControl(Pelem);\r\n    }\r\n  }\r\n\r\n  // Used by the mutation event handler to properly decouple any elements dynamically removed from the document.\r\n  _MutationRemovalObserved = (Pelem: HTMLElement) => {\r\n    this.detachFromControl(Pelem); // Remove all KMW event hooks, styling.\r\n  }\r\n\r\n  // To be called by the object responsible for webpage-integration.\r\n  initMutationObservers(document: Document, manualAttach: boolean) {\r\n    if(typeof MutationObserver == 'function') {\r\n      var observationTarget = document.querySelector('body'), observationConfig: MutationObserverInit;\r\n      if(!manualAttach) { //I1961\r\n        observationConfig = { childList: true, subtree: true};\r\n        this.attachmentObserver = new MutationObserver(this._AutoAttachObserverCore);\r\n        this.attachmentObserver.observe(observationTarget, observationConfig);\r\n      }\r\n\r\n      /*\r\n        * Setup of handlers for dynamic detection of the kmw-disabled class tag that controls enablement.\r\n        */\r\n      observationConfig = { subtree: true, attributes: true, attributeOldValue: true, attributeFilter: ['class', 'readonly']};\r\n      this.enablementObserver = new MutationObserver(this._EnablementMutationObserverCore);\r\n      this.enablementObserver.observe(observationTarget, observationConfig);\r\n\r\n      this.inputModeObserver = new MutationObserver(this._InputModeObserverCore);\r\n      this.enableInputModeObserver();\r\n    } else {\r\n      console.warn(\"Your browser is outdated and does not support MutationObservers, a web feature \" +\r\n        \"needed by KeymanWeb to support dynamically-added elements.\");\r\n    }\r\n  }\r\n\r\n  enableInputModeObserver() {\r\n    const observationTarget = document.querySelector('body');\r\n    const observationConfig = { subtree: true, attributes: true, attributeFilter: ['inputmode'] };\r\n    this.inputModeObserver?.observe(observationTarget, observationConfig);\r\n  }\r\n\r\n  disableInputModeObserver() {\r\n    this.inputModeObserver?.disconnect();\r\n  }\r\n\r\n  /**\r\n   * Get the user-specified (or default) font for the first mapped input or textarea element\r\n   * before applying any keymanweb styles or classes\r\n   *\r\n   *  @return   {string}\r\n   */\r\n  getBaseFont() {\r\n    var ipInput = document.getElementsByTagName<'input'>('input'),\r\n        ipTextArea=document.getElementsByTagName<'textarea'>('textarea'),\r\n        n=0,fs,fsDefault='Arial,sans-serif';\r\n\r\n    // Find the first input element (if it exists)\r\n    if(ipInput.length == 0 && ipTextArea.length == 0) {\r\n      n=0;\r\n    } else if(ipInput.length > 0 && ipTextArea.length == 0) {\r\n      n=1;\r\n    } else if(ipInput.length == 0 && ipTextArea.length > 0) {\r\n      n=2;\r\n    } else {\r\n      var firstInput = ipInput[0];\r\n      var firstTextArea = ipTextArea[0];\r\n\r\n      if(firstInput.offsetTop < firstTextArea.offsetTop) {\r\n        n=1;\r\n      } else if(firstInput.offsetTop > firstTextArea.offsetTop) {\r\n        n=2;\r\n      } else if(firstInput.offsetLeft < firstTextArea.offsetLeft) {\r\n        n=1;\r\n      } else if(firstInput.offsetLeft > firstTextArea.offsetLeft) {\r\n        n=2;\r\n      }\r\n    }\r\n\r\n    // Grab that font!\r\n    switch(n) {\r\n      case 0:\r\n        fs=fsDefault;\r\n        break;\r\n      case 1:\r\n        fs = getComputedStyle(ipInput[0]).fontFamily || '';\r\n        break;\r\n      case 2:\r\n        fs = getComputedStyle(ipTextArea[0]).fontFamily || '';\r\n        break;\r\n    }\r\n    if(typeof(fs) == 'undefined' || fs == 'monospace') {\r\n      fs=fsDefault;\r\n    }\r\n\r\n    return fs;\r\n  }\r\n\r\n  /**\r\n   *  Add or replace the style sheet used to set the font for input elements\r\n   *\r\n   *  @param  {Object}  kfd   KFont font descriptor\r\n   *  @return {string}\r\n   *\r\n   **/\r\n  buildAttachmentFontStyle(keyboardFontDescriptor: InternalKeyboardFont): string {\r\n    let kfd = keyboardFontDescriptor;\r\n\r\n    // Get name of font to be applied\r\n    let fontName = this.baseFont;\r\n    if (kfd && typeof (kfd.family) != 'undefined') {\r\n      fontName = kfd['family']; // If we have a font set by the keyboard, prioritize that over the base font.\r\n    }\r\n\r\n    // Unquote font name in base font (if quoted)\r\n    fontName = fontName.replace(/\\u0022/g, '');\r\n\r\n    // Set font family chain for mapped elements and remove any double quotes\r\n    // font-family:  maintains the base font as a fallback.\r\n    var rx = new RegExp('\\\\s?' + fontName + ',?'), fontFamily = this.appliedFont.replace(/\\u0022/g, '');\r\n\r\n    // Remove base font name from chain if present\r\n    fontFamily = fontFamily.replace(rx, '');\r\n    fontFamily = fontFamily.replace(/,$/, '');\r\n\r\n    // Then replace it at the head of the chain\r\n    if (fontFamily == '') {\r\n      fontFamily = fontName;\r\n    } else {\r\n      fontFamily = fontName + ',' + fontFamily;\r\n    }\r\n\r\n    // Re-insert quotes around individual font names\r\n    fontFamily = '\"' + fontFamily.replace(/\\,\\s?/g, '\",\"') + '\"';\r\n\r\n    // Add to the stylesheet, quoted, and with !important to override any explicit style\r\n    let s = '.keymanweb-font{\\nfont-family:' + fontFamily + ' !important;\\n}\\n';\r\n\r\n    // Store the current font chain (with quote-delimited font names)\r\n    this.appliedFont = fontFamily;\r\n\r\n    // Return the style string\r\n    return s;\r\n  }\r\n\r\n  setAttachmentFont(\r\n    keyboardFontDescriptor: InternalKeyboardFont,\r\n    fontRoot: string,\r\n    os: DeviceSpec.OperatingSystem\r\n  ) {\r\n    this.stylesheetManager.unlinkAll();\r\n    this.stylesheetManager.addStyleSheetForFont(keyboardFontDescriptor, fontRoot, os);\r\n    this.stylesheetManager.linkStylesheet(createStyleSheet(this.buildAttachmentFontStyle(keyboardFontDescriptor)));\r\n\r\n    // Future note:  might be worth propagating to any child documents (embedded iframes) via\r\n    // our child instances of this class. (via `this.embeddedPageContexts`)\r\n  }\r\n\r\n  shutdown() {\r\n    try {\r\n      this.enablementObserver?.disconnect();\r\n      this.attachmentObserver?.disconnect();\r\n      this.inputModeObserver?.disconnect();\r\n      this.stylesheetManager?.unlinkAll();\r\n\r\n      /*\r\n       * Part of shutdown involves detaching from elements... which typically does involve\r\n       * restoring the original `inputMode` settings.  Remove the observer reference after\r\n       * disconnection to prevent any further disable-enable actions.\r\n       *\r\n       * The others aren't toggled, so they're fine to leave.\r\n       */\r\n      this.inputModeObserver = null;\r\n\r\n      // Embedded pages first - that way, each page can handle its own inputs, rather than having\r\n      // the top-level instance handle all attached elements.\r\n      // (inputList enumerates child pages, too!)\r\n      this.embeddedPageContexts.forEach((embeddedPage) => {\r\n        try {\r\n          embeddedPage.shutdown();\r\n        } catch (e) {}\r\n      });\r\n\r\n      for(let input of this.inputList) {\r\n        try {\r\n          this.detachFromControl(input);\r\n        } catch(e) {\r\n          // If the element was within an iframe's document AND the iframe itself was\r\n          // removed, we can no longer read the element's properties.\r\n          // `.isKMWInput()` may throw an error then.\r\n          this.emit('disabled', input);\r\n        }\r\n      }\r\n      this._inputList = [];\r\n    } catch (e) {\r\n      console.error(\"Error occurred during shutdown\");\r\n      console.error(e);\r\n    }\r\n  }\r\n}\r\n",
    "import EventEmitter from \"eventemitter3\";\r\n\r\n/**\r\n * The return object documented for\r\n * https://help.keyman.com/developer/engine/web/16.0/reference/core/getUIState.\r\n *\r\n * As it has long been documented in this format, property names should not be adjusted!\r\n */\r\nexport class FocusStateAPIObject {\r\n  /**\r\n   * Indicates that KMW is in a state of actively restoring focus to a previously-active element.\r\n   */\r\n  activated: boolean;\r\n\r\n  /**\r\n   * Indicates that KMW is actively maintaining focus on the currently active OutputTarget control\r\n   * while some UI element (the OSK, a keyboard-change UI) is the current focus of user-interaction.\r\n   */\r\n  activationPending: boolean;\r\n\r\n  constructor(pending: boolean, activated: boolean) {\r\n    this.activationPending = pending;\r\n    this.activated = activated;\r\n  }\r\n}\r\n\r\ninterface EventMap {\r\n  /**\r\n   * Called immediately after the `maintainingFocus` flag is cleared.\r\n   * @returns\r\n   */\r\n  'maintainingfocusend': () => void;\r\n}\r\n\r\n// Formerly handled under \"UIManager\".\r\n/**\r\n * This class provides fields and methods useful for assisting context management.  Control focus (and\r\n * thus, activation of the corresponding OutputTarget) should not be lost to non-context components of\r\n * KMW, such as the OSK or a keyboard selector.\r\n */\r\nexport class FocusAssistant extends EventEmitter<EventMap> {\r\n  private _maintainingFocus: boolean = false;  // ActivatingKeymanWebUI - Does the OSK have active focus / an active interaction?\r\n\r\n  /**\r\n   * Returns `true` only when the active target has an active `forceScroll` method/state, which deliberately\r\n   * blurs and then refocuses the same element in order to force a browser-default page scroll to keep the\r\n   * element and text-caret visible.\r\n   */\r\n  readonly isTargetForcingScroll: () => boolean;\r\n\r\n  constructor(isTargetForcingScroll: () => boolean) {\r\n    super();\r\n    this.isTargetForcingScroll = isTargetForcingScroll;\r\n  }\r\n\r\n  /*\r\n   * Long-term idea here: about all of the relevant OSK events that would interact with this have \"enter\" and\r\n   * \"leave\" variants - we could take a stack of `Promise`s.  On a `Promise` fulfillment, remove it from the\r\n   * stack.  When the last one is removed, the focus-maintenance state would end, allowing further events\r\n   * to deactivate the active OutputTarget.\r\n   */\r\n\r\n  /**\r\n   * Indicates that KMW is actively maintaining focus on the currently active OutputTarget control, rather\r\n   * than losing focus while some UI element (the OSK, a keyboard-change UI) is the most direct recipient\r\n   * of browser focus due to user-interaction - generally, with non-context engine components.\r\n   *\r\n   * While the flag is active, the context-management system should not deactivate an OutputTarget upon\r\n   * its element's loss of focus within the page unless setting a different OutputTarget as active.\r\n   *\r\n   * TODO: (potential) Future enhancement - this should not be possible to set if there is no currently-active\r\n   * context target to maintain.\r\n   */\r\n  // Formerly `isActivating`.\r\n  public get maintainingFocus(): boolean {\r\n    return this._maintainingFocus;\r\n  }\r\n\r\n  public set maintainingFocus(value: boolean) {\r\n    const priorValue = this._maintainingFocus;\r\n    this._maintainingFocus = value;\r\n\r\n    // Needed to properly update .activeTarget upon loss of maintaining-focus state.\r\n    if(priorValue && !value) {\r\n      this.emit('maintainingfocusend');\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Long-term idea here:  as (aside from OSK title/resize bar interactions) it's always used to actively\r\n   * RESTORE focus, taking in a closure to perform during the 'focus restoration state' would make a nice\r\n   * design.  Something like .performRefocus(closure: () => void):\r\n   * - would set this field before calling the closure\r\n   * - would unset this field after calling the closure\r\n   * - would try-catch to guarantee the 'unset'.\r\n   *\r\n   * OSK drag handlers should utilize the other field, anyway.\r\n   */\r\n\r\n  /**\r\n   * Indicates that KMW is in a state of actively restoring focus to a previously-active element.\r\n   * This is most commonly utilized whenever a keyboard is newly activated, generally due to\r\n   * user interaction to select the new keyboard.\r\n   */\r\n  // Formerly `justActivated`.\r\n  restoringFocus: boolean = false;   // JustActivatedKeymanWebUI - focussing back to control after KeymanWeb UI interaction\r\n\r\n  /**\r\n   * JH (2023-04-24): given how it's used within the KMW engine, this seems extremely similar in purpose to\r\n   * `restoringFocus` - it's set before calling an element's focus method to prevent focus-handlers from causing\r\n   * unwanted side-effects.  The ONE critical detail:  KSF / `saveFocus` will block a single check, not waiting for\r\n   * control flow restoration before clearing, where the other matching cases will block 100 (maybe to prevent\r\n   * some sort of event softlock?).\r\n   *\r\n   * So, it's like the `saveFocus` variant immediately clears the flag once checked, while others are intended\r\n   * to only clear the flag once control returns to the method that triggered a focus op.\r\n   *\r\n   * A future refactor should be able to merge the two, though it's worth noting that there are early checks for\r\n   * this, but _not_ `restoringFocus`, in the context-management control-blur event handler.  So, it's not 100%\r\n   * super-straightforward, but a refactor should be manageable all the same.\r\n   */\r\n  _IgnoreNextSelChange = 0;\r\n\r\n  /**\r\n   * Is used as a time-delayed async `restoringFocus` or `maintainingFocus` - could be modeled decently as a Promise.\r\n   * Probably more the latter, as it's a touch-OSK interaction like the other `maintainingFocus` cases.\r\n   */\r\n  focusing: boolean;\r\n  /**\r\n   * Manages the time-delay aspect of `focusing` state.\r\n   */\r\n  focusTimer: number;\r\n\r\n  /**\r\n   * Function     getUIState\r\n   * Scope        Public\r\n   * @return      {Object.<string,boolean>}\r\n   * Description  Return object with activation state of UI:\r\n   *                activationPending (bool):   KMW being activated\r\n   *                activated         (bool):   KMW active\r\n   */\r\n  getUIState(): FocusStateAPIObject {\r\n    return new FocusStateAPIObject(this.maintainingFocus, this.restoringFocus);\r\n  }\r\n\r\n  /**\r\n   * Set or clear the IsActivatingKeymanWebUI flag (exposed function)\r\n   *\r\n   * @param       {(boolean|number)}  state  Activate (true,false)\r\n   */\r\n  setMaintainingFocus(state: boolean) {\r\n    this.maintainingFocus = state ? true : false;\r\n  }\r\n\r\n  setFocusTimer(): void {\r\n    this.focusing=true;\r\n\r\n    this.focusTimer = window.setTimeout(function() {\r\n      this.focusing=false;\r\n    }.bind(this), 50)\r\n  }\r\n}",
    "import { type Keyboard, KeyboardScriptError } from '@keymanapp/keyboard-processor';\r\nimport { type KeyboardStub } from 'keyman/engine/package-cache';\r\nimport { CookieSerializer } from 'keyman/engine/dom-utils';\r\nimport { eventOutputTarget, PageContextAttachment } from 'keyman/engine/attachment';\r\nimport { DomEventTracker, LegacyEventEmitter } from 'keyman/engine/events';\r\nimport { DesignIFrame, OutputTarget, nestedInstanceOf } from 'keyman/engine/element-wrappers';\r\nimport {\r\n  ContextManagerBase,\r\n  type KeyboardInterface,\r\n  LegacyAPIEvents\r\n} from 'keyman/engine/main';\r\nimport { BrowserConfiguration } from './configuration.js';\r\nimport { FocusAssistant } from './context/focusAssistant.js';\r\n\r\nexport interface KeyboardCookie {\r\n  current: string;\r\n}\r\n\r\n/**\r\n * Set target element text direction (LTR or RTL), but only if the element is empty\r\n *\r\n * If the element base directionality is changed after it contains content, unless all the text\r\n * has the same directionality, text runs will be re-ordered which is confusing and causes\r\n * incorrect caret positioning\r\n *\r\n * @param       {Object}      Ptarg      Target element\r\n */\r\nfunction _SetTargDir(Ptarg: HTMLElement, activeKeyboard: Keyboard) {\r\n  const elDir = activeKeyboard?.isRTL ? 'rtl' : 'ltr';\r\n\r\n  if(Ptarg) {\r\n    if(Ptarg instanceof Ptarg.ownerDocument.defaultView.HTMLInputElement\r\n        || Ptarg instanceof Ptarg.ownerDocument.defaultView.HTMLTextAreaElement) {\r\n      if((Ptarg as HTMLInputElement|HTMLTextAreaElement).value.length == 0) {\r\n        Ptarg.dir=elDir;\r\n      }\r\n    } else if(typeof Ptarg.textContent == \"string\" && Ptarg.textContent.length == 0) { // As with contenteditable DIVs, for example.\r\n      Ptarg.dir=elDir;\r\n    }\r\n  }\r\n}\r\n\r\nexport default class ContextManager extends ContextManagerBase<BrowserConfiguration> {\r\n  private _activeKeyboard: {keyboard: Keyboard, metadata: KeyboardStub};\r\n  private cookieManager = new CookieSerializer<KeyboardCookie>('KeymanWeb_Keyboard');\r\n  readonly focusAssistant = new FocusAssistant(() => this.activeTarget?.isForcingScroll());\r\n  readonly page: PageContextAttachment;\r\n  private mostRecentTarget: OutputTarget<any>;\r\n  private currentTarget: OutputTarget<any>;\r\n\r\n  private globalKeyboard: {keyboard: Keyboard, metadata: KeyboardStub};\r\n\r\n  private _eventsObj: () => LegacyEventEmitter<LegacyAPIEvents>;\r\n  private domEventTracker = new DomEventTracker();\r\n\r\n  constructor(engineConfig: BrowserConfiguration, eventsClosure: () => LegacyEventEmitter<LegacyAPIEvents>) {\r\n    super(engineConfig);\r\n\r\n    this._eventsObj = eventsClosure;\r\n\r\n    this.page = new PageContextAttachment(window.document, {\r\n      hostDevice: this.engineConfig.hostDevice\r\n    });\r\n\r\n    this.focusAssistant.on('maintainingfocusend', () => {\r\n      // Basically, if the maintaining state were the reason we still had an `activeTarget`...\r\n      if(!this.activeTarget && this.mostRecentTarget) {\r\n        this.emit('targetchange', this.activeTarget);\r\n      }\r\n    });\r\n  }\r\n\r\n  get apiEvents(): LegacyEventEmitter<LegacyAPIEvents> {\r\n    return this._eventsObj();\r\n  }\r\n\r\n  initialize(): void {\r\n    this.on('keyboardasyncload', (stub, completion) => {\r\n      this.engineConfig.alertHost?.wait('Installing keyboard<br/>' + stub.name);\r\n\r\n      completion.then(() => {\r\n        this.engineConfig.alertHost?.wait(); // cancels the wait.\r\n      });\r\n    });\r\n\r\n    this.engineConfig.deferForInitialization.then(() => {\r\n      const device = this.engineConfig.hostDevice;\r\n\r\n      const noPropagation = (event: Event) => event.stopPropagation()\r\n\r\n      // For any elements being attached, or being enabled after having been disabled...\r\n      this.page.on('enabled', (elem) => {\r\n        if(!(elem._kmwAttachment.interface instanceof DesignIFrame)) {\r\n          // For anything attached but (design-mode) iframes...\r\n\r\n          // This block:  has to do with maintaining focus.\r\n          if(device.touchable) {\r\n            // Remove any handlers for \"NonKMWTouch\" elements, since we're enabling it here.\r\n            this.domEventTracker.detachDOMEvent(elem, 'touchstart', this.nonKMWTouchHandler);\r\n\r\n            // Prevent base-page touch handlers from causing a defocus when interacting\r\n            // with attached input elements.\r\n            this.domEventTracker.attachDOMEvent(elem, 'touchmove', noPropagation, false);\r\n            this.domEventTracker.attachDOMEvent(elem, 'touchend', noPropagation, false);\r\n          }\r\n\r\n          // This block:  has to do with maintaining focus.\r\n          this.domEventTracker.attachDOMEvent(elem,'focus', this._ControlFocus);\r\n          this.domEventTracker.attachDOMEvent(elem,'blur', this._ControlBlur);\r\n          this.domEventTracker.attachDOMEvent(elem,'click', this._Click);\r\n        } else {\r\n          // For design-mode iframes:\r\n\r\n          // This block:  has to do with maintaining focus.\r\n          var Lelem=(elem as HTMLIFrameElement).contentWindow.document;\r\n          // I2404 - Attach to IFRAMEs child objects, only editable IFRAMEs here\r\n          if(device.browser == 'firefox') {\r\n            this.domEventTracker.attachDOMEvent(Lelem,'focus', this._ControlFocus);\r\n            this.domEventTracker.attachDOMEvent(Lelem,'blur', this._ControlBlur);\r\n          } else { // Chrome, Safari\r\n            this.domEventTracker.attachDOMEvent(Lelem.body,'focus', this._ControlFocus);\r\n            this.domEventTracker.attachDOMEvent(Lelem.body,'blur', this._ControlBlur);\r\n          }\r\n        }\r\n      });\r\n\r\n      // For any elements being detached, disabled, or deliberately not being attached (b/c nonKMWTouchHandler)...\r\n      this.page.on('disabled', (elem) => {\r\n        // Note:  we may not actually be attached at this point.\r\n        if(!(nestedInstanceOf(elem, \"HTMLIFrameElement\"))) {\r\n          // For anything attached but (design-mode) iframes...\r\n\r\n          // This block:  has to do with maintaining focus.\r\n          if(device.touchable) {\r\n            this.domEventTracker.attachDOMEvent(elem, 'touchstart', this.nonKMWTouchHandler, false);\r\n\r\n            // does not detach the touch-handlers added in 'enabled'?\r\n          }\r\n\r\n          // This block:  has to do with maintaining focus.\r\n          this.domEventTracker.detachDOMEvent(elem,'focus', this._ControlFocus);\r\n          this.domEventTracker.detachDOMEvent(elem,'blur', this._ControlBlur);\r\n          this.domEventTracker.detachDOMEvent(elem,'click', this._Click);\r\n        } else {\r\n          // For design-mode iframes:\r\n\r\n          // This block:  has to do with maintaining focus.\r\n          let Lelem = (elem as HTMLIFrameElement).contentWindow.document;\r\n          // Mozilla      // I2404 - Attach to  IFRAMEs child objects, only editable IFRAMEs here\r\n          if(device.browser == 'firefox') {\r\n            // Firefox won't handle these events on Lelem.body - only directly on Lelem (the doc) instead.\r\n            this.domEventTracker.detachDOMEvent(Lelem,'focus', this._ControlFocus);\r\n            this.domEventTracker.detachDOMEvent(Lelem,'blur', this._ControlBlur);\r\n          } else { // Chrome, Safari\r\n            this.domEventTracker.detachDOMEvent(Lelem.body,'focus', this._ControlFocus);\r\n            this.domEventTracker.detachDOMEvent(Lelem.body,'blur', this._ControlBlur);\r\n          }\r\n        }\r\n\r\n        // This block:  has to do with maintaining focus (and consequences)\r\n        var lastElem = this.mostRecentTarget?.getElement();\r\n        if(lastElem && lastElem == elem) {\r\n          this.forgetActiveTarget(); // should already auto-hide the OSK while at it via event.\r\n        }\r\n      });\r\n\r\n      // This fires the events we just registered for.\r\n      this.page.install(this.engineConfig.attachType == 'manual');\r\n    });\r\n  }\r\n\r\n  get activeTarget(): OutputTarget<any> {\r\n    /*\r\n     * Assumption:  the maintainingFocus flag may only be set when there is a current target.\r\n     * This is not enforced proactively at present, but the assumption should hold.  (2023-05-03)\r\n     */\r\n    const maintainingFocus = this.focusAssistant.maintainingFocus;\r\n    return this.currentTarget || (maintainingFocus ? this.mostRecentTarget : null);\r\n  }\r\n\r\n  get lastActiveTarget(): OutputTarget<any> {\r\n    return this.mostRecentTarget;\r\n  }\r\n\r\n  public deactivateCurrentTarget() {\r\n    const priorTarget = this.activeTarget || this.lastActiveTarget;\r\n\r\n    /* During integrated tests, it was possible in the past for a `beforeAll`\r\n     * -initialized KMW to reach this state between tests.  The target fixture\r\n     * got cleared, but the `mostRecentTarget` / `lastActiveTarget` was not\r\n     * - just the `currentTarget` / `activeTarget`.  See #9718.\r\n     *\r\n     * Newly-added code in `forgetActiveTarget` seeks to prevent this scenario,\r\n     * but as there's no consistent repro to prove it sufficient, an appropriate\r\n     * guard-condition has been added here too.\r\n     */\r\n    if(priorTarget && this.page.isAttached(priorTarget.getElement())) {\r\n      this._BlurKeyboardSettings(priorTarget.getElement());\r\n    }\r\n\r\n    // Because of focus-maintenance effects\r\n    if(!this.activeTarget) {\r\n      this.setActiveTarget(null, true);\r\n    }\r\n  }\r\n\r\n  public forgetActiveTarget() {\r\n    this.focusAssistant.maintainingFocus = false;\r\n    this.focusAssistant.restoringFocus = false;\r\n\r\n    const priorTarget = this.activeTarget || this.mostRecentTarget;\r\n    if(priorTarget) {\r\n      this._BlurKeyboardSettings(priorTarget.getElement());\r\n    }\r\n\r\n    // Will ensure that the element is no longer active.  Does not erase\r\n    // it from being the `lastActiveTarget`, though.\r\n    this.setActiveTarget(null, true);\r\n\r\n    // So we erase it here.\r\n    if(priorTarget == this.lastActiveTarget) {\r\n      this.mostRecentTarget = null;\r\n    }\r\n  }\r\n\r\n  public setActiveTarget(target: OutputTarget<any>, sendEvents: boolean) {\r\n    const previousTarget = this.mostRecentTarget;\r\n    const originalTarget = this.activeTarget; // may differ, depending on focus state.\r\n\r\n    if(target == originalTarget) {\r\n      // A focus state may have .currentTarget as null at this stage; if the func\r\n      // is being called with a non-null parameter, we want this SET. #9404\r\n      if(originalTarget) {\r\n        this.currentTarget = originalTarget;\r\n      }\r\n\r\n      /**\r\n       * If it's already active, we should cancel early.\r\n       *\r\n       * The #1 reason - we don't want .resetContext calls in this scenario.\r\n       * In particular, moving the caret or setting the selection range of an\r\n       * <input> or <textarea> in desktop Safari programmatically WILL trigger\r\n       * focus events!\r\n       *\r\n       * https://bugs.webkit.org/show_bug.cgi?id=224425\r\n       *\r\n       * > In WebKit, focus follows selection so if you modify selection, then the\r\n       *   focus will be moved there.\r\n       *\r\n       * Caret manipulation in the browser, as needed by certain keyboard text\r\n       * operations, IS text selection - of width zero, but still selection.\r\n       *\r\n       * At present, even if setting selection on the focused element, Safari will\r\n       * still trigger a focus event upon it... which can cascade here if uncaught\r\n       * and trigger a contextReset DURING keyboard rule processing without this\r\n       * guard.\r\n       *\r\n       * The #2 reason:  the `forceScroll` method used within the Input and Textarea\r\n       * types whenever the selection must be programatically updated.  The blur\r\n       * is 'swallowed', preventing it from being dropped as 'active'. However, the\r\n       * corresponding focus is not swallowed... until this if-condition's check.\r\n       */\r\n      return;\r\n    }\r\n\r\n    // We condition on 'priorElement' below as a check to allow KMW to set a default active keyboard.\r\n    let hadRecentElement = !!previousTarget;\r\n\r\n    // Must set before _Blur / _Focus to avoid infinite recursion due to complications\r\n    // in setActiveKeyboard behavior with managed keyboard settings.\r\n    this.currentTarget = this.mostRecentTarget = target; // I3363 (Build 301)\r\n    this.predictionContext.setCurrentTarget(target);\r\n\r\n    if(this.focusAssistant.restoringFocus) {\r\n      this._BlurKeyboardSettings(target.getElement());\r\n    } else if(target) {\r\n      this._FocusKeyboardSettings(target.getElement(), !hadRecentElement);\r\n    }\r\n\r\n    // Always do the common focus stuff, instantly returning if we're in an editable iframe.\r\n    if(this._CommonFocusHelper(target)) {\r\n      return true;\r\n    };\r\n\r\n    // Set element directionality (but only if element is empty)\r\n    let Ltarg = target?.getElement();\r\n    if(target instanceof DesignIFrame) {\r\n      Ltarg = target.docRoot;\r\n    }\r\n    if(Ltarg && Ltarg.ownerDocument && Ltarg instanceof Ltarg.ownerDocument.defaultView.HTMLElement) {\r\n      _SetTargDir(Ltarg, this.activeKeyboard?.keyboard);\r\n    }\r\n\r\n    if(target != originalTarget) {\r\n      this.emit('targetchange', target);\r\n    }\r\n\r\n    if(sendEvents) {\r\n      // //Execute external (UI) code needed on focus if required\r\n      this.apiEvents.callEvent('controlfocused', {\r\n        target: target?.getElement() || null,\r\n        activeControl: previousTarget?.getElement()\r\n      });\r\n    }\r\n  }\r\n\r\n  get activeKeyboard() {\r\n    return this._activeKeyboard;\r\n  }\r\n\r\n  restoreLastActiveTarget() {\r\n    if(!this.mostRecentTarget) {\r\n      return;\r\n    }\r\n\r\n    this.focusAssistant.restoringFocus = true;\r\n    this.mostRecentTarget.focus(); // should auto-restore .mostRecentTarget as .currentTarget\r\n                                   // via related focus events.\r\n    this.focusAssistant.restoringFocus = false;\r\n  }\r\n\r\n  insertText(kbdInterface: KeyboardInterface<ContextManager>, Ptext: string, PdeadKey: number) {\r\n    // Find the correct output target to manipulate.  The user has likely be interacting with a\r\n    // 'help page' keyboard, like desktop `sil_euro_latin`, and active browser focus on the\r\n    // original context element may have been lost.\r\n    this.restoreLastActiveTarget();\r\n\r\n    let outputTarget = this.activeTarget;\r\n\r\n    if(outputTarget == null && this.mostRecentTarget) {\r\n      outputTarget = this.activeTarget;\r\n    }\r\n\r\n    if(outputTarget != null) {\r\n      return super.insertText(kbdInterface, Ptext, PdeadKey);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Determines the 'target' currently used to determine which keyboard should be active.\r\n   * When `null`, keyboard-activation operations will affect the global default; otherwise,\r\n   * such operations affect only the specified `target`.\r\n   *\r\n   * This is based on the current `.activeTarget` and its related attachment metadata.\r\n   */\r\n  protected currentKeyboardSrcTarget(): OutputTarget<any> {\r\n    let target = this.currentTarget || this.mostRecentTarget;\r\n\r\n    if(this.isTargetKeyboardIndependent(target)) {\r\n      return target;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private isTargetKeyboardIndependent(target: OutputTarget<any>): boolean {\r\n    let attachmentInfo = target?.getElement()._kmwAttachment;\r\n\r\n    // If null or undefined, we're in 'global' mode.\r\n    return !!(attachmentInfo?.keyboard || attachmentInfo?.keyboard === '');\r\n  }\r\n\r\n  // Note:  is part of the keyboard activation process.  Not to be called directly by published API.\r\n  activateKeyboardForTarget(kbd: {keyboard: Keyboard, metadata: KeyboardStub}, target: OutputTarget<any>) {\r\n    let attachment = target?.getElement()._kmwAttachment;\r\n\r\n    if(!attachment) {\r\n      // if not set with an \"independent keyboard\", changes the global.\r\n      this.globalKeyboard = kbd;\r\n    } else {\r\n      // if set with an \"independent keyboard\", changes only the active target's keyboard.\r\n      //\r\n      // This method is not called on the pathway to shift a control back to 'global keyboard' mode;\r\n      // only after.\r\n      attachment.keyboard = kbd?.metadata.id ?? '';\r\n      attachment.languageCode = kbd?.metadata.langId ?? '';\r\n    }\r\n\r\n    if(this.currentKeyboardSrcTarget() == target) {\r\n      this._activeKeyboard = kbd;\r\n\r\n      // Also, update with appropriate styling.\r\n      const activeStub = kbd?.metadata;\r\n      this.page.setAttachmentFont(activeStub?.KFont, this.engineConfig.paths.fonts, this.engineConfig.hostDevice.OS);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allows setting a control to a specific keyboard that does not change if the active keyboard changes when other\r\n   * controls are active.  Only activates the keyboard if the specified control represents the currently-active\r\n   * context.\r\n   *\r\n   * This is the core method that backs\r\n   * https://help.keyman.com/DEVELOPER/ENGINE/WEB/15.0/reference/core/setKeyboardForControl.\r\n   * @param target\r\n   * @param metadata\r\n   */\r\n  public setKeyboardForTarget(target: OutputTarget<any>, kbdId: string, langId: string) {\r\n    if(target instanceof DesignIFrame) {\r\n      console.warn(\"'keymanweb.setKeyboardForControl' cannot set keyboard on iframes.\");\r\n      return;\r\n    }\r\n\r\n    let attachment = target.getElement()._kmwAttachment;\r\n\r\n    // Catches if the target is already in independent-mode, even if it's being cancelled\r\n    // during this call.\r\n    const wasPriorTarget = this.currentKeyboardSrcTarget() == target;\r\n\r\n    if(!attachment) {\r\n      return;\r\n    } else {\r\n      // Either establishes or cancels independent-keyboard mode by setting the\r\n      // associated metadata.  This will have direct effects on the results\r\n      // of .currentKeyboardSrcTarget().\r\n      attachment.keyboard = kbdId || null;\r\n      attachment.languageCode = langId || null;\r\n\r\n      // If it has just entered independent-keyboard mode, we need the second check.\r\n      if(wasPriorTarget || this.currentKeyboardSrcTarget() == target) {\r\n        const globalKbd = this.globalKeyboard.metadata;\r\n\r\n        // The `||` bits below - in case we're cancelling independent-keyboard mode.\r\n        this.activateKeyboard(\r\n          attachment.keyboard || globalKbd.id,\r\n          attachment.languageCode || globalKbd.langId,\r\n          true\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public getKeyboardStubForTarget(target: OutputTarget<any>) {\r\n    if(!this.isTargetKeyboardIndependent(target)) {\r\n      return this.globalKeyboard.metadata;\r\n    } else {\r\n      const attachment = target.getElement()._kmwAttachment;\r\n      return this.keyboardCache.getStub(attachment.keyboard, attachment.languageCode);\r\n    }\r\n  }\r\n\r\n  protected getFallbackStubKey() {\r\n    const emptyCodes = {\r\n      id: '',\r\n      langId: ''\r\n    };\r\n\r\n    if(this.engineConfig.hostDevice.touchable) {\r\n      /* Fallback behavior - if on a touch device, we need to keep a keyboard visible\r\n       * if one is available.\r\n       *\r\n       * When literally none are available, setting `emptyCodes` will ensure that `globalKeyboard`\r\n       * is unset properly and that relevant keyboard events are still generated.  (engine/main\r\n       * delegates 'fallback behavior' to its derived classes, so the parent class won't undo it.)\r\n       */\r\n      return this.keyboardCache.defaultStub || emptyCodes;\r\n    } else {\r\n      // Fallback behavior - if on a desktop device, the user still has a physical keyboard.\r\n      // Just clear out the active keyboard & OSK.\r\n      return emptyCodes;\r\n    }\r\n  }\r\n\r\n  public async activateKeyboard(keyboardId: string, languageCode?: string, saveCookie?: boolean): Promise<boolean> {\r\n    saveCookie ||= false;\r\n    const originalKeyboardTarget = this.currentKeyboardSrcTarget();\r\n\r\n    // Must do here b/c of fallback behavior stuff defined below.\r\n    // If the default keyboard is requested, load that.  May vary based on form-factor, which is\r\n    // part of what .getFallbackStubKey() handles.\r\n    if(!keyboardId) {\r\n      keyboardId = this.getFallbackStubKey().id;\r\n      languageCode = this.getFallbackStubKey().langId;\r\n    }\r\n\r\n    try {\r\n      let result = await super.activateKeyboard(keyboardId, languageCode, saveCookie);\r\n\r\n      this.engineConfig.alertHost?.wait(); // clear any pending waits.\r\n\r\n      if(saveCookie && !originalKeyboardTarget) { // if the active target uses global keyboard settings\r\n        this.cookieManager.save({current: `${keyboardId}:${languageCode}`});\r\n      }\r\n\r\n      // Only do these if the active keyboard-target still matches the original keyboard-target;\r\n      // otherwise, maintain what's correct for the currently active one.\r\n      if(originalKeyboardTarget == this.currentKeyboardSrcTarget()) {\r\n        _SetTargDir(this.currentTarget?.getElement(), this.keyboardCache.getKeyboard(keyboardId));\r\n        this.page.setAttachmentFont(this.activeKeyboard?.metadata?.KFont, this.engineConfig.paths.fonts, this.engineConfig.hostDevice.OS);\r\n\r\n        this.restoreLastActiveTarget();\r\n      }\r\n\r\n      return result;\r\n    } catch(err) {\r\n      // non-embedded:  if keyboard activation failed, deactivate the keyboard.\r\n\r\n      const fallback = async () => {\r\n        // Make sure we don't infinite-recursion should the deactivate somehow fail.\r\n        const fallbackCodes = this.getFallbackStubKey();\r\n        if((fallbackCodes.id != keyboardId)) {\r\n          await this.activateKeyboard(fallbackCodes.id, fallbackCodes.langId, true).catch(() => {});\r\n        } // else \"We already failed, so give up.\"\r\n      }\r\n\r\n      this.engineConfig.alertHost?.wait(); // clear the wait message box, either way.\r\n\r\n      const message = (err as Error)?.message ||\r\n                      'Sorry, the ' + keyboardId + ' keyboard for ' + languageCode + ' is not currently available.';\r\n\r\n      if(err instanceof KeyboardScriptError) {\r\n        // We get signaled about error log messages if the site is connected to our Sentry error reporting\r\n        // system; we want to know if we have a broken keyboard that's been published.\r\n        console.error(err || message);\r\n      } else {\r\n        // If it's just internet connectivity or \"file not found\" issues, that's not worth reporting\r\n        // to Sentry.\r\n        console.warn(err || message);\r\n      }\r\n\r\n      if(this.engineConfig.alertHost) {\r\n        // Possible future TODO:  have it return a Promise that resolves on completion of `fallback`?\r\n        // Though, we're talking about dropping the 'alert' subsystem entirely at some point.\r\n        this.engineConfig.alertHost?.alert(message, fallback);\r\n      } else {\r\n        await fallback();\r\n      }\r\n\r\n      throw err; // since the site-dev consumer may want to do their own error-handling.\r\n    }\r\n  }\r\n\r\n  //\r\n\r\n  /**\r\n   * Function             _BlurKeyboardSettings\r\n   * Description          Stores the last active element's keyboard settings.  Should be called\r\n   *                      whenever a KMW-enabled page element loses control.\r\n   */\r\n  _BlurKeyboardSettings(lastElem: HTMLElement, PInternalName?: string, PLgCode?: string) {\r\n    var keyboardID = this.activeKeyboard ? this.activeKeyboard.keyboard.id : '';\r\n    var langCode = this.activeKeyboard?.metadata.langId;\r\n\r\n    if(PInternalName !== undefined && PLgCode !== undefined) {\r\n      keyboardID = PInternalName;\r\n      langCode = PLgCode;\r\n    }\r\n\r\n    if(lastElem && lastElem._kmwAttachment.keyboard != null) {\r\n      lastElem._kmwAttachment.keyboard = keyboardID;\r\n      lastElem._kmwAttachment.languageCode = langCode;\r\n    } else {\r\n      this.globalKeyboard = this.activeKeyboard;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function             _FocusKeyboardSettings\r\n   * @param   {boolean}   blockGlobalChange   A flag indicating if the global keyboard setting should be ignored for this call.\r\n   * Description          Restores the newly active element's keyboard settings.  Should be called\r\n   *                      whenever a KMW-enabled page element gains control, but only once the prior\r\n   *                      element's loss of control is guaranteed.\r\n   */\r\n  _FocusKeyboardSettings(lastElem: HTMLElement, blockGlobalChange: boolean) {\r\n    // Important pre-condition:  the newly-focused element must be set as active.\r\n    let attachment = lastElem._kmwAttachment;\r\n    const global = this.globalKeyboard;\r\n\r\n    if(attachment.keyboard != null) {\r\n      this.activateKeyboard(attachment.keyboard, attachment.languageCode, true);\r\n    } else if(!blockGlobalChange && (global?.metadata != this._activeKeyboard?.metadata)) {\r\n      // TODO:  can we drop `!blockGlobalChange` in favor of the latter check?\r\n      this.activateKeyboard(global?.metadata.id, global?.metadata.langId, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function             _CommonFocusHelper\r\n   * @param   {Element}   target\r\n   * @returns {boolean}\r\n   * Description          Performs common state management for the various focus events of KeymanWeb.\r\n   *                      The return value indicates whether (true) or not (false) the calling event handler\r\n   *                      should be terminated immediately after the call.\r\n   */\r\n  _CommonFocusHelper(outputTarget: OutputTarget<any>): boolean {\r\n    const focusAssistant = this.focusAssistant;\r\n\r\n    let activeKeyboard = this.activeKeyboard?.keyboard;\r\n    if(!focusAssistant.restoringFocus) {\r\n      outputTarget?.deadkeys().clear();\r\n      activeKeyboard?.notify(0, outputTarget, 1);  // I2187\r\n    }\r\n\r\n    if(!focusAssistant.restoringFocus && this.mostRecentTarget != outputTarget) {\r\n      focusAssistant.maintainingFocus = false;\r\n    }\r\n    focusAssistant.restoringFocus = false;\r\n\r\n    // Now that we've fully entered the new context, invalidate the context so we can generate initial predictions from it.\r\n    // (Note that the active keyboard will have been updated by a method called before this one; the newly-focused\r\n    // context should now be 100% ready.)\r\n    this.resetContext();\r\n\r\n    return false;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Respond to KeymanWeb-aware input element receiving focus\r\n   */\r\n  _ControlFocus = (e: FocusEvent): boolean => {\r\n    // Step 1: determine the corresponding OutputTarget instance.\r\n    const target = eventOutputTarget(e);\r\n    if(!target) {\r\n      // Probably should also make a warning or error?\r\n      return true;\r\n    }\r\n\r\n    // ???? ?: ensure it's properly active?\r\n    // if(target instanceof DesignIFrame) { //**TODO: check case reference\r\n    //   // But... the following should already have been done during attachment...\r\n    //   // attachmentEngine._AttachToIframe(Ltarg as HTMLIFrameElement);\r\n    //   target.docRoot\r\n    //   Ltarg=Ltarg.contentWindow.document.body; // And we only care about Ltarg b/c of finding the OutputTarget.\r\n    // }\r\n\r\n    // Step 2:  Make the newly-focused control the active control, and thus the active context.\r\n    this.setActiveTarget(target, true);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Respond to KMW losing focus on event\r\n   */\r\n  _ControlBlur = (e: FocusEvent): boolean => {\r\n    // Step 0:  if we're in a state where loss-of-focus should be outright-ignored, bypass the handler entirely.\r\n    if(this.focusAssistant._IgnoreNextSelChange) {\r\n\r\n      // If a keyboard calls saveFocus() (KSF), then ignore the\r\n      // next selection change\r\n      this.focusAssistant._IgnoreNextSelChange--;\r\n      e.cancelBubble = true;\r\n      e.stopPropagation();\r\n      return true;\r\n    }\r\n\r\n    if(this.focusAssistant.isTargetForcingScroll()) {\r\n      // Prevent triggering other blur-handling events (as possible)\r\n      e.cancelBubble = true;\r\n      e.stopPropagation();\r\n      return true;\r\n    }\r\n\r\n    // Step 1: determine the corresponding OutputTarget instance.\r\n    let target = eventOutputTarget(e);\r\n    if (target == null) {\r\n      return true;\r\n    }\r\n\r\n    // Step 2:  persist the keyboard setting for the deactivating context.\r\n\r\n    ////keymanweb._SelectionControl = null;\r\n    if(this.lastActiveTarget) {\r\n      // There's no harm in saving them at this stage, even if we're still in the `maintainingFocus` state.\r\n      this._BlurKeyboardSettings(this.lastActiveTarget.getElement());\r\n    }\r\n\r\n    // Step 3: Now that we've handled all prior-element maintenance, update the active and 'last-active element'.\r\n    // (The \"context target\" state fields)\r\n    const previousTarget = this.activeTarget;\r\n    this.currentTarget = null; // I3363 (Build 301)\r\n\r\n    // After a .forgetActiveTarget call occurs before _ControlBlur is called on the corresponding element,\r\n    // we should avoid accidentally 'remembering' it here.\r\n    if(previousTarget || this.lastActiveTarget) {\r\n      this.mostRecentTarget = target;\r\n    }\r\n\r\n    // Step 4: any and all related events\r\n    /* If the KeymanWeb UI is active as a user changes controls, all UI-based effects\r\n     * should be restrained to this control in case the user is manually specifying\r\n     * languages on a per-control basis.\r\n     */\r\n    this.focusAssistant.restoringFocus = false;\r\n\r\n    let activeKeyboard = this.activeKeyboard;\r\n    const maintainingFocus = this.focusAssistant.maintainingFocus;\r\n    if(!maintainingFocus && activeKeyboard) {\r\n      activeKeyboard.keyboard.notify(0, target, 0);  // I2187\r\n    }\r\n    if(previousTarget && !this.activeTarget) {\r\n      this.emit('targetchange', null);\r\n    }\r\n\r\n    this.apiEvents.callEvent('controlblurred', {\r\n      target: target.getElement(),\r\n      event: e,\r\n      isActivating: maintainingFocus\r\n    });\r\n\r\n    // Is not an \"API event\"; it models a native browser event instead.\r\n    this.doChangeEvent(target);\r\n    this.resetContext();\r\n    return true;\r\n  }\r\n\r\n  doChangeEvent(target: OutputTarget<any>) {\r\n    if(target.changed) {\r\n      let event = new Event('change', {\"bubbles\": true, \"cancelable\": false});\r\n      target.getElement().dispatchEvent(event);\r\n    }\r\n\r\n    target.changed = false;\r\n  }\r\n\r\n  _Click: (e: MouseEvent) => boolean = (e: MouseEvent) => {\r\n    this.resetContext();\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Gets the 'saved keyboard' cookie value for the last keyboard used in the\r\n   * iser's previous session.\r\n   **/\r\n  getSavedKeyboardRaw(): string {\r\n    const cookie = new CookieSerializer<KeyboardCookie>('KeymanWeb_Keyboard');\r\n    var v = cookie.load(decodeURIComponent);\r\n\r\n    if(typeof(v.current) != 'string') {\r\n      return 'Keyboard_us:en';\r\n    } else if(v.current == 'Keyboard_us:eng') {\r\n      // 16.0 used the :eng variant!\r\n      return 'Keyboard_us:en';\r\n    } else {\r\n      return v.current;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the cookie for the name and language code of the most recently active keyboard\r\n   *\r\n   *  Defaults to US English, but this needs to be user-set in later revision (TODO)\r\n   *\r\n   * @return      {string}          InternalName:LanguageCode\r\n   **/\r\n  getSavedKeyboard(): string {\r\n    let cookieValue = this.getSavedKeyboardRaw();\r\n\r\n    // Check that the requested keyboard is included in the available keyboard stubs\r\n    const stubs = this.keyboardCache.getStubList()\r\n    let kd: string;\r\n\r\n    for(let n=0; n<stubs.length; n++) {\r\n      kd=stubs[n]['KI']+':'+stubs[n]['KLC'];\r\n      if(kd == cookieValue) {\r\n        return kd;\r\n      }\r\n    }\r\n\r\n    // Default to US English if available (but don't assume it is first)\r\n    for(let n=0; n<stubs.length; n++) {\r\n      kd=stubs[n]['KI']+':'+stubs[n]['KLC'];\r\n      if(kd == 'Keyboard_us:en') {\r\n        return kd;\r\n      }\r\n    }\r\n\r\n    // Otherwise use the first keyboard stub\r\n    if(stubs.length > 0) {\r\n      return stubs[0]['KI']+':'+stubs[0]['KLC'];\r\n    }\r\n\r\n    // Or US English if no stubs loaded (should never happen)\r\n    return 'Keyboard_us:en';\r\n  }\r\n\r\n  /**\r\n   * Restore the most recently used keyboard, if still available\r\n   */\r\n  restoreSavedKeyboard(kbd) {\r\n    // If no saved keyboard, defaults to US English\r\n    const d=kbd;\r\n\r\n    // Identify the stub with the saved keyboard\r\n    let t=d.split(':');\r\n    if(t.length < 2) {\r\n      t[1]='';\r\n    }\r\n\r\n    // Find the matching stub; if it doesn't exist, default to the first available stub.\r\n    let stub = this.keyboardCache.getStub(t[0], t[1]) || this.keyboardCache.defaultStub;\r\n\r\n    // Sets the default stub (as specified with the `getSavedKeyboard` call) as active.\r\n    if(stub) {\r\n      this.activateKeyboard(t[0], t[1]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     nonKMWTouchHandler\r\n   * Scope        Private\r\n   * Description  A handler for KMW-touch-disabled elements when operating on touch devices.\r\n   */\r\n  nonKMWTouchHandler = (x: Event) => {\r\n    this.focusAssistant.focusing=false;\r\n    clearTimeout(this.focusAssistant.focusTimer);\r\n    this.forgetActiveTarget();\r\n    // this.keyman.osk.hideNow(); // TODO:  is more aggressive than the default - how to migrate this tidbit?\r\n  };\r\n\r\n  shutdown() {\r\n    this.page.shutdown();\r\n    this.domEventTracker.shutdown();\r\n  }\r\n}",
    "import {\r\n  Codes,\r\n  DefaultRules,\r\n  type KeyEvent,\r\n  type OutputTarget\r\n} from '@keymanapp/keyboard-processor';\r\n\r\nimport ContextManager from './contextManager.js';\r\n\r\nexport default class DefaultBrowserRules extends DefaultRules {\r\n  private contextManager: ContextManager;\r\n\r\n  constructor(contextManager: ContextManager) {\r\n    super();\r\n    this.contextManager = contextManager;\r\n  }\r\n\r\n  isCommand(Lkc: KeyEvent): boolean {\r\n    let code = this.codeForEvent(Lkc);\r\n\r\n    switch(code) {\r\n      case Codes.keyCodes['K_TAB']:\r\n      case Codes.keyCodes['K_TABBACK']:\r\n      case Codes.keyCodes['K_TABFWD']:\r\n        return true;\r\n      default:\r\n        return super.isCommand(Lkc);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * applyCommand - used when a RuleBehavior represents a non-text \"command\" within the Engine.\r\n   */\r\n  applyCommand(Lkc: KeyEvent, outputTarget: OutputTarget): void {\r\n    let code = this.codeForEvent(Lkc);\r\n\r\n    const moveToNext = (back: boolean) => {\r\n      const contextManager = this.contextManager;\r\n      const activeElement = contextManager.activeTarget?.getElement();\r\n      const nextElement = contextManager.page.findNeighboringInput(activeElement, back);\r\n      nextElement.focus();\r\n    }\r\n\r\n    switch(code) {\r\n      // This method will be handled between `ContextManager` and PageContextAttachment:\r\n      // pageContextAttachment.findNeighboringInput(contextManager.activeTarget.getElement(), <same flag>)\r\n      case Codes.keyCodes['K_TAB']:\r\n        moveToNext((Lkc.Lmodifiers & Codes.modifierCodes['SHIFT']) != 0);\r\n        break;\r\n      case Codes.keyCodes['K_TABBACK']:\r\n        moveToNext(true);\r\n        break;\r\n      case Codes.keyCodes['K_TABFWD']:\r\n        moveToNext(false);\r\n        break;\r\n    }\r\n\r\n    super.applyCommand(Lkc, outputTarget);\r\n  }\r\n}",
    "import { Codes, DeviceSpec, KeyEvent, KeyMapping, Keyboard, KeyboardProcessor } from '@keymanapp/keyboard-processor';\r\n\r\nimport { HardKeyboard } from 'keyman/engine/main';\r\nimport { DomEventTracker } from 'keyman/engine/events';\r\nimport { DesignIFrame, nestedInstanceOf } from 'keyman/engine/element-wrappers';\r\nimport { eventOutputTarget, outputTargetForElement } from 'keyman/engine/attachment';\r\n\r\nimport ContextManager from './contextManager.js';\r\n\r\ntype KeyboardState = {\r\n  activeKeyboard: Keyboard,\r\n  modStateFlags: number,\r\n  baseLayout: string\r\n}\r\n\r\n// Important:  the following two lines should not cause a compile error if left uncommented.\r\n// let dummy1: KeyboardProcessor;\r\n// let dummy2: KeyboardState = dummy1;\r\n\r\n/**\r\n * Function     _GetEventKeyCode\r\n * Scope        Private\r\n * @param       {Event}       e         Event object\r\n * Description  Finds the key code represented by the event.\r\n */\r\nexport function _GetEventKeyCode(e: KeyboardEvent) {\r\n  if (e.keyCode) {\r\n    return e.keyCode;\r\n  } else if (e.which) {\r\n    return e.which;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\n// Keeping this as a separate function affords us the opportunity to unit-test the method more simply.\r\n\r\n/**\r\n * Function     _GetKeyEventProperties\r\n * Scope        Private\r\n * @param       {Event}       e         Event object\r\n * @return      {Object.<string,*>}     KMW keyboard event object:\r\n * Description  Get object with target element, key code, shift state, virtual key state\r\n *                Lcode=keyCode\r\n *                Lmodifiers=shiftState\r\n *                LisVirtualKeyCode e.g. ctrl/alt key\r\n *                LisVirtualKey     e.g. Virtual key or non-keypress event\r\n */\r\nexport function preprocessKeyboardEvent(e: KeyboardEvent, keyboardState: KeyboardState, device: DeviceSpec): KeyEvent {\r\n  if(e.cancelBubble === true) {\r\n    return null; // I2457 - Facebook meta-event generation mess -- two events generated for a keydown in Facebook contentEditable divs\r\n  }\r\n\r\n  let Lcode = _GetEventKeyCode(e);\r\n  if (Lcode == null) {\r\n    return null;\r\n  }\r\n\r\n  // Stage 1 - track the true state of the keyboard's modifiers.\r\n  var prevModState = keyboardState.modStateFlags, curModState = 0x0000;\r\n  var ctrlEvent = false, altEvent = false;\r\n\r\n  let keyCodes = Codes.keyCodes;\r\n  switch(Lcode) {\r\n    case keyCodes['K_CTRL']:      // The 3 shorter \"K_*CTRL\" entries exist in some legacy keyboards.\r\n    case keyCodes['K_LCTRL']:\r\n    case keyCodes['K_RCTRL']:\r\n    case keyCodes['K_CONTROL']:\r\n    case keyCodes['K_LCONTROL']:\r\n    case keyCodes['K_RCONTROL']:\r\n      ctrlEvent = true;\r\n      break;\r\n    case keyCodes['K_LMENU']:     // The 2 \"K_*MENU\" entries exist in some legacy keyboards.\r\n    case keyCodes['K_RMENU']:\r\n    case keyCodes['K_ALT']:\r\n    case keyCodes['K_LALT']:\r\n    case keyCodes['K_RALT']:\r\n      altEvent = true;\r\n      break;\r\n  }\r\n\r\n  /**\r\n   * Two separate conditions exist that should trigger chiral modifier detection.  Examples below use CTRL but also work for ALT.\r\n   *\r\n   * 1.  The user literally just pressed CTRL, so the event has a valid `location` property we can utilize.\r\n   *     Problem: its layer isn't presently activated within the OSK.\r\n   *\r\n   * 2.  CTRL has been held a while, so the OSK layer is valid, but the key event doesn't tell us the chirality of the active CTRL press.\r\n   *     Bonus issue:  RAlt simulation may cause erasure of this location property, but it should ONLY be empty if pressed in this case.\r\n   *     We default to the 'left' variants since they're more likely to exist and cause less issues with RAlt simulation handling.\r\n   *\r\n   * In either case, `e.getModifierState(\"Control\")` is set to true, but as a result does nothing to tell us which case is active.\r\n   *\r\n   * `e.location != 0` if true matches condition 1 and matches condition 2 if false.\r\n   */\r\n\r\n  curModState |= (e.getModifierState(\"Shift\") ? 0x10 : 0);\r\n\r\n  let modifierCodes = Codes.modifierCodes;\r\n  if(e.getModifierState(\"Control\")) {\r\n    curModState |= ((e.location != 0 && ctrlEvent) ?\r\n      (e.location == 1 ? modifierCodes['LCTRL'] : modifierCodes['RCTRL']) : // Condition 1\r\n      prevModState & 0x0003);                                                       // Condition 2\r\n  }\r\n  if(e.getModifierState(\"Alt\")) {\r\n    curModState |= ((e.location != 0 && altEvent) ?\r\n      (e.location == 1 ? modifierCodes['LALT'] : modifierCodes['RALT']) :   // Condition 1\r\n      prevModState & 0x000C);                                                       // Condition 2\r\n  }\r\n\r\n  // Stage 2 - detect state key information.  It can be looked up per keypress with no issue.\r\n  let Lstates = 0;\r\n\r\n  Lstates |= e.getModifierState('CapsLock') ? modifierCodes['CAPS'] : modifierCodes['NO_CAPS'];\r\n  Lstates |= e.getModifierState('NumLock') ? modifierCodes['NUM_LOCK'] : modifierCodes['NO_NUM_LOCK'];\r\n  Lstates |= (e.getModifierState('ScrollLock'))\r\n    ? modifierCodes['SCROLL_LOCK'] : modifierCodes['NO_SCROLL_LOCK'];\r\n\r\n  // We need these states to be tracked as well for proper OSK updates.\r\n  curModState |= Lstates;\r\n\r\n  // Stage 3 - Set our modifier state tracking variable and perform basic AltGr-related management.\r\n  const LmodifierChange = keyboardState.modStateFlags != curModState;\r\n  keyboardState.modStateFlags = curModState;\r\n\r\n  // For European keyboards, not all browsers properly send both key-up events for the AltGr combo.\r\n  let altGrMask = modifierCodes['RALT'] | modifierCodes['LCTRL'];\r\n  if((prevModState & altGrMask) == altGrMask && (curModState & altGrMask) != altGrMask) {\r\n    // We just released AltGr - make sure it's all released.\r\n    curModState &= ~ altGrMask;\r\n  }\r\n  // Perform basic filtering for Windows-based ALT_GR emulation on European keyboards.\r\n  if(curModState & modifierCodes['RALT']) {\r\n    curModState &= ~modifierCodes['LCTRL'];\r\n  }\r\n\r\n  let modifierBitmasks = Codes.modifierBitmasks;\r\n  // Stage 4 - map the modifier set to the appropriate keystroke's modifiers.\r\n  const activeKeyboard = keyboardState.activeKeyboard;\r\n  let Lmodifiers: number;\r\n  if(activeKeyboard && activeKeyboard.isChiral) {\r\n    Lmodifiers = curModState & modifierBitmasks.CHIRAL;\r\n\r\n    // Note for future - embedding a kill switch here would facilitate disabling AltGr / Right-alt simulation.\r\n    if(activeKeyboard.emulatesAltGr && (Lmodifiers & modifierBitmasks['ALT_GR_SIM']) == modifierBitmasks['ALT_GR_SIM']) {\r\n      Lmodifiers ^= modifierBitmasks['ALT_GR_SIM'];\r\n      Lmodifiers |= modifierCodes['RALT'];\r\n    }\r\n  } else {\r\n    // No need to sim AltGr here; we don't need chiral ALTs.\r\n    Lmodifiers =\r\n      (curModState & 0x10) | // SHIFT\r\n      ((curModState & (modifierCodes['LCTRL'] | modifierCodes['RCTRL'])) ? 0x20 : 0) |\r\n      ((curModState & (modifierCodes['LALT'] | modifierCodes['RALT']))   ? 0x40 : 0);\r\n  }\r\n\r\n\r\n  /* Tweak the modifiers if an OS meta key is detected; this will allow meta-key-based\r\n    * hotkeys to bypass Keyman processing.  We do this AFTER the chiral modifier filtering\r\n    * because some keyboards specify their own modifierBitmask, which won't include it.\r\n    * We don't currently use that reference in this method, but that may change in the future.\r\n    */\r\n  Lmodifiers |= (e.metaKey ? modifierCodes['META']: 0);\r\n\r\n  // Physically-typed keys require use of a 'desktop' form factor and thus are based on a virtual \"physical\" Device.\r\n\r\n  // Perform any browser-specific key remapping before other remaps and mnemonic transforms.\r\n  // (See https://github.com/keymanapp/keyman/issues/1125.)\r\n  if(device.browser == DeviceSpec.Browser.Firefox) {\r\n  // Browser key identifiers are not completely consistent; Firefox has a few (for US punctuation)\r\n  // that differ from the norm.  Refer to https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode.\r\n    if(KeyMapping.browserMap.FF['k'+Lcode]) {\r\n      Lcode = KeyMapping.browserMap.FF['k'+Lcode];\r\n    }\r\n  }\r\n\r\n  // We now have enough properties to properly specify a KeyEvent object.\r\n  let s = new KeyEvent({\r\n    device: device,\r\n    kName: '',\r\n    Lcode: Lcode,\r\n    Lmodifiers: Lmodifiers,\r\n    Lstates: Lstates,\r\n    LmodifierChange: LmodifierChange,\r\n    // This is based on a KeyboardEvent, so it's not considered 'synthetic' within web-core.\r\n    isSynthetic: false\r\n  });\r\n\r\n  // Mnemonic handling.\r\n  if(activeKeyboard && activeKeyboard.isMnemonic) {\r\n    // The following will never set a code corresponding to a modifier key, so it's fine to do this,\r\n    // which may change the value of Lcode, here.\r\n\r\n    s.setMnemonicCode(e.getModifierState(\"Shift\"), e.getModifierState(\"CapsLock\"));\r\n  }\r\n  // The 0x6F used to be 0x60 - this adjustment now includes the chiral alt and ctrl modifiers in that check.\r\n  let LisVirtualKeyCode = (typeof e.charCode != 'undefined' && e.charCode != null  &&  (e.charCode == 0 || (Lmodifiers & 0x6F) != 0));\r\n  s.LisVirtualKey = LisVirtualKeyCode || e.type != 'keypress';\r\n\r\n  // Other minor physical-keyboard adjustments\r\n  if(activeKeyboard && !activeKeyboard.isMnemonic) {\r\n    // Positional Layout\r\n\r\n    /* 13/03/2007 MCD: Swedish: Start mapping of keystroke to US keyboard */\r\n    var Lbase = KeyMapping.languageMap[keyboardState.baseLayout];\r\n    if(Lbase && Lbase['k'+s.Lcode]) {\r\n      s.Lcode=Lbase['k'+s.Lcode];\r\n    }\r\n    /* 13/03/2007 MCD: Swedish: End mapping of keystroke to US keyboard */\r\n\r\n    if(!activeKeyboard.definesPositionalOrMnemonic && !(s.Lmodifiers & 0x60)) {\r\n      // Support version 1.0 KeymanWeb keyboards that do not define positional vs mnemonic\r\n      s = new KeyEvent({\r\n        Lcode: KeyMapping._USKeyCodeToCharCode(s),\r\n        Lmodifiers: 0,\r\n        LisVirtualKey: false,\r\n        vkCode: s.Lcode, // Helps to merge OSK and physical keystroke control paths.\r\n        Lstates: s.Lstates,\r\n        kName: '',\r\n        device: device,\r\n        isSynthetic: false\r\n      });\r\n    }\r\n  }\r\n\r\n  let processedEvent = new KeyEvent(s);\r\n  processedEvent.source = e;\r\n  return processedEvent;\r\n}\r\n\r\nexport default class HardwareEventKeyboard extends HardKeyboard {\r\n  private readonly hardDevice: DeviceSpec;\r\n\r\n  // Needed properties & methods:\r\n  // - `modStateFlags`\r\n  // - `baseLayout`\r\n  // - `doModifierPress()` - for modifier updates on key-up.\r\n  private readonly processor: KeyboardProcessor;\r\n  private readonly contextManager: ContextManager;\r\n  private domEventTracker = new DomEventTracker();\r\n\r\n  private swallowKeypress: boolean = false;\r\n\r\n  constructor(hardDevice: DeviceSpec, processor: KeyboardProcessor, contextManager: ContextManager) {\r\n    super();\r\n    this.hardDevice = hardDevice;\r\n    this.contextManager = contextManager;\r\n    this.processor = processor;\r\n\r\n    const page = contextManager.page;\r\n\r\n    const eventTracker = this.domEventTracker;\r\n\r\n    page.on('enabled', (Pelem) => {\r\n      const target = outputTargetForElement(Pelem);\r\n\r\n      if(!(target instanceof DesignIFrame)) {\r\n        // These need to be on the actual input element, as otherwise the keyboard will disappear on touch.\r\n        eventTracker.attachDOMEvent(Pelem, 'keypress', this._KeyPress);\r\n        eventTracker.attachDOMEvent(Pelem, 'keydown', this._KeyDown);\r\n        eventTracker.attachDOMEvent(Pelem, 'keyup', this._KeyUp);\r\n      } else {\r\n        const Lelem = target.getElement().contentDocument;\r\n        eventTracker.attachDOMEvent(Lelem.body,'keydown', this._KeyDown);\r\n        eventTracker.attachDOMEvent(Lelem.body,'keypress', this._KeyPress);\r\n        eventTracker.attachDOMEvent(Lelem.body,'keyup', this._KeyUp);\r\n      }\r\n    });\r\n\r\n    page.off('disabled', (Pelem) => {\r\n      const target = outputTargetForElement(Pelem);\r\n\r\n      if(!(target instanceof DesignIFrame)) {\r\n        eventTracker.detachDOMEvent(Pelem, 'keypress', this._KeyPress);\r\n        eventTracker.detachDOMEvent(Pelem, 'keydown', this._KeyDown);\r\n        eventTracker.detachDOMEvent(Pelem, 'keyup', this._KeyUp);\r\n      } else {\r\n        const Lelem = target.getElement().contentDocument;\r\n        eventTracker.detachDOMEvent(Lelem.body,'keydown', this._KeyDown);\r\n        eventTracker.detachDOMEvent(Lelem.body,'keypress', this._KeyPress);\r\n        eventTracker.detachDOMEvent(Lelem.body,'keyup', this._KeyUp);\r\n      }\r\n    });\r\n  }\r\n\r\n  get activeKeyboard(): Keyboard {\r\n    return this.contextManager.activeKeyboard.keyboard;\r\n  }\r\n\r\n  /**\r\n   * Function     _KeyDown\r\n   * Scope        Private\r\n   * Description  Processes keydown event and passes data to keyboard.\r\n   *\r\n   * Note that the test-case oriented 'recorder' stubs this method to facilitate keystroke\r\n   * recording for use in test cases.  If changing this function, please ensure the recorder is\r\n   * not affected.\r\n   */\r\n  _KeyDown: (e: KeyboardEvent) => boolean = (e) => {\r\n    const activeKeyboard = this.contextManager.activeKeyboard;\r\n    const target = eventOutputTarget(e);\r\n\r\n    if(!target || activeKeyboard == null) {\r\n      return true;\r\n    }\r\n\r\n    // Prevent mapping element is readonly or tagged as kmw-disabled\r\n    const el = target.getElement();\r\n    if(el?.className?.indexOf('kmw-disabled') >= 0) {\r\n      return true;\r\n    }\r\n\r\n    return this.keyDown(e);\r\n  }\r\n\r\n  /**\r\n   * Function     _KeyPress\r\n   * Scope        Private\r\n   * Description Processes keypress event (does not pass data to keyboard)\r\n   */\r\n  _KeyPress: (e: KeyboardEvent) => boolean = (e) => {\r\n    const target = eventOutputTarget(e);\r\n    if(!target || this.activeKeyboard == null) {\r\n      return true;\r\n    }\r\n\r\n    return this.keyPress(e);\r\n  }\r\n\r\n  /**\r\n   * Function     _KeyUp\r\n   * Scope        Private\r\n   * Description Processes keyup event and passes event data to keyboard\r\n   */\r\n  _KeyUp: (e: KeyboardEvent) => boolean = (e) => {\r\n    const target = eventOutputTarget(e);\r\n    var Levent = preprocessKeyboardEvent(e, this.processor, this.hardDevice);\r\n    if(Levent == null) {\r\n      return true;\r\n    }\r\n\r\n    var inputEle = target.getElement();\r\n\r\n    // Since this part concerns DOM element + browser interaction management, we preprocess it for\r\n    // browser form commands before passing control to the Processor module.\r\n    if(Levent.Lcode == 13) {\r\n      var ignore = false;\r\n      if(nestedInstanceOf(inputEle, \"HTMLTextAreaElement\")) {\r\n        ignore = true;\r\n      }\r\n\r\n      if(!ignore) {\r\n        // For input fields, move to next input element\r\n        if(inputEle instanceof inputEle.ownerDocument.defaultView.HTMLInputElement) {\r\n          if(inputEle.form && (inputEle.type == 'search' || inputEle.type == 'submit')) {\r\n            inputEle.form.submit();\r\n          } else {\r\n            const nextElement = this.contextManager.page.findNeighboringInput(inputEle, false);\r\n            nextElement.focus();\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return this.keyUp(e);\r\n  }\r\n\r\n  /**\r\n   * Function     keyDown\r\n   * Scope        Public\r\n   * Description  Processes keydown event and passes data to keyboard.\r\n   *\r\n   * Note that the test-case oriented 'recorder' stubs this method to facilitate keystroke\r\n   * recording for use in test cases.  If changing this function, please ensure the recorder is\r\n   * not affected.\r\n   */\r\n  private keyDown(e: KeyboardEvent): boolean {\r\n    this.swallowKeypress = false;\r\n\r\n    // Get event properties\r\n    var Levent = preprocessKeyboardEvent(e, this.processor, this.hardDevice);\r\n    if(Levent == null) {\r\n      return true;\r\n    }\r\n\r\n    let resultCapture: { LeventMatched: boolean } = {\r\n      LeventMatched: false\r\n    }\r\n\r\n    // Is synchronous.\r\n    this.emit('keyevent', Levent, (ruleBehavior, error) => {\r\n      resultCapture.LeventMatched = ruleBehavior && !ruleBehavior.triggerKeyDefault;\r\n\r\n      if(resultCapture.LeventMatched) {\r\n        if(e  &&  e.preventDefault) {\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n        }\r\n\r\n        this.swallowKeypress = !!Levent.Lcode;\r\n        // Don't swallow backspaces on keypresses; this allows physical BKSP presses to repeat.\r\n        if(Levent.Lcode == 8) {\r\n          this.swallowKeypress = false;\r\n        }\r\n      } else {\r\n        this.swallowKeypress = false;\r\n      }\r\n    });\r\n\r\n    return !resultCapture.LeventMatched;\r\n  }\r\n\r\n  // KeyUp basically exists for two purposes:\r\n  // 1)  To detect browser form submissions (handled in kmwdomevents.ts)\r\n  // 2)  To detect modifier state changes.\r\n  private keyUp(e: KeyboardEvent): boolean {\r\n    var Levent = preprocessKeyboardEvent(e, this.processor, this.hardDevice);\r\n    if(Levent == null) {\r\n      return true;\r\n    }\r\n\r\n    let outputTarget = eventOutputTarget(e);\r\n    return this.processor.doModifierPress(Levent, outputTarget, false);\r\n  }\r\n\r\n  private keyPress(e: KeyboardEvent): boolean {\r\n    var Levent = preprocessKeyboardEvent(e, this.processor, this.hardDevice);\r\n    if(Levent == null || Levent.LisVirtualKey) {\r\n      return true;\r\n    }\r\n\r\n    // _Debug('KeyPress code='+Levent.Lcode+'; Ltarg='+Levent.Ltarg.tagName+'; LisVirtualKey='+Levent.LisVirtualKey+'; _KeyPressToSwallow='+keymanweb._KeyPressToSwallow+'; keyCode='+(e?e.keyCode:'nothing'));\r\n\r\n    /* I732 START - 13/03/2007 MCD: Swedish: Start positional keyboard layout code: prevent keystroke */\r\n    if(!this.activeKeyboard.isMnemonic) {\r\n      if(!this.swallowKeypress) {\r\n        return true;\r\n      }\r\n      if(Levent.Lcode < 0x20 || (this.hardDevice.browser == DeviceSpec.Browser.Safari && (Levent.Lcode > 0xF700  &&  Levent.Lcode < 0xF900))) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n    /* I732 END - 13/03/2007 MCD: Swedish: End positional keyboard layout code */\r\n\r\n    // Only reached if it's a mnemonic keyboard.\r\n\r\n    let resultCapture: { preventDefaultKeystroke?: boolean } = {};\r\n\r\n    // Should only be run if `preventDefaultKeystroke` is required by the following conditional\r\n    // block.  If it isn't - that is, swallowKeypress == true, we want to swallow that keypress\r\n    // interpretation as well by _not_ evaluating it during this pass.\r\n    if(!this.swallowKeypress) {\r\n      // is synchronous\r\n      this.emit('keyevent', Levent, (result, error) => {\r\n        resultCapture.preventDefaultKeystroke = !!result;\r\n      })\r\n    }\r\n\r\n    // If we actively prevented a keystroke or if we processed one successfully,\r\n    // prevent the browser from producing its default text output for the event.\r\n    if(this.swallowKeypress || resultCapture.preventDefaultKeystroke) {\r\n      this.swallowKeypress = false;\r\n      if(e && e.preventDefault) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n      }\r\n      return false;\r\n    }\r\n\r\n    this.swallowKeypress = false;\r\n    return true;\r\n  }\r\n\r\n  shutdown() {\r\n    this.domEventTracker.shutdown();\r\n  }\r\n}",
    "import KeymanEngine from \"../keymanEngine.js\";\r\n\r\nclass RotationState {\r\n  innerWidth: number;\r\n  innerHeight: number;\r\n\r\n  constructor() {\r\n    this.innerWidth = window.innerWidth;\r\n    this.innerHeight = window.innerHeight;\r\n  }\r\n\r\n  equals(other: RotationState) {\r\n    return this.innerWidth == other.innerWidth && this.innerHeight == other.innerHeight;\r\n  }\r\n}\r\n\r\n// Please reference /testing/rotation-events/index.html and update it as necessary when maintaining this class.\r\nexport class RotationProcessor {\r\n  private keyman: KeymanEngine;\r\n\r\n  // State variables used by rotations.\r\n  private oskVisible: boolean;\r\n  private isActive: boolean;\r\n\r\n  // iOS-oriented members\r\n  // --------------------\r\n  // We'll assume permutations are complete after this many 'update' iterations.\r\n  private static readonly IDLE_PERMUTATION_CAP = 15;\r\n  // Tracks the number of idle 'update' iterations since the last permutation.\r\n  private idlePermutationCounter: number = RotationProcessor.IDLE_PERMUTATION_CAP;\r\n  // Tracks the most recent rotation state snapshot.\r\n  private rotState: RotationState;\r\n  // Tracks the window.setTimeout id for rotation update checks.\r\n  private updateTimer: number;\r\n  private static readonly UPDATE_INTERVAL = 20; // 20 ms, that is.\r\n  // --------------------\r\n\r\n  constructor(keyman: KeymanEngine) {\r\n    this.keyman = keyman;\r\n  }\r\n\r\n  resolve() {\r\n    var osk = this.keyman.osk;\r\n\r\n    // `keyman: KeymanEngine` (modularized app/browser)\r\n    this.keyman.touchLanguageMenu?.hide();\r\n    this.keyman.touchLanguageMenu = null;\r\n\r\n    osk.setNeedsLayout();\r\n    if(this.oskVisible) {\r\n      osk.present();\r\n    }\r\n\r\n    this.isActive = false;\r\n\r\n    // If we've been using an update interval loop, we should clear the state information.\r\n    if(this.updateTimer) {\r\n      window.clearInterval(this.updateTimer);\r\n      this.rotState = null;\r\n    }\r\n  }\r\n\r\n  // Used by both Android and iOS.\r\n  initNewRotation() {\r\n    this.oskVisible = this.keyman.osk.isVisible();\r\n    this.keyman.osk.hideNow();\r\n    this.isActive = true;\r\n  }\r\n\r\n  /**\r\n   * Establishes rotation-oriented event handling for native-mode KeymanWeb.  At this time, tablet PCs are not directly supported.\r\n   */\r\n  init() {\r\n    // Note:  we use wrapper functions instead of `.bind(this)` in this method to facilitate stubbing for our rotation test page.\r\n    var os = this.keyman.config.hostDevice.OS;\r\n    var util = this.keyman.util;\r\n\r\n    if(os == 'ios') {\r\n    /* iOS is rather inconsistent about these events, with changes to important window state information -\r\n      * especially to `window.innerWidth` - possible after the events trigger!  They don't always trigger\r\n      * the same amount or in a consistently predictable manner.\r\n      *\r\n      * The overall idea is to wait out all those changes so that we don't produce a bad keyboard layout.\r\n      */\r\n      util.attachDOMEvent(window, 'orientationchange', () => {\r\n        this.iOSEventHandler();\r\n        return false;\r\n      });\r\n      util.attachDOMEvent(window, 'resize', () => {\r\n        this.iOSEventHandler();\r\n        return false;\r\n      });\r\n    } else if(os == 'android') {\r\n      // Android's far more consistent with its event generation than iOS.\r\n      if('onmozorientationchange' in screen) {\r\n        // 'mozorientationchange' doesn't seem documented at this point, let alone by TypeScript.\r\n        // Plain 'orientationchange' requires a (comparatively) late version of Firefox for Android,\r\n        // though - v44, as opposed to Chrome for Android 18.\r\n        //@ts-ignore\r\n        util.attachDOMEvent(<any>screen, 'mozorientationchange', () => {\r\n          this.initNewRotation();\r\n          return false;\r\n        });\r\n      } else {\r\n        util.attachDOMEvent(window, 'orientationchange', () => {\r\n          this.initNewRotation();\r\n          return false;\r\n        });\r\n      }\r\n\r\n      util.attachDOMEvent(window, 'resize', () => {\r\n        this.resolve();\r\n        return false;\r\n      });\r\n    }\r\n  }\r\n\r\n  iOSEventHandler() {\r\n    if(!this.isActive) {\r\n      this.initNewRotation();\r\n      this.rotState = new RotationState();\r\n\r\n      this.updateTimer = window.setInterval(this.iOSEventUpdate.bind(this), RotationProcessor.UPDATE_INTERVAL);\r\n    }\r\n\r\n    // If one of the rotation-oriented events just triggered, we should ALWAYS reset the counter.\r\n    this.idlePermutationCounter = 0;\r\n  }\r\n\r\n  iOSEventUpdate() {\r\n    var newState = new RotationState();\r\n\r\n    if(this.rotState.equals(newState)) {\r\n      if(++this.idlePermutationCounter == RotationProcessor.IDLE_PERMUTATION_CAP) {\r\n        this.resolve();\r\n      }\r\n    } else {\r\n      this.rotState = newState;\r\n      this.idlePermutationCounter = 0;\r\n    }\r\n  }\r\n}",
    "import { DomEventTracker } from 'keyman/engine/events';\r\n\r\nimport KeymanEngine from \"../keymanEngine.js\";\r\nimport { FocusAssistant } from './focusAssistant.js';\r\nimport { RotationProcessor } from '../utils/rotationProcessor.js';\r\n\r\n// Note:  in the future, it'd probably be best to have an instance per iframe window as\r\n// well as the top-level window.  This was not done in or before KMW 16.0 though, so\r\n// we'll leave that out for now within the initial modular form of app/browser KMW in 17.0.\r\nexport class PageIntegrationHandlers {\r\n  private readonly window: Window;\r\n  private readonly engine: KeymanEngine;\r\n  private readonly domEventTracker = new DomEventTracker();\r\n\r\n  /**\r\n   * Used together with `deactivateOnRelease` to determine the distance of vertical scrolls;\r\n   * if sufficiently far at any point, we avoid deactivating the current context when it ends.\r\n   */\r\n  private touchY: number;\r\n\r\n  /**\r\n   * Used together with `touchY` to determine the distance of vertical scrolls;\r\n   * if sufficiently far at any point, we avoid deactivating the current context when it ends.\r\n   */\r\n  private deactivateOnRelease: boolean;\r\n\r\n  /**\r\n   * Used on certain browser/OS combinations (e.g. Chrome on Android) to prevent odd behaviors\r\n   * that arise when URL bars scroll into view during an ongoing scroll, as this can impede\r\n   * proper / smooth positioning of the OSK.  (Deactivating the active target also hides the OSK.)\r\n   */\r\n  private deactivateOnScroll: boolean;\r\n\r\n  /**\r\n   * This component should only ever be applied to a base page:  we need the ability to add 'scroll\r\n   * space' on touch devices so that the OSK doesn't block the bottom.\r\n   */\r\n  private mobilePageTrailer: HTMLDivElement;\r\n\r\n  private rotationProcessor: RotationProcessor;\r\n\r\n  constructor(window: Window, engine: KeymanEngine) {\r\n    this.window = window;\r\n    this.engine = engine;\r\n\r\n    this.attachHandlers();\r\n\r\n    if(engine.config.hostDevice.touchable) {\r\n      this.buildPageTrailer();\r\n\r\n      this.rotationProcessor = new RotationProcessor(this.engine);\r\n      this.rotationProcessor.init();\r\n    }\r\n  }\r\n\r\n  private buildPageTrailer() {\r\n    // Add a blank DIV to the bottom of the page to allow the bottom of the page to be shown\r\n    const dTrailer = this.mobilePageTrailer = document.createElement('div');\r\n    const ds=dTrailer.style;\r\n    ds.width='100%';\r\n    ds.height=(screen.width/2)+'px';  // ... interesting choice, but okay.\r\n    document.body.appendChild(dTrailer);\r\n  }\r\n\r\n  private get focusAssistant(): FocusAssistant {\r\n    return this.engine.contextManager.focusAssistant;\r\n  }\r\n\r\n  private suppressFocusCheck: (e: FocusEvent) => boolean = (e) => {\r\n    if(this.focusAssistant.isTargetForcingScroll()) {\r\n      // Prevent triggering other blur-handling events (as possible) - this blur\r\n      // is programmatic in order to force a browser scroll-position update.\r\n      // All focus changes should be prevented at this time.\r\n      e.stopPropagation();\r\n      e.cancelBubble = true;\r\n    }\r\n    // But DO perform default event behavior (actually blurring & focusing the affected element)\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Reset context when entering or exiting the active element.\r\n   * Will also trigger OSK shift state / layer reset.\r\n   **/\r\n  private pageFocusHandler: (e: FocusEvent) => boolean = () => {\r\n    if(!this.focusAssistant.maintainingFocus && this.engine.osk?.vkbd) {\r\n      this.engine.contextManager.deactivateCurrentTarget();\r\n      this.engine.contextManager.resetContext();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Sets up page-default touch-based handling for activation-state management.\r\n  // These always trigger for the page, wherever a touch may occur. Does not\r\n  // prevent element-specific or OSK-key-specific handling from triggering.\r\n\r\n  private touchStartActivationHandler: (e: TouchEvent) => boolean = (e) => {\r\n    const osk = this.engine.osk;\r\n    if(!osk) {\r\n      return false;\r\n    }\r\n    const device = this.engine.config.hostDevice;\r\n\r\n    this.deactivateOnRelease=true;\r\n    this.touchY=e.touches[0].screenY;\r\n\r\n    // On Chrome, scrolling up or down causes the URL bar to be shown or hidden\r\n    // according to whether or not the document is at the top of the screen.\r\n    // But when doing that, each OSK row top and height gets modified by Chrome\r\n    // looking very ugly.  It would be best to hide the OSK then show it again\r\n    // when the user scroll finishes, but Chrome has no way to reliably report\r\n    // the touch end event after a move. c.f. http://code.google.com/p/chromium/issues/detail?id=152913\r\n    // The best compromise behaviour is simply to hide the OSK whenever any\r\n    // non-input and non-OSK element is touched.\r\n    this.deactivateOnScroll=false;\r\n    if(device.OS == 'android' && device.browser == 'chrome') {\r\n      // this.deactivateOnScroll has the inverse of the 'true' default,\r\n      // but that fact actually facilitates the following conditional logic.\r\n      if(typeof(osk._Box) == 'undefined') return false;\r\n      if(typeof(osk._Box.style) == 'undefined') return false;\r\n\r\n      // The following tests are needed to prevent the OSK from being hidden during normal input!\r\n      let p=(e.target as HTMLElement).parentElement;\r\n      if(typeof(p) != 'undefined' && p != null) {\r\n        if(p.className.indexOf('kmw-key-') >= 0) return false;\r\n        if(typeof(p.parentElement) != 'undefined' && p.parentElement != null) {\r\n          p=p.parentElement;\r\n          if(p.className.indexOf('kmw-key-') >= 0) return false;\r\n        }\r\n      }\r\n\r\n      this.deactivateOnScroll = true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  private touchMoveActivationHandler: (e: TouchEvent) => boolean = (e) => {\r\n    if(this.deactivateOnScroll) {  // Android / Chrone case.\r\n      this.focusAssistant.focusing = false;\r\n      this.engine.contextManager.deactivateCurrentTarget();\r\n    }\r\n\r\n    const y = e.touches[0].screenY;\r\n    const y0 = this.touchY;\r\n    if(y-y0 > 5 || y0-y < 5) {\r\n      this.deactivateOnRelease = false;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  private touchEndActivationHandler: (e: TouchEvent) => boolean = (e) => {\r\n    // Should not hide OSK if simply closing the language menu (30/4/15)\r\n    // or if the focusing timer (focusAssistant.setFocusTimer) is still active.\r\n    if(this.deactivateOnRelease && !this.engine.touchLanguageMenu && !this.focusAssistant.focusing) {\r\n      this.engine.contextManager.deactivateCurrentTarget();\r\n    }\r\n    this.deactivateOnRelease=false;\r\n    return false;\r\n  };\r\n\r\n\r\n  private _WindowLoad: (e: Event) => void = () => {\r\n    // Always return to top of page after a page reload\r\n    document.body.scrollTop=0;\r\n    if(typeof document.documentElement != 'undefined') {\r\n      document.documentElement.scrollTop=0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     _WindowUnload\r\n   * Scope        Private\r\n   * Description  Remove handlers before detaching KMW window\r\n   */\r\n  private _WindowUnload: () => void = () => {\r\n    // Future note:  should restrict this to anything for the corresponding document if on a\r\n    // child iframe, not the whole engine.\r\n    this.engine.shutdown();\r\n  }\r\n\r\n  private attachHandlers() {\r\n    const eventTracker = this.domEventTracker;\r\n    const device = this.engine.config.hostDevice;\r\n    const docBody = this.window.document.body;\r\n\r\n    eventTracker.attachDOMEvent(this.window, 'focus', this.pageFocusHandler, false);\r\n    eventTracker.attachDOMEvent(this.window, 'blur', this.pageFocusHandler, false);\r\n\r\n    /*\r\n     * To prevent propagation of focus & blur events from the input-scroll workaround,\r\n     * we attach top-level capturing listeners to the focus & blur events.  They prevent propagation\r\n     * but NOT default behavior, allowing the scroll to complete while preventing nearly all\r\n     * possible event 'noise' that could result from the workaround.\r\n     */\r\n    eventTracker.attachDOMEvent(docBody, 'focus', this.suppressFocusCheck, true);\r\n    eventTracker.attachDOMEvent(docBody, 'blur', this.suppressFocusCheck, true);\r\n\r\n    if(device.touchable) {\r\n      eventTracker.attachDOMEvent(docBody, 'touchstart', this.touchStartActivationHandler,false);\r\n      eventTracker.attachDOMEvent(docBody, 'touchmove',  this.touchMoveActivationHandler, false);\r\n      eventTracker.attachDOMEvent(docBody, 'touchend',   this.touchEndActivationHandler,  false);\r\n    }\r\n\r\n    eventTracker.attachDOMEvent(window, 'load',   this._WindowLoad,  false);\r\n    eventTracker.attachDOMEvent(window, 'unload', this._WindowUnload,false);\r\n\r\n    eventTracker.attachDOMEvent(document, 'keyup', this.engine.hotkeyManager._Process, false);\r\n  }\r\n\r\n  public shutdown() {\r\n    const eventTracker = this.domEventTracker;\r\n    const device = this.engine.config.hostDevice;\r\n    const docBody = this.window.document.body;\r\n\r\n    // See `attachHandlers` for the purpose behind all handlers listed here.\r\n\r\n    eventTracker.detachDOMEvent(this.window, 'focus', this.pageFocusHandler, false);\r\n    eventTracker.detachDOMEvent(this.window, 'blur', this.pageFocusHandler, false);\r\n\r\n    eventTracker.detachDOMEvent(docBody, 'focus', this.suppressFocusCheck, true);\r\n    eventTracker.detachDOMEvent(docBody, 'blur', this.suppressFocusCheck, true);\r\n\r\n    if(device.touchable) {\r\n      eventTracker.detachDOMEvent(docBody, 'touchstart', this.touchStartActivationHandler,false);\r\n      eventTracker.detachDOMEvent(docBody, 'touchmove',  this.touchMoveActivationHandler, false);\r\n      eventTracker.detachDOMEvent(docBody, 'touchend',   this.touchEndActivationHandler,  false);\r\n\r\n      this.mobilePageTrailer?.parentElement.removeChild(this.mobilePageTrailer);\r\n    }\r\n\r\n    eventTracker.detachDOMEvent(window, 'load',   this._WindowLoad,  false);\r\n    eventTracker.detachDOMEvent(window, 'unload', this._WindowUnload,false);\r\n\r\n    eventTracker.detachDOMEvent(document, 'keyup', this.engine.hotkeyManager._Process, false);\r\n  }\r\n}",
    "// Found a bit of magic formatting that allows dynamic return typing for a specified element tag!\r\nexport function _CreateElement<E extends \"p\"|\"style\"|\"script\"|\"div\"|\"canvas\"|\"span\">(nodeName:E) {\r\n  const e = document.createElement<E>(nodeName);\r\n  e.style.userSelect=\"none\";\r\n\r\n  // @ts-ignore\r\n  e.style.MozUserSelect=\"none\";\r\n  // @ts-ignore\r\n  e.style.KhtmlUserSelect=\"none\";\r\n  // @ts-ignore\r\n  e.style.UserSelect=\"none\";\r\n  // @ts-ignore\r\n  e.style.WebkitUserSelect=\"none\";\r\n  return e;\r\n}",
    "/**\r\n * Get browser-independent computed style value for element\r\n *\r\n * @param       {Element}     e             HTML element\r\n * @param       {string}      s             CSS style name\r\n * @return      {*}\r\n */\r\nexport function getStyleValue(e:HTMLElement, s:string) {\r\n  // Build 349: error trap added, since on iOS, getPropertyValue may fail\r\n  // and crash in some cases, possibly if passed a text node\r\n  try\r\n  {\r\n    if(e && (typeof(window.getComputedStyle) != 'undefined')) {\r\n        return window.getComputedStyle(e,'').getPropertyValue(s);\r\n    }\r\n  }\r\n  catch(ex){}\r\n\r\n  // Return empty string if unable to get style value\r\n  return '';\r\n}",
    "\r\n/**\r\n * Get viewport scale factor for this document\r\n *\r\n * @return      {number}\r\n */\r\nexport function getViewportScale(): number {\r\n  // This can sometimes fail with some browsers if called before document defined,\r\n  // so catch the exception\r\n  try {\r\n    // For emulation of iOS on a desktop device, use a default value\r\n    if(this.device.formFactor == 'desktop') {\r\n      return 1;\r\n    }\r\n\r\n    // Get viewport width\r\n    var viewportWidth = document.documentElement.clientWidth;\r\n\r\n    // Return a default value if screen width is greater than the viewport width (not fullscreen).\r\n    if(screen.width > viewportWidth) {\r\n      return 1;\r\n    }\r\n\r\n    // Get the orientation corrected screen width\r\n    var screenWidth = screen.width;\r\n    if(this.landscapeView()) {\r\n      // Take larger of the two dimensions\r\n      if(screen.width < screen.height) {\r\n        screenWidth = screen.height;\r\n      }\r\n    } else {\r\n      // Take smaller of the two dimensions\r\n      if(screen.width > screen.height) {\r\n        screenWidth = screen.height;\r\n      }\r\n    }\r\n    // Calculate viewport scale\r\n    return Math.round(100*screenWidth / viewportWidth)/100;\r\n  } catch(ex) {\r\n    return 1;\r\n  }\r\n}\r\n",
    "// Manages the language selection UI for touch-form factors, which is triggered by an OSK key.\r\nimport { getAbsoluteX, landscapeView } from \"keyman/engine/dom-utils\";\r\nimport { KeyboardStub } from \"keyman/engine/package-cache\";\r\n\r\nimport KeymanEngine from \"./keymanEngine.js\";\r\nimport * as util from \"./utils/index.js\";\r\n\r\n// Used by 'native'-mode KMW only - the Android and iOS embedding apps implement their own menus.\r\nexport class LanguageMenu {\r\n  private readonly keyman: KeymanEngine;\r\n\r\n  private lgList: HTMLDivElement;\r\n  private shim: HTMLDivElement;\r\n\r\n  private scrolling: boolean;\r\n  private activeLgNo: number;\r\n  private y0: number;\r\n\r\n  // A subset of CSSStyleDeclaration.\r\n  private originalBodyStyle: {overflowY?: string, height?: string};\r\n\r\n  constructor(keyman: KeymanEngine) {\r\n    this.keyman = keyman;\r\n    this.scrolling = false;\r\n\r\n    this.shim = this.constructShim();\r\n  }\r\n\r\n  constructShim(): HTMLDivElement {\r\n    let languageMenu = this;\r\n    let shim = util._CreateElement('div');\r\n    let osk = this.keyman.osk;\r\n\r\n    shim.id='kmw-language-menu-background';\r\n    shim.addEventListener('touchstart', (e) => {\r\n      e.preventDefault();\r\n      languageMenu.hide();\r\n\r\n      // Display build only if touching menu, space *and* one other point on screen (build 369)\r\n      if(e.touches.length > 2) {\r\n        var sX=e.touches[1].pageX,sY=e.touches[1].pageY;\r\n        let spaceBar = osk.vkbd.spaceBar;\r\n        if(sX > spaceBar.offsetLeft && sX < spaceBar.offsetLeft+spaceBar.offsetWidth &&\r\n           sY > spaceBar.offsetTop && sY < spaceBar.offsetTop+spaceBar.offsetHeight\r\n        ) {\r\n          this.keyman.osk.emit('showbuild');\r\n        }\r\n      }\r\n    },false);\r\n\r\n    return shim;\r\n  }\r\n\r\n  /**\r\n   * Display list of installed keyboards in pop-up menu\r\n   **/\r\n  show() {\r\n    const device = this.keyman.config.hostDevice;\r\n    let kbdList=this.keyman.keyboardRequisitioner.cache.getStubList();\r\n    let nKbds=kbdList.length;\r\n    if(nKbds < 1) {\r\n      return;\r\n    }\r\n\r\n    // Create the menu list container element\r\n    var menu=this.lgList=util._CreateElement('div');\r\n    this.lgList.id='kmw-language-menu';\r\n\r\n    // Insert a transparent overlay to prevent anything else happening during keyboard selection,\r\n    // but allow the menu to be closed if anywhere else on screen is touched\r\n\r\n    let languageMenu = this;\r\n\r\n    document.body.appendChild(this.shim);\r\n\r\n    // Add two nested DIVs to properly support iOS scrolling with momentum\r\n    //  c.f. https://github.com/joelambert/ScrollFix/issues/2\r\n    var m2=util._CreateElement('div'),s2=m2.style,\r\n        m3=util._CreateElement('div'),s3=m3.style;\r\n    m2.id='kmw-menu-scroll-container'; m3.id='kmw-menu-scroller';\r\n\r\n    // Support momentum scrolling on iOS\r\n    if('WebkitOverflowScrolling' in s2) {\r\n      s2.WebkitOverflowScrolling='touch';\r\n    }\r\n\r\n    m2.appendChild(m3);\r\n    menu.appendChild(m2);\r\n\r\n    // Add menu index strip\r\n    var i,x,mx=util._CreateElement('div');\r\n    mx.id='kmw-menu-index';\r\n    for(i=1; i<=26; i++) {\r\n      x=util._CreateElement('p');\r\n      x.innerHTML=String.fromCharCode(i+64);\r\n      mx.appendChild(x);\r\n    }\r\n\r\n    // Add index selection (for a large menu)\r\n    mx.addEventListener('touchstart',function(e){\r\n      languageMenu.scrollToLanguage(e, m2, m3);\r\n    }, false);\r\n    mx.addEventListener('touchend',function(e){\r\n      e.stopPropagation();\r\n    }, false);\r\n    menu.appendChild(mx);\r\n\r\n    //TODO: not sure if either of these two handlers ar actually needed.  touchmove handler may be doing all that is necessary.\r\n    // Add scroll end event handling to override body scroll\r\n    menu.addEventListener('scroll',function(e){\r\n      languageMenu.scrolling=true;\r\n    },false);\r\n    m2.addEventListener('scroll',function(e){\r\n      //this.lgList.scrolling=true;\r\n      if(m2.scrollTop < 1) {\r\n        m2.scrollTop=1;\r\n      }\r\n      if(m2.scrollTop > m2.scrollHeight-m2.offsetHeight-1) {\r\n        m2.scrollTop=m2.scrollHeight-m2.offsetHeight-1;\r\n      }\r\n    },false);\r\n\r\n    // Add a list of keyboards to the innermost DIV\r\n    this.activeLgNo=this.addLanguages(m3,kbdList);\r\n\r\n    // Get number of visible (language) selectors\r\n    var nLgs=m3.childNodes.length-1;\r\n\r\n    // Do not display until sizes have been calculated\r\n    this.lgList.style.visibility='hidden';\r\n\r\n    // Append menu to document body, not to OSK\r\n    document.body.appendChild(this.lgList);\r\n\r\n    // Adjust size for viewport scaling (probably not needed for iOS, but check!)\r\n    if(device.OS == 'android' && 'devicePixelRatio' in window) {\r\n      this.lgList.style.fontSize=(2/window.devicePixelRatio)+'em';\r\n    }\r\n\r\n\r\n    // Adjust width for pixel scaling on Android tablets\r\n    if(device.OS == 'android' && device.formFactor == 'tablet' && 'devicePixelRatio' in window) {\r\n      var w=parseInt(util.getStyleValue(menu,'width'),10),\r\n      ms=menu.style;\r\n      if(!isNaN(w)) {\r\n        ms.width=ms.maxWidth=(2*w/window.devicePixelRatio)+'px';\r\n      }\r\n      w=parseInt(util.getStyleValue(m2,'width'),10);\r\n      ms=m2.style;\r\n      if(!isNaN(w)) {\r\n        ms.width=ms.maxWidth=(2*w/window.devicePixelRatio)+'px';\r\n      }\r\n      w=parseInt(util.getStyleValue(m3,'width'),10);\r\n      ms=m3.style;\r\n      if(!isNaN(w)) {\r\n        ms.width=ms.maxWidth=(2*w/window.devicePixelRatio)+'px';\r\n      }\r\n    }\r\n\r\n    // Adjust initial top and height of menu\r\n    this.adjust(0);\r\n\r\n    // Adjust the index font size and line height\r\n    var dy=(<HTMLElement>mx.childNodes[1]).offsetTop-(<HTMLElement>mx.childNodes[0]).offsetTop,\r\n        lineHeight=Math.floor(menu.offsetHeight/26.0),\r\n        scale=Math.round(100.0*lineHeight/dy)/100.0,\r\n        factor=(scale > 0.6 ? 1 : 2);\r\n\r\n    if(scale > 1.25) {\r\n      scale=1.25;\r\n    }\r\n\r\n    for(i=0;i<26;i++) {\r\n      var qs=(<HTMLElement>mx.childNodes[i]).style;\r\n      if(factor == 2 && (i%2) == 1) {\r\n        qs.display='none';\r\n      } else {\r\n        qs.fontSize=(scale*factor)+'em';\r\n        qs.lineHeight=(lineHeight*factor)+'px';\r\n      }\r\n    }\r\n\r\n    // Increase width of outer menu DIV by index, else hide index\r\n    var menuWidth=m2.offsetWidth;\r\n    if(m2.scrollHeight > m2.offsetHeight+3) {\r\n      menuWidth = menuWidth+mx.offsetWidth;\r\n    } else {\r\n      mx.style.display='none';\r\n    }\r\n\r\n    menu.style.width=menuWidth+'px';\r\n\r\n    // Now display the menu\r\n    this.lgList.style.visibility='';\r\n\r\n    this.scrollToIndex(this.activeLgNo, m2, m3);\r\n  }\r\n\r\n  /**\r\n   * Adjust top and height of language menu\r\n   *\r\n   * @param   {number}  nKbds number of displayed keyboards to add to number of languages\r\n   **/\r\n  adjust(nKbds: number) {\r\n    let osk = this.keyman.osk;\r\n    let device = this.keyman.config.hostDevice;\r\n\r\n    var menu=this.lgList, m2=<HTMLElement>menu.firstChild, m3=<HTMLElement>m2.firstChild,\r\n      barWidth=0,s=menu.style,mx=<HTMLElement>menu.childNodes[1],\r\n      maxHeight=window.innerHeight-osk.vkbd.lgKey.offsetHeight-16,\r\n      nItems=m3.childNodes.length+nKbds-1,      // Number of (visible) keyboard selectors\r\n      itemHeight=(<HTMLElement>m3.firstChild.firstChild).offsetHeight,\r\n      menuHeight=nItems*itemHeight;\r\n\r\n    // Correct maxheight for viewport scaling (iPhone/iPod only) and internal position corrections\r\n    if(device.OS == 'ios') {\r\n      if(device.formFactor == 'phone') {\r\n        barWidth=(landscapeView() ? 36 : 0);\r\n        maxHeight=(window.innerHeight-barWidth-16)*util.getViewportScale();\r\n      } else if(device.formFactor == 'tablet') {\r\n        barWidth=(landscapeView() ? 16 : 0);\r\n        maxHeight=(maxHeight-barWidth);\r\n      }\r\n    }\r\n\r\n    // Explicitly set position and height\r\n    s.left = getAbsoluteX(osk.vkbd.lgKey)+'px';\r\n    if(menuHeight > maxHeight) {\r\n      menuHeight=maxHeight;\r\n    }\r\n    s.height=menuHeight+'px';\r\n\r\n    // Position menu at bottom of screen using the same positioning model as the OSK.\r\n    s.bottom='0px';\r\n\r\n    // Explicitly set the scroller and index heights to the container height\r\n    mx.style.height=m2.style.height=s.height;\r\n  }\r\n\r\n  /**\r\n   * Add an index to the language menu\r\n   *\r\n   *  @param  {Object}  e         touch start event from index\r\n   *  @param  {Object}  m2        menu scroller DIV\r\n   *  @param  {Object}  menu      DIV with list of languages\r\n   */\r\n  scrollToLanguage(e: TouchEvent, m2: HTMLDivElement, menu: HTMLDivElement) {\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    let target = <HTMLElement> e.touches[0].target;\r\n\r\n    // Will return 'P', not 'p'.\r\n    if(target.nodeName != 'P') {\r\n      return;\r\n    }\r\n\r\n    var i,t,initial=target.innerHTML.charCodeAt(0),nn=menu.childNodes;\r\n    try {\r\n      for(i=0; i<nn.length-1; i++) {\r\n        t=(<HTMLElement>nn[i].firstChild).innerHTML.toUpperCase().charCodeAt(0);\r\n        if(t >= initial) {\r\n          break;\r\n        }\r\n      }\r\n    } catch(ex){}\r\n\r\n    this.scrollToIndex(i, m2, menu);\r\n  }\r\n\r\n  scrollToIndex(index: number, m2: HTMLDivElement, menu: HTMLDivElement) {\r\n    let top: number;\r\n\r\n    // Will leave this much portion of the last pre-index item visible.\r\n    // 0.5 => 50%.\r\n    const SCROLL_ITEM_BUFFER = 0.5;\r\n    try {\r\n      top=(<HTMLElement>menu.firstChild).getBoundingClientRect().height*(index-SCROLL_ITEM_BUFFER)+1;\r\n      m2.scrollTop=top;\r\n    } catch(ex) {\r\n      top=0;\r\n    }\r\n\r\n    try {\r\n      // Clamp the language menu scroll within boundaries - do not leave \"whitespace\" either\r\n      // before or after all menu items due to scroll positioning near list borders.\r\n      if(m2.scrollTop < 0) {\r\n        m2.scrollTop = 0;\r\n      }\r\n      if(m2.scrollTop > m2.scrollHeight-m2.offsetHeight-1) {\r\n        m2.scrollTop=m2.scrollHeight-m2.offsetHeight-1;\r\n      }\r\n    } catch(ex){}\r\n  }\r\n\r\n  /**\r\n   * Display all languages for installed keyboards in scrollable list\r\n   *\r\n   *    @param    {Object}    menu      DIV to which language selectors will be added\r\n   *    @param    {Object}    kbdList   array of keyboard stub objects\r\n   *    @return   {number}              index of currently active language\r\n   **/\r\n  addLanguages(menu: HTMLDivElement, kbdList: KeyboardStub[]): number {\r\n    var nStubs=kbdList.length;\r\n    let device = this.keyman.config.hostDevice;\r\n\r\n    // Create and sort a list of languages\r\n    var k,n,lg,langs=[];\r\n    for(n=0; n<nStubs; n++) {\r\n      lg=kbdList[n]['KL'];\r\n      if(langs.indexOf(lg) == -1) {\r\n        langs.push(lg);\r\n      }\r\n    }\r\n    langs.sort();\r\n\r\n    // Get current scale factor (reciprocal of viewport scale)\r\n    var scale=Math.round(100/util.getViewportScale())/100;\r\n\r\n    var dx,lgBar,i,kb,activeLanguageIndex=-1;\r\n    for(k=0; k<langs.length; k++) {\r\n      dx=util._CreateElement('div');\r\n      dx.className='kbd-list-closed';\r\n      lgBar=util._CreateElement('p');\r\n      lgBar.kList=[];\r\n\r\n      for(n=0; n<nStubs; n++) {\r\n        if(kbdList[n]['KL'] == langs[k]) {\r\n          lgBar.kList.push(kbdList[n]);\r\n        }\r\n      }\r\n\r\n      // Adjust bar size for current viewport scaling (iOS only!)\r\n      if(device.OS == 'ios') {\r\n        lgBar.style.fontSize=scale+'em';\r\n      }\r\n\r\n      // Add to menu\r\n      dx.appendChild(lgBar);\r\n      menu.appendChild(dx);\r\n\r\n      if(langs[k] == this.keyman.contextManager.activeKeyboard?.metadata.langName) {\r\n        activeLanguageIndex=k;\r\n      }\r\n\r\n      let languageMenu = this;\r\n      // Several keyboards for this language\r\n      if(lgBar.kList.length > 1) {\r\n        lgBar.className='kbd-list';\r\n        lgBar.innerHTML=langs[k]+'...';\r\n        lgBar.scrolled=false;\r\n        lgBar.ontouchend=function(e) {\r\n          e.stopPropagation();\r\n          if(e.target.scrolled)\r\n            e.target.scrolled=false;\r\n          else\r\n            this.parentNode.className=(this.parentNode.className=='kbd-list-closed'?'kbd-list-open':'kbd-list-closed');\r\n\r\n          // Adjust top of menu to allow for expanded list\r\n          languageMenu.adjust(this.parentNode.className=='kbd-list-closed'?0:this.kList.length);\r\n        }\r\n        lgBar.addEventListener('touchstart',function(e){e.stopPropagation();},false);\r\n        lgBar.addEventListener('touchmove',function(e){e.target.scrolled=true;e.stopPropagation();},false);\r\n\r\n        for(i=0; i<lgBar.kList.length; i++) {\r\n          kb=util._CreateElement('p');\r\n          kb.className='kbd-list-entry';\r\n          if(device.OS == 'ios') {\r\n            kb.style.fontSize=scale+'em';\r\n          }\r\n          this.addKeyboard(lgBar.kList[i],kb,false);\r\n          dx.appendChild(kb);\r\n        }\r\n        // Only one keyboard for this language\r\n      } else {\r\n        lgBar.innerHTML=langs[k];\r\n        lgBar.className='kbd-single-entry';\r\n        this.addKeyboard(lgBar.kList[0],lgBar,true);\r\n      }\r\n\r\n      if(k == activeLanguageIndex) {\r\n        lgBar.className=lgBar.className+' current';\r\n      }\r\n    }\r\n\r\n    // Add a non-selectable bottom bar so to allow scrolling to the last language\r\n    var padLast=util._CreateElement('div');\r\n    padLast.id='kmw-menu-footer';\r\n    var cancelTouch=function(e){\r\n      if(e.cancelable) {\r\n        e.preventDefault();\r\n      }\r\n      e.stopPropagation();\r\n    };\r\n    padLast.addEventListener('touchstart',cancelTouch,false);\r\n    padLast.addEventListener('touchmove',cancelTouch,false);\r\n    padLast.addEventListener('touchend',cancelTouch,false);\r\n    menu.appendChild(padLast);\r\n\r\n    return activeLanguageIndex;\r\n  }\r\n\r\n  /**\r\n   * Add a keyboard entry to the language menu *\r\n   *\r\n   * @param   {Object}    kbd     keyboard object\r\n   * @param   {Object}    kb      element being added and styled\r\n   * @param   {boolean}   unique  is this the only keyboard for the language?\r\n   */\r\n  addKeyboard(kbd, kb, unique: boolean) {\r\n    kb.kn=kbd['KI'];        // InternalName;\r\n    kb.kc=kbd['KLC'];       // LanguageCode;\r\n    kb.innerHTML=unique?kbd['KL']:kbd['KN'].replace(' Keyboard',''); // Name\r\n\r\n    // We're setting up a few events - this alias helps avoid scoping issues.\r\n    const languageMenu = this;\r\n\r\n    // Refer to https://github.com/keymanapp/keyman/pull/7790 for context on\r\n    // the following two methods.\r\n    const lockBodyScroll = () => {\r\n      // If this object still exists, we never ran our paired `unlock` method;\r\n      // preserve the original state so that we can still restore it later!\r\n      if(this.originalBodyStyle) {\r\n        console.error(\"Unexpected state:  `originalBodyStyle` was not cleared by a previous `unlockBodyScroll()` call\");\r\n        return;\r\n      }\r\n\r\n      // Preserve the original style for the body element; we're going to change\r\n      // it to block page scrolling.  Must use a separate instance.\r\n      //\r\n      // Reference: https://stackoverflow.com/a/28411556\r\n      this.originalBodyStyle = {};\r\n\r\n      // Must be separate line from previous due to TS type inference stuff.\r\n      const obs = this.originalBodyStyle;\r\n      const dbs = document.body.style;\r\n      obs.overflowY = dbs.overflowY;\r\n      obs.height = dbs.height;\r\n\r\n      // Now that the properties we're going to overwrite have been cached...\r\n      dbs.overflowY = 'hidden';\r\n      dbs.height = '100%';\r\n      return true;\r\n    }\r\n\r\n    const unlockBodyScroll = () => {\r\n      if(!this.originalBodyStyle) {\r\n        // We shouldn't be able to reach here, but in case things go out-of-order due\r\n        // to some unforeseen circumstance, let's null-guard here.\r\n        console.error(\"Unexpected state:  `originalBodyStyle` is unset; cannot restore original body style\");\r\n        return;\r\n      }\r\n\r\n      // Reverses the changes to document.body.style made by `lockBodyScroll`.\r\n      const obs = this.originalBodyStyle;\r\n      const dbs = document.body.style;\r\n\r\n      dbs.overflowY = obs.overflowY;\r\n      dbs.height = obs.height;\r\n\r\n      // Successful restoration!  Clear the \"restore to this\" state so that the\r\n      // next 'lock' operation knows to do its part.\r\n      this.originalBodyStyle = null;\r\n    }\r\n\r\n    // Touchstart (or mspointerdown) event highlights the touched list item\r\n    const touchStart=function(e) {\r\n      e.stopPropagation();\r\n      if(this.className.indexOf('selected') <= 0) {\r\n        this.className=this.className+' selected';\r\n      }\r\n      languageMenu.scrolling=false;\r\n      languageMenu.y0=e.touches[0].pageY;//osk.lgList.childNodes[0].scrollTop;\r\n\r\n      lockBodyScroll();\r\n    };\r\n\r\n    //TODO: Still drags Android background sometimes (not consistently)\r\n    // Touchmove drags the list and prevents release from selecting the language\r\n    const touchMove=function(e: TouchEvent) {\r\n      e.stopImmediatePropagation();\r\n      var scroller=<HTMLElement>languageMenu.lgList.childNodes[0],\r\n          yMax=scroller.scrollHeight-scroller.offsetHeight,\r\n      y, dy;\r\n\r\n      // TS does not have a standard definition for TouchEvent.pageY.\r\n      //@ts-ignore\r\n      if(\"undefined\" != typeof e.pageY) {\r\n        //@ts-ignore\r\n        y = e.pageY;\r\n      } else if(\"undefined\" != typeof e.touches) {\r\n        y = e.touches[0].pageY;\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      dy=y-languageMenu.y0;\r\n\r\n      // Scroll up (show later listed languages)\r\n      if(dy < 0) {\r\n        if(scroller.scrollTop >= yMax-1) {\r\n          languageMenu.y0=y;\r\n        }\r\n        // Scroll down (show earlier listed languages)\r\n      } else if(dy > 0) {\r\n        if(scroller.scrollTop < 2) {\r\n          languageMenu.y0=y;\r\n        }\r\n        // Dont' scroll - can happen if changing scroll direction\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      // Disable selected language if drag more than 5px\r\n      if(dy < -5 || dy > 5) {\r\n        languageMenu.scrolling=true;\r\n        this.className=this.className.replace(/\\s*selected/,'');\r\n        languageMenu.y0=y;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    // Touch release (click) event selects touched list item\r\n    const touchEnd=function(e: TouchEvent) {\r\n      if(typeof(e.stopImmediatePropagation) != 'undefined') {\r\n        e.stopImmediatePropagation();\r\n      } else {\r\n        e.stopPropagation();\r\n      }\r\n\r\n      if(languageMenu.scrolling) {\r\n        this.className=this.className.replace(/\\s*selected/,'');\r\n      } else {\r\n        languageMenu.keyman.contextManager.focusAssistant.setFocusTimer(); // #5946\r\n\r\n        languageMenu.lgList.style.display='none'; //still allows blank menu momentarily on selection\r\n        languageMenu.keyman.contextManager.activateKeyboard(this.kn,this.kc,true);\r\n        languageMenu.keyman.contextManager.restoreLastActiveTarget();\r\n        languageMenu.hide();\r\n      }\r\n\r\n      unlockBodyScroll();\r\n      return true;\r\n    };\r\n\r\n    const touchCancel=function(e: TouchEvent) {\r\n      unlockBodyScroll();\r\n    }\r\n\r\n    kb.onmspointerdown=touchStart;\r\n    kb.addEventListener('touchstart',touchStart,false);\r\n    kb.onmspointermove=touchMove;\r\n    kb.addEventListener('touchmove',touchMove,false);\r\n    kb.onmspointerout=touchEnd;\r\n    kb.addEventListener('touchend',touchEnd,false);\r\n    kb.addEventListener('touchcancel',touchCancel,false);\r\n  }\r\n\r\n  /**\r\n   * Remove the language menu again\r\n   **/\r\n  hide() {\r\n    let osk = this.keyman.osk;\r\n\r\n    if(this.lgList) {\r\n      osk.vkbd.highlightKey(osk.vkbd.lgKey,false);\r\n      this.lgList.style.visibility='hidden';\r\n\r\n      window.setTimeout(() => {\r\n        // In case of extremely rapid keyboard swaps, this event may trigger more than once -\r\n        // the shim's on-touch event can trigger after a keyboard has been selected!\r\n        if(this.shim.parentElement) {\r\n          document.body.removeChild(this.shim);\r\n          document.body.removeChild(this.lgList);\r\n        }\r\n      },500);\r\n    }\r\n\r\n    this.keyman.touchLanguageMenu = null;\r\n  }\r\n}",
    "import { type KeyElement, OSKView, VisualKeyboard } from \"keyman/engine/osk\";\r\nimport { KEYMAN_VERSION } from \"@keymanapp/keyman-version\";\r\nimport ContextManager from \"./contextManager.js\";\r\nimport KeymanEngine from \"./keymanEngine.js\";\r\nimport { LanguageMenu } from \"./languageMenu.js\";\r\n\r\nexport function setupOskListeners(engine: KeymanEngine, osk: OSKView, contextManager: ContextManager) {\r\n  const focusAssistant = contextManager.focusAssistant;\r\n\r\n  osk.on('globekey', (key, on) => { // K_LOPT\r\n    if(on) {\r\n      if(osk.hostDevice.touchable) {\r\n        engine.touchLanguageMenu = new LanguageMenu(engine);\r\n        engine.touchLanguageMenu.show();\r\n      }\r\n    }\r\n\r\n    if(osk.vkbd) {\r\n      osk.vkbd.highlightKey(key, false); // never leave the globe key highlighted\r\n    }\r\n  });\r\n\r\n  osk.on('hiderequested', (key) => { // K_ROPT\r\n    if(osk) {\r\n      osk.startHide(true);\r\n      contextManager.forgetActiveTarget();\r\n    }\r\n  });\r\n\r\n  osk.addEventListener('hide', (params) => {\r\n    // If hidden by the UI, be sure to restore the focus\r\n    if(params?.HiddenByUser) {\r\n      contextManager.activeTarget?.focus();\r\n    }\r\n  });\r\n\r\n  osk.on('showbuild', () => {\r\n    engine.config.alertHost?.alert('KeymanWeb Version ' + KEYMAN_VERSION.VERSION + '<br /><br />'\r\n      +'<span style=\"font-size:0.8em\">Copyright &copy; 2007-2023 SIL International</span>');\r\n  });\r\n\r\n  osk.on('dragmove', async (promise) => {\r\n    focusAssistant.restoringFocus = true;\r\n\r\n    await promise;\r\n\r\n    contextManager.restoreLastActiveTarget();\r\n\r\n    focusAssistant.restoringFocus = false;\r\n    focusAssistant.setMaintainingFocus(false);\r\n  });\r\n\r\n  osk.on('resizemove', async (promise) => {\r\n    focusAssistant.restoringFocus = true;\r\n\r\n    await promise;\r\n    contextManager.restoreLastActiveTarget();\r\n\r\n    focusAssistant.restoringFocus = false;\r\n    focusAssistant.setMaintainingFocus(false);\r\n  });\r\n\r\n  osk.on('pointerinteraction', async (promise) => {\r\n   // On event start\r\n   focusAssistant.setMaintainingFocus(true);\r\n\r\n   await promise;\r\n\r\n   focusAssistant.setMaintainingFocus(false);\r\n  });\r\n}",
    "\r\nimport {\r\n  CookieSerializer,\r\n  createStyleSheet,\r\n  getAbsoluteX,\r\n  getAbsoluteY,\r\n  StylesheetManager\r\n } from \"keyman/engine/dom-utils\";\r\nimport { DomEventTracker } from \"keyman/engine/events\";\r\nimport { BrowserConfiguration, BrowserInitOptionSpec } from \"./configuration.js\";\r\nimport { getStyleValue } from \"./utils/getStyleValue.js\";\r\nimport { AlertHost } from \"./utils/alertHost.js\";\r\n\r\n/**\r\n * Calls document.createElement for the specified node type and also applies\r\n * 'user-select: none' styling to the new element.\r\n * @param nodeName\r\n * @returns\r\n */\r\nexport function createUnselectableElement<E extends keyof HTMLElementTagNameMap>(nodeName:E) {\r\n  const e = document.createElement<E>(nodeName);\r\n  e.style.userSelect=\"none\";\r\n  return e;\r\n}\r\n\r\n/**\r\n * Defines the base object for the long-standing `keyman.util` API methods, maintaining\r\n * their long-standing names and signatures as defined at\r\n * https://help.keyman.com/developer/engine/web/current-version/reference/util/\r\n */\r\nexport class UtilApiEndpoint {\r\n  readonly config: BrowserConfiguration;\r\n  private readonly stylesheetManager: StylesheetManager;\r\n  private readonly domEventTracker: DomEventTracker;\r\n  private _alertHost: AlertHost;\r\n\r\n  constructor(config: BrowserConfiguration) {\r\n    this.config = config;\r\n    this.stylesheetManager = new StylesheetManager(document.body, config.applyCacheBusting);\r\n    this.domEventTracker = new DomEventTracker();\r\n  }\r\n\r\n  /**\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/getAbsoluteX\r\n   */\r\n  public readonly getAbsoluteX = getAbsoluteX;\r\n\r\n  /**\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/getAbsoluteY\r\n   */\r\n  public readonly getAbsoluteY = getAbsoluteY;\r\n\r\n  // These four were renamed, but we need to maintain their legacy names.\r\n  readonly _GetAbsoluteX = getAbsoluteX;\r\n  readonly _GetAbsoluteY = getAbsoluteY;\r\n  readonly _GetAbsolute = this.getAbsolute;\r\n\r\n  /**\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/toNzString\r\n   */\r\n  public readonly toNzString = this.nzString;\r\n\r\n  /**\r\n   * Expose the touchable state for UIs - will disable external UIs entirely\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/isTouchDevice\r\n   **/\r\n  public isTouchDevice(): boolean {\r\n    return this.config.hostDevice.touchable;\r\n  }\r\n\r\n  /**\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/getAbsolute\r\n   */\r\n  public getAbsolute(elem: HTMLElement): { x: number, y: number } {\r\n    return {\r\n      x: getAbsoluteX(elem),\r\n      y: getAbsoluteY(elem)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calls document.createElement for the specified node type and also applies\r\n   * 'user-select: none' styling to the new element.\r\n   * @param nodeName\r\n   * @returns\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/createElement\r\n   */\r\n  public readonly createElement = createUnselectableElement;\r\n\r\n  /**\r\n   * Function     getOption\r\n   * Scope        Public\r\n   * @param       {string}    optionName  Name of option\r\n   * @param       {*=}        dflt        Default value of option\r\n   * @return      {*}\r\n   * Description  Returns value of named option\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/getOption\r\n   */\r\n  public getOption(optionName: keyof BrowserInitOptionSpec, dflt?:any): any {\r\n    if(optionName in this.config.paths) {\r\n      return this.config.paths[optionName];\r\n    } else if(optionName in this.config.options) {\r\n      return this.config.options[optionName];\r\n    } else if(arguments.length > 1) {\r\n      return dflt;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/setOption\r\n   *\r\n   * Note:  the 'attachType' and 'ui' options currently cannot be changed via this method.\r\n   */\r\n  public setOption(optionName: keyof BrowserInitOptionSpec, value: any): void {\r\n    switch(optionName) {\r\n      case 'attachType':\r\n        // 16.0 & before:  did nothing.\r\n        // Fixable for 17.0 with some extra work, but the changes would likely be enough to\r\n        // merit a focused PR.  It's not 100% straightforward.\r\n        break;\r\n      case 'ui':\r\n        // 16.0 & before:  relies on the Float UI to passively pick up on any changes.\r\n        // Only appears to be effective before the Float UI initializes.\r\n        break;\r\n      case 'useAlerts':\r\n        this.config.signalUser = (value ? new AlertHost() : null);\r\n        break;\r\n      case 'setActiveOnRegister':\r\n        this.config.activateFirstKeyboard = !!value;\r\n        break;\r\n      case 'spacebarText':\r\n        this.config.spacebarText = value;\r\n        break;\r\n      default:\r\n        throw new Error(\"Path-related options may not be changed after the engine has initialized.\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Document cookie parsing for use by kernel, OSK, UI etc.\r\n   *\r\n   * @param       {string=}       cn        cookie name (optional)\r\n   * @return      {Object}                  array of names and strings, or array of variables and values\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/loadCookie\r\n   */\r\n  public loadCookie<CookieType extends Record<keyof CookieType, string | number | boolean>>(cn?: string) {\r\n    const cookie = new CookieSerializer<CookieType>(cn);\r\n    return cookie.load(decodeURIComponent);\r\n  }\r\n\r\n  /**\r\n   * Standard cookie saving for use by kernel, OSK, UI etc.\r\n   *\r\n   * @param       {string}      cn            name of cookie\r\n   * @param       {Object}      cv            object with array of named arguments and values\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/saveCookie\r\n   */\r\n  public saveCookie<CookieType extends Record<keyof CookieType, string | number | boolean>>(cn: string, cv: CookieType) {\r\n    const cookie = new CookieSerializer<CookieType>(cn);\r\n    cookie.save(cv, encodeURIComponent);\r\n  }\r\n\r\n  /**\r\n   * Add a stylesheet to a page programmatically, for use by the OSK, the UI or the page creator\r\n   *\r\n   * @param       {string}        s             style string\r\n   * @return      {Object}                      returns the object reference\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/addStyleSheet\r\n   **/\r\n  public addStyleSheet(s: string): HTMLStyleElement {\r\n    const styleSheet = createStyleSheet(s);\r\n    this.stylesheetManager.linkStylesheet(styleSheet);\r\n\r\n    return styleSheet;\r\n  }\r\n\r\n  /**\r\n   * Remove a stylesheet element\r\n   *\r\n   * @param       {Object}        s             style sheet reference\r\n   * @return      {boolean}                     false if element is not a style sheet\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/removeStyleSheet\r\n   **/\r\n  public removeStyleSheet(s: HTMLStyleElement) {\r\n    return this.stylesheetManager.unlink(s);\r\n  }\r\n\r\n  /**\r\n   * Add a reference to an external stylesheet file\r\n   *\r\n   * @param   {string}  s   path to stylesheet file\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/linkStyleSheet\r\n   */\r\n  public linkStyleSheet(s: string): void {\r\n    this.stylesheetManager.linkExternalSheet(s);\r\n  }\r\n\r\n  // Possible alternative:  https://www.npmjs.com/package/language-tags\r\n  // This would necessitate linking in a npm module into compiled KeymanWeb, though.\r\n  getLanguageCodes(lgCode: string): string[] {\r\n    if(lgCode.indexOf('-')==-1) {\r\n      return [lgCode];\r\n    } else {\r\n      return lgCode.split('-');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     attachDOMEvent: Note for most browsers, adds an event to a chain, doesn't stop existing events\r\n   * Scope        Public\r\n   * @param       {Object}    Pelem       Element (or IFrame-internal Document) to which event is being attached\r\n   * @param       {string}    Peventname  Name of event without 'on' prefix\r\n   * @param       {function(Object)}  Phandler    Event handler for event\r\n   * @param       {boolean=}  PuseCapture True only if event to be handled on way to target element\r\n   * Description  Attaches event handler to element DOM event\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/attachDOMEvent\r\n   */\r\n  attachDOMEvent<K extends keyof WindowEventMap>(\r\n    Pelem: Window,\r\n    Peventname: K,\r\n    Phandler: (ev: WindowEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  attachDOMEvent<K extends keyof DocumentEventMap>(\r\n    Pelem: Document,\r\n    Peventname: K,\r\n    Phandler: (ev: DocumentEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  attachDOMEvent<K extends keyof HTMLElementEventMap>(\r\n    Pelem: HTMLElement,\r\n    Peventname: K,\r\n    Phandler: (ev: HTMLElementEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  public attachDOMEvent(Pelem: EventTarget, Peventname: string, Phandler: (Object) => boolean, PuseCapture?: boolean): void {\r\n    // TS can't quite track the type inference forwarding here.\r\n    this.domEventTracker.attachDOMEvent(Pelem as any, Peventname as any, Phandler, PuseCapture);\r\n  }\r\n\r\n  /**\r\n   * Function     detachDOMEvent\r\n   * Scope        Public\r\n   * @param       {Object}    Pelem       Element from which event is being detached\r\n   * @param       {string}    Peventname  Name of event without 'on' prefix\r\n   * @param       {function(Object)}  Phandler    Event handler for event\r\n   * @param       {boolean=}  PuseCapture True if event was being handled on way to target element\r\n   * Description Detaches event handler from element [to prevent memory leaks]\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/detachDOMEvent\r\n   */\r\n  detachDOMEvent<K extends keyof WindowEventMap>(\r\n    Pelem: Window,\r\n    Peventname: K,\r\n    Phandler: (ev: WindowEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  detachDOMEvent<K extends keyof DocumentEventMap>(\r\n    Pelem: Document,\r\n    Peventname: K,\r\n    Phandler: (ev: DocumentEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  detachDOMEvent<K extends keyof HTMLElementEventMap>(\r\n    Pelem: HTMLElement,\r\n    Peventname: K,\r\n    Phandler: (ev: HTMLElementEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  public detachDOMEvent(Pelem: EventTarget, Peventname: string, Phandler: (Object) => boolean, PuseCapture?: boolean): void {\r\n    // TS can't quite track the type inference forwarding here.\r\n    this.domEventTracker.detachDOMEvent(Pelem as any, Peventname as any, Phandler, PuseCapture);\r\n  }\r\n\r\n  getStyleValue = getStyleValue;\r\n\r\n  private get alertHost(): AlertHost {\r\n    if(this.config.alertHost) {\r\n      return this.config.alertHost;\r\n    } else if(!this._alertHost) {\r\n      // Lazy init:  if KMW is set to not show alerts, we try not to initialize the alert host.\r\n      // If the .alert API is called, though, we have no choice.\r\n      this._alertHost = new AlertHost();\r\n    }\r\n\r\n    return this._alertHost;\r\n  }\r\n\r\n  /**\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/alert.\r\n   */\r\n  public alert(s: string, fn: () => void) {\r\n    this.alertHost.alert(s, fn);\r\n  }\r\n\r\n  /**\r\n   * Function     toNzString\r\n   * Scope        Public\r\n   * @param       {*}           item         variable to test\r\n   * @param       {?*=}         dflt         default value\r\n   * @return      {*}\r\n   * Description  Test if a variable is null, false, empty string, or undefined, and return as string\r\n   */\r\n  public nzString(item: any, dflt: string): string {\r\n    // // ... is this whole thing essentially just:\r\n    // return '' + (item || dflt || '');\r\n    // // ?\r\n\r\n    let dfltValue = '';\r\n    if(arguments.length > 1) {\r\n      dfltValue = dflt;\r\n    }\r\n\r\n    if(typeof(item) == 'undefined') {\r\n      return dfltValue;\r\n    }\r\n\r\n    if(item == null) {\r\n      return dfltValue;\r\n    }\r\n\r\n    if(item == 0 || item == '') {\r\n      return dfltValue;\r\n    }\r\n\r\n    return ''+item;\r\n  }\r\n\r\n  /**\r\n   * Function     toNumber\r\n   * Scope        Public\r\n   * @param       {string}      s            numeric string\r\n   * @param       {number}      dflt         default value\r\n   * @return      {number}\r\n   * Description  Return string converted to integer or default value\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/toNumber\r\n   */\r\n  public toNumber(s: string, dflt: number): number {\r\n    const x = parseInt(s,10);\r\n    return isNaN(x) ? dflt : x;\r\n  }\r\n\r\n  /**\r\n   * Function     toFloat\r\n   * Scope        Public\r\n   * @param       {string}      s            numeric string\r\n   * @param       {number}      dflt         default value\r\n   * @return      {number}\r\n   * Description  Return string converted to real value or default value\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/toFloat\r\n   */\r\n  public toFloat(s: string, dflt: number): number {\r\n    const x = parseFloat(s);\r\n    return isNaN(x) ? dflt : x;\r\n  }\r\n\r\n  /**\r\n   * Function     rgba\r\n   * Scope        Public\r\n   * @param       {Object}      s           element style object\r\n   * @param       {number}      r           red value, 0-255\r\n   * @param       {number}      g           green value, 0-255\r\n   * @param       {number}      b           blue value, 0-255\r\n   * @param       {number}      a           opacity value, 0-1.0\r\n   * @return      {string}                  background colour style string\r\n   * Description  Browser-independent alpha-channel management\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/rgba\r\n   */\r\n  public rgba(s: HTMLStyleElement, r:number, g:number, b:number, a:number): string {\r\n    let bgColor='transparent';\r\n    try {\r\n      bgColor='rgba('+r+','+g+','+b+','+a+')';\r\n    } catch(ex) {\r\n      bgColor='rgb('+r+','+g+','+b+')';\r\n    }\r\n\r\n    return bgColor;\r\n  }\r\n\r\n  shutdown() {\r\n    this.stylesheetManager?.unlinkAll();\r\n    this.domEventTracker?.shutdown();\r\n    this._alertHost?.shutdown();\r\n  }\r\n}",
    "import { _GetEventKeyCode } from \"./hardwareEventKeyboard.js\";\r\n\r\nclass Hotkey {\r\n  code: number;\r\n  shift: number;\r\n  handler: () => void\r\n\r\n  constructor(code: number, shift: number, handler: () => void) {\r\n    this.code = code;\r\n    this.shift = shift;\r\n    this.handler = handler;\r\n  }\r\n\r\n  matches(keyCode: number, shiftState: number): boolean {\r\n    return (this.code == keyCode && this.shift == shiftState);\r\n  }\r\n}\r\n\r\nexport class HotkeyManager {\r\n  hotkeys: Hotkey[] = [];\r\n\r\n  /**\r\n   * Function     addHotkey\r\n   * Scope        Public\r\n   * @param       {number}            keyCode\r\n   * @param       {number}            shiftState\r\n   * @param       {function(Object)}  handler\r\n   * Description  Add hot key handler to array of document-level hotkeys triggered by key up event\r\n   */\r\n  addHotKey(keyCode: number, shiftState: number, handler: () => void) {\r\n    // Test if existing handler for this code and replace it if so\r\n    for(var i=0; i<this.hotkeys.length; i++) {\r\n      if(this.hotkeys[i].code == keyCode && this.hotkeys[i].shift == shiftState) {\r\n        this.hotkeys[i].handler = handler;\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Otherwise add it to the array\r\n    this.hotkeys.push(new Hotkey(keyCode, shiftState, handler));\r\n  }\r\n\r\n  /**\r\n   * Function     removeHotkey\r\n   * Scope        Public\r\n   * @param       {number}        keyCode\r\n   * @param       {number}        shiftState\r\n   * Description  Remove a hot key handler from array of document-level hotkeys triggered by key up event\r\n   */\r\n  removeHotkey(keyCode: number, shiftState: number) {\r\n    for(var i=0; i<this.hotkeys.length; i++) {\r\n      if(this.hotkeys[i].matches(keyCode, shiftState)) {\r\n        this.hotkeys.splice(i,1);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     _Process\r\n   * Scope        Private\r\n   * @param       {Event}       e       event\r\n   * Description  Passes control to handlers according to the hotkey pressed\r\n   */\r\n  _Process: (e: KeyboardEvent) => boolean = (e: KeyboardEvent) => {\r\n    if(!e) {\r\n      e = window.event as KeyboardEvent;\r\n    }\r\n\r\n    var _Lcode = _GetEventKeyCode(e);\r\n    if(_Lcode == null) {\r\n      return false;\r\n    }\r\n\r\n    // Removed testing of e.shiftKey==null  I3363 (Build 301)\r\n    var _Lmodifiers =\r\n      (e.shiftKey ? 0x10 : 0) |\r\n      (e.ctrlKey ? 0x20 : 0) |\r\n      (e.altKey ? 0x40 : 0);\r\n\r\n    for(var i=0; i<this.hotkeys.length; i++) {\r\n      if(this.hotkeys[i].matches(_Lcode, _Lmodifiers)) {\r\n        this.hotkeys[i].handler();\r\n        e.returnValue = false;\r\n        if(e && e.preventDefault) {\r\n          e.preventDefault();\r\n        }\r\n        e.cancelBubble = true;\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}",
    "import { type KeyboardInterface } from '@keymanapp/keyboard-processor';\r\nimport { DesignIFrame, OutputTarget } from 'keyman/engine/element-wrappers';\r\n\r\n// Utility object used to handle beep (keyboard error response) operations.\r\nclass BeepData {\r\n  e: HTMLElement;\r\n  c: string;\r\n\r\n  constructor(e: HTMLElement) {\r\n    this.e = e;\r\n    this.c = e.style.backgroundColor;\r\n  }\r\n\r\n  reset(): void {\r\n    this.e.style.backgroundColor = this.c;\r\n  }\r\n}\r\n\r\nexport class BeepHandler {\r\n  readonly keyboardInterface: KeyboardInterface;\r\n\r\n  constructor(keyboardInterface: KeyboardInterface) {\r\n    this.keyboardInterface = keyboardInterface;\r\n  }\r\n\r\n  _BeepObjects: BeepData[] = [];  // BeepObjects - maintains a list of active 'beep' visual feedback elements\r\n  _BeepTimeout: number = 0;       // BeepTimeout - a flag indicating if there is an active 'beep'.\r\n                                  // Set to 1 if there is an active 'beep', otherwise leave as '0'.\r\n  /**\r\n   * Function     beep          KB      (DOM-side implementation)\r\n   * Scope        Public\r\n   * @param       {Object}      Pelem     element to flash\r\n   * Description  Flash body as substitute for audible beep; notify embedded device to vibrate\r\n   */\r\n  beep(outputTarget: OutputTarget<any>) {\r\n    if(!(outputTarget instanceof OutputTarget<any>)) {\r\n      return;\r\n    }\r\n\r\n    // All code after this point is DOM-based, triggered by the beep.\r\n    var Pelem: HTMLElement = outputTarget.getElement();\r\n    if(outputTarget instanceof DesignIFrame) {\r\n      Pelem = outputTarget.docRoot; // I1446 - beep sometimes fails to flash when using OSK and rich control\r\n    }\r\n\r\n    if(!Pelem) {\r\n      return; // There's no way to signal a 'beep' to null, so just cut everything short.\r\n    }\r\n\r\n    if(!Pelem.style || typeof(Pelem.style.backgroundColor)=='undefined') {\r\n      return;\r\n    }\r\n\r\n    for(var Lbo=0; Lbo<this._BeepObjects.length; Lbo++) { // I1446 - beep sometimes fails to return background color to normal\r\n                                                                // I1511 - array prototype extended\r\n      if(this._BeepObjects[Lbo].e == Pelem) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    this._BeepObjects.push(new BeepData(Pelem));\r\n\r\n    // TODO:  This is probably a bad color choice if \"dark mode\" is enabled.  A proper implementation\r\n    //        would probably require some 'fun' CSS work, though.\r\n    Pelem.style.backgroundColor = '#000000';\r\n    if(this._BeepTimeout == 0) {\r\n      this._BeepTimeout = 1;\r\n      window.setTimeout(this.reset, 50);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     reset\r\n   * Scope        Public\r\n   * Description  Reset/terminate beep or flash (not currently used: Aug 2011)\r\n   */\r\n  readonly reset = () => {\r\n    this.keyboardInterface.resetContextCache();\r\n\r\n    var Lbo;\r\n    this._BeepTimeout = 0;\r\n    for(Lbo=0;Lbo<this._BeepObjects.length;Lbo++) { // I1511 - array prototype extended\r\n      this._BeepObjects[Lbo].reset();\r\n    }\r\n    this._BeepObjects = [];\r\n  }\r\n}",
    "import { type OutputTarget } from 'keyman/engine/element-wrappers';\r\nimport { FloatingOSKView, OSKView } from 'keyman/engine/osk';\r\nimport { KeyboardInterface as KeyboardInterfaceBase } from 'keyman/engine/main';\r\n\r\nimport ContextManager from './contextManager.js';\r\nimport KeymanEngine from './keymanEngine.js';\r\n\r\nexport default class KeyboardInterface extends KeyboardInterfaceBase<ContextManager> {\r\n  constructor(\r\n    _jsGlobal: any,\r\n    engine: KeymanEngine,\r\n  ) {\r\n    super(_jsGlobal, engine);\r\n\r\n    // Nothing else to do here... quite yet.  Things may not stay that way, though.\r\n  }\r\n\r\n  // *** The following are quite useful for website-integrating KMW, but not needed for the embedded form. ***\r\n\r\n  /**\r\n   * Function     KSF\r\n   * Scope        Public\r\n   * Description  Save keyboard focus\r\n   */\r\n  saveFocus(): void {\r\n    this.engine.contextManager.focusAssistant._IgnoreNextSelChange = 1;\r\n  }\r\n\r\n  /**\r\n   * Legacy entry points (non-standard names)- included only to allow existing IME keyboards to continue to be used\r\n   */\r\n  getLastActiveElement(): OutputTarget<any> {\r\n    return this.engine.contextManager.lastActiveTarget;\r\n  }\r\n\r\n  focusLastActiveElement(): void {\r\n    this.engine.contextManager.restoreLastActiveTarget();\r\n  }\r\n\r\n  //The following entry points are defined but should not normally be used in a keyboard, as OSK display is no longer determined by the keyboard\r\n  hideHelp(): void {\r\n    const osk = this.engine.osk;\r\n    osk.startHide(true);\r\n  }\r\n\r\n  showHelp(Px: number, Py: number): void {\r\n    const osk = this.engine.osk;\r\n\r\n    if(osk instanceof FloatingOSKView) {\r\n      osk.presentAtPosition(Px,Py);\r\n    } else {\r\n      osk.present();\r\n    }\r\n  }\r\n\r\n  showPinnedHelp(): void {\r\n    const osk = this.engine.osk;\r\n\r\n    if(osk instanceof FloatingOSKView) {\r\n      // An old KMW bug previously auto-unset the affected field when this function was\r\n      // used by CJK keyboards during rule processing.  As a result, we need to condition\r\n      // on whether or not:\r\n      // 1.  The active keyboard is CJK\r\n      // 2.  A keyboard rule is actively processing.\r\n      //\r\n      // If BOTH are true, we do NOT mutate keyman.osk.userPositioned.\r\n      // Otherwise, not all conditions are met, so we still allow OSK pinning.\r\n      if(!osk.activeKeyboard.keyboard.isCJK || !this.ruleBehavior) {\r\n        osk.userPositioned=true;\r\n      }\r\n    }\r\n    // Automatically reuses previously-set positioning.\r\n    // Other OSK API functions must have previously been used to set the\r\n    // pinned position.\r\n    osk.present();\r\n  }\r\n\r\n  // Also needed for some legacy CJK keyboards.\r\n  readonly GetLastActiveElement = this.getLastActiveElement;\r\n  readonly FocusLastActiveElement = this.focusLastActiveElement;\r\n  readonly HideHelp = this.hideHelp;\r\n  readonly ShowHelp = this.showHelp;\r\n  readonly ShowPinnedHelp = this.showPinnedHelp;\r\n}\r\n\r\n(function() {\r\n  // Update the shorthand API; we did just rewrite KSF / `saveFocus`.\r\n  KeyboardInterface.__publishShorthandAPI();\r\n})();",
    "import { KeymanEngine as KeymanEngineBase } from 'keyman/engine/main';\r\nimport { Device as DeviceDetector } from 'keyman/engine/device-detect';\r\nimport { getAbsoluteY } from 'keyman/engine/dom-utils';\r\nimport { OutputTarget } from 'keyman/engine/element-wrappers';\r\nimport {\r\n  OSKView,\r\n  TwoStateActivator,\r\n  VisualKeyboard\r\n} from 'keyman/engine/osk';\r\nimport { ErrorStub, KeyboardStub, CloudQueryResult, toPrefixedKeyboardId as prefixed } from 'keyman/engine/package-cache';\r\nimport { DeviceSpec, Keyboard, extendString } from \"@keymanapp/keyboard-processor\";\r\n\r\nimport * as views from './viewsAnchorpoint.js';\r\nimport { BrowserConfiguration, BrowserInitOptionDefaults, BrowserInitOptionSpec } from './configuration.js';\r\nimport { default as ContextManager } from './contextManager.js';\r\nimport DefaultBrowserRules from './defaultBrowserRules.js';\r\nimport HardwareEventKeyboard from './hardwareEventKeyboard.js';\r\nimport { FocusStateAPIObject } from './context/focusAssistant.js';\r\nimport { PageIntegrationHandlers } from './context/pageIntegrationHandlers.js';\r\nimport { LanguageMenu } from './languageMenu.js';\r\nimport { setupOskListeners } from './oskConfiguration.js';\r\nimport { whenDocumentReady } from './utils/documentReady.js';\r\nimport { outputTargetForElement } from '../../../../build/engine/attachment/obj/outputTargetForElement.js';\r\n\r\nimport { UtilApiEndpoint} from './utilApiEndpoint.js';\r\nimport { UIModule } from './uiModuleInterface.js';\r\nimport { HotkeyManager } from './hotkeyManager.js';\r\nimport { BeepHandler } from './beepHandler.js';\r\nimport KeyboardInterface from './keyboardInterface.js';\r\n\r\nexport default class KeymanEngine extends KeymanEngineBase<BrowserConfiguration, ContextManager, HardwareEventKeyboard> {\r\n  touchLanguageMenu?: LanguageMenu;\r\n  private pageIntegration: PageIntegrationHandlers;\r\n\r\n  private _initialized: number = 0;\r\n  readonly _util: UtilApiEndpoint;\r\n\r\n  private _ui: UIModule;\r\n  hotkeyManager: HotkeyManager = new HotkeyManager();\r\n  private readonly beepHandler: BeepHandler;\r\n\r\n  /**\r\n   * Provides a quick link to the base help page for Keyman keyboards.\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/helpURL\r\n   */\r\n  public readonly helpURL = 'https://help.keyman.com/go';\r\n\r\n  keyEventRefocus = () => {\r\n    this.contextManager.restoreLastActiveTarget();\r\n  }\r\n\r\n  constructor(worker: Worker, sourceUri: string) {\r\n    const config = new BrowserConfiguration(sourceUri);  // currently set to perform device auto-detect.\r\n\r\n    super(worker, config, new ContextManager(config, () => this.legacyAPIEvents), (engine: KeymanEngine) => {\r\n      return {\r\n        // The `engine` parameter cannot be supplied with the constructing instance before calling\r\n        // `super`, hence the 'fun' rigging to supply it _from_ `super` via this closure.\r\n        keyboardInterface: new KeyboardInterface(window, engine),\r\n        defaultOutputRules: new DefaultBrowserRules(engine.contextManager)\r\n      };\r\n    });\r\n\r\n    this._util = new UtilApiEndpoint(config);\r\n    this.beepHandler = new BeepHandler(this.core.keyboardInterface);\r\n    this.core.keyboardProcessor.beepHandler = () => this.beepHandler.beep(this.contextManager.activeTarget);\r\n\r\n    this.hardKeyboard = new HardwareEventKeyboard(config.hardDevice, this.core.keyboardProcessor, this.contextManager);\r\n\r\n    // Scrolls the document-body to ensure that a focused element remains visible after the OSK appears.\r\n    this.contextManager.on('targetchange', (target: OutputTarget<any>) => {\r\n      const e = target?.getElement();\r\n      (this.osk.activationModel as TwoStateActivator<HTMLElement>).activationTrigger = e;\r\n\r\n      if(this.config.hostDevice.touchable) {\r\n        if(!e || !target || !this.osk) {\r\n          return;\r\n        }\r\n\r\n        // Get the absolute position of the caret\r\n        const y = getAbsoluteY(e);\r\n        const t = window.pageYOffset;\r\n        let dy = y-t;\r\n        if(y >= t) {\r\n          dy -= (window.innerHeight - this.osk._Box.offsetHeight - e.offsetHeight - 2);\r\n          if(dy < 0) {\r\n            dy=0;\r\n          }\r\n        }\r\n        // Hide OSK, then scroll, then re-anchor OSK with absolute position (on end of scroll event)\r\n        if(dy != 0) {\r\n          window.scrollTo(0, dy + t);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public get util() {\r\n    return this._util;\r\n  }\r\n\r\n  public get views() {\r\n    // NOT this.views.  Just... `views`, the import of viewsAnchorpoint.ts\r\n    return views;\r\n  }\r\n\r\n  /**\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/initialized\r\n   */\r\n  public get initialized() {\r\n    return this._initialized;\r\n  }\r\n\r\n  public get ui() {\r\n    return this._ui;\r\n  }\r\n\r\n  public set ui(module: UIModule) {\r\n    if(this._ui) {\r\n      this._ui.shutdown();\r\n    }\r\n\r\n    this._ui = module;\r\n    if(this.config.deferForInitialization.hasResolved) {\r\n      module.initialize();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     Initialization\r\n   * Scope        Public\r\n   * @param       {com.keyman.OptionType}  arg     object specifying configuration properties for KeymanEngine + its resources\r\n   *\r\n   * Performs initialization of the KeymanEngine for Web, including:\r\n   * - device-detection\r\n   * - option configuration\r\n   * - integration with the active page\r\n   * - OSK-selection\r\n   * - finalization for pre-loaded keyboard + stub registrations.\r\n   *\r\n   * It also self-defers if the page is not yet fully loaded; it will automatically await page\r\n   * load and resume once page-load is complete.  (Certain initialization behaviors will only\r\n   * proceed properly with a fully-loaded page.)\r\n   *\r\n   * @returns A Promise that only resolves once the engine is fully initialized.\r\n   */\r\n  public async init(options: Required<BrowserInitOptionSpec>) {\r\n    let deviceDetector = new DeviceDetector();\r\n    let device = deviceDetector.detect();\r\n\r\n    const totalOptions = {...BrowserInitOptionDefaults, ...options};\r\n\r\n    // // Possible condition we can add:  no change of init options after a  ***\r\n    // // prior finalized init.\r\n\r\n    this.config.hostDevice = device;\r\n    // Set any incoming options, overriding previous entries.\r\n    this.config.initialize(totalOptions);\r\n\r\n    this._initialized = 1;\r\n\r\n    // Must wait for document load for further initialization.\r\n    await whenDocumentReady();\r\n\r\n    // Deferred keyboard loading + shortcutting if a different init call on the engine has\r\n    // already fully resolved.\r\n    if(this.config.deferForInitialization.hasFinalized) {\r\n      // abort!  Maybe throw an error, too.\r\n      return Promise.resolve();\r\n    }\r\n\r\n    // There may be some valid mutations possible even on repeated calls?\r\n    // The original seems to allow it.\r\n\r\n    await super.init(totalOptions);\r\n\r\n    // Used by keymanweb.com; if no keyboard-cookie exists, we need this to trigger\r\n    // default-stub selection on mobile devices so that a keyboard - and thus, the\r\n    // globe key - are accessible.\r\n    //\r\n    // The `super` call above initializes `keyboardRequisitioner`, as needed here.\r\n    this.keyboardRequisitioner.cloudQueryEngine.once('unboundregister', () => {\r\n      if(!this.contextManager.activeKeyboard?.keyboard) {\r\n        // Autoselects this.keyboardRequisitioner.cache.defaultStub, which will be\r\n        // set to an actual keyboard on mobile devices.\r\n        this.setActiveKeyboard('', '');\r\n      }\r\n    });\r\n\r\n    this.contextManager.initialize();  // will seek to attach to the page, which requires document.body\r\n\r\n    // Capture the saved-keyboard string now, before we load any keyboards/stubs\r\n    // or do anything that would mutate the value.\r\n    const savedKeyboardStr = this.contextManager.getSavedKeyboardRaw();\r\n\r\n    if(device.touchable) {\r\n      this.osk = new views.AnchoredOSKView(this);\r\n    } else {\r\n      this.osk = new views.FloatingOSKView(this);\r\n    }\r\n\r\n    setupOskListeners(this, this.osk, this.contextManager);\r\n\r\n    // Automatically performs related handler setup & maintains references\r\n    // needed for related cleanup / shutdown.\r\n    this.pageIntegration = new PageIntegrationHandlers(window, this);\r\n\r\n    // Initialize supplementary plane string extensions\r\n    String.kmwEnableSupplementaryPlane(true);\r\n    this.config.finalizeInit();\r\n\r\n    if(this.ui) {\r\n      this.ui.initialize();\r\n      this.legacyAPIEvents.callEvent('loaduserinterface', {});\r\n    }\r\n\r\n    this._initialized = 2;\r\n\r\n    // Let any deferred, pre-init stubs complete registration\r\n    await Promise.resolve();\r\n\r\n    // Attempt to restore the user's last-used keyboard from their previous session.\r\n    //\r\n    // Note:  any cloud stubs will probably not be available yet.\r\n    // If we tracked cloud requests and awaited a Promise.all on pending queries,\r\n    // we could handle that too.\r\n    this.contextManager.restoreSavedKeyboard(savedKeyboardStr);\r\n\r\n    await Promise.resolve();\r\n  }\r\n\r\n  get register(): (x: CloudQueryResult) => void {\r\n    return this.keyboardRequisitioner.cloudQueryEngine.registerFromCloud;\r\n  }\r\n\r\n  /**\r\n   * Function     getUIState\r\n   * Scope        Public\r\n   * @return      {Object.<string,(boolean|number)>}\r\n   * Description  Return object with activation state of UI:\r\n   *                activationPending (bool):   KMW being activated\r\n   *                activated         (bool):   KMW active\r\n   *\r\n   * See https://help.keyman.com/DEVELOPER/ENGINE/WEB/16.0/reference/core/getUIState\r\n   */\r\n  public getUIState(): FocusStateAPIObject {\r\n    return this.contextManager.focusAssistant.getUIState();\r\n  }\r\n\r\n  /**\r\n   * Set or clear the IsActivatingKeymanWebUI flag (exposed function)\r\n   *\r\n   * See https://help.keyman.com/DEVELOPER/ENGINE/WEB/16.0/reference/core/activatingUI\r\n   *\r\n   * @param       {(boolean|number)}  state  Activate (true,false)\r\n   */\r\n  public activatingUI(state: boolean | number) {\r\n    this.contextManager.focusAssistant.setMaintainingFocus(!!state);\r\n  }\r\n\r\n  /**\r\n   * Function     setKeyboardForControl\r\n   * Scope        Public\r\n   * @param       {Element}    Pelem    Control element\r\n   * @param       {string|null=}    Pkbd     Keyboard (Clears the set keyboard if set to null.)\r\n   * @param       {string|null=}     Plc      Language Code\r\n   * Description  Set default keyboard for the control\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/setKeyboardForControl\r\n   */\r\n  public setKeyboardForControl(Pelem: HTMLElement, Pkbd?: string, Plc?: string) {\r\n    if(Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement) {\r\n      console.warn(\"'keymanweb.setKeyboardForControl' cannot set keyboard on iframes.\");\r\n      return;\r\n    }\r\n\r\n    if(!this.isAttached(Pelem)) {\r\n      console.error(\"KeymanWeb is not attached to element \" + Pelem);\r\n      return;\r\n    }\r\n\r\n    let stub = null;\r\n    if(Pkbd) {\r\n      stub = this.keyboardRequisitioner.cache.getStub(Pkbd, Plc);\r\n      if(!stub) {\r\n        throw new Error(`No keyboard has been registered with id ${Pkbd} and language code ${Plc}.`);\r\n      }\r\n    }\r\n\r\n    this.contextManager.setKeyboardForTarget(Pelem._kmwAttachment.interface, Pkbd, Plc);\r\n  }\r\n  /**\r\n   * Function     getKeyboardForControl\r\n   * Scope        Public\r\n   * @param       {Element}    Pelem    Control element\r\n   * @return      {string|null}         The independently-managed keyboard for the control.\r\n   * Description  Returns the keyboard ID of the current independently-managed keyboard for this control.\r\n   *              If it is currently following the global keyboard setting, returns null instead.\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/getKeyboardForControl\r\n   */\r\n  public getKeyboardForControl(Pelem) {\r\n    const target = outputTargetForElement(Pelem);\r\n    return this.contextManager.getKeyboardStubForTarget(target).id;\r\n  }\r\n\r\n  // Is not currently published API... but it exists.\r\n  /**\r\n   * Function     getLanguageForControl\r\n   * Scope        Public\r\n   * @param       {Element}    Pelem    Control element\r\n   * @return      {string|null}         The independently-managed keyboard for the control.\r\n   * Description  Returns the language code used with the current independently-managed keyboard for this control.\r\n   *              If it is currently following the global keyboard setting, returns null instead.\r\n   */\r\n  getLanguageForControl(Pelem) {\r\n    const target = outputTargetForElement(Pelem);\r\n    return this.contextManager.getKeyboardStubForTarget(target).langId;\r\n  }\r\n\r\n  isAttached(x: HTMLElement): boolean {\r\n    return this.contextManager.page.isAttached(x);\r\n  }\r\n\r\n  /**\r\n   * Exposed function to load keyboards by name. One or more arguments may be used\r\n   *\r\n   * @param {any[]} args keyboard name string or keyboard metadata JSON object\r\n   * @returns {Promise<(KeyboardStub|ErrorStub)[]>} Promise of added keyboard/error stubs\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/addKeyboards\r\n   */\r\n  public addKeyboards(...args: any[]): Promise<(KeyboardStub|ErrorStub)[]> {\r\n    return this.config.deferForInitialization.then(() => {\r\n      if (!args || !args[0] || args[0].length == 0) {\r\n        // Get the cloud keyboard catalog\r\n        return this.keyboardRequisitioner.fetchCloudCatalog().catch((errVal) => {\r\n          console.error(errVal[0].error);\r\n          return errVal;\r\n        });\r\n      } else {\r\n        let x: (string|KeyboardStub)[] = [];\r\n        if (Array.isArray(args[0])) {\r\n          x = x.concat(args[0]);\r\n        } else if (Array.isArray(args)) {\r\n          x = x.concat(args);\r\n        }\r\n        return this.keyboardRequisitioner.addKeyboardArray(x);\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   *  Add default keyboards for given language(s)\r\n   *\r\n   *  @param  {string|string[]}   arg    Language name (multiple arguments allowed)\r\n   *  @returns {Promise<(KeyboardStub|ErrorStub)[]>} Promise of added keyboard/error stubs\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/addKeyboardsForLanguage\r\n   **/\r\n  public addKeyboardsForLanguage(arg: string[]|string) : Promise<(KeyboardStub|ErrorStub)[]> {\r\n    return this.config.deferForInitialization.then(() => {\r\n      if (typeof arg === 'string') {\r\n        return this.keyboardRequisitioner.addLanguageKeyboards(arg.split(',').map(item => item.trim()));\r\n      } else {\r\n        return this.keyboardRequisitioner.addLanguageKeyboards(arg);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get an associative array of keyboard identification strings\r\n   *   This was defined as an array, so is kept that way, but\r\n   *   Javascript treats it as an object anyway\r\n   *\r\n   * This is a public API function documented at\r\n   * https://help.keyman.com/developer/engine/web/current-version/reference/core/getKeyboard.\r\n   *\r\n   * @param       {Object}    Lstub      Keyboard stub object\r\n   * @param       {Object}    Lkbd       Keyboard script object\r\n   * @return      {Object}               Copy of keyboard identification strings\r\n   *\r\n   */\r\n  private _GetKeyboardDetail = function(Lstub: KeyboardStub, Lkbd: Keyboard) { // I2078 - Full keyboard detail\r\n    let Lr = {\r\n      Name: Lstub.KN,\r\n      InternalName: Lstub.KI,\r\n      LanguageName: Lstub.KL,  // I1300 - Add support for language names\r\n      LanguageCode: Lstub.KLC, // I1702 - Add support for language codes, region names, region codes, country names and country codes\r\n      RegionName: Lstub.KR,\r\n      RegionCode: Lstub.KRC,\r\n      CountryName: Lstub['KC'] as string,\r\n      CountryCode: Lstub['KCC'] as string,\r\n      KeyboardID: Lstub['KD'] as string,\r\n      Font: Lstub.KFont,\r\n      OskFont: Lstub.KOskFont,\r\n      HasLoaded: !!Lkbd,\r\n      IsRTL: Lkbd ? Lkbd.isRTL : null\r\n    };\r\n\r\n    return Lr;\r\n  }\r\n\r\n  /**\r\n   * Function    isCJK\r\n   * Scope       Public\r\n   * @param      {Object=}  k0\r\n   * @return     {boolean}\r\n   * Description Tests if active keyboard (or specified keyboard script object, as optional argument)\r\n   *             uses a pick list (Chinese, Japanese, Korean, etc.)\r\n   *             (This function accepts either keyboard structure.)\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/isCJK\r\n   */\r\n  public isCJK(k0? /* keyboard script object | return-type of _GetKeyboardDetail [b/c Toolbar UI]*/) {\r\n    let kbd: Keyboard;\r\n    if(k0) {\r\n      let kbdDetail = k0 as ReturnType<KeymanEngine['_GetKeyboardDetail']>;\r\n      if(kbdDetail.KeyboardID){\r\n        kbd = this.keyboardRequisitioner.cache.getKeyboard(k0.KeyboardID);\r\n      } else {\r\n        kbd = new Keyboard(k0);\r\n      }\r\n    } else {\r\n      kbd = this.core.activeKeyboard;\r\n    }\r\n\r\n    return kbd && kbd.isCJK;\r\n  }\r\n\r\n  /**\r\n   * Get keyboard meta data for the selected keyboard and language\r\n   *\r\n   * @param       {string}    PInternalName     Internal name of keyboard\r\n   * @param       {string=}   PlgCode           language code\r\n   * @return      {Object}                      Details of named keyboard\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/getKeyboard\r\n   **/\r\n  public getKeyboard(PInternalName: string, PlgCode?: string) {\r\n    const stub = this.keyboardRequisitioner.cache.getStub(PInternalName, PlgCode);\r\n    const keyboard = this.keyboardRequisitioner.cache.getKeyboardForStub(stub);\r\n\r\n    return this._GetKeyboardDetail(stub, keyboard);\r\n  }\r\n\r\n  /**\r\n   * Get API-friendly array of available keyboard stubs\r\n   *\r\n   * Refer to https://help.keyman.com/developer/engine/web/current-version/reference/core/getKeyboards.\r\n   *\r\n   * The type of each entry of the array corresponds to that of `getKeyboard`.\r\n   *\r\n   * @return   {Array}     Array of available keyboards\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/getKeyboards\r\n   */\r\n  public getKeyboards(): ReturnType<KeymanEngine['_GetKeyboardDetail']>[] {\r\n    const Lr: ReturnType<KeymanEngine['_GetKeyboardDetail']>[] = [];\r\n\r\n    const cache = this.keyboardRequisitioner.cache;\r\n    const keyboardStubs = cache.getStubList()\r\n    for(let Ln=0; Ln < keyboardStubs.length; Ln++) { // I1511 - array prototype extended\r\n      const Lstub = keyboardStubs[Ln];\r\n\r\n      // In Chrome, (including on Android), Array.prototype.find() requires Chrome 45.\r\n      // This is a later version than the default on our oldest-supported Android devices.\r\n      const Lkbd = cache.getKeyboardForStub(Lstub);\r\n      const Lrn = this._GetKeyboardDetail(Lstub, Lkbd);  // I2078 - Full keyboard detail\r\n      Lr.push(Lrn);\r\n    }\r\n    return Lr;\r\n  }\r\n\r\n  /**\r\n   * Build 362: removeKeyboards() remove keyboard from list of available keyboards\r\n   *\r\n   * @param {string}  x      keyboard name string\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/removeKeyboards\r\n   */\r\n  public removeKeyboards(...x: string[]) {\r\n    for(let i=0; i < x.length; i++) {\r\n      // This will completely forget the keyboard, requiring an async load operation to restore it again.\r\n      // `true` is responsible for this & is required to pass a variable-store unit test.\r\n      this.keyboardRequisitioner.cache.forgetKeyboard(x[i], true);\r\n\r\n      if(this.contextManager.activeKeyboard?.metadata.id == prefixed(x[i])) {\r\n        this.contextManager.activateKeyboard('', '');\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Gets the cookie for the name and language code of the most recently active keyboard\r\n   *\r\n   * Defaults to US English, but this needs to be user-set in later revision (TODO)\r\n   *\r\n   * @return      {string}          InternalName:LanguageCode\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/getSavedKeyboard\r\n   **/\r\n  public getSavedKeyboard(): string {\r\n    return this.contextManager.getSavedKeyboard();\r\n  }\r\n\r\n  /**\r\n   * Set focus to last active target element (browser-dependent)\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/focusLastActiveElement\r\n   */\r\n  public focusLastActiveElement() {\r\n    this.contextManager.lastActiveTarget?.focus();\r\n  }\r\n\r\n  /**\r\n   * Get the last active target element *before* KMW activated (I1297)\r\n   *\r\n   * @return      {Object}\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/getLastActiveElement\r\n   */\r\n  public getLastActiveElement() {\r\n    return this.contextManager.lastActiveTarget?.getElement();\r\n  }\r\n\r\n  /**\r\n   *  Set the active input element directly optionally setting focus\r\n   *\r\n   *  @param  {Object|string} e         element id or element\r\n   *  @param  {boolean=}      setFocus  optionally set focus  (KMEW-123)\r\n   **/\r\n  setActiveElement(e: string|HTMLElement, setFocus: boolean) {\r\n    if(typeof e == 'string') {\r\n      const id = e;\r\n      e = document.getElementById(e);\r\n\r\n      if(!e) {\r\n        throw new Error(`Could not find the specified element (id: ${id}`);\r\n      }\r\n    }\r\n\r\n    const target = outputTargetForElement(e);\r\n    if(!target) {\r\n      throw new Error(`KMW is not attached to the specified element (id: ${e.id}).`);\r\n    }\r\n    this.contextManager.setActiveTarget(target, setFocus);\r\n  }\r\n\r\n  /**\r\n   * Move focus to user-specified element\r\n   *\r\n   *  @param  {string|Object}   e   element or element id\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/moveToElement\r\n   **/\r\n  public moveToElement(e: string|HTMLElement) {\r\n    if(typeof(e) == \"string\") { // Can't instanceof string, and String is a different type.\r\n      e=document.getElementById(e);\r\n    }\r\n\r\n    e.focus();\r\n  }\r\n\r\n  /**\r\n   * Function     addHotkey\r\n   * Scope        Public\r\n   * @param       {number}            keyCode\r\n   * @param       {number}            shiftState\r\n   * @param       {function(Object)}  handler\r\n   * Description  Add hot key handler to array of document-level hotkeys triggered by key up event\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/addHotKey\r\n   */\r\n  public addHotKey(keyCode: number, shiftState: number, handler: () => void) {\r\n    this.hotkeyManager.addHotKey(keyCode, shiftState, handler);\r\n  }\r\n\r\n  /**\r\n   * Function     removeHotkey\r\n   * Scope        Public\r\n   * @param       {number}        keyCode\r\n   * @param       {number}        shiftState\r\n   * Description  Remove a hot key handler from array of document-level hotkeys triggered by key up event\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/removeHotKey\r\n   */\r\n  public removeHotKey(keyCode: number, shiftState: number) {\r\n    this.hotkeyManager.removeHotkey(keyCode, shiftState);\r\n  }\r\n\r\n  /**\r\n   * Function     attachToControl\r\n   * Scope        Public\r\n   * @param       {Element}    Pelem       Element to which KMW will be attached\r\n   * Description  Attaches KMW to control (or IFrame)\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/attachToControl\r\n   */\r\n  public attachToControl(Pelem: HTMLElement) {\r\n    this.contextManager.page.attachToControl(Pelem);\r\n  }\r\n\r\n  /**\r\n   * Function     detachFromControl\r\n   * Scope        Public\r\n   * @param       {Element}    Pelem       Element from which KMW will detach\r\n   * Description  Detaches KMW from a control (or IFrame)\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/detachFromControl\r\n   */\r\n  public detachFromControl(Pelem: HTMLElement) {\r\n    this.contextManager.page.detachFromControl(Pelem);\r\n  }\r\n\r\n  /**\r\n   * Function     disableControl\r\n   * Scope        Public\r\n   * @param       {Element}      Pelem       Element to be disabled\r\n   * Description  Disables a KMW control element\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/disableControl\r\n   */\r\n  public disableControl(Pelem: HTMLElement) {\r\n    this.contextManager.page.disableControl(Pelem);\r\n  }\r\n\r\n  /**\r\n   * Function     enableControl\r\n   * Scope        Public\r\n   * @param       {Element}      Pelem       Element to be disabled\r\n   * Description  Disables a KMW control element\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/enableControl\r\n   */\r\n  public enableControl(Pelem: HTMLMapElement) {\r\n    this.contextManager.page.enableControl(Pelem);\r\n  }\r\n\r\n  /**\r\n   * Create copy of the OSK that can be used for embedding in documentation or help\r\n   * The currently active keyboard will be returned if PInternalName is null\r\n   *\r\n   *  @param  {string}          PInternalName   internal name of keyboard, with or without Keyboard_ prefix\r\n   *  @param  {number}          Pstatic         static keyboard flag  (unselectable elements)\r\n   *  @param  {string=}         argFormFactor   layout form factor, defaulting to 'desktop'\r\n   *  @param  {(string|number)=}  argLayerId    name or index of layer to show, defaulting to 'default'\r\n   *  @return {Object}                          DIV object with filled keyboard layer content\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/BuildVisualKeyboard\r\n   */\r\n  public BuildVisualKeyboard(\r\n    PInternalName: string,\r\n    Pstatic: number,\r\n    argFormFactor?: DeviceSpec.FormFactor,\r\n    argLayerId?: string|number\r\n  ): HTMLElement {\r\n    let PKbd: Keyboard = null;\r\n\r\n    if(PInternalName != null) {\r\n      PKbd = this.keyboardRequisitioner.cache.getKeyboard(PInternalName);\r\n    }\r\n\r\n    PKbd = PKbd || this.core.activeKeyboard;\r\n    let Pstub = this.keyboardRequisitioner.cache.getStub(PKbd);\r\n\r\n    // help.keyman.com will set this function in place to specify the desired\r\n    // dimensions for the documentation-keyboards, so we'll give it priority.  One of those\r\n    // \"temporary\" (but actually permanent) solutions from yesteryear.\r\n    //\r\n    // Note that the main intended use of that function is for embedded KMW on the mobile apps...\r\n    // but they never call `BuildVisualKeyboard`, so it's all good.\r\n    const getOskHeight = this['getOskHeight'];\r\n    let targetHeight = (typeof getOskHeight == 'function' ? getOskHeight() : null) || this.osk.computedHeight || 200;\r\n\r\n    return VisualKeyboard.buildDocumentationKeyboard(\r\n      PKbd,\r\n      Pstub,\r\n      this.config.paths.fonts,\r\n      argFormFactor,\r\n      argLayerId,\r\n      targetHeight\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Detaches all KMW event handlers attached by this instance of the engine and releases\r\n   * other related resources as appropriate.\r\n   *\r\n   * The primary use of this method is to facilitate a clean transition between engine\r\n   * instances during integration testing.  The goal is to prevent interactions intended\r\n   * for the 'current' instance from being accidentally intercepted by a discarded one.\r\n   */\r\n  shutdown() {\r\n    this.pageIntegration.shutdown();\r\n    this.contextManager.shutdown();\r\n    this.osk?.shutdown();\r\n    this.core.languageProcessor.shutdown();\r\n    this.hardKeyboard.shutdown();\r\n    this.util.shutdown(); // For tracked dom events, stylesheets.\r\n\r\n    this.legacyAPIEvents.callEvent('unloaduserinterface', {});\r\n    this.ui?.shutdown();\r\n  }\r\n}\r\n",
    "import KeymanEngine from './keymanEngine.js'\r\nimport { Worker } from '@keymanapp/lexical-model-layer/web'\r\n\r\n /**\r\n  * Determine path and protocol of executing script, setting them as\r\n  * construction defaults.\r\n  *\r\n  * This can only be done during load when the active script will be the\r\n  * last script loaded.  Otherwise the script must be identified by name.\r\n */\r\n var scripts = document.getElementsByTagName('script');\r\n var ss = scripts[scripts.length-1].src;\r\n var sPath = ss.substr(0,ss.lastIndexOf('/')+1);\r\n\r\nwindow['keyman'] = new KeymanEngine(Worker.constructInstance(), sPath);"
  ],
  "mappings": "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",
  "names": [
    "require_tslib",
    "__commonJSMin",
    "exports",
    "module",
    "__extends",
    "__assign",
    "__decorate",
    "__awaiter",
    "__generator",
    "__await",
    "factory",
    "root",
    "createExporter",
    "previous",
    "id",
    "v",
    "exporter",
    "extendStatics",
    "d",
    "b",
    "p",
    "__",
    "t",
    "s",
    "i",
    "n",
    "decorators",
    "target",
    "key",
    "desc",
    "c",
    "r",
    "thisArg",
    "_arguments",
    "P",
    "generator",
    "adopt",
    "value",
    "resolve",
    "reject",
    "fulfilled",
    "step",
    "e",
    "rejected",
    "result",
    "body",
    "_",
    "f",
    "y",
    "g",
    "verb",
    "op",
    "require_eventemitter3",
    "__commonJSMin",
    "exports",
    "module",
    "has",
    "prefix",
    "Events",
    "EE",
    "fn",
    "context",
    "once",
    "addListener",
    "emitter",
    "event",
    "listener",
    "evt",
    "clearEvent",
    "EventEmitter",
    "names",
    "events",
    "name",
    "handlers",
    "i",
    "ee",
    "listeners",
    "a1",
    "a2",
    "a3",
    "a4",
    "a5",
    "len",
    "args",
    "length",
    "j",
    "build_exports",
    "__export",
    "tslib_1",
    "__reExport",
    "import_eventemitter3",
    "Codes",
    "keyID",
    "code",
    "layerId",
    "modifier",
    "ctrlMatched",
    "altMatched",
    "codes_default",
    "EmulationKeystrokes",
    "DefaultRules",
    "Lkc",
    "codes_default",
    "isMnemonic",
    "ruleBehavior",
    "char",
    "code",
    "outputTarget",
    "Lch",
    "ch",
    "keyName",
    "result",
    "codePoints",
    "_i",
    "codePoints_1",
    "codePoint",
    "codePointValue",
    "keyShiftState",
    "e",
    "BASE_DEFAULT_RULES",
    "defaultRules_default",
    "KeyEvent",
    "keyEventSpec",
    "key",
    "device",
    "keyEvent",
    "shifted",
    "capsActive",
    "codes_default",
    "mappingEvent",
    "mappedChar",
    "KeyMap",
    "BrowserKeyMaps",
    "LanguageKeyMaps",
    "KeyMapping",
    "s0",
    "s1",
    "Levent",
    "Enumerable",
    "target",
    "propertyKey",
    "descriptor",
    "ActiveKey",
    "baseID",
    "keyEvent_default",
    "id",
    "errorCallback",
    "result",
    "codePoints",
    "_i",
    "codePoints_1",
    "codePoint",
    "codePointValue",
    "rawKey",
    "key",
    "keyboard",
    "layout",
    "displayLayer",
    "dummy",
    "proto",
    "prop",
    "_a",
    "subkey",
    "aKey",
    "layer",
    "keyName",
    "props",
    "codes_default",
    "Lkc",
    "keyboard_1",
    "keyMapping_default",
    "coreID",
    "ActiveRow",
    "rawRow",
    "_i",
    "_a",
    "key",
    "ActiveKey",
    "row",
    "keyboard",
    "layout",
    "displayLayer",
    "totalWidth",
    "proportionalY",
    "keys",
    "j",
    "tp",
    "setProportions",
    "padPc",
    "keyPc",
    "totalPc",
    "totalPercent",
    "rightMargin",
    "finalKey",
    "keyPercent",
    "padPercent",
    "dummy",
    "aRow",
    "map",
    "ActiveLayer",
    "rawLayer",
    "_i",
    "_a",
    "row",
    "ActiveRow",
    "layer",
    "keyboard",
    "layout",
    "rows",
    "totalWidth",
    "rows_1",
    "width",
    "keys",
    "keys_1",
    "key",
    "ActiveKey",
    "rowCount",
    "i",
    "rowProportionalY",
    "dummy",
    "aLayer",
    "map",
    "touchCoords",
    "kbdScaleRatio",
    "distribution",
    "list",
    "a",
    "b",
    "keyDists",
    "keyProbs",
    "totalMass",
    "codes_default",
    "dx",
    "dy",
    "distX",
    "distY",
    "distance",
    "keyId",
    "idComponents",
    "baseKey",
    "ActiveLayout",
    "layerId",
    "layers",
    "n",
    "layer",
    "rows",
    "i",
    "rawLayout",
    "_i",
    "_a",
    "ActiveLayer",
    "layout",
    "keyboard",
    "formFactor",
    "layerMap",
    "dummy",
    "key",
    "aLayout",
    "deepCopy",
    "p",
    "c0",
    "c",
    "i",
    "DeviceSpec",
    "browser",
    "formFactor",
    "OS",
    "touchable",
    "DeviceSpec",
    "Browser",
    "OperatingSystem",
    "FormFactor",
    "physicalKeyDeviceAlias",
    "device",
    "deviceSpec_default",
    "KEYMAN_VERSION",
    "version_inc_default",
    "KEYMAN_VERSION",
    "Version",
    "text",
    "components",
    "parts",
    "componentArray",
    "i",
    "value",
    "other",
    "isShorter",
    "maxDepth",
    "delta",
    "longList",
    "version_inc_default",
    "getGlobalObject",
    "extendString",
    "cp0",
    "chars",
    "i",
    "c",
    "codePointIndex",
    "str",
    "codeUnitIndex",
    "first",
    "second",
    "searchValue",
    "fromIndex",
    "beginSlice",
    "endSlice",
    "beginSliceCodeUnit",
    "endSliceCodeUnit",
    "start",
    "length",
    "startCodeUnit",
    "endCodeUnit",
    "indexA",
    "indexB",
    "indexACodeUnit",
    "indexBCodeUnit",
    "n",
    "ln",
    "bEnable",
    "p",
    "ManagedPromise",
    "executor",
    "_this",
    "resolve",
    "reject",
    "value",
    "reason",
    "onfulfilled",
    "onrejected",
    "onfinally",
    "Layouts",
    "PVK",
    "keyboard",
    "formFactor",
    "layoutType",
    "kbdBitmask",
    "codes_default",
    "kbdDevVersion",
    "version_default",
    "layout",
    "deepCopy",
    "n",
    "layers",
    "keyLabels",
    "key102",
    "i",
    "j",
    "k",
    "m",
    "row",
    "rows",
    "key",
    "keys",
    "chiral",
    "legacyFontSpec",
    "kmw10Plus",
    "specialLabel",
    "validIdList",
    "invalidIdList",
    "idList",
    "shiftKey",
    "r",
    "c",
    "layerID",
    "specialChar",
    "subkey",
    "layer",
    "kx",
    "nextKey",
    "allText",
    "capsKey",
    "numKey",
    "scrollKey",
    "layerSpec",
    "isShift",
    "isDefault",
    "modifierCodes",
    "s",
    "layerCnt",
    "offset",
    "layerIds",
    "layerId",
    "buttonClasses",
    "BK",
    "KLS",
    "id",
    "arr",
    "valid",
    "index",
    "CacheTag",
    "LayoutState",
    "Keyboard",
    "keyboardScript",
    "outputTarget",
    "keystroke",
    "storeNames",
    "values",
    "_i",
    "storeNames_1",
    "store",
    "storeNames_2",
    "value",
    "version_default",
    "e",
    "lg",
    "codes_default",
    "tag",
    "modifierCodes",
    "layers",
    "emulationMask",
    "unshiftedEmulationLayer",
    "Layouts",
    "shiftedEmulationLayer",
    "bitmask",
    "kbd",
    "device",
    "deviceSpec_default",
    "_PCommand",
    "_PTarget",
    "_PData",
    "formFactor",
    "rawSpecifications",
    "keyCaps",
    "i",
    "layout",
    "rawLayout",
    "ActiveLayout",
    "formFactors",
    "_this",
    "form",
    "stateKeys",
    "keyEvent",
    "keyEvent_default",
    "key",
    "Lkc",
    "bitmap",
    "keyName",
    "a",
    "s",
    "res",
    "MinimalKeymanGlobal",
    "codes_default",
    "KeyboardHarness",
    "_jsGlobal",
    "keymanGlobal",
    "scriptObject",
    "keyboard_default",
    "KeyboardScriptError",
    "_super",
    "msg",
    "cause",
    "_this",
    "KeyboardMissingError",
    "_super",
    "msg",
    "cause",
    "_this",
    "UriBasedErrorBuilder",
    "uri",
    "err",
    "msg",
    "KeyboardMissingError",
    "KeyboardScriptError",
    "StubBasedErrorBuilder",
    "stub",
    "KeyboardLoaderBase",
    "harness",
    "promise",
    "SpacebarText",
    "spacebarText_default",
    "internalizeFont",
    "fontObj",
    "fontPath",
    "KeyboardProperties",
    "arg1",
    "arg2",
    "other",
    "apiStub",
    "source",
    "stubs",
    "_i",
    "_a",
    "langSpec",
    "stub",
    "kbdName",
    "lgName",
    "spacebarText_default",
    "name",
    "Deadkey",
    "pos",
    "id",
    "p",
    "d",
    "result",
    "other",
    "dk",
    "a",
    "b",
    "DeadkeyTracker",
    "Deadkey",
    "dkt",
    "dks",
    "value",
    "caretPos",
    "n",
    "d",
    "sp",
    "i",
    "dk",
    "index",
    "_i",
    "_a",
    "Li",
    "Lstart",
    "Ldelta",
    "SystemStore",
    "id",
    "value",
    "MutableSystemStore",
    "_super",
    "id",
    "defaultValue",
    "_this",
    "value",
    "SystemStore",
    "PlatformSystemStore",
    "_super",
    "keyboardInterface",
    "_this",
    "SystemStoreIDs",
    "value",
    "i",
    "constraint",
    "constraints",
    "device",
    "SystemStore",
    "extendString",
    "isEmptyTransform",
    "transform",
    "_a",
    "TextTransform",
    "insert",
    "deleteLeft",
    "deleteRight",
    "Transcription",
    "keystroke",
    "transform",
    "preInput",
    "alternates",
    "token",
    "alt",
    "OutputTarget",
    "DeadkeyTracker",
    "n",
    "d",
    "dk",
    "Deadkey",
    "delta",
    "dks",
    "original",
    "to",
    "from",
    "fromCaret",
    "toCaret",
    "maxSMPLeftMatch",
    "maxLeftMatch",
    "start",
    "end",
    "mid",
    "fromLeft",
    "toLeft",
    "potentialHigh",
    "potentialFromLow",
    "potentialToLow",
    "flag",
    "newCaret",
    "deletedLeft",
    "insertedLength",
    "undeletedRight",
    "originalRight",
    "deletedRight",
    "TextTransform",
    "keyEvent",
    "readonly",
    "alternates",
    "transform",
    "Transcription",
    "Mock",
    "s",
    "_super",
    "text",
    "selStart",
    "selEnd",
    "_this",
    "defaultLength",
    "outputTarget",
    "clone",
    "priorMock",
    "textLen",
    "selectionStart",
    "selectionEnd",
    "beforeText",
    "afterText",
    "temp",
    "dn",
    "RuleBehavior",
    "processor",
    "outputTarget",
    "readonly",
    "storeID",
    "sysStore",
    "error",
    "keyEvent",
    "other",
    "keystroke",
    "keyFromOther",
    "mergingMock",
    "Mock",
    "KeyInformation",
    "RuleDeadkey",
    "ContextAny",
    "RuleIndex",
    "ContextEx",
    "ContextNul",
    "StoreBeep",
    "CachedContext",
    "n",
    "ln",
    "val",
    "CachedContextEx",
    "r",
    "SystemStoreIDs",
    "KeyboardInterface",
    "_super",
    "_jsGlobal",
    "keymanGlobal",
    "variableStoreSerializer",
    "_this",
    "PlatformSystemStore",
    "MutableSystemStore",
    "codes_default",
    "Pk",
    "keyboard",
    "keyboard_default",
    "outputTarget",
    "v",
    "tempContext",
    "cx",
    "cache",
    "unmatchedDeadkeys",
    "index",
    "sp",
    "deadPos",
    "kc",
    "subCache",
    "i",
    "rule",
    "fullContext",
    "context",
    "deadContext",
    "mismatch",
    "NUL_CONTEXT",
    "assertNever",
    "x",
    "str",
    "lookup",
    "result",
    "ch",
    "keyMapping_default",
    "eventModifiers",
    "targetModifierMask",
    "CHIRAL_ALT",
    "CHIRAL_CTRL",
    "modifiers",
    "altIntersection",
    "ctrlIntersection",
    "Lruleshift",
    "Lrulekey",
    "retVal",
    "keyCode",
    "bitmask",
    "modifierBitmask",
    "stateBitmask",
    "Lstate",
    "ei",
    "KeyInformation",
    "d",
    "store",
    "cachedStores",
    "s",
    "Lix",
    "Ps",
    "Pn",
    "Pdn",
    "indexChar",
    "storeEntry",
    "dn",
    "nulCount",
    "dk",
    "contextLength",
    "contextOffset",
    "vc",
    "Pd",
    "systemId",
    "strValue",
    "kbdName",
    "storeName",
    "dfltValue",
    "cValue",
    "optValue",
    "kbd",
    "valueObj",
    "keystroke",
    "callee",
    "readonly",
    "preInput",
    "Mock",
    "cachedVariableStores",
    "ruleBehavior_default",
    "matched",
    "behavior",
    "stores",
    "prototype",
    "exportKBCallback",
    "miniName",
    "longName",
    "KeyboardHarness",
    "import_eventemitter3",
    "KeyboardProcessor",
    "_super",
    "device",
    "options",
    "_this",
    "kbdInterface_default",
    "getGlobalObject",
    "MinimalKeymanGlobal",
    "keyboard",
    "SystemStoreIDs",
    "value",
    "Lkc",
    "outputTarget",
    "readonly",
    "preInput",
    "Mock",
    "ruleBehavior",
    "ruleBehavior_default",
    "matched",
    "char",
    "special",
    "EmulationKeystrokes",
    "isMnemonic",
    "transcription",
    "keyEvent",
    "matchBehavior",
    "defaultBehavior",
    "keyShiftState",
    "lockNames",
    "lockKeys",
    "codes_default",
    "stateMutation",
    "i",
    "key",
    "flag",
    "onBit",
    "offBit",
    "modifier",
    "Layouts",
    "keyName",
    "nextLayer",
    "isChiral",
    "id",
    "activeLayer",
    "s",
    "deviceSpec_default",
    "idx",
    "replacements",
    "layout",
    "baseModifierState",
    "Levent",
    "isKeyDown",
    "target",
    "defaultRules_default",
    "EventEmitter",
    "addDelimiter",
    "p",
    "PathConfiguration",
    "pathSpec",
    "sourcePath",
    "_rootPath",
    "resources",
    "path",
    "PathOptionDefaults",
    "StyleConstants",
    "device",
    "deviceSpec_default",
    "Device",
    "s",
    "dpi",
    "possMacSpoof",
    "agent",
    "rx",
    "ex",
    "regex",
    "results",
    "versionString",
    "version",
    "version_default",
    "dimMin",
    "dimMax",
    "aspect",
    "possibleChromeEmulation",
    "bMatch",
    "aspectRatio",
    "styleConstants_default",
    "deviceSpec_default",
    "EngineConfiguration",
    "_super",
    "sourcePath",
    "device",
    "_this",
    "deviceDetector",
    "Device",
    "managedPromise_default",
    "options",
    "pathConfiguration_default",
    "keyboardProperties_default",
    "value",
    "physicalKeyDeviceAlias",
    "functor",
    "ruleBehavior",
    "outputTarget",
    "EventEmitter",
    "InitOptionDefaults",
    "spacebarText_default",
    "PathOptionDefaults",
    "import_eventemitter3",
    "ContextManagerBase",
    "_super",
    "engineConfig",
    "_this",
    "config",
    "kbdInterface",
    "Ptext",
    "PdeadKey",
    "outputTarget",
    "target",
    "activationIndex",
    "kbdPromise",
    "metadata",
    "activation",
    "_a",
    "activationAfterAwait",
    "keyboardId",
    "languageCode",
    "saveCookie",
    "activatingKeyboard",
    "originalKeyboardTarget",
    "keyboard",
    "kbdStubPair",
    "requestedStub",
    "keyboard_1",
    "defermentPromise_1",
    "completionPromise",
    "managedPromise_default",
    "keyboardPromise",
    "timeoutPromise",
    "resolve",
    "reject",
    "timeoutMsg",
    "combinedPromise",
    "err",
    "promise",
    "EventEmitter",
    "import_eventemitter3",
    "HardKeyboard",
    "_super",
    "EventEmitter",
    "import_eventemitter3",
    "KEYBOARD_PREFIX",
    "prefixed",
    "text",
    "withoutPrefix",
    "text",
    "KEYBOARD_PREFIX",
    "StubAndKeyboardCache",
    "_super",
    "keyboardLoader",
    "_this",
    "stub",
    "keyboardID",
    "entry",
    "prefixed",
    "getFirstValue",
    "obj",
    "keys",
    "stubTable",
    "keyboard",
    "cachedEntry",
    "keyboard_default",
    "withoutPrefix",
    "promise",
    "kbd",
    "err",
    "_a",
    "arg0",
    "arg1",
    "languageID",
    "purge",
    "id",
    "arr",
    "kbdIds",
    "_i",
    "kbdIds_1",
    "kbdId",
    "row",
    "langIds",
    "langIds_1",
    "langId",
    "EventEmitter",
    "REGIONS",
    "REGION_CODES",
    "REGEX_FOR_PRECONFIGURED_PATH",
    "configureFilePathing",
    "path",
    "configurationBasePath",
    "KeyboardStub",
    "_super",
    "arg0",
    "arg1",
    "arg2",
    "_this",
    "apiSpec",
    "prefixed",
    "rawStub",
    "language",
    "region",
    "rIndex",
    "list",
    "i",
    "arg",
    "keyboardBaseUri",
    "fontBaseUri",
    "errorMsg",
    "languages",
    "stubs",
    "intermediate",
    "stub",
    "keyboardProperties_default",
    "mergeAndResolveStubPromises",
    "keyboardStubs",
    "errorStubs",
    "result",
    "import_eventemitter3",
    "CLOUD_TIMEOUT_ERR",
    "CLOUD_MALFORMED_OBJECT_ERR",
    "CLOUD_STUB_REGISTRATION_ERR",
    "CLOUD_REGISTRATION_ERR",
    "MISSING_KEYBOARD",
    "kbdid",
    "CloudQueryEngine",
    "_super",
    "requestEngine",
    "pathConfig",
    "_this",
    "x",
    "promiseid",
    "result",
    "err",
    "promise",
    "managedPromise_default",
    "error",
    "cmd",
    "byLanguage",
    "URL",
    "queryConfig",
    "version_default",
    "query",
    "_a",
    "queryId",
    "queryResult",
    "options",
    "fontPath",
    "badName",
    "keyboardId",
    "stubs",
    "i",
    "kp",
    "languageList",
    "nArg",
    "kbId",
    "nDflt",
    "id",
    "langArray",
    "j",
    "allStubs",
    "keyboardStub_default",
    "lgCode_1",
    "stub",
    "cloudList",
    "comma",
    "errorStubs",
    "mergeAndResolveStubPromises",
    "err_1",
    "EventEmitter",
    "CloudRequestEntry",
    "id",
    "language",
    "str",
    "convertToErrorStub",
    "stub",
    "err",
    "toQuerySpecs",
    "langId",
    "version",
    "obj",
    "isUniqueRequest",
    "cache",
    "cloudList",
    "tEntry",
    "k",
    "KeyboardRequisitioner",
    "keyboardLoader",
    "keyboardRequester",
    "pathConfig",
    "_this",
    "stubAndKeyboardCache_default",
    "queryEngine_default",
    "registration",
    "entry",
    "x",
    "completeStubs",
    "incompleteStubs",
    "stubs",
    "identifiers",
    "errorStubs",
    "_i",
    "x_1",
    "keyboardStub_default",
    "apiSpecEntry",
    "msg",
    "splitStubs",
    "_a",
    "splitStubs_1",
    "singleLangEntry",
    "_b",
    "stubs_1",
    "_c",
    "incompleteStubs_1",
    "incomplete",
    "querySpec",
    "withoutPrefix",
    "_d",
    "identifiers_1",
    "identifier",
    "pList",
    "lList",
    "j",
    "resultPromise",
    "spec",
    "queryResults",
    "queryResults_1",
    "result",
    "languages",
    "fetchedLanguageList",
    "error_1",
    "languageList",
    "cmd",
    "i",
    "lgName",
    "addAll",
    "languageFound",
    "mergeAndResolveStubPromises",
    "results",
    "results_1",
    "result_1",
    "error_2",
    "languageName",
    "ModelManager",
    "lgCode",
    "model",
    "mm",
    "code",
    "modelId",
    "arrayFromNodeList",
    "nl",
    "res",
    "i",
    "createUnselectableElement",
    "nodeName",
    "e",
    "StylesheetManager",
    "linkNode",
    "doCacheBusting",
    "_ElemHead",
    "sheet",
    "fd",
    "fontPathRoot",
    "os",
    "fontKey",
    "i",
    "ttf",
    "woff",
    "eot",
    "svg",
    "fList",
    "deviceSpec_default",
    "fontStyleMap",
    "sheet_1",
    "s",
    "s0",
    "createStyleSheet",
    "uri",
    "href",
    "e",
    "linkElement",
    "stylesheet",
    "index",
    "_i",
    "_a",
    "createStyleSheet",
    "styleString",
    "_ElemStyle",
    "landscapeView",
    "orientation",
    "no_change",
    "val",
    "CookieSerializer",
    "name",
    "decoder",
    "cookie",
    "encoder",
    "v",
    "c",
    "i",
    "d",
    "cookieName",
    "allCookies",
    "encodedCookie",
    "rawDecode",
    "record",
    "key",
    "value",
    "cookieValueMap",
    "serialization",
    "cookieConfig",
    "getAbsoluteX",
    "Pobj",
    "Lobj",
    "Lcurleft",
    "Ldoc_1",
    "Ldoc",
    "getAbsoluteY",
    "Lcurtop",
    "Ldoc_2",
    "VarStoreSerializer",
    "_super",
    "keyboardID",
    "storeName",
    "storeMap",
    "cookieSerializer_default",
    "VariableStoreCookieSerializer",
    "storeCookieSerializer",
    "KeyboardInterface",
    "_super",
    "_jsGlobal",
    "engine",
    "stubNamespacer",
    "_this",
    "VariableStoreCookieSerializer",
    "Ptext",
    "PdeadKey",
    "Pk",
    "trueID",
    "scripts",
    "currentScript",
    "withoutPrefix",
    "registeredKeyboard",
    "Pstub",
    "pathConfig",
    "stub",
    "keyboardStub_default",
    "_a",
    "kbdInterface_default",
    "DOMKeyboardLoader",
    "_super",
    "harness",
    "cacheBust",
    "_this",
    "KeyboardHarness",
    "MinimalKeymanGlobal",
    "uri",
    "errorBuilder",
    "id",
    "promise",
    "managedPromise_default",
    "document_1",
    "script_1",
    "err",
    "keyboard",
    "keyboardLoaderBase_default",
    "ContextWindow",
    "mock",
    "config",
    "layerId",
    "caretPos",
    "Mock",
    "import_eventemitter3",
    "PromiseStore",
    "token",
    "resolve",
    "reject",
    "value",
    "callbacks",
    "accept",
    "reason",
    "LMLayer",
    "capabilities",
    "worker",
    "testMode",
    "promise_store_default",
    "modelSource",
    "loadType",
    "_this",
    "resolve",
    "_reject",
    "modelSourceSpec",
    "transform",
    "context",
    "token",
    "reject",
    "suggestion",
    "postTransform",
    "reversion",
    "event",
    "payload",
    "unwrap",
    "encodedSrc",
    "LMLayerWorkerCode",
    "LMLayerWorkerSourcemapComment",
    "DefaultWorker",
    "LMLayerWorkerCode",
    "encodedSrc",
    "code",
    "unwrap",
    "LMLayerWorkerSourcemapComment",
    "blob",
    "ReadySuggestions",
    "suggestions",
    "id",
    "LanguageProcessor",
    "_super",
    "predictiveTextWorker",
    "supportsRightDeletions",
    "_this",
    "capabilities",
    "lmlayer_default",
    "model",
    "specType",
    "source",
    "config",
    "error",
    "message",
    "outputTarget",
    "layerId",
    "transcription",
    "target",
    "context",
    "contextWindow_default",
    "Mock",
    "suggestion",
    "getLayerId",
    "original",
    "final",
    "transform",
    "preApply",
    "suggestionContext",
    "reversionPromise",
    "reversion",
    "mappedReversion",
    "promise",
    "suggestions",
    "result",
    "ReadySuggestions",
    "resetContext",
    "alternates",
    "id",
    "match",
    "t",
    "flag",
    "oldVal",
    "state",
    "EventEmitter",
    "InputProcessor",
    "device",
    "predictiveTextWorker",
    "options",
    "keyboardProcessor_default",
    "languageProcessor_default",
    "keyboard",
    "keyEvent",
    "outputTarget",
    "kbdMismatch",
    "trueActiveKeyboard",
    "formFactor",
    "fromOSK",
    "deviceSpec_default",
    "ruleBehavior_default",
    "codes_default",
    "preInputMock",
    "Mock",
    "startingLayerId",
    "ruleBehavior",
    "isOnlyLayerSwitchKey",
    "isEmptyTransform",
    "_a",
    "keepRuleBehavior",
    "alternates",
    "hasLayerChanged",
    "SystemStoreIDs",
    "postRuleBehavior",
    "keyDistribution",
    "contextWindow",
    "contextWindow_default",
    "windowedMock",
    "TIMEOUT_THRESHOLD",
    "_globalThis_1",
    "getGlobalObject",
    "timer",
    "KEYSTROKE_EPSILON",
    "a",
    "b",
    "activeLayout",
    "totalMass_1",
    "_i",
    "keyDistribution_1",
    "pair",
    "mock",
    "altKey",
    "altEvent",
    "alternateBehavior",
    "transform",
    "alt",
    "import_eventemitter3",
    "PredictionContext",
    "_super",
    "langProcessor",
    "kbdProcessor",
    "_this_1",
    "source",
    "prediction",
    "suggestions",
    "_i",
    "suggestions_1",
    "s",
    "state",
    "validSuggestionState",
    "suggestion",
    "reversion",
    "_a",
    "target",
    "originalTarget",
    "_this",
    "EventEmitter",
    "DomEventTracking",
    "Pelem",
    "Peventname",
    "Phandler",
    "PuseCapture",
    "other",
    "DomEventTracker",
    "event",
    "i",
    "_i",
    "_a",
    "event_1",
    "import_eventemitter3",
    "EmitterListenerSpy",
    "_super",
    "emitter",
    "_this",
    "EventEmitter",
    "spyEventName",
    "method",
    "eventName",
    "listener",
    "retVal",
    "LegacyEventEmitter",
    "event",
    "func",
    "i",
    "params",
    "result",
    "strExcept",
    "listeners",
    "DOMCloudRequester",
    "fileLocal",
    "query",
    "promise",
    "managedPromise_default",
    "timeoutID",
    "CLOUD_TIMEOUT_ERR",
    "tFlag",
    "fullRef",
    "Lscript",
    "event",
    "CLOUD_STUB_REGISTRATION_ERR",
    "source",
    "lineno",
    "colno",
    "error",
    "msg",
    "CLOUD_MALFORMED_OBJECT_ERR",
    "ex",
    "determineBaseLayout",
    "KeymanEngine",
    "worker",
    "config",
    "contextManager",
    "processorConfigInitializer",
    "_this",
    "LegacyEventEmitter",
    "event",
    "callback",
    "outputTarget",
    "_b",
    "_a",
    "result",
    "_c",
    "processorConfiguration",
    "inputProcessor_default",
    "state",
    "stateKeys",
    "metadata",
    "kbd",
    "optionSpec",
    "keyboardLoader",
    "DOMKeyboardLoader",
    "keyboardRequisitioner_default",
    "domCloudRequester_default",
    "modelCache_default",
    "kbdCache",
    "target",
    "predictionContext_default",
    "stub",
    "eventRaiser",
    "keyboard",
    "version_inc_default",
    "value",
    "activeKbd",
    "report",
    "withoutPrefix",
    "_d",
    "_e",
    "_g",
    "_f",
    "_j",
    "_h",
    "_m",
    "_l",
    "_k",
    "_p",
    "_o",
    "model",
    "listener",
    "activeStub",
    "modelId",
    "keyboardId",
    "languageCode",
    "fullName",
    "k0",
    "kbdObj",
    "import_eventemitter3",
    "import_eventemitter3",
    "import_eventemitter3",
    "InputEventEngine",
    "config",
    "coord",
    "InputEventCoordinate",
    "x",
    "y",
    "source",
    "e",
    "coordSource",
    "event_1",
    "_a",
    "MouseEventEngine",
    "_super",
    "config",
    "_this",
    "event",
    "inputEventCoordinate_default",
    "coord",
    "inputEventEngine_default",
    "TouchEventEngine",
    "_super",
    "config",
    "_this",
    "event",
    "inputEventCoordinate_default",
    "coord",
    "inputEventEngine_default",
    "ScrollState",
    "coord",
    "x",
    "deltas",
    "UITouchHandlerBase",
    "baseElement",
    "rowClassMatch",
    "selectedTargetMatch",
    "t",
    "forMove",
    "k",
    "bestMatch",
    "dxMax",
    "dxMin",
    "x1",
    "x2",
    "childNode",
    "dxRight",
    "dxLeft",
    "eventTarget",
    "clientX",
    "clientY",
    "target",
    "shouldScroll",
    "beyondEdge",
    "tc",
    "deltaX",
    "y",
    "key0",
    "key1",
    "base",
    "top_1",
    "getAbsoluteY",
    "height",
    "yMin",
    "yMax",
    "Banner",
    "height",
    "d",
    "createUnselectableElement",
    "ds",
    "currentHeightStyle",
    "currentDisplayStyle",
    "keyboard",
    "keyboardProperties",
    "BlankBanner",
    "_super",
    "Banner",
    "ImageBanner",
    "_super",
    "imagePath",
    "height",
    "_this",
    "ds",
    "Banner",
    "BannerSuggestion",
    "index",
    "isRTL",
    "display",
    "createUnselectableElement",
    "div",
    "ds",
    "usableWidth",
    "SuggestionBanner",
    "widthpc",
    "keyboardProperties",
    "font",
    "suggestion",
    "rtl",
    "suggestionText",
    "s",
    "orderCode",
    "SuggestionBanner",
    "_super",
    "hostDevice",
    "height",
    "_this",
    "Banner",
    "suggestions",
    "option",
    "i",
    "SuggestionInputManager",
    "rtl",
    "d",
    "BannerSuggestion",
    "indexToInsert",
    "separatorDiv",
    "createUnselectableElement",
    "ds",
    "inputEngine",
    "suggestion",
    "on",
    "elem",
    "classes",
    "cs",
    "keyboard",
    "keyboardProperties",
    "config",
    "mouseEventEngine_default",
    "touchEventEngine_default",
    "context",
    "SuggestionInputManager",
    "_super",
    "div",
    "_this",
    "Banner",
    "SuggestionBanner",
    "EventEmitter",
    "ex",
    "t",
    "on",
    "suggestion",
    "target",
    "promise",
    "uiTouchHandlerBase_default",
    "ParsedLengthStyle",
    "style",
    "parsed",
    "scalar",
    "val",
    "suffix",
    "spec",
    "BannerView",
    "Banner",
    "EventEmitter",
    "d",
    "createUnselectableElement",
    "banner",
    "prevBanner",
    "BlankBanner",
    "h",
    "ParsedLengthStyle",
    "BannerController",
    "bannerView",
    "hostDevice",
    "predictionContext",
    "retObj",
    "key",
    "optionSpec",
    "type",
    "_this",
    "oldBanner",
    "SuggestionBanner",
    "ImageBanner",
    "suggestBanner",
    "selection",
    "state",
    "EmptyView",
    "Ldiv",
    "ParsedLengthStyle",
    "HelpPageView",
    "keyboard",
    "Ldiv",
    "ParsedLengthStyle",
    "import_eventemitter3",
    "getFontSizeStyle",
    "e",
    "fs",
    "ParsedLengthStyle",
    "defaultFontSize",
    "device",
    "computedHeight",
    "isEmbedded",
    "fontScale",
    "specialCharacters",
    "specialCharacters_default",
    "BUTTON_CLASSES",
    "buttonClassNames_default",
    "OSKKeySpec",
    "id",
    "text",
    "width",
    "sp",
    "nextlayer",
    "pad",
    "OSKKey",
    "spec",
    "layer",
    "key",
    "btn",
    "n",
    "_a",
    "buttonClassNames_default",
    "flag",
    "btnClassId",
    "classIndex",
    "on",
    "classes",
    "text",
    "emScale",
    "style",
    "fontFamily",
    "fontSpec",
    "getFontSizeStyle",
    "fontSize",
    "canvas",
    "context",
    "metrics",
    "vkbd",
    "override",
    "buttonStyle",
    "keyWidth",
    "originalSize",
    "MAX_X_PROPORTION",
    "MAX_Y_PROPORTION",
    "X_PADDING",
    "fontHeight",
    "keyHeight",
    "textHeight",
    "xProportion",
    "yProportion",
    "proportion",
    "oldText",
    "deviceSpec_default",
    "specialCodePUA",
    "specialCharacters_default",
    "DEFAULT_BLANK",
    "keyText",
    "ActiveKey",
    "t",
    "ts",
    "specialText",
    "styleSpec",
    "width",
    "input",
    "x",
    "y",
    "x0",
    "getAbsoluteX",
    "y0",
    "getAbsoluteY",
    "x1",
    "y1",
    "KeyData",
    "keyData",
    "keyId",
    "link",
    "elem",
    "data",
    "id",
    "isKey",
    "oskKey_default",
    "getKeyFrom",
    "OSKBaseKey",
    "_super",
    "spec",
    "layer",
    "row",
    "_this",
    "x",
    "codes_default",
    "q",
    "btn",
    "vkbd",
    "bsn",
    "bsk",
    "oldText",
    "skIcon",
    "kDiv",
    "btnEle",
    "link",
    "KeyData",
    "keyCap",
    "key",
    "device",
    "resizeLabels",
    "deviceSpec_default",
    "landscapeView",
    "flag",
    "oskKey_default",
    "OSKRow",
    "vkbd",
    "layerSpec",
    "rowSpec",
    "rDiv",
    "keys",
    "j",
    "key",
    "keyObj",
    "oskBaseKey_default",
    "element",
    "flag",
    "_i",
    "_a",
    "rs",
    "rowHeight",
    "padRatio",
    "keyHeightBase",
    "ParsedLengthStyle",
    "padTop",
    "keyHeight",
    "keySquare",
    "keyElement",
    "kss",
    "kes",
    "OSKLayer",
    "vkbd",
    "layout",
    "layer",
    "gDiv",
    "gs",
    "nRows",
    "rows",
    "i",
    "rowObj",
    "oskRow_default",
    "keyId",
    "_i",
    "_a",
    "row",
    "_b",
    "_c",
    "key",
    "layerHeight",
    "rowHeight",
    "nRow",
    "oskRow",
    "bottom",
    "OSKLayerGroup",
    "vkbd",
    "keyboard",
    "formFactor",
    "layout",
    "lDiv",
    "ls",
    "layoutFS",
    "n",
    "i",
    "j",
    "layers",
    "tKey",
    "layer",
    "layerObj",
    "oskLayer_default",
    "PendingMultiTapState",
    "PendingMultiTap",
    "vkbd",
    "baseKey",
    "count",
    "multitap",
    "_b",
    "_a",
    "_c",
    "_this",
    "resolve",
    "newKey",
    "e",
    "keyEvent_default",
    "codes_default",
    "OSKSubKey",
    "_super",
    "spec",
    "layer",
    "osk",
    "baseKey",
    "topMargin",
    "kDiv",
    "tKey",
    "ks",
    "tp",
    "btnEle",
    "btn",
    "link",
    "KeyData",
    "bs",
    "oskKey_default",
    "SubkeyPopup",
    "vkbd",
    "_this",
    "resolve",
    "subKeySpec",
    "subKeys",
    "i",
    "ss",
    "computedStyle",
    "nKeys",
    "nRows",
    "nCols",
    "needsTopMargin",
    "nRow",
    "layer",
    "keyGenerator",
    "oskSubKey_default",
    "kDiv",
    "deviceSpec_default",
    "input",
    "keyEvent",
    "e",
    "_Box",
    "rowElement",
    "x",
    "xMax",
    "_BoxRect",
    "rowElementRect",
    "constrainPopup",
    "cs",
    "topY",
    "topOffset",
    "delta",
    "key",
    "calloutHeight",
    "cc",
    "ccs",
    "keyRect",
    "top_1",
    "baseKey",
    "popupBase",
    "bk",
    "subkeys",
    "skSpec",
    "skElement",
    "_a",
    "deltaX",
    "deltaY",
    "dist",
    "sk",
    "onKey",
    "ex",
    "PendingLongpress",
    "vkbd",
    "baseKey",
    "_this",
    "resolve",
    "reject",
    "subkeyPopup_default",
    "KeyTip",
    "constrain",
    "tipElement",
    "key",
    "on",
    "vkbd",
    "rowElement",
    "rkey",
    "rrow",
    "xLeft",
    "xWidth",
    "xHeight",
    "kc",
    "previewFontScale",
    "kts",
    "_Box",
    "_BoxRect",
    "keyRect",
    "y",
    "ySubPixelPadding",
    "canvasWidth",
    "canvasHeight",
    "ckts",
    "px",
    "popupFS",
    "scaleStyle",
    "xOverflow",
    "cs",
    "oskHeight",
    "bottomY",
    "tipHeight",
    "halfHeight",
    "delta",
    "hx",
    "getViewportScale",
    "viewportWidth",
    "screenWidth",
    "landscapeView",
    "ex",
    "VisualKeyboard",
    "_super",
    "config",
    "_this_1",
    "Lkbd",
    "StylesheetManager",
    "layout",
    "rawLayout",
    "Layouts",
    "ActiveLayout",
    "formFactor",
    "keyboard_default",
    "oskLayerGroup_default",
    "kbdID",
    "_b",
    "_a",
    "separatorIndex",
    "kbdClassSuffix",
    "value",
    "changedLayer",
    "mouseEventEngine_default",
    "touchEventEngine_default",
    "baseWidth",
    "cs",
    "borderWidth",
    "ParsedLengthStyle",
    "baseHeight",
    "borderHeight",
    "val",
    "node",
    "width",
    "height",
    "pending",
    "OSKKeySpec",
    "ActiveKey",
    "input",
    "kbdCoords",
    "getAbsoluteX",
    "getAbsoluteY",
    "offsetCoords",
    "keySpec",
    "touchKbdPos",
    "layerGroup",
    "kbdAspectRatio",
    "baseKeyProbabilities",
    "baseMass",
    "baseKeyMass",
    "baseKeyID",
    "popupKeyMass",
    "popupKeyID",
    "totalMass",
    "scalar",
    "i",
    "entry",
    "finalArray",
    "oskX",
    "oskY",
    "rowCount",
    "buffer",
    "boundingRect",
    "baseBounds",
    "startCoord",
    "xDelta",
    "yDelta",
    "adjustedBounds",
    "initScreenCoord",
    "inputEventCoordinate_default",
    "coord",
    "baseBoundingRect",
    "adjustedBoundingRect",
    "t",
    "key",
    "keyName",
    "subkeyPopup_default",
    "subkeyPopup",
    "tc",
    "tt",
    "t1",
    "x",
    "y",
    "key0",
    "key1",
    "oskKey_default",
    "target",
    "getKeyFrom",
    "ex",
    "k",
    "k0",
    "dx",
    "dxMax",
    "dxMin",
    "x1",
    "x2",
    "keySquare",
    "childNode",
    "keyEvent",
    "Lkc",
    "layerId",
    "layer",
    "states",
    "keys",
    "stateKeys",
    "activeStub",
    "displayName",
    "tParent",
    "on",
    "usePreview",
    "keySquareScale",
    "emSizeStr",
    "emSize",
    "getFontSizeStyle",
    "emScale",
    "n",
    "b",
    "layerElement",
    "device",
    "fs",
    "deviceSpec_default",
    "getViewportScale",
    "paddedHeight",
    "gs",
    "bs",
    "fixedSize",
    "computedStyle",
    "isInDOM",
    "groupStyle",
    "computedGroupStyle",
    "pt",
    "pb",
    "allottedHeight",
    "layers",
    "oskHeight",
    "layerID",
    "nRows",
    "rowHeight",
    "layerHeight",
    "oskPad",
    "oskPaddedHeight",
    "activeKeyboard",
    "kfd",
    "ofd",
    "customStyle",
    "createStyleSheet",
    "s",
    "family",
    "fd",
    "PKbd",
    "kbdProperties",
    "fontRootPath",
    "argFormFactor",
    "argLayerId",
    "deviceSpec",
    "kbdObj",
    "kbd",
    "classWrapper",
    "defaultFontSize",
    "detectAndHandleInsertion",
    "stylesheet",
    "stylesheetParentElement",
    "insertionObserver",
    "pendingLongpress",
    "pendingLongpress_default",
    "PendingMultiTapState",
    "pendingMultiTap_default",
    "_this_2",
    "pendingLongpress_1",
    "currentKey",
    "previousKey",
    "proportionalThreshold",
    "keyDown",
    "tip",
    "sk",
    "popup",
    "constrainPopup",
    "keytip_default",
    "_c",
    "_d",
    "e",
    "EventEmitter",
    "import_eventemitter3",
    "Activator",
    "_super",
    "EventEmitter",
    "StaticActivator",
    "TouchEventPromiseMap",
    "id",
    "managedPromise_default",
    "list",
    "keys",
    "i",
    "pos",
    "_i",
    "keys_1",
    "endedKey",
    "OSKView",
    "_super",
    "configuration",
    "_this_1",
    "LegacyEventEmitter",
    "touchEventPromiseMap_default",
    "flag",
    "source",
    "newValue",
    "_a",
    "createUnselectableElement",
    "StylesheetManager",
    "bannerView_default",
    "BannerController",
    "codes_default",
    "e",
    "managedPromise_default",
    "commonPrevention",
    "i",
    "promise",
    "spec",
    "newSpec",
    "model",
    "visualKeyboard_default",
    "device",
    "computedHeight",
    "isEmbedded",
    "fontScale",
    "ParsedLengthStyle",
    "keyboardData",
    "_b",
    "width",
    "height",
    "pending",
    "mutatedFlag",
    "parsedWidth",
    "parsedHeight",
    "hasDimensions",
    "fixedSize",
    "computedStyle",
    "isInDOM",
    "parent_1",
    "availableHeight",
    "bs",
    "subpath",
    "_i",
    "_e",
    "sheetFile",
    "sheetHref",
    "kbdView",
    "_c",
    "_d",
    "globeHint",
    "keyboard",
    "keyboardMetadata",
    "emptyView_default",
    "helpPageView_default",
    "vkbd",
    "keyEvent",
    "keyElement",
    "on",
    "_this_2",
    "hiddenByUser",
    "_this",
    "shouldHide",
    "StaticActivator",
    "os",
    "resolve",
    "cleanup",
    "startup",
    "_box",
    "p",
    "getAbsoluteX",
    "getAbsoluteY",
    "bShow",
    "event",
    "fn",
    "EventEmitter",
    "import_eventemitter3",
    "TitleBar",
    "_super",
    "dragHandler",
    "_this",
    "ev",
    "val",
    "visible",
    "str",
    "keyboard",
    "title",
    "bar",
    "createUnselectableElement",
    "Ltitle",
    "Limg",
    "ParsedLengthStyle",
    "EventEmitter",
    "import_eventemitter3",
    "ResizeBar",
    "_super",
    "dragHandler",
    "_this",
    "ev",
    "flag",
    "bar",
    "createUnselectableElement",
    "Ltitle",
    "e",
    "Limg",
    "ParsedLengthStyle",
    "EventEmitter",
    "MouseStartSnapshot",
    "e",
    "MouseDragOperation",
    "cursorType",
    "flag",
    "inputEventCoordinate_default",
    "coord",
    "deltaX",
    "deltaY",
    "TwoStateActivator",
    "_super",
    "_this",
    "oldValue",
    "flag",
    "oldState",
    "value",
    "activator_default",
    "FloatingOSKCookieSerializer",
    "_super",
    "defaults",
    "cookie",
    "value",
    "key",
    "cookieSerializer_default",
    "FloatingOSKView",
    "_super",
    "config",
    "_this_1",
    "twoStateActivator_default",
    "FloatingOSKCookieSerializer",
    "keepDefaultPosition",
    "isVisible",
    "dragPromise",
    "managedPromise_default",
    "titleBar_default",
    "resizeBar_default",
    "onListenedEvent",
    "eventName",
    "titleBar",
    "listenerSpyNew",
    "EmitterListenerSpy",
    "listenerSpyOld",
    "_i",
    "_a",
    "listenerSpy",
    "s",
    "p",
    "c",
    "version_default",
    "cookieVersionString",
    "isNewCookie",
    "newWidth",
    "newHeight",
    "oskHeightLandscapeView",
    "height",
    "sx",
    "sy",
    "landscapeView",
    "deviceSpec_default",
    "getViewportScale",
    "width",
    "ex",
    "b",
    "bs",
    "getAbsoluteX",
    "getAbsoluteY",
    "d",
    "ds",
    "w",
    "h",
    "Lkbd",
    "Px",
    "Py",
    "Ls",
    "el",
    "Lpos",
    "hiddenByUser",
    "bShow",
    "flag",
    "_this",
    "class_1",
    "cumulativeX",
    "cumulativeY",
    "r",
    "mouseDragOperation_default",
    "class_2",
    "oskView_default",
    "AnchoredOSKView",
    "_super",
    "config",
    "_this",
    "StaticActivator",
    "twoStateActivator_default",
    "keepDefaultPosition",
    "s",
    "pending",
    "targetOSKHeight",
    "device",
    "baseWidth",
    "_a",
    "baseHeight",
    "_b",
    "landscapeView",
    "temp",
    "oskHeightLandscapeView",
    "height",
    "deviceSpec_default",
    "getViewportScale",
    "width",
    "p",
    "Lkbd",
    "Ls",
    "oskView_default",
    "SimpleActivator",
    "_super",
    "_this",
    "value",
    "activator_default",
    "InlinedOSKView",
    "_super",
    "config",
    "_this",
    "simpleActivator_default",
    "keepDefaultPosition",
    "s",
    "visualKeyboard_default",
    "p",
    "Lkbd",
    "newSpec",
    "oskView_default",
    "buildBaseOskConfiguration",
    "engine",
    "PublishedAnchoredOSKView",
    "_super",
    "config",
    "finalConfig",
    "anchoredOskView_default",
    "PublishedFloatingOSKView",
    "floatingOskView_default",
    "PublishedInlineOSKView",
    "inlinedOskView_default",
    "import_eventemitter3",
    "OutputTarget",
    "_super",
    "_this",
    "EventEmitter",
    "ele",
    "elem",
    "event",
    "outputTarget_default",
    "Input",
    "_super",
    "ele",
    "_this",
    "caret",
    "start",
    "end",
    "direction",
    "domStart",
    "domEnd",
    "element",
    "selectionStart",
    "selectionEnd",
    "text",
    "selectionLength",
    "newCaret",
    "s",
    "c",
    "dn",
    "curText",
    "front",
    "back",
    "inputEle",
    "outputTarget_default",
    "TextArea",
    "_super",
    "ele",
    "_this",
    "caret",
    "start",
    "end",
    "direction",
    "domStart",
    "domEnd",
    "element",
    "selectionStart",
    "selectionEnd",
    "text",
    "selectionLength",
    "newCaret",
    "s",
    "c",
    "dn",
    "curText",
    "front",
    "back",
    "outputTarget_default",
    "SelectionCaret",
    "node",
    "offset",
    "SelectionRange",
    "start",
    "end",
    "StyleCommand",
    "c",
    "s",
    "DesignIFrame",
    "_super",
    "ele",
    "_this",
    "Lsel",
    "outerSel",
    "code",
    "caret",
    "anchor",
    "focus_1",
    "dn",
    "range",
    "dnOffset",
    "delta",
    "finalCaret",
    "textStart",
    "n",
    "e",
    "_CacheableCommands",
    "cmd",
    "_func",
    "outputTarget_default",
    "SelectionCaret",
    "node",
    "offset",
    "SelectionRange",
    "start",
    "end",
    "ContentEditable",
    "_super",
    "ele",
    "_this",
    "Lsel",
    "code",
    "caret",
    "anchor",
    "focus_1",
    "dn",
    "range",
    "dnOffset",
    "s",
    "delta",
    "finalCaret",
    "textStart",
    "n",
    "e",
    "outputTarget_default",
    "nestedInstanceOf",
    "Pelem",
    "className",
    "scopedClass",
    "event",
    "wrapElement",
    "e",
    "nestedInstanceOf",
    "input_default",
    "textarea_default",
    "iframe",
    "designIFrame_default",
    "contentEditable_default",
    "AlertHost",
    "_this",
    "bg",
    "lb",
    "lt",
    "gr",
    "bx",
    "e",
    "s",
    "fn",
    "whenDocumentReady",
    "resolve",
    "reject",
    "loadHandler",
    "BrowserConfiguration",
    "_super",
    "options",
    "_this",
    "whenDocumentReady",
    "AlertHost",
    "_a",
    "host",
    "baseReport",
    "ruleBehavior",
    "outputTarget",
    "ruleTransform",
    "isEmptyTransform",
    "outputTarget_default",
    "EngineConfiguration",
    "BrowserInitOptionDefaults",
    "InitOptionDefaults",
    "AttachmentInfo",
    "eleInterface",
    "kbd",
    "touch",
    "eventOutputTarget",
    "e",
    "Ltarg",
    "outputTargetForElement",
    "nestedInstanceOf",
    "et",
    "import_eventemitter3",
    "PageContextAttachment",
    "_super",
    "document",
    "options",
    "_this",
    "mutations",
    "_i",
    "mutations_1",
    "mutation",
    "target",
    "i",
    "disabledBefore",
    "disabledAfter",
    "readonlyBefore",
    "elem",
    "readonlyAfter",
    "inputElementAdditions",
    "inputElementRemovals",
    "j",
    "k",
    "matched",
    "i_1",
    "i_2",
    "Pelem",
    "attachFunctor",
    "StylesheetManager",
    "embeddedInputs",
    "embeddedPage",
    "flattenedInputList",
    "pageInputList",
    "manualAttach",
    "x",
    "eleInterface",
    "wrapElement",
    "nestedInstanceOf",
    "AttachmentInfo",
    "iframeDoc",
    "err",
    "iframe",
    "_a",
    "child",
    "c",
    "intendedInputMode",
    "cnIndex",
    "index",
    "Lelem_1",
    "context",
    "embeddedPageAttachment",
    "detachFromDesignIframe",
    "Lelem",
    "touchable",
    "cn",
    "tagIndex",
    "eList",
    "t1",
    "t2",
    "getAbsoluteX",
    "getAbsoluteY",
    "e1",
    "e2",
    "tList",
    "activeBase",
    "bBack",
    "t",
    "possibleInputs",
    "dv",
    "LiTmp",
    "_colon",
    "arrayFromNodeList",
    "Li",
    "observationTarget",
    "observationConfig",
    "ipInput",
    "ipTextArea",
    "n",
    "fs",
    "fsDefault",
    "firstInput",
    "firstTextArea",
    "keyboardFontDescriptor",
    "kfd",
    "fontName",
    "rx",
    "fontFamily",
    "fontRoot",
    "os",
    "createStyleSheet",
    "_b",
    "_c",
    "_d",
    "e",
    "_e",
    "input",
    "EventEmitter",
    "import_eventemitter3",
    "FocusStateAPIObject",
    "pending",
    "activated",
    "FocusAssistant",
    "_super",
    "isTargetForcingScroll",
    "_this",
    "value",
    "priorValue",
    "FocusStateAPIObject",
    "state",
    "EventEmitter",
    "_SetTargDir",
    "Ptarg",
    "activeKeyboard",
    "elDir",
    "ContextManager",
    "_super",
    "engineConfig",
    "eventsClosure",
    "_this",
    "cookieSerializer_default",
    "FocusAssistant",
    "_a",
    "DomEventTracker",
    "e",
    "target",
    "eventOutputTarget",
    "previousTarget",
    "maintainingFocus",
    "x",
    "PageContextAttachment",
    "stub",
    "completion",
    "device",
    "noPropagation",
    "event",
    "elem",
    "designIFrame_default",
    "Lelem",
    "nestedInstanceOf",
    "lastElem",
    "priorTarget",
    "sendEvents",
    "originalTarget",
    "hadRecentElement",
    "Ltarg",
    "kbdInterface",
    "Ptext",
    "PdeadKey",
    "outputTarget",
    "attachmentInfo",
    "kbd",
    "attachment",
    "_b",
    "activeStub",
    "kbdId",
    "langId",
    "wasPriorTarget",
    "globalKbd",
    "emptyCodes",
    "keyboardId",
    "languageCode",
    "saveCookie",
    "originalKeyboardTarget",
    "result",
    "_g",
    "_d",
    "_c",
    "fallback",
    "fallbackCodes",
    "_e",
    "message",
    "err_1",
    "KeyboardScriptError",
    "_f",
    "PInternalName",
    "PLgCode",
    "keyboardID",
    "langCode",
    "blockGlobalChange",
    "global",
    "focusAssistant",
    "event_1",
    "cookie",
    "v",
    "cookieValue",
    "stubs",
    "kd",
    "n",
    "d",
    "t",
    "ContextManagerBase",
    "DefaultBrowserRules",
    "_super",
    "contextManager",
    "_this",
    "Lkc",
    "code",
    "codes_default",
    "outputTarget",
    "moveToNext",
    "back",
    "activeElement",
    "_a",
    "nextElement",
    "defaultRules_default",
    "_GetEventKeyCode",
    "e",
    "preprocessKeyboardEvent",
    "keyboardState",
    "device",
    "Lcode",
    "prevModState",
    "curModState",
    "ctrlEvent",
    "altEvent",
    "keyCodes",
    "codes_default",
    "modifierCodes",
    "Lstates",
    "LmodifierChange",
    "altGrMask",
    "modifierBitmasks",
    "activeKeyboard",
    "Lmodifiers",
    "deviceSpec_default",
    "keyMapping_default",
    "s",
    "keyEvent_default",
    "LisVirtualKeyCode",
    "Lbase",
    "processedEvent",
    "HardwareEventKeyboard",
    "_super",
    "hardDevice",
    "processor",
    "contextManager",
    "_this",
    "DomEventTracker",
    "target",
    "eventOutputTarget",
    "el",
    "_a",
    "Levent",
    "inputEle",
    "ignore",
    "nestedInstanceOf",
    "nextElement",
    "page",
    "eventTracker",
    "Pelem",
    "outputTargetForElement",
    "designIFrame_default",
    "Lelem",
    "resultCapture",
    "ruleBehavior",
    "error",
    "outputTarget",
    "result",
    "hardKeyboard_default",
    "RotationState",
    "other",
    "RotationProcessor",
    "keyman",
    "osk",
    "_a",
    "_this",
    "os",
    "util",
    "newState",
    "PageIntegrationHandlers",
    "window",
    "engine",
    "_this",
    "DomEventTracker",
    "e",
    "_a",
    "osk",
    "device",
    "p",
    "y",
    "y0",
    "RotationProcessor",
    "dTrailer",
    "ds",
    "eventTracker",
    "docBody",
    "_CreateElement",
    "nodeName",
    "e",
    "getStyleValue",
    "e",
    "s",
    "ex",
    "getViewportScale",
    "viewportWidth",
    "screenWidth",
    "ex",
    "LanguageMenu",
    "keyman",
    "_this",
    "languageMenu",
    "shim",
    "_CreateElement",
    "osk",
    "e",
    "sX",
    "sY",
    "spaceBar",
    "device",
    "kbdList",
    "nKbds",
    "menu",
    "m2",
    "s2",
    "m3",
    "s3",
    "i",
    "x",
    "mx",
    "nLgs",
    "w",
    "getStyleValue",
    "ms",
    "dy",
    "lineHeight",
    "scale",
    "factor",
    "qs",
    "menuWidth",
    "barWidth",
    "s",
    "maxHeight",
    "nItems",
    "itemHeight",
    "menuHeight",
    "landscapeView",
    "getViewportScale",
    "getAbsoluteX",
    "target",
    "t",
    "initial",
    "nn",
    "ex",
    "index",
    "top",
    "SCROLL_ITEM_BUFFER",
    "nStubs",
    "k",
    "n",
    "lg",
    "langs",
    "dx",
    "lgBar",
    "kb",
    "activeLanguageIndex",
    "_a",
    "this_1",
    "padLast",
    "cancelTouch",
    "kbd",
    "unique",
    "lockBodyScroll",
    "obs",
    "dbs",
    "unlockBodyScroll",
    "touchStart",
    "touchMove",
    "scroller",
    "yMax",
    "y",
    "touchEnd",
    "touchCancel",
    "setupOskListeners",
    "engine",
    "osk",
    "contextManager",
    "_this",
    "focusAssistant",
    "key",
    "on",
    "LanguageMenu",
    "params",
    "_a",
    "KEYMAN_VERSION",
    "promise",
    "createUnselectableElement",
    "nodeName",
    "e",
    "UtilApiEndpoint",
    "config",
    "getAbsoluteX",
    "getAbsoluteY",
    "getStyleValue",
    "StylesheetManager",
    "DomEventTracker",
    "elem",
    "optionName",
    "dflt",
    "value",
    "AlertHost",
    "cn",
    "cookie",
    "cookieSerializer_default",
    "cv",
    "s",
    "styleSheet",
    "createStyleSheet",
    "lgCode",
    "Pelem",
    "Peventname",
    "Phandler",
    "PuseCapture",
    "fn",
    "item",
    "dfltValue",
    "x",
    "r",
    "g",
    "b",
    "a",
    "bgColor",
    "ex",
    "_a",
    "_b",
    "_c",
    "Hotkey",
    "code",
    "shift",
    "handler",
    "keyCode",
    "shiftState",
    "HotkeyManager",
    "_this",
    "_Lcode",
    "_GetEventKeyCode",
    "_Lmodifiers",
    "i",
    "BeepData",
    "e",
    "BeepHandler",
    "keyboardInterface",
    "_this",
    "Lbo",
    "outputTarget",
    "outputTarget_default",
    "Pelem",
    "designIFrame_default",
    "KeyboardInterface",
    "_super",
    "_jsGlobal",
    "engine",
    "_this",
    "osk",
    "Px",
    "Py",
    "floatingOskView_default",
    "keyboardInterface_default",
    "KeymanEngine",
    "_super",
    "worker",
    "sourceUri",
    "_this",
    "config",
    "BrowserConfiguration",
    "contextManager_default",
    "engine",
    "keyboardInterface_default",
    "defaultBrowserRules_default",
    "HotkeyManager",
    "Lstub",
    "Lkbd",
    "Lr",
    "UtilApiEndpoint",
    "BeepHandler",
    "hardwareEventKeyboard_default",
    "target",
    "e",
    "y",
    "getAbsoluteY",
    "t",
    "dy",
    "viewsAnchorpoint_exports",
    "module",
    "options",
    "deviceDetector",
    "Device",
    "device",
    "totalOptions",
    "BrowserInitOptionDefaults",
    "whenDocumentReady",
    "_a",
    "savedKeyboardStr",
    "PublishedAnchoredOSKView",
    "PublishedFloatingOSKView",
    "setupOskListeners",
    "PageIntegrationHandlers",
    "state",
    "Pelem",
    "Pkbd",
    "Plc",
    "stub",
    "outputTargetForElement",
    "x",
    "args",
    "_i",
    "errVal",
    "arg",
    "item",
    "k0",
    "kbd",
    "kbdDetail",
    "keyboard_default",
    "PInternalName",
    "PlgCode",
    "keyboard",
    "cache",
    "keyboardStubs",
    "Ln",
    "Lrn",
    "i",
    "prefixed",
    "setFocus",
    "id",
    "keyCode",
    "shiftState",
    "handler",
    "Pstatic",
    "argFormFactor",
    "argLayerId",
    "PKbd",
    "Pstub",
    "getOskHeight",
    "targetHeight",
    "visualKeyboard_default",
    "_b",
    "keymanEngine_default",
    "scripts",
    "ss",
    "sPath",
    "keymanEngine_default",
    "worker_default"
  ]
}